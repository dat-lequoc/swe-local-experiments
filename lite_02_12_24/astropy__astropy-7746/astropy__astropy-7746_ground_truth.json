{
  "patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,6 +1212,9 @@ def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            if any([x.size == 0 for x in axes]):\n+                return axes\n+\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1235,6 +1238,8 @@ def _return_single_array(xy, origin):\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            if 0 in xy.shape:\n+                return xy\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\n",
  "test_patch": "diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\n--- a/astropy/wcs/tests/test_wcs.py\n+++ b/astropy/wcs/tests/test_wcs.py\n@@ -1093,3 +1093,21 @@ def test_keyedsip():\n     assert isinstance( w.sip, wcs.Sip )\n     assert w.sip.crpix[0] == 2048\n     assert w.sip.crpix[1] == 1026\n+\n+\n+def test_zero_size_input():\n+    with fits.open(get_pkg_data_filename('data/sip.fits')) as f:\n+        w = wcs.WCS(f[0].header)\n+\n+    inp = np.zeros((0, 2))\n+    assert_array_equal(inp, w.all_pix2world(inp, 0))\n+    assert_array_equal(inp, w.all_world2pix(inp, 0))\n+\n+    inp = [], [1]\n+    result = w.all_pix2world([], [1], 0)\n+    assert_array_equal(inp[0], result[0])\n+    assert_array_equal(inp[1], result[1])\n+\n+    result = w.all_world2pix([], [1], 0)\n+    assert_array_equal(inp[0], result[0])\n+    assert_array_equal(inp[1], result[1])\n"
}