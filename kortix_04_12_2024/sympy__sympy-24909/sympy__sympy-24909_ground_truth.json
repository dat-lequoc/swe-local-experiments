{
  "patch": "diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py\n--- a/sympy/physics/units/prefixes.py\n+++ b/sympy/physics/units/prefixes.py\n@@ -6,7 +6,7 @@\n \"\"\"\n from sympy.core.expr import Expr\n from sympy.core.sympify import sympify\n-\n+from sympy.core.singleton import S\n \n class Prefix(Expr):\n     \"\"\"\n@@ -85,9 +85,9 @@ def __mul__(self, other):\n \n         fact = self.scale_factor * other.scale_factor\n \n-        if fact == 1:\n-            return 1\n-        elif isinstance(other, Prefix):\n+        if isinstance(other, Prefix):\n+            if fact == 1:\n+                return S.One\n             # simplify prefix\n             for p in PREFIXES:\n                 if PREFIXES[p].scale_factor == fact:\n@@ -103,7 +103,7 @@ def __truediv__(self, other):\n         fact = self.scale_factor / other.scale_factor\n \n         if fact == 1:\n-            return 1\n+            return S.One\n         elif isinstance(other, Prefix):\n             for p in PREFIXES:\n                 if PREFIXES[p].scale_factor == fact:\n",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -2,7 +2,7 @@\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -17,7 +17,8 @@ def test_prefix_operations():\n \n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n-    assert m * k == 1\n+    assert m * k is S.One\n+    assert m * W == W / 1000\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n@@ -25,7 +26,7 @@ def test_prefix_operations():\n     assert dodeca * dodeca == 144\n     assert 1 / dodeca == S.One / 12\n     assert k / dodeca == S(1000) / 12\n-    assert dodeca / dodeca == 1\n+    assert dodeca / dodeca is S.One\n \n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n"
}