{
  "instance_id": "sympy__sympy-14308",
  "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 09e2b00735..5fcc002fce 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -886,9 +886,89 @@ def _print_FunctionMatrix(self, X):\n         D = prettyForm(*D.parens('[', ']'))\n         return D\n \n+    def _print_VectorMul(self, expr):\n+        measure = expr.measure_number\n+        base = expr.base_vector\n+        \n+        # Print measure number with proper precedence\n+        pform = self._print(measure)\n+        if pform.binding > prettyForm.MUL:\n+            pform = prettyForm(*pform.parens())\n+            \n+        # Print base vector\n+        vform = self._print(base)\n+        \n+        # Combine with proper spacing and baseline\n+        pform = prettyForm(*pform.right(' ', vform))\n+        # Center the baseline between measure and vector\n+        pform.baseline = (pform.baseline + vform.baseline) // 2\n+        \n+        return pform\n+\n+    def _print_VectorMul(self, expr):\n+        measure = expr.measure_number\n+        base = expr.base_vector\n+        \n+        # Print measure number with proper precedence\n+        pform = self._print(measure)\n+        if pform.binding > prettyForm.MUL:\n+            pform = prettyForm(*pform.parens())\n+            \n+        # Print base vector\n+        vform = self._print(base)\n+        \n+        # Combine with proper spacing and baseline\n+        pform = prettyForm(*pform.right(' ', vform))\n+        # Center the baseline between measure and vector\n+        pform.baseline = (pform.baseline + vform.baseline) // 2\n+        \n+        return pform\n+\n+    def _print_VectorMul(self, expr):\n+        measure = expr.measure_number\n+        base = expr.base_vector\n+        \n+        # Print measure number with proper precedence\n+        pform = self._print(measure)\n+        if pform.binding > prettyForm.MUL:\n+            pform = prettyForm(*pform.parens())\n+            \n+        # Print base vector\n+        vform = self._print(base)\n+        \n+        # Combine with proper spacing and baseline\n+        pform = prettyForm(*pform.right(' ', vform))\n+        # Center the baseline between measure and vector\n+        pform.baseline = (pform.baseline + vform.baseline) // 2\n+        \n+        return pform\n+\n+    def _print_VectorMul(self, expr):\n+        measure = expr.measure_number\n+        base = expr.base_vector\n+\n+        # Print measure number with proper precedence\n+        pform = self._print(measure)\n+        if pform.binding > prettyForm.MUL:\n+            pform = prettyForm(*pform.parens())\n+\n+        # Print base vector\n+        vform = self._print(base)\n+\n+        # Combine with proper spacing and baseline\n+        pform = prettyForm(*pform.right(' ', vform))\n+        pform.baseline = (pform.baseline + vform.baseline) // 2\n+\n+        return pform\n+\n     def _print_BasisDependent(self, expr):\n         from sympy.vector import Vector\n-\n+        \n+        if isinstance(expr, Vector):\n+            if expr == Vector.zero:\n+                return prettyForm('0')\n+            return self._print_Add(expr)\n+            \n         if not self._use_unicode:\n             raise NotImplementedError(\"ASCII pretty printing of BasisDependent is not implemented\")\n \n@@ -2362,4 +2442,4 @@ def pager_print(expr, **settings):\n     from locale import getpreferredencoding\n     if 'num_columns' not in settings:\n         settings['num_columns'] = 500000  # disable line wrap\n-    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n+    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n\\ No newline at end of file\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\nindex 84f1c086d6..5f8ee70b91 100644\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -128,6 +128,13 @@ def test_pretty_printing_ascii():\n \n def test_pretty_print_unicode():\n     assert upretty(v[0]) == u'0'\n+    \n+    # Test power expression with vector\n+    from sympy.abc import x, y, t\n+    expr = (x/y)**t * N.j\n+    result = upretty(expr)\n+    assert 'N.j' in result  # Vector component appears once\n+    assert '(' in result and ')' in result  # Proper parentheses\n     assert upretty(v[1]) == u'N_i'\n     assert upretty(v[5]) == u'(a) N_i + (-b) N_j'\n     # Make sure the printing works in other objects\n@@ -174,4 +181,4 @@ def test_custom_names():\n     assert A.i._pretty_form == 'A_i'\n     assert A.x._pretty_form == 'A_x'\n     assert A.i._latex_form == r'\\mathbf{{i}_{A}}'\n-    assert A.x._latex_form == r\"\\mathbf{\\hat{x}_{A}}\"\n+    assert A.x._latex_form == r\"\\mathbf{\\hat{x}_{A}}\"\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}