{
  "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):\n         #Fixing the newlines\n         lengths = []\n         strs = ['']\n+        flag = []\n         for i, partstr in enumerate(o1):\n+            flag.append(0)\n             # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n+                if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n+                    for paren in range(len(tempstr)):\n+                        flag[i] = 1\n+                        if tempstr[paren] == u'\\N{right parenthesis extension}':\n+                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\\\n+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n+                            break\n+                elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n+                    flag[i] = 1\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS LOWER HOOK}'\n+                                        + ' ' + vectstrs[i])\n+                else:\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                        + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n+\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form\n+\n+        if 1 in flag:                           # If there was a fractional scalar\n+            for i, parts in enumerate(o1):\n+                if len(parts) == 1:             # If part has no newline\n+                    parts.insert(0, ' ' * (len(parts[0])))\n+                    flag[i] = 1\n+\n+        for i, parts in enumerate(o1):\n+            lengths.append(len(parts[flag[i]]))\n             for j in range(n_newlines):\n                 if j+1 <= len(parts):\n                     if j >= len(strs):\n                         strs.append(' ' * (sum(lengths[:-1]) +\n                                            3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                    if j == flag[i]:\n+                        strs[flag[i]] += parts[flag[i]] + ' + '\n                     else:\n                         strs[j] += parts[j] + ' '*(lengths[-1] -\n                                                    len(parts[j])+\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6089,6 +6089,28 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_issue_12675():\n+    from sympy.vector import CoordSys3D\n+    x, y, t, j = symbols('x y t j')\n+    e = CoordSys3D('e')\n+\n+    ucode_str = \\\n+u(\"\"\"\\\n+\u239b   t\u239e    \\n\\\n+\u239c\u239bx\u239e \u239f e_j\\n\\\n+\u239c\u239c\u2500\u239f \u239f    \\n\\\n+\u239d\u239dy\u23a0 \u23a0    \\\n+\"\"\")\n+    assert upretty((x/y)**t*e.j) == ucode_str\n+    ucode_str = \\\n+u(\"\"\"\\\n+\u239b1\u239e    \\n\\\n+\u239c\u2500\u239f e_j\\n\\\n+\u239dy\u23a0    \\\n+\"\"\")\n+    assert upretty((1/y)*e.j) == ucode_str\n+\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -37,8 +37,8 @@ def upretty(expr):\n v.append(N.j - (Integral(f(b)) - C.x**2)*N.k)\n upretty_v_8 = u(\n \"\"\"\\\n-N_j + \u239b   2   \u2320        \u239e N_k\\n\\\n-      \u239cC_x  - \u23ae f(b) db\u239f    \\n\\\n+      \u239b   2   \u2320        \u239e    \\n\\\n+N_j + \u239cC_x  - \u23ae f(b) db\u239f N_k\\n\\\n       \u239d       \u2321        \u23a0    \\\n \"\"\")\n pretty_v_8 = u(\n@@ -55,9 +55,9 @@ def upretty(expr):\n v.append((a**2 + b)*N.i + (Integral(f(b)))*N.k)\n upretty_v_11 = u(\n \"\"\"\\\n-\u239b 2    \u239e N_i + \u239b\u2320        \u239e N_k\\n\\\n-\u239da  + b\u23a0       \u239c\u23ae f(b) db\u239f    \\n\\\n-               \u239d\u2321        \u23a0    \\\n+\u239b 2    \u239e        \u239b\u2320        \u239e    \\n\\\n+\u239da  + b\u23a0 N_i  + \u239c\u23ae f(b) db\u239f N_k\\n\\\n+                \u239d\u2321        \u23a0    \\\n \"\"\")\n pretty_v_11 = u(\n \"\"\"\\\n@@ -85,8 +85,8 @@ def upretty(expr):\n # This is the pretty form for ((a**2 + b)*N.i + 3*(C.y - c)*N.k) | N.k\n upretty_d_7 = u(\n \"\"\"\\\n-\u239b 2    \u239e (N_i|N_k) + (3\u22c5C_y - 3\u22c5c) (N_k|N_k)\\n\\\n-\u239da  + b\u23a0                                    \\\n+\u239b 2    \u239e                                     \\n\\\n+\u239da  + b\u23a0 (N_i|N_k)  + (3\u22c5C_y - 3\u22c5c) (N_k|N_k)\\\n \"\"\")\n pretty_d_7 = u(\n \"\"\"\\\n"
}