{
  "instance_id": "sympy__sympy-18621",
  "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..edd605c66c 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -324,6 +324,33 @@ def colblocksizes(self):\n     def _eval_inverse(self, expand='ignored'):\n         return BlockDiagMatrix(*[mat.inverse() for mat in self.args])\n \n+    def _entry(self, i, j, **kwargs):\n+        # For single element case\n+        if len(self.args) == 1:\n+            return self.args[0][i, j]\n+        \n+        # For multiple elements, calculate the block position\n+        row_block = 0\n+        col_block = 0\n+        row_offset = 0\n+        col_offset = 0\n+        \n+        for k, size in enumerate(self.rowblocksizes):\n+            if i < row_offset + size:\n+                row_block = k\n+                break\n+            row_offset += size\n+            \n+        for k, size in enumerate(self.colblocksizes):\n+            if j < col_offset + size:\n+                col_block = k\n+                break\n+            col_offset += size\n+            \n+        if row_block == col_block:\n+            return self.args[row_block][i - row_offset, j - col_offset]\n+        return 0\n+\n     def _eval_transpose(self):\n         return BlockDiagMatrix(*[mat.transpose() for mat in self.args])\n \n@@ -568,4 +595,4 @@ def blockcut(expr, rowsizes, colsizes):\n     colbounds = bounds(colsizes)\n     return BlockMatrix([[MatrixSlice(expr, rowbound, colbound)\n                          for colbound in colbounds]\n-                         for rowbound in rowbounds])\n+                         for rowbound in rowbounds])\n\\ No newline at end of file\ndiff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex 9d778737b0..f7617ca201 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -228,3 +228,16 @@ def test_block_collapse_type():\n     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix\n     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix\n     assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix\n+\n+def test_single_element_blockdiag():\n+    # Test for single element BlockDiagMatrix conversion\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    # Test direct element access\n+    assert D[0, 0] == 1\n+    assert D[0, 1] == 2\n+    assert D[1, 0] == 3\n+    assert D[1, 1] == 4\n+    # Test conversion to regular Matrix\n+    B = Matrix(D)\n+    assert B == M\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}