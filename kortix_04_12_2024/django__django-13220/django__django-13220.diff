diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..0f48743d18 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -98,6 +98,50 @@ NON_FIELD_ERRORS = '__all__'
 
 class ValidationError(Exception):
     """An error while validating data."""
+
+    def __eq__(self, other):
+        """
+        Compare two ValidationErrors for equality.
+        
+        ValidationErrors are considered equal if they have the same:
+        - message, code, and params for simple errors
+        - error lists with the same errors in any order
+        - error dictionaries with the same errors in any order
+        """
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+        
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            return self._compare_error_dicts(other)
+        elif hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            return self._compare_error_lists(other)
+        else:
+            return (self.message == other.message and 
+                   self.code == other.code and 
+                   self.params == other.params)
+
+    def _compare_error_lists(self, other):
+        """Compare two error lists, ignoring the order of errors."""
+        return set(self._normalize_error(e) for e in self.error_list) == \
+               set(self._normalize_error(e) for e in other.error_list)
+
+    def _compare_error_dicts(self, other):
+        """Compare two error dictionaries, ignoring the order of errors in each field."""
+        return self._normalize_error_dict(self.error_dict) == \
+               self._normalize_error_dict(other.error_dict)
+
+    def _normalize_error(self, error):
+        """Convert an error into a comparable tuple format."""
+        return (str(error.message), error.code, 
+                tuple(sorted(error.params.items())) if error.params else None)
+
+    def _normalize_error_dict(self, error_dict):
+        """Convert an error dictionary into a comparable format."""
+        return {
+            field: set(self._normalize_error(e) for e in errors)
+            for field, errors in sorted(error_dict.items())
+        }
+
     def __init__(self, message, code=None, params=None):
         """
         The `message` argument can be a single error, a list of errors, or a
@@ -190,4 +234,4 @@ class EmptyResultSet(Exception):
 
 class SynchronousOnlyOperation(Exception):
     """The user tried to call a sync-only function from an async context."""
-    pass
+    pass
\ No newline at end of file
diff --git a/tests/validation/test_validation_error.py b/tests/validation/test_validation_error.py
new file mode 100644
index 0000000000..4768dea1ee
--- /dev/null
+++ b/tests/validation/test_validation_error.py
@@ -0,0 +1,39 @@
+from django.core.exceptions import ValidationError
+from django.test import SimpleTestCase
+
+
+class ValidationErrorEqualityTests(SimpleTestCase):
+    def test_equal_single_message(self):
+        e1 = ValidationError('Error')
+        e2 = ValidationError('Error')
+        self.assertEqual(e1, e2)
+        
+    def test_equal_with_code_and_params(self):
+        e1 = ValidationError('Error %(param)s', code='invalid', params={'param': 'value'})
+        e2 = ValidationError('Error %(param)s', code='invalid', params={'param': 'value'})
+        self.assertEqual(e1, e2)
+        
+    def test_equal_lists_different_order(self):
+        e1 = ValidationError(['Error 1', 'Error 2'])
+        e2 = ValidationError(['Error 2', 'Error 1'])
+        self.assertEqual(e1, e2)
+        
+    def test_equal_dicts_different_order(self):
+        e1 = ValidationError({'field1': ['Error 1', 'Error 2'], 'field2': ['Error 3']})
+        e2 = ValidationError({'field2': ['Error 3'], 'field1': ['Error 2', 'Error 1']})
+        self.assertEqual(e1, e2)
+
+    def test_not_equal_different_messages(self):
+        e1 = ValidationError('Error 1')
+        e2 = ValidationError('Error 2')
+        self.assertNotEqual(e1, e2)
+
+    def test_not_equal_different_codes(self):
+        e1 = ValidationError('Error', code='code1')
+        e2 = ValidationError('Error', code='code2')
+        self.assertNotEqual(e1, e2)
+
+    def test_not_equal_different_params(self):
+        e1 = ValidationError('Error %(param)s', params={'param': 'value1'})
+        e2 = ValidationError('Error %(param)s', params={'param': 'value2'})
+        self.assertNotEqual(e1, e2)
