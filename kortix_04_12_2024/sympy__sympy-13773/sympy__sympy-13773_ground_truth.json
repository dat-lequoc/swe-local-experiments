{
  "patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,6 +1973,10 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n@@ -2066,6 +2070,10 @@ def __radd__(self, other):\n \n     @call_highest_priority('__matmul__')\n     def __rmatmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__rmul__(other)\n \n     @call_highest_priority('__mul__')\n",
  "test_patch": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -674,6 +674,30 @@ def test_multiplication():\n         assert c[1, 0] == 3*5\n         assert c[1, 1] == 0\n \n+def test_matmul():\n+    a = Matrix([[1, 2], [3, 4]])\n+\n+    assert a.__matmul__(2) == NotImplemented\n+\n+    assert a.__rmatmul__(2) == NotImplemented\n+\n+    #This is done this way because @ is only supported in Python 3.5+\n+    #To check 2@a case\n+    try:\n+        eval('2 @ a')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n+    #Check a@2 case\n+    try:\n+        eval('a @ 2')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n def test_power():\n     raises(NonSquareMatrixError, lambda: Matrix((1, 2))**2)\n \n"
}