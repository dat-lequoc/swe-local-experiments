{
  "instance_id": "django__django-13401",
  "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..c1febc4889 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -514,19 +514,32 @@ class Field(RegisterLookupMixin):\n         return self.__class__(*args, **kwargs)\n \n     def __eq__(self, other):\n-        # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            # Primary check: creation counter for backward compatibility\n+            if self.creation_counter != other.creation_counter:\n+                return False\n+            # Secondary check: compare models if both have one\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                if self.model is not None and other.model is not None:\n+                    return self.model == other.model\n+            return True\n         return NotImplemented\n \n     def __lt__(self, other):\n-        # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            # Primary sort by creation counter for compatibility\n+            if self.creation_counter != other.creation_counter:\n+                return self.creation_counter < other.creation_counter\n+            # Secondary sort by model name if available\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                if self.model is not None and other.model is not None:\n+                    return self.model.__name__ < other.model.__name__\n+            return False\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        model_hash = hash(self.model) if hasattr(self, 'model') and self.model is not None else 0\n+        return hash((self.creation_counter, model_hash))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n@@ -2453,4 +2466,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):\n         return 'SmallAutoField'\n \n     def rel_db_type(self, connection):\n-        return SmallIntegerField().db_type(connection=connection)\n+        return SmallIntegerField().db_type(connection=connection)\n\\ No newline at end of file\ndiff --git a/tests/model_fields/test_field_comparison.py b/tests/model_fields/test_field_comparison.py\nnew file mode 100644\nindex 0000000000..011d851ed2\n--- /dev/null\n+++ b/tests/model_fields/test_field_comparison.py\n@@ -0,0 +1,45 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class AbstractModel(models.Model):\n+    class Meta:\n+        abstract = True\n+\n+    field = models.IntegerField()\n+\n+\n+class ConcreteModelA(AbstractModel):\n+    pass\n+\n+\n+class ConcreteModelB(AbstractModel):\n+    pass\n+\n+\n+class FieldComparisonTests(SimpleTestCase):\n+    def test_abstract_field_comparison(self):\n+        \"\"\"Fields inherited from abstract models should not be equal across different models.\"\"\"\n+        field_a = ConcreteModelA._meta.get_field('field')\n+        field_b = ConcreteModelB._meta.get_field('field')\n+\n+        self.assertNotEqual(field_a, field_b)\n+        self.assertEqual(len({field_a, field_b}), 2)\n+\n+    def test_field_ordering(self):\n+        \"\"\"Field ordering should primarily use creation_counter.\"\"\"\n+        field_a = ConcreteModelA._meta.get_field('field')\n+        field_b = ConcreteModelB._meta.get_field('field')\n+\n+        # Fields should maintain consistent ordering\n+        ordered = sorted([field_b, field_a])\n+        self.assertEqual(ordered, sorted([field_a, field_b]))\n+\n+    def test_unbound_field_comparison(self):\n+        \"\"\"Unbound fields should maintain existing comparison behavior.\"\"\"\n+        field1 = models.IntegerField()\n+        field2 = models.IntegerField()\n+        \n+        # Different creation counters should make them unequal\n+        self.assertNotEqual(field1, field2)\n+        self.assertEqual(len({field1, field2}), 2)\n",
  "model_name_or_path": "KortixAI"
}