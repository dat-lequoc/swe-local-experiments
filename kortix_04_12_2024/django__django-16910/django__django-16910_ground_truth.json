{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -779,7 +779,13 @@ def _get_only_select_mask(self, opts, mask, select_mask=None):\n         # Only include fields mentioned in the mask.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n-            field_select_mask = select_mask.setdefault(field, {})\n+            # Retrieve the actual field associated with reverse relationships\n+            # as that's what is expected in the select mask.\n+            if field in opts.related_objects:\n+                field_key = field.field\n+            else:\n+                field_key = field\n+            field_select_mask = select_mask.setdefault(field_key, {})\n             if field_mask:\n                 if not field.is_relation:\n                     raise FieldError(next(iter(field_mask)))\n",
  "test_patch": "diff --git a/tests/defer_regress/tests.py b/tests/defer_regress/tests.py\n--- a/tests/defer_regress/tests.py\n+++ b/tests/defer_regress/tests.py\n@@ -178,6 +178,16 @@ def test_reverse_one_to_one_relations(self):\n             self.assertEqual(i.one_to_one_item.name, \"second\")\n         with self.assertNumQueries(1):\n             self.assertEqual(i.value, 42)\n+        with self.assertNumQueries(1):\n+            i = Item.objects.select_related(\"one_to_one_item\").only(\n+                \"name\", \"one_to_one_item__item\"\n+            )[0]\n+            self.assertEqual(i.one_to_one_item.pk, o2o.pk)\n+            self.assertEqual(i.name, \"first\")\n+        with self.assertNumQueries(1):\n+            self.assertEqual(i.one_to_one_item.name, \"second\")\n+        with self.assertNumQueries(1):\n+            self.assertEqual(i.value, 42)\n \n     def test_defer_with_select_related(self):\n         item1 = Item.objects.create(name=\"first\", value=47)\n@@ -277,6 +287,28 @@ def test_defer_many_to_many_ignored(self):\n         with self.assertNumQueries(1):\n             self.assertEqual(Request.objects.defer(\"items\").get(), request)\n \n+    def test_only_many_to_many_ignored(self):\n+        location = Location.objects.create()\n+        request = Request.objects.create(location=location)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(Request.objects.only(\"items\").get(), request)\n+\n+    def test_defer_reverse_many_to_many_ignored(self):\n+        location = Location.objects.create()\n+        request = Request.objects.create(location=location)\n+        item = Item.objects.create(value=1)\n+        request.items.add(item)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(Item.objects.defer(\"request\").get(), item)\n+\n+    def test_only_reverse_many_to_many_ignored(self):\n+        location = Location.objects.create()\n+        request = Request.objects.create(location=location)\n+        item = Item.objects.create(value=1)\n+        request.items.add(item)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(Item.objects.only(\"request\").get(), item)\n+\n \n class DeferDeletionSignalsTests(TestCase):\n     senders = [Item, Proxy]\ndiff --git a/tests/select_related_onetoone/tests.py b/tests/select_related_onetoone/tests.py\n--- a/tests/select_related_onetoone/tests.py\n+++ b/tests/select_related_onetoone/tests.py\n@@ -249,6 +249,9 @@ def test_inheritance_deferred2(self):\n             self.assertEqual(p.child1.name2, \"n2\")\n         p = qs.get(name2=\"n2\")\n         with self.assertNumQueries(0):\n+            self.assertEqual(p.child1.value, 1)\n+            self.assertEqual(p.child1.child4.value4, 4)\n+        with self.assertNumQueries(2):\n             self.assertEqual(p.child1.name1, \"n1\")\n             self.assertEqual(p.child1.child4.name1, \"n1\")\n \n"
}