diff --git a/tests/select_related/tests.py b/tests/select_related/tests.py
index 68fe7a906f..b4a6478f3f 100644
--- a/tests/select_related/tests.py
+++ b/tests/select_related/tests.py
@@ -194,6 +194,30 @@ class SelectRelatedTests(TestCase):
         with self.assertNumQueries(1):
             self.assertEqual(species.genus.species_set.first().name, "melanogaster")
 
+    def test_only_with_reverse_one_to_one(self):
+        """
+        Test that only() works correctly with select_related() on reverse one-to-one relations.
+        """
+        # Create a hybrid species with a parent
+        parent_1, parent_2 = Species.objects.all()[:2]
+        hybrid = HybridSpecies.objects.create(
+            name="hybrid", parent_1=parent_1, parent_2=parent_2
+        )
+        
+        # Query using only() with select_related() on the reverse relation
+        qs = Species.objects.filter(pk=parent_1.pk).select_related(
+            "child_1"
+        ).only("name", "child_1__name")
+        
+        # Check that the query returns the correct object
+        obj = qs.get()
+        self.assertEqual(obj.name, parent_1.name)
+        self.assertEqual(obj.child_1.name, "hybrid")
+        
+        # Verify that other fields are deferred
+        self.assertIs(obj.child_1.__class__, HybridSpecies)
+        self.assertIs(type(obj.child_1.parent_2_id), int)  # Should be deferred but FK still accessible
+
     def test_select_related_after_values(self):
         """
         Running select_related() after calling values() raises a TypeError
@@ -281,4 +305,4 @@ class SelectRelatedValidationTests(SimpleTestCase):
         with self.assertRaisesMessage(
             FieldError, self.invalid_error % ("content_object", "content_type")
         ):
-            list(TaggedItem.objects.select_related("content_object"))
+            list(TaggedItem.objects.select_related("content_object"))
\ No newline at end of file
