diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index 0fefe65e48..00992aa899 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -895,39 +895,47 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
+        elif item == "pk":
+            return []  # Special case for pk
+
         try:
             field = obj.model._meta.get_field(item)
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        f"The value of '{label}' must not be a many-to-many field.",
+                        obj=obj.__class__,
+                        id="admin.E109",
+                    )
+                ]
+            return []
         except FieldDoesNotExist:
-            try:
-                field = getattr(obj.model, item)
-            except AttributeError:
+            # Check if it's a reverse relation
+            related_objects = [
+                f.name for f in obj.model._meta.get_fields()
+                if (f.one_to_many or f.one_to_one) 
+                and f.auto_created and not f.concrete
+            ]
+            
+            if item in related_objects:
                 return [
                     checks.Error(
-                        "The value of '%s' refers to '%s', which is not a "
-                        "callable, an attribute of '%s', or an attribute or "
-                        "method on '%s'."
-                        % (
-                            label,
-                            item,
-                            obj.__class__.__name__,
-                            obj.model._meta.label,
-                        ),
+                        f"The value of '{label}' refers to '{item}', which is a reverse "
+                        f"relation and cannot be used in list_display.",
                         obj=obj.__class__,
                         id="admin.E108",
                     )
                 ]
-        if isinstance(field, models.ManyToManyField) or (
-            getattr(field, "rel", None) and field.rel.field.many_to_one
-        ):
+            
             return [
                 checks.Error(
-                    f"The value of '{label}' must not be a many-to-many field or a "
-                    f"reverse foreign key.",
+                    "The value of '%s' refers to '%s', which is not a callable, "
+                    "an attribute of '%s', or a valid field of '%s'."
+                    % (label, item, obj.__class__.__name__, obj.model._meta.label),
                     obj=obj.__class__,
-                    id="admin.E109",
+                    id="admin.E108",
                 )
             ]
-        return []
 
     def _check_list_display_links(self, obj):
         """Check that list_display_links is a unique subset of list_display."""
@@ -1349,4 +1357,4 @@ def refer_to_missing_field(field, option, obj, id):
             obj=obj.__class__,
             id=id,
         ),
-    ]
+    ]
\ No newline at end of file
