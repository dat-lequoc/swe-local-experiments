{
  "instance_id": "sympy__sympy-17630",
  "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..712866a265 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,16 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            # Ensure multiplication preserves ZeroMatrix type\n+            result = self.blocks*other.blocks\n+            # Convert any Zero objects back to ZeroMatrix with proper dimensions\n+            for i in range(result.shape[0]):\n+                for j in range(result.shape[1]):\n+                    if result[i,j].is_zero:\n+                        rows = self.rowblocksizes[i]\n+                        cols = other.colblocksizes[j]\n+                        result[i,j] = ZeroMatrix(rows, cols)\n+            return BlockMatrix(result)\n \n         return self * other\n \n@@ -569,4 +578,4 @@ def blockcut(expr, rowsizes, colsizes):\n     colbounds = bounds(colsizes)\n     return BlockMatrix([[MatrixSlice(expr, rowbound, colbound)\n                          for colbound in colbounds]\n-                         for rowbound in rowbounds])\n+                         for rowbound in rowbounds])\n\\ No newline at end of file\ndiff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex 1e1033affc..a0b7b19207 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -58,6 +58,17 @@ def test_BlockMatrix():\n     X = BlockMatrix(Matrix([[A, B], [C, D]]))\n \n     assert X.__class__(*X.args) == X\n+    \n+    # Test multiplication with zero blocks\n+    a = MatrixSymbol(\"a\", 2, 2)\n+    z = ZeroMatrix(2, 2)\n+    b = BlockMatrix([[a, z], [z, z]])\n+    b2 = b._blockmul(b)\n+    b3 = b2._blockmul(b)\n+    assert isinstance(b2.blocks[0, 1], MatrixExpr)\n+    assert isinstance(b3.blocks[0, 1], MatrixExpr)\n+    assert b2.blocks[0, 1].is_ZeroMatrix\n+    assert b3.blocks[0, 1].is_ZeroMatrix\n \n     # block_collapse does nothing on normal inputs\n     E = MatrixSymbol('E', n, m)\n@@ -221,4 +232,4 @@ def test_block_collapse_type():\n     assert block_collapse(Inverse(bm1)).__class__ == BlockDiagMatrix\n     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix\n     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix\n-    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix\n+    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}