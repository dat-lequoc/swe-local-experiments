{
  "patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -212,6 +212,7 @@ def get_feed(self, obj, request):\n                 author_name=author_name,\n                 author_email=author_email,\n                 author_link=author_link,\n+                comments=self._get_dynamic_attr('item_comments', item),\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n                 **self.item_extra_kwargs(item)\n",
  "test_patch": "diff --git a/tests/syndication_tests/feeds.py b/tests/syndication_tests/feeds.py\n--- a/tests/syndication_tests/feeds.py\n+++ b/tests/syndication_tests/feeds.py\n@@ -29,6 +29,9 @@ def item_pubdate(self, item):\n     def item_updateddate(self, item):\n         return item.updated\n \n+    def item_comments(self, item):\n+        return \"%scomments\" % item.get_absolute_url()\n+\n     item_author_name = 'Sally Smith'\n     item_author_email = 'test@example.com'\n     item_author_link = 'http://www.example.com/'\ndiff --git a/tests/syndication_tests/tests.py b/tests/syndication_tests/tests.py\n--- a/tests/syndication_tests/tests.py\n+++ b/tests/syndication_tests/tests.py\n@@ -136,10 +136,20 @@ def test_rss2_feed(self):\n             'guid': 'http://example.com/blog/1/',\n             'pubDate': pub_date,\n             'author': 'test@example.com (Sally Smith)',\n+            'comments': '/blog/1/comments',\n         })\n         self.assertCategories(items[0], ['python', 'testing'])\n         for item in items:\n-            self.assertChildNodes(item, ['title', 'link', 'description', 'guid', 'category', 'pubDate', 'author'])\n+            self.assertChildNodes(item, [\n+                'title',\n+                'link',\n+                'description',\n+                'guid',\n+                'category',\n+                'pubDate',\n+                'author',\n+                'comments',\n+            ])\n             # Assert that <guid> does not have any 'isPermaLink' attribute\n             self.assertIsNone(item.getElementsByTagName(\n                 'guid')[0].attributes.get('isPermaLink'))\n"
}