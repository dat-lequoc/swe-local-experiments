{
  "instance_id": "django__django-13230",
  "model_patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..462197387e 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -214,6 +214,7 @@ class Feed:\n                 author_link=author_link,\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n+                comments=self._get_dynamic_attr('item_comments', item),\n                 **self.item_extra_kwargs(item)\n             )\n-        return feed\n+        return feed\n\\ No newline at end of file\ndiff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py\nindex f08e89b25c..d69b0d1dd3 100644\n--- a/django/utils/feedgenerator.py\n+++ b/django/utils/feedgenerator.py\n@@ -261,13 +261,16 @@ class Rss201rev2Feed(RssFeed):\n \n         if item['pubdate'] is not None:\n             handler.addQuickElement(\"pubDate\", rfc2822_date(item['pubdate']))\n-        if item['comments'] is not None:\n-            handler.addQuickElement(\"comments\", item['comments'])\n         if item['unique_id'] is not None:\n             guid_attrs = {}\n             if isinstance(item.get('unique_id_is_permalink'), bool):\n                 guid_attrs['isPermaLink'] = str(item['unique_id_is_permalink']).lower()\n             handler.addQuickElement(\"guid\", item['unique_id'], guid_attrs)\n+\n+        # Add comments after guid per RSS 2.0 spec\n+        if item['comments'] is not None:\n+            handler.addQuickElement(\"comments\", item['comments'])\n+\n         if item['ttl'] is not None:\n             handler.addQuickElement(\"ttl\", item['ttl'])\n \n@@ -389,4 +392,4 @@ class Atom1Feed(SyndicationFeed):\n \n # This isolates the decision of what the system default is, so calling code can\n # do \"feedgenerator.DefaultFeed\" instead of \"feedgenerator.Rss201rev2Feed\".\n-DefaultFeed = Rss201rev2Feed\n+DefaultFeed = Rss201rev2Feed\n\\ No newline at end of file\ndiff --git a/tests/syndication_tests/feeds.py b/tests/syndication_tests/feeds.py\nindex 4e9b1170b1..5c0bd85d56 100644\n--- a/tests/syndication_tests/feeds.py\n+++ b/tests/syndication_tests/feeds.py\n@@ -190,6 +190,14 @@ class TestCustomFeed(TestAtomFeed):\n     feed_type = MyCustomAtom1Feed\n \n \n+class TestFeedWithComments(TestRss2Feed):\n+    \"\"\"\n+    A feed to test item comments support.\n+    \"\"\"\n+    def item_comments(self, item):\n+        return 'http://example.com/comments/%s/' % item.pk\n+\n+\n class TestSingleEnclosureAtomFeed(TestAtomFeed):\n     \"\"\"\n     A feed to test that Atom feeds work with a single enclosure.\n@@ -212,4 +220,4 @@ class TestMultipleEnclosureAtomFeed(TestAtomFeed):\n         return [\n             feedgenerator.Enclosure('http://example.com/hello.png', '0', 'image/png'),\n             feedgenerator.Enclosure('http://example.com/goodbye.png', '0', 'image/png'),\n-        ]\n+        ]\n\\ No newline at end of file\ndiff --git a/tests/syndication_tests/tests.py b/tests/syndication_tests/tests.py\nindex dab7ebab33..d371e766f1 100644\n--- a/tests/syndication_tests/tests.py\n+++ b/tests/syndication_tests/tests.py\n@@ -59,6 +59,23 @@ class FeedTestCase(TestCase):\n \n @override_settings(ROOT_URLCONF='syndication_tests.urls')\n class SyndicationFeedTest(FeedTestCase):\n+    def test_rss2_feed_with_comments(self):\n+        \"\"\"\n+        Test the structure and content of feeds with item comments.\n+        \"\"\"\n+        response = self.client.get('/syndication/rss2/comments/')\n+        doc = minidom.parseString(response.content)\n+        feed = doc.getElementsByTagName('rss')[0]\n+        chan = feed.getElementsByTagName('channel')[0]\n+        items = chan.getElementsByTagName('item')\n+\n+        for item in items:\n+            self.assertChildNodes(item, [\n+                'title', 'link', 'description', 'guid', 'category',\n+                'pubDate', 'author', 'comments',\n+            ])\n+            comments = item.getElementsByTagName('comments')[0]\n+            self.assertTrue(comments.firstChild.wholeText.startswith('http://example.com/comments/'))\n     \"\"\"\n     Tests for the high-level syndication feed framework.\n     \"\"\"\n@@ -511,4 +528,4 @@ class SyndicationFeedTest(FeedTestCase):\n         )\n         for prefix in prefix_domain_mapping:\n             with self.subTest(prefix=prefix):\n-                self.assertEqual(views.add_domain(*prefix[0]), prefix[1])\n+                self.assertEqual(views.add_domain(*prefix[0]), prefix[1])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}