{
  "instance_id": "matplotlib__matplotlib-25433",
  "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex ebe5da43e2..faed8e6c68 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -73,6 +73,10 @@ class Widget:\n \n     def set_active(self, active):\n         \"\"\"Set whether the widget is active.\"\"\"\n+        # Release any active mouse grab when deactivating\n+        if not active and hasattr(self, 'canvas'):\n+            if self.canvas.mouse_grabber is self.ax:\n+                self.canvas.release_mouse(self.ax)\n         self._active = active\n \n     def get_active(self):\n@@ -2442,11 +2446,17 @@ class _SelectorWidget(AxesWidget):\n \n     def clear(self):\n         \"\"\"Clear the selection and set the selector ready to make a new one.\"\"\"\n+        # Ensure proper cleanup of event state\n+        if hasattr(self, 'canvas'):\n+            if self.canvas.mouse_grabber is self.ax:\n+                self.canvas.release_mouse(self.ax)\n         self._clear_without_update()\n         self.update()\n \n     def _clear_without_update(self):\n         self._selection_completed = False\n+        if hasattr(self, '_active_handle'):\n+            self._active_handle = None\n         self.set_visible(False)\n \n     @property\n@@ -4272,4 +4282,4 @@ class Lasso(AxesWidget):\n             self.ax.draw_artist(self.line)\n             self.canvas.blit(self.ax.bbox)\n         else:\n-            self.canvas.draw_idle()\n+            self.canvas.draw_idle()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}