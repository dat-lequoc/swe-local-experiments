{
  "instance_id": "django__django-15388",
  "model_patch": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex 91e503f709..b58e5106e2 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -146,7 +146,22 @@ class Engine:\n                 return template, template.origin\n             except TemplateDoesNotExist as e:\n                 tried.extend(e.tried)\n-        raise TemplateDoesNotExist(name, tried=tried)\n+            except PermissionError as e:\n+                # Preserve the original error with context\n+                raise PermissionError(\n+                    f\"Permission denied while accessing template '{name}': {e}\"\n+                ) from e\n+            except OSError as e:\n+                # Handle other OS-related errors similarly\n+                if e.errno == errno.EACCES:  # Permission denied\n+                    raise PermissionError(\n+                        f\"Permission denied while accessing template '{name}': {e}\"\n+                    ) from e\n+                raise\n+        if tried:\n+            raise TemplateDoesNotExist(name, tried=tried)\n+        else:\n+            raise TemplateDoesNotExist(name)\n \n     def from_string(self, template_code):\n         \"\"\"\n@@ -197,4 +212,4 @@ class Engine:\n                     not_found.append(exc.args[0])\n                 continue\n         # If we get here, none of the templates could be loaded\n-        raise TemplateDoesNotExist(', '.join(not_found))\n+        raise TemplateDoesNotExist(', '.join(not_found))\n\\ No newline at end of file\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..974627d9c0 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -170,27 +170,36 @@ def common_roots(paths):\n     Try to find the minimum set of directories to watch that encompass all of\n     the files that need to be watched.\n     \"\"\"\n-    # Inspired from Werkzeug:\n-    # https://github.com/pallets/werkzeug/blob/7477be2853df70a022d9613e765581b9411c3c39/werkzeug/_reloader.py\n-    # Create a sorted list of the path components, longest first.\n-    path_parts = sorted([x.parts for x in paths], key=len, reverse=True)\n-    tree = {}\n-    for chunks in path_parts:\n-        node = tree\n-        # Add each part of the path to the tree.\n-        for chunk in chunks:\n-            node = node.setdefault(chunk, {})\n-        # Clear the last leaf in the tree.\n-        node.clear()\n-\n-    # Turn the tree into a list of Path instances.\n-    def _walk(node, path):\n-        for prefix, child in node.items():\n-            yield from _walk(child, path + (prefix,))\n-        if not node:\n-            yield Path(*path)\n-\n-    return tuple(_walk(tree, ()))\n+    if not paths:\n+        return tuple()\n+\n+    # Normalize and resolve all paths first\n+    resolved_paths = []\n+    for path in paths:\n+        try:\n+            resolved = path.resolve()\n+            resolved_paths.append(resolved)\n+        except (OSError, RuntimeError):\n+            # Skip invalid paths or symlink loops\n+            continue\n+\n+    if not resolved_paths:\n+        return tuple()\n+\n+    # Find common prefixes while avoiding redundant paths\n+    result = set()\n+    sorted_paths = sorted(resolved_paths, key=lambda p: len(p.parts))\n+    \n+    for path in sorted_paths:\n+        # Check if this path is already covered by an existing root\n+        if not any(path.is_relative_to(existing) for existing in result):\n+            # Check if this path could be a new root\n+            redundant = {existing for existing in result \n+                        if existing.is_relative_to(path)}\n+            result -= redundant\n+            result.add(path)\n+\n+    return tuple(sorted(result))\n \n \n def sys_path_directories():\n@@ -292,12 +301,25 @@ class BaseReloader:\n         Yield all files that need to be watched, including module files and\n         files within globs.\n         \"\"\"\n-        yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        seen_paths = set()\n+        \n+        def yield_unique_paths(paths):\n+            for path in paths:\n+                try:\n+                    resolved = path.resolve()\n+                    if resolved not in seen_paths:\n+                        seen_paths.add(resolved)\n+                        yield path\n+                except (OSError, RuntimeError):\n+                    # Handle symlink loops or invalid paths gracefully\n+                    continue\n+        \n+        yield from yield_unique_paths(iter_all_python_module_files())\n+        yield from yield_unique_paths(self.extra_files)\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    yield from yield_unique_paths(directory.glob(pattern))\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n@@ -646,4 +668,4 @@ def run_with_reloader(main_func, *args, **kwargs):\n             exit_code = restart_with_reloader()\n             sys.exit(exit_code)\n     except KeyboardInterrupt:\n-        pass\n+        pass\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}