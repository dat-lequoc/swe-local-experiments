{
  "instance_id": "pytest-dev__pytest-8906",
  "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..8d1b9f814 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -128,15 +128,21 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    :param str msg: The message to show as the reason for skipping.\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when you need to skip a module\n+        that contains syntax only available in newer Python versions. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For conditional test skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible. However, when you need to skip an entire module (especially\n+        due to syntax compatibility), use either:\n+        \n+        - ``pytest.skip(msg, allow_module_level=True)`` at module level\n+        - :func:`pytest.skip_module` which is a more explicit alternative\n+        \n+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n@@ -177,6 +183,29 @@ def xfail(reason: str = \"\") -> \"NoReturn\":\n     raise XFailed(reason)\n \n \n+def skip_module(msg: str) -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This is a convenience function that calls :func:`pytest.skip` with ``allow_module_level=True``.\n+    It is particularly useful when you need to skip a module that contains syntax only\n+    available in newer Python versions.\n+\n+    :param str msg: The message to show as the reason for skipping.\n+\n+    Example::\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            pytest.skip_module(\"Requires Python >= 3.8\")\n+\n+        # Module contents using Python 3.8+ syntax\n+        def foo(x, /, y):\n+            return x + y\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg, allow_module_level=True)\n+\n+\n def importorskip(\n     modname: str, minversion: Optional[str] = None, reason: Optional[str] = None\n ) -> Any:\n@@ -229,4 +258,4 @@ def importorskip(\n                 % (modname, verattr, minversion),\n                 allow_module_level=True,\n             )\n-    return mod\n+    return mod\n\\ No newline at end of file\ndiff --git a/src/pytest/__init__.py b/src/pytest/__init__.py\nindex 3694f0fc4..3a87938f5 100644\n--- a/src/pytest/__init__.py\n+++ b/src/pytest/__init__.py\n@@ -40,6 +40,7 @@ from _pytest.outcomes import exit\n from _pytest.outcomes import fail\n from _pytest.outcomes import importorskip\n from _pytest.outcomes import skip\n+from _pytest.outcomes import skip_module\n from _pytest.outcomes import xfail\n from _pytest.pytester import Pytester\n from _pytest.pytester import Testdir\n@@ -131,6 +132,7 @@ __all__ = [\n     \"Session\",\n     \"set_trace\",\n     \"skip\",\n+    \"skip_module\",\n     \"version_tuple\",\n     \"TempPathFactory\",\n     \"Testdir\",\n@@ -140,4 +142,4 @@ __all__ = [\n     \"warns\",\n     \"xfail\",\n     \"yield_fixture\",\n-]\n+]\n\\ No newline at end of file\ndiff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 53bf953a8..abf9087da 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -948,6 +948,33 @@ class TestSkipif:\n         assert result.ret == 0\n \n \n+def test_skip_module_function(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        test_skip_module=\"\"\"\n+            import pytest\n+            pytest.skip_module(\"module skipped\")\n+            raise Exception(\"should not be reached\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p, \"-rs\")\n+    result.stdout.fnmatch_lines([\"*module skipped*\", \"*1 skipped*\"])\n+\n+def test_skip_module_with_syntax_error(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        test_skip_syntax=\"\"\"\n+            import pytest\n+            import sys\n+            if sys.version_info < (999, 0):  # Always true\n+                pytest.skip_module(\"skip before syntax error\")\n+            \n+            # Invalid syntax that would normally fail parsing\n+            def f(x, /):  # Requires Python 3.8+\n+                return x\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p, \"-rs\")\n+    result.stdout.fnmatch_lines([\"*skip before syntax error*\", \"*1 skipped*\"])\n+\n def test_skip_not_report_default(pytester: Pytester) -> None:\n     p = pytester.makepyfile(\n         test_one=\"\"\"\n@@ -1443,4 +1470,4 @@ def test_relpath_rootdir(pytester: Pytester) -> None:\n     result = pytester.runpytest(\"-rs\", \"tests/test_1.py\", \"--rootdir=tests\")\n     result.stdout.fnmatch_lines(\n         [\"SKIPPED [[]1[]] tests/test_1.py:2: unconditional skip\"]\n-    )\n+    )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}