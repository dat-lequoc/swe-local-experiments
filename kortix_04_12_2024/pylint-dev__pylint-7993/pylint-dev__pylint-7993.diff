diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py
index 29bd46798..d6f0422b6 100644
--- a/pylint/reporters/text.py
+++ b/pylint/reporters/text.py
@@ -175,7 +175,7 @@ class TextReporter(BaseReporter):
         self._template = template
 
         # Check to see if all parameters in the template are attributes of the Message
-        arguments = re.findall(r"\{(.+?)(:.*)?\}", template)
+        arguments = re.findall(r"(?<!{)\{([^:{]+?)(?::(?:[^}]+))?\}(?!})", template)
         for argument in arguments:
             if argument[0] not in MESSAGE_FIELDS:
                 warnings.warn(
@@ -312,4 +312,4 @@ def register(linter: PyLinter) -> None:
     linter.register_reporter(TextReporter)
     linter.register_reporter(ParseableTextReporter)
     linter.register_reporter(VSTextReporter)
-    linter.register_reporter(ColorizedTextReporter)
+    linter.register_reporter(ColorizedTextReporter)
\ No newline at end of file
diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py
index 37f3e5fd9..0066d57e4 100644
--- a/tests/reporters/unittest_reporting.py
+++ b/tests/reporters/unittest_reporting.py
@@ -81,6 +81,18 @@ def test_template_option_end_line(linter) -> None:
     assert out_lines[2] == "my_mod:2:0:2:4: C0301: Line too long (3/4) (line-too-long)"
 
 
+def test_template_with_double_braces(linter) -> None:
+    """Test the msg-template option with double braces."""
+    output = StringIO()
+    linter.reporter.out = output
+    linter.config.msg_template = '{{ "Category": "{category}" }}'
+    linter.open()
+    linter.set_current_module("my_mod")
+    linter.add_message("C0301", line=1, args=(1, 2))
+    
+    out_lines = output.getvalue().split("\n")
+    assert out_lines[1] == '{ "Category": "convention" }'
+
 def test_template_option_non_existing(linter) -> None:
     """Test the msg-template option with non-existent options.
     This makes sure that this option remains backwards compatible as new
@@ -384,4 +396,4 @@ def test_display_results_is_renamed() -> None:
     with pytest.raises(AttributeError) as exc:
         # pylint: disable=no-member
         reporter.display_results()  # type: ignore[attr-defined]
-    assert "no attribute 'display_results'" in str(exc)
+    assert "no attribute 'display_results'" in str(exc)
\ No newline at end of file
