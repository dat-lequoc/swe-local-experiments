{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2086,7 +2086,12 @@ def add_deferred_loading(self, field_names):\n             self.deferred_loading = existing.union(field_names), True\n         else:\n             # Remove names from the set of any existing \"immediate load\" names.\n-            self.deferred_loading = existing.difference(field_names), False\n+            if new_existing := existing.difference(field_names):\n+                self.deferred_loading = new_existing, False\n+            else:\n+                self.clear_deferred_loading()\n+                if new_only := set(field_names).difference(existing):\n+                    self.deferred_loading = new_only, True\n \n     def add_immediate_loading(self, field_names):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/defer/tests.py b/tests/defer/tests.py\n--- a/tests/defer/tests.py\n+++ b/tests/defer/tests.py\n@@ -49,8 +49,16 @@ def test_defer_only_chaining(self):\n         qs = Primary.objects.all()\n         self.assert_delayed(qs.only(\"name\", \"value\").defer(\"name\")[0], 2)\n         self.assert_delayed(qs.defer(\"name\").only(\"value\", \"name\")[0], 2)\n+        self.assert_delayed(qs.defer('name').only('name').only('value')[0], 2)\n         self.assert_delayed(qs.defer(\"name\").only(\"value\")[0], 2)\n         self.assert_delayed(qs.only(\"name\").defer(\"value\")[0], 2)\n+        self.assert_delayed(qs.only('name').defer('name').defer('value')[0], 1)\n+        self.assert_delayed(qs.only('name').defer('name', 'value')[0], 1)\n+\n+    def test_defer_only_clear(self):\n+        qs = Primary.objects.all()\n+        self.assert_delayed(qs.only('name').defer('name')[0], 0)\n+        self.assert_delayed(qs.defer('name').only('name')[0], 0)\n \n     def test_defer_on_an_already_deferred_field(self):\n         qs = Primary.objects.all()\n"
}