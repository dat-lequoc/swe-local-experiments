{
  "instance_id": "sympy__sympy-14024",
  "model_patch": "diff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py\nindex a7fd30e118..9259cddc6b 100644\n--- a/sympy/simplify/powsimp.py\n+++ b/sympy/simplify/powsimp.py\n@@ -199,11 +199,23 @@ def recurse(arg, **kwargs):\n                         c_powers[b] -= e\n \n         # check for base and negated base pairs\n+        def _can_combine_base(b, e):\n+            \"\"\"Helper to determine if base can be combined\"\"\"\n+            if b.is_number or (-b).is_number:\n+                return False\n+            if b.is_Symbol or b.is_Add:\n+                return True\n+            if b.is_Mul:\n+                return all(not t.is_number for t in b.args)\n+            return True\n+\n         be = list(c_powers.items())\n         _n = S.NegativeOne\n         for i, (b, e) in enumerate(be):\n+            if not _can_combine_base(b, e):\n+                continue\n             if ((-b).is_Symbol or b.is_Add) and -b in c_powers:\n-                if (b.is_positive in (0, 1) or e.is_integer):\n+                if b.is_positive in (0, 1) or e.is_integer:\n                     c_powers[-b] += c_powers.pop(b)\n                     if _n in c_powers:\n                         c_powers[_n] += e\n@@ -689,4 +701,4 @@ def nc_gcd(aa, bb):\n             add.append(a)\n         else:\n             other.append(a)\n-    return Pow(exp(logcombine(Mul(*add))), e*Mul(*other))\n+    return Pow(exp(logcombine(Mul(*add))), e*Mul(*other))\n\\ No newline at end of file\ndiff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex 6909894e6f..67df5a29b5 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -694,6 +694,21 @@ def inverse(self, argindex=1):\n     assert simplify(f(g(x, y))) == f(g(x, y))\n \n \n+def test_negative_base_numeric():\n+    # Test for correct handling of negative numeric bases\n+    from sympy import Symbol, simplify, S\n+    x = Symbol('x')\n+    a = S(2)\n+    e = (-a)**x * a**(-x)\n+    f = simplify(e)\n+    assert f == e  # Should not simplify to (-1)**x for numeric base\n+    \n+    # Test that symbolic case still works\n+    a = Symbol('a', integer=True, positive=True)\n+    e = (-a)**x * a**(-x)\n+    f = simplify(e)\n+    assert f == (-1)**x  # Should simplify for symbolic positive integer\n+\n def test_clear_coefficients():\n     from sympy.simplify.simplify import clear_coefficients\n     assert clear_coefficients(4*y*(6*x + 3)) == (y*(2*x + 1), 0)\n@@ -704,4 +719,4 @@ def test_clear_coefficients():\n     assert clear_coefficients(S(3), x) == (0, x - 3)\n     assert clear_coefficients(S.Infinity, x) == (S.Infinity, x)\n     assert clear_coefficients(-S.Pi, x) == (S.Pi, -x)\n-    assert clear_coefficients(2 - S.Pi/3, x) == (pi, -3*x + 6)\n+    assert clear_coefficients(2 - S.Pi/3, x) == (pi, -3*x + 6)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}