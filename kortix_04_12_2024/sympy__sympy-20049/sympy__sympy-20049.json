{
  "instance_id": "sympy__sympy-20049",
  "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..0d4810f907 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -499,6 +499,9 @@ def v2pt_theory(self, otherpoint, outframe, fixedframe):\n     def vel(self, frame):\n         \"\"\"The velocity Vector of this Point in the ReferenceFrame.\n \n+        If the velocity is not explicitly set, it will be calculated from\n+        the point's position relative to other points if possible.\n+\n         Parameters\n         ==========\n \n@@ -516,12 +519,24 @@ def vel(self, frame):\n         10*N.x\n \n         \"\"\"\n-\n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        if frame in self._vel_dict:\n+            return self._vel_dict[frame]\n+            \n+        # Try to calculate velocity from position relationships\n+        for other_point, pos_vector in self._pos_dict.items():\n+            try:\n+                other_vel = other_point.vel(frame)\n+                # Calculate velocity as v = dr/dt + v_other\n+                vel = pos_vector.dt(frame) + other_vel\n+                # Cache the calculated velocity\n+                self._vel_dict[frame] = vel\n+                return vel\n+            except ValueError:\n+                continue\n+                \n+        raise ValueError('Velocity of point ' + self.name + ' could not be '\n+                        'calculated in ReferenceFrame ' + frame.name)\n \n     def partial_velocity(self, frame, *gen_speeds):\n         \"\"\"Returns the partial velocities of the linear velocity vector of this\n@@ -563,4 +578,4 @@ def partial_velocity(self, frame, *gen_speeds):\n         if len(partials) == 1:\n             return partials[0]\n         else:\n-            return tuple(partials)\n+            return tuple(partials)\n\\ No newline at end of file\ndiff --git a/sympy/physics/vector/tests/test_point.py b/sympy/physics/vector/tests/test_point.py\nindex 052b5c3af7..f59e82260a 100644\n--- a/sympy/physics/vector/tests/test_point.py\n+++ b/sympy/physics/vector/tests/test_point.py\n@@ -112,6 +112,20 @@ def test_point_pos():\n     assert Q.pos_from(O) == 10 * N.x + 10 * N.y + 5 * B.x + 5 * B.y\n     assert O.pos_from(Q) == -10 * N.x - 10 * N.y - 5 * B.x - 5 * B.y\n \n+def test_point_vel_from_pos():\n+    \"\"\"Test automatic velocity calculation from position relationships.\"\"\"\n+    N = ReferenceFrame('N')\n+    q = dynamicsymbols('q')\n+    P = Point('P')\n+    Q = Point('Q')\n+    # Define position relationship\n+    r = q * N.x + 2 * q * N.y\n+    Q.set_pos(P, r)\n+    # Set velocity of reference point\n+    P.set_vel(N, 0)\n+    # Velocity should be calculated from position\n+    assert Q.vel(N) == q.diff(dynamicsymbols._t) * N.x + 2 * q.diff(dynamicsymbols._t) * N.y\n+\n def test_point_partial_velocity():\n \n     N = ReferenceFrame('N')\n@@ -125,4 +139,4 @@ def test_point_partial_velocity():\n \n     assert p.partial_velocity(N, u1) == A.x\n     assert p.partial_velocity(N, u1, u2) == (A.x, N.y)\n-    raises(ValueError, lambda: p.partial_velocity(A, u1))\n+    raises(ValueError, lambda: p.partial_velocity(A, u1))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}