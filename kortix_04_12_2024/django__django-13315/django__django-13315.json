{
  "instance_id": "django__django-13315",
  "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..4f2ed69d8c 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n@@ -1398,4 +1398,4 @@ def modelform_defines_fields(form_class):\n     return hasattr(form_class, '_meta') and (\n         form_class._meta.fields is not None or\n         form_class._meta.exclude is not None\n-    )\n+    )\n\\ No newline at end of file\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 9e900e35f4..236c9f584a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -235,6 +235,32 @@ class ModelFormBaseTest(TestCase):\n         obj = f2.save()\n         self.assertEqual(obj.character, char)\n \n+    def test_limit_choices_to_duplicates(self):\n+        \"\"\"\n+        Using limit_choices_to with joins shouldn't produce duplicate choices.\n+        \"\"\"\n+        today = datetime.datetime.today()\n+        char1 = Character.objects.create(\n+            username='Char1',\n+            last_action=today,\n+        )\n+        # Create a joke to ensure we get a join that could cause duplicates\n+        StumpJoke.objects.create(\n+            most_recently_fooled=char1,\n+        )\n+        StumpJoke.objects.create(\n+            most_recently_fooled=char1,\n+        )\n+        \n+        class JokeForm(forms.ModelForm):\n+            class Meta:\n+                model = StumpJoke\n+                fields = ['most_recently_fooled']\n+        \n+        form = JokeForm()\n+        self.assertEqual(len(form.fields['most_recently_fooled'].queryset), 1)\n+        self.assertEqual(form.fields['most_recently_fooled'].queryset[0], char1)\n+\n     def test_blank_false_with_null_true_foreign_key_field(self):\n         \"\"\"\n         A ModelForm with a model having ForeignKey(blank=False, null=True)\n@@ -3028,4 +3054,4 @@ class ModelToDictTests(TestCase):\n         item.colours.set([red])\n         # If data were a QuerySet, it would be reevaluated here and give \"red\"\n         # instead of the original value.\n-        self.assertEqual(data, [blue])\n+        self.assertEqual(data, [blue])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}