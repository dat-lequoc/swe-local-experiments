{
  "instance_id": "sympy__sympy-15609",
  "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 901918674a..6252a52d08 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1437,8 +1437,67 @@ def _print_MatrixBase(self, expr):\n                            = _print_MatrixBase\n \n     def _print_MatrixElement(self, expr):\n-        return self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) \\\n-            + '_{%s, %s}' % (expr.i, expr.j)\n+        from sympy.matrices.expressions.matmul import MatMul\n+        from sympy.matrices.expressions import MatrixElement\n+        from sympy import Symbol\n+        \n+        if isinstance(expr.parent, MatMul):\n+            matrices = expr.parent.args\n+            i, j = expr.i, expr.j\n+            result = []\n+            sum_indices = []\n+            \n+            # Generate unique summation indices\n+            for idx in range(len(matrices)-1):\n+                sum_indices.append(Symbol('k_%d' % (idx+1)))\n+                \n+            # Build the summation expression\n+            if len(matrices) == 2:\n+                k = matrices[0].shape[1]\n+                return r\"\\sum_{%s=0}^{%s} %s_{%s,%s} %s_{%s,%s}\" % (\n+                    self._print(sum_indices[0]),\n+                    self._print(k-1),\n+                    self._print(matrices[0]),\n+                    self._print(i),\n+                    self._print(sum_indices[0]),\n+                    self._print(matrices[1]),\n+                    self._print(sum_indices[0]),\n+                    self._print(j)\n+                )\n+            else:\n+                # Handle multiple matrix multiplication\n+                sums = []\n+                terms = []\n+                for idx in range(len(matrices)-1):\n+                    k = matrices[idx].shape[1]\n+                    sums.append(r\"\\sum_{%s=0}^{%s}\" % (\n+                        self._print(sum_indices[idx]),\n+                        self._print(k-1)))\n+                    \n+                # Build matrix terms\n+                prev_idx = i\n+                for idx, matrix in enumerate(matrices[:-1]):\n+                    terms.append(r\"%s_{%s,%s}\" % (\n+                        self._print(matrix),\n+                        self._print(prev_idx),\n+                        self._print(sum_indices[idx])))\n+                    prev_idx = sum_indices[idx]\n+                \n+                # Add last matrix term\n+                terms.append(r\"%s_{%s,%s}\" % (\n+                    self._print(matrices[-1]),\n+                    self._print(sum_indices[-1]),\n+                    self._print(j)))\n+                    \n+                return r\"%s %s\" % (\n+                    \" \".join(sums),\n+                    \" \".join(terms))\n+        \n+        # Handle simple matrix element case\n+        return r\"%s_{%s, %s}\" % (\n+            self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True),\n+            self._print(expr.i),\n+            self._print(expr.j))\n \n     def _print_MatrixSlice(self, expr):\n         def latexslice(x):\n@@ -2452,4 +2511,4 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n def print_latex(expr, **settings):\n     \"\"\"Prints LaTeX representation of the given expression. Takes the same\n     settings as ``latex()``.\"\"\"\n-    print(latex(expr, **settings))\n+    print(latex(expr, **settings))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}