{
  "instance_id": "matplotlib__matplotlib-25498",
  "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex d3d53e3d98..7304a85eac 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -504,13 +504,31 @@ class Colorbar:\n         and locator will be preserved.\n         \"\"\"\n         _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n+        \n+        # Store current norm for comparison\n+        old_norm = self.norm\n+        \n+        # Update basic attributes\n         self.mappable = mappable\n         self.set_alpha(mappable.get_alpha())\n         self.cmap = mappable.cmap\n-        if mappable.norm != self.norm:\n+        \n+        # Update norm with callback protection\n+        with mappable.callbacks.blocked(), self.mappable.callbacks.blocked():\n             self.norm = mappable.norm\n-            self._reset_locator_formatter_scale()\n-\n+            \n+            # Reset locator and formatter if norm type changes\n+            if type(old_norm) != type(self.norm):\n+                self._reset_locator_formatter_scale()\n+            elif mappable.norm != old_norm:\n+                self._reset_locator_formatter_scale()\n+        \n+        # Ensure norm is properly initialized\n+        if hasattr(self.norm, 'vmin') and self.norm.vmin is None:\n+            self.norm.vmin = np.min(mappable.get_array())\n+        if hasattr(self.norm, 'vmax') and self.norm.vmax is None:\n+            self.norm.vmax = np.max(mappable.get_array())\n+            \n         self._draw_all()\n         if isinstance(self.mappable, contour.ContourSet):\n             CS = self.mappable\n@@ -1591,4 +1609,4 @@ def make_axes_gridspec(parent, *, location=None, orientation=None,\n         aspect=aspect0,\n         pad=pad)\n \n-    return cax, kwargs\n+    return cax, kwargs\n\\ No newline at end of file\ndiff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex e39d007378..e4ed04687d 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -225,10 +225,21 @@ def test_colorbar_single_ax_panchor_false():\n     assert ax.get_anchor() == 'N'\n \n \n-@pytest.mark.parametrize('constrained', [False, True],\n-                         ids=['standard', 'constrained'])\n-def test_colorbar_single_ax_panchor_east(constrained):\n-    fig = plt.figure(constrained_layout=constrained)\n+def test_colorbar_norm_update():\n+    \"\"\"Test colorbar updates correctly when mappable's norm changes.\"\"\"\n+    fig, ax = plt.subplots()\n+    np.random.seed(1234)\n+    img = 10**np.random.normal(1, 1, size=(10, 10))\n+    im = ax.imshow(img)\n+    cb = fig.colorbar(im)\n+    assert not isinstance(im.norm, LogNorm)\n+    im.set_norm(LogNorm())\n+    cb.update_normal(im)\n+    assert isinstance(cb.norm, LogNorm)\n+    assert cb.norm is im.norm\n+    \n+def test_colorbar_single_ax_panchor_east():\n+    fig = plt.figure()\n     ax = fig.add_subplot(111, anchor='N')\n     plt.imshow([[0, 1]])\n     plt.colorbar(panchor='E')\n@@ -1214,4 +1225,4 @@ def test_colorbar_axes_parmeters():\n     fig.colorbar(im, ax=[_ax for _ax in ax])\n     fig.colorbar(im, ax=(ax[0], ax[1]))\n     fig.colorbar(im, ax={i: _ax for i, _ax in enumerate(ax)}.values())\n-    fig.draw_without_rendering()\n+    fig.draw_without_rendering()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}