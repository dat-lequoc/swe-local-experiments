diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..bb2a0981c 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -605,6 +605,33 @@ def set_location(node, lineno, col_offset):
     return node
 
 
+class ReplaceTargetTransformer(ast.NodeTransformer):
+    """Replace a target node with a new node in the AST."""
+    
+    def __init__(self, old_node, new_node):
+        self.old_node = old_node
+        self.new_node = new_node
+        
+    def visit_Name(self, node):
+        if (isinstance(self.old_node, ast.Name) and 
+            node.id == self.old_node.id):
+            return self.new_node
+        return node
+
+
+class ReplaceTargetTransformer(ast.NodeTransformer):
+    """Replace a target node with a new node in the AST."""
+    
+    def __init__(self, old_node, new_node):
+        self.old_node = old_node
+        self.new_node = new_node
+        
+    def visit_Name(self, node):
+        if (isinstance(self.old_node, ast.Name) and 
+            node.id == self.old_node.id):
+            return self.new_node
+        return node
+
 class AssertionRewriter(ast.NodeVisitor):
     """Assertion rewriting implementation.
 
@@ -1081,4 +1108,4 @@ warn_explicit(
             res = ast.BoolOp(ast.And(), load_names)
         else:
             res = load_names[0]
-        return res, self.explanation_param(self.pop_format_context(expl_call))
+        return res, self.explanation_param(self.pop_format_context(expl_call))
\ No newline at end of file
diff --git a/testing/test_all_any_assertion.py b/testing/test_all_any_assertion.py
new file mode 100644
index 000000000..150669958
--- /dev/null
+++ b/testing/test_all_any_assertion.py
@@ -0,0 +1,33 @@
+import pytest
+
+def is_even(n):
+    return n % 2 == 0
+
+def test_all_even_generator():
+    """Test all() with a generator expression."""
+    even_stevens = list(range(1, 100, 2))
+    with pytest.raises(AssertionError) as excinfo:
+        assert all(is_even(number) for number in even_stevens)
+    assert "1" in str(excinfo.value)  # Should show the failing value
+
+def test_all_even_list():
+    """Test all() with a list comprehension."""
+    even_stevens = list(range(1, 100, 2))
+    with pytest.raises(AssertionError) as excinfo:
+        assert all([is_even(number) for number in even_stevens])
+    assert "1" in str(excinfo.value)  # Should show the failing value
+
+def test_any_odd_generator():
+    """Test any() with a generator expression."""
+    even_numbers = list(range(0, 100, 2))
+    with pytest.raises(AssertionError) as excinfo:
+        assert any(not is_even(number) for number in even_numbers)
+    assert "0" in str(excinfo.value)  # Should show a failing value
+
+def test_empty_all():
+    """Test all() with empty iterable."""
+    assert all([])  # Should pass as per Python's behavior
+
+def test_empty_any():
+    """Test any() with empty iterable."""
+    assert not any([])  # Should pass as per Python's behavior
