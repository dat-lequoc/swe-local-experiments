{
  "instance_id": "django__django-12915",
  "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d8864ad..07067ce67d 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -1,6 +1,7 @@\n from urllib.parse import urlparse\n from urllib.request import url2pathname\n \n+from asgiref.sync import sync_to_async\n from django.conf import settings\n from django.contrib.staticfiles import utils\n from django.contrib.staticfiles.views import serve\n@@ -52,6 +53,12 @@ class StaticFilesHandlerMixin:\n         except Http404 as e:\n             return response_for_exception(request, e)\n \n+    async def get_response_async(self, request):\n+        try:\n+            return await sync_to_async(self.serve)(request)\n+        except Http404 as e:\n+            return await sync_to_async(response_for_exception)(request, e)\n+\n \n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n@@ -85,4 +92,4 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n\\ No newline at end of file\ndiff --git a/tests/staticfiles_tests/test_handlers.py b/tests/staticfiles_tests/test_handlers.py\nnew file mode 100644\nindex 0000000000..fecc41663e\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_handlers.py\n@@ -0,0 +1,36 @@\n+import asyncio\n+from unittest import mock\n+\n+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n+from django.core.handlers.asgi import ASGIHandler\n+from django.http import Http404\n+from django.test import SimpleTestCase, override_settings\n+\n+from .cases import StaticFilesTestCase\n+\n+\n+class TestASGIStaticFilesHandler(StaticFilesTestCase):\n+    @override_settings(MIDDLEWARE=[])\n+    async def test_get_response_async(self):\n+        \"\"\"\n+        ASGIStaticFilesHandler.get_response_async() works correctly.\n+        \"\"\"\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        request = mock.Mock()\n+        request.path = '/static/test.txt'\n+        request.COOKIES = {}\n+        request.META = {'CSRF_COOKIE': 'test-token'}\n+        \n+        # Test successful response\n+        with mock.patch.object(handler, 'serve') as serve_mock:\n+            serve_mock.return_value = mock.Mock(status_code=200)\n+            response = await handler.get_response_async(request)\n+            self.assertEqual(response.status_code, 200)\n+            serve_mock.assert_called_once_with(request)\n+\n+        # Test 404 response\n+        with mock.patch.object(handler, 'serve') as serve_mock:\n+            serve_mock.side_effect = Http404()\n+            response = await handler.get_response_async(request)\n+            self.assertEqual(response.status_code, 404)\n+            serve_mock.assert_called_once_with(request)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}