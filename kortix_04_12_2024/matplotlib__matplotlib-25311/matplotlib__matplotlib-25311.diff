diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..26abccdda0 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -33,6 +33,9 @@ from matplotlib.artist import Artist, allow_rasterization
 from matplotlib.cbook import silent_list
 from matplotlib.font_manager import FontProperties
 from matplotlib.lines import Line2D
+from matplotlib import patches as mpatches
+from matplotlib import patches as mpatches
+from matplotlib import patches as mpatches
 from matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,
                                 StepPatch)
 from matplotlib.collections import (
@@ -72,6 +75,101 @@ class DraggableLegend(DraggableOffsetBox):
         self._update = update
 
         super().__init__(legend, legend._legend_box, use_blit=use_blit)
+        
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {'legend': self.legend,
+                'use_blit': self._use_blit,
+                'update': self._update}
+        return state
+        
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        self.legend = state['legend']
+        self._use_blit = state['use_blit']
+        self._update = state['update']
+        
+        # Ensure legend is properly initialized
+        if not hasattr(self.legend, '_legend_box'):
+            handles = self.legend.legend_handles
+            labels = [t.get_text() for t in self.legend.texts]
+            self.legend._init_legend_box(handles, labels)
+            
+        # Reinitialize the parent class
+        super().__init__(self.legend, self.legend._legend_box,
+                        use_blit=self._use_blit)
+        
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {'legend': self.legend,
+                'use_blit': self._use_blit,
+                'update': self._update}
+        return state
+        
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        self.legend = state['legend']
+        self._use_blit = state['use_blit']
+        self._update = state['update']
+        
+        # Ensure legend is properly initialized
+        if not hasattr(self.legend, '_legend_box'):
+            handles = self.legend.legend_handles
+            labels = [t.get_text() for t in self.legend.texts]
+            self.legend._init_legend_box(handles, labels)
+            
+        # Reinitialize the parent class
+        super().__init__(self.legend, self.legend._legend_box,
+                        use_blit=self._use_blit)
+        # The canvas and event handlers will be reconnected when the figure is redrawn
+        
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {'legend': self.legend,
+                'use_blit': self._use_blit,
+                'update': self._update}
+        return state
+        
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        self.legend = state['legend']
+        self._use_blit = state['use_blit']
+        self._update = state['update']
+        
+        # Ensure legend is properly initialized
+        if not hasattr(self.legend, '_legend_box'):
+            handles = self.legend.legend_handles
+            labels = [t.get_text() for t in self.legend.texts]
+            self.legend._init_legend_box(handles, labels)
+            
+        # Reinitialize the parent class
+        super().__init__(self.legend, self.legend._legend_box,
+                        use_blit=self._use_blit)
+        # The canvas and event handlers will be reconnected when the figure is redrawn
+        
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {'legend': self.legend,
+                'use_blit': self._use_blit,
+                'update': self._update}
+        return state
+        
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        self.legend = state['legend']
+        self._use_blit = state['use_blit']
+        self._update = state['update']
+        
+        # Ensure legend is properly initialized
+        if not hasattr(self.legend, '_legend_box'):
+            handles = self.legend.legend_handles
+            labels = [t.get_text() for t in self.legend.texts]
+            self.legend._init_legend_box(handles, labels)
+            
+        # Reinitialize the parent class
+        super().__init__(self.legend, self.legend._legend_box,
+                        use_blit=self._use_blit)
+        # The canvas and event handlers will be reconnected when the figure is redrawn
 
     def finalize_offset(self):
         if self._update == "loc":
@@ -335,6 +433,386 @@ class Legend(Artist):
     codes = {'best': 0, **AnchoredOffsetbox.codes}
     zorder = 5
 
+    def get_markerfirst(self):
+        """Return whether marker is plotted first in legend."""
+        return getattr(self, '_markerfirst', True)
+
+    def set_markerfirst(self, first):
+        """Set whether marker is plotted first in legend."""
+        self._markerfirst = first
+        self.stale = True
+
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {
+            'parent': self.parent,
+            'handles': self.legend_handles,
+            'texts': [t.get_text() for t in self.texts],
+            '_loc': self._loc,
+            'numpoints': self.numpoints,
+            'markerscale': self.markerscale,
+            '_markerfirst': getattr(self, '_markerfirst', True),
+            'scatterpoints': self.scatterpoints,
+            'scatteryoffsets': self._scatteryoffsets,
+            'prop': self.prop,
+            'fontsize': self._fontsize,
+            'labelcolor': None,  # Will be restored from texts
+            'borderpad': self.borderpad,
+            'labelspacing': self.labelspacing,
+            'handlelength': self.handlelength,
+            'handleheight': self.handleheight,
+            'handletextpad': self.handletextpad,
+            'borderaxespad': self.borderaxespad,
+            'columnspacing': self.columnspacing,
+            'ncols': self._ncols,
+            'mode': self._mode,
+            'fancybox': isinstance(self.legendPatch.get_boxstyle(), mpatches.BoxStyle.Round) if hasattr(self, 'legendPatch') else False,
+            'shadow': self.shadow,
+            'title': self._legend_title_box._text.get_text() if self._legend_title_box else '',
+            'framealpha': self.get_frame().get_alpha(),
+            'edgecolor': self.get_frame().get_edgecolor(),
+            'facecolor': self.get_frame().get_facecolor(),
+            'bbox_to_anchor': self._bbox_to_anchor,
+            'bbox_transform': self.get_bbox_to_anchor()._transform,
+            'alignment': self._alignment,
+            'draggable': hasattr(self, '_draggable') and self._draggable is not None
+        }
+        return state
+
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        # Initialize with basic state
+        self.__init__(state['parent'], state['handles'], state['texts'],
+                     numpoints=state['numpoints'],
+                     markerscale=state['markerscale'],
+                     markerfirst=state['_markerfirst'],
+                     scatterpoints=state['scatterpoints'],
+                     scatteryoffsets=state['scatteryoffsets'],
+                     prop=state['prop'],
+                     fontsize=state['fontsize'],
+                     labelcolor=state['labelcolor'],
+                     borderpad=state['borderpad'],
+                     labelspacing=state['labelspacing'],
+                     handlelength=state['handlelength'],
+                     handleheight=state['handleheight'],
+                     handletextpad=state['handletextpad'],
+                     borderaxespad=state['borderaxespad'],
+                     columnspacing=state['columnspacing'],
+                     ncols=state['ncols'],
+                     mode=state['mode'],
+                     fancybox=state['fancybox'],
+                     shadow=state['shadow'],
+                     title=state['title'],
+                     framealpha=state['framealpha'],
+                     edgecolor=state['edgecolor'],
+                     facecolor=state['facecolor'],
+                     bbox_to_anchor=state['bbox_to_anchor'],
+                     bbox_transform=state['bbox_transform'],
+                     alignment=state['alignment'])
+
+        # Restore additional state
+        self._loc = state['_loc']
+        self._markerfirst = state['_markerfirst']
+        
+        # Ensure legend box is properly initialized
+        if not hasattr(self, '_legend_box'):
+            self._init_legend_box(state['handles'], state['texts'])
+        
+        # Restore figure reference
+        if hasattr(self.parent, 'figure'):
+            self.set_figure(self.parent.figure)
+        elif hasattr(self.parent, 'get_figure'):
+            self.set_figure(self.parent.get_figure())
+            
+        # Restore draggable state if needed
+        if state.get('draggable', False):
+            self.set_draggable(True)
+
+    def get_markerfirst(self):
+        """Return whether marker is plotted first in legend."""
+        return getattr(self, '_markerfirst', True)
+
+    def set_markerfirst(self, first):
+        """Set whether marker is plotted first in legend."""
+        self._markerfirst = first
+        self.stale = True
+
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {
+            'parent': self.parent,
+            'handles': self.legend_handles,
+            'texts': [t.get_text() for t in self.texts],
+            '_loc': self._loc,
+            'numpoints': self.numpoints,
+            'markerscale': self.markerscale,
+            '_markerfirst': getattr(self, '_markerfirst', True),
+            'scatterpoints': self.scatterpoints,
+            'scatteryoffsets': self._scatteryoffsets,
+            'prop': self.prop,
+            'fontsize': self._fontsize,
+            'labelcolor': None,  # Will be restored from texts
+            'borderpad': self.borderpad,
+            'labelspacing': self.labelspacing,
+            'handlelength': self.handlelength,
+            'handleheight': self.handleheight,
+            'handletextpad': self.handletextpad,
+            'borderaxespad': self.borderaxespad,
+            'columnspacing': self.columnspacing,
+            'ncols': self._ncols,
+            'mode': self._mode,
+            'fancybox': isinstance(self.legendPatch.get_boxstyle(), mpatches.BoxStyle.Round) if hasattr(self, 'legendPatch') else False,
+            'shadow': self.shadow,
+            'title': self._legend_title_box._text.get_text() if self._legend_title_box else '',
+            'framealpha': self.get_frame().get_alpha(),
+            'edgecolor': self.get_frame().get_edgecolor(),
+            'facecolor': self.get_frame().get_facecolor(),
+            'bbox_to_anchor': self._bbox_to_anchor,
+            'bbox_transform': self.get_bbox_to_anchor()._transform,
+            'alignment': self._alignment,
+            'draggable': hasattr(self, '_draggable') and self._draggable is not None
+        }
+        return state
+
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        # Initialize with basic state
+        self.__init__(state['parent'], state['handles'], state['texts'],
+                     numpoints=state['numpoints'],
+                     markerscale=state['markerscale'],
+                     markerfirst=state['_markerfirst'],
+                     scatterpoints=state['scatterpoints'],
+                     scatteryoffsets=state['scatteryoffsets'],
+                     prop=state['prop'],
+                     fontsize=state['fontsize'],
+                     labelcolor=state['labelcolor'],
+                     borderpad=state['borderpad'],
+                     labelspacing=state['labelspacing'],
+                     handlelength=state['handlelength'],
+                     handleheight=state['handleheight'],
+                     handletextpad=state['handletextpad'],
+                     borderaxespad=state['borderaxespad'],
+                     columnspacing=state['columnspacing'],
+                     ncols=state['ncols'],
+                     mode=state['mode'],
+                     fancybox=state['fancybox'],
+                     shadow=state['shadow'],
+                     title=state['title'],
+                     framealpha=state['framealpha'],
+                     edgecolor=state['edgecolor'],
+                     facecolor=state['facecolor'],
+                     bbox_to_anchor=state['bbox_to_anchor'],
+                     bbox_transform=state['bbox_transform'],
+                     alignment=state['alignment'])
+
+        # Restore additional state
+        self._loc = state['_loc']
+        self._markerfirst = state['_markerfirst']
+        
+        # Ensure legend box is properly initialized
+        if not hasattr(self, '_legend_box'):
+            self._init_legend_box(state['handles'], state['texts'])
+        
+        # Restore figure reference
+        if hasattr(self.parent, 'figure'):
+            self.set_figure(self.parent.figure)
+        elif hasattr(self.parent, 'get_figure'):
+            self.set_figure(self.parent.get_figure())
+            
+        # Restore draggable state if needed
+        if state.get('draggable', False):
+            self.set_draggable(True)
+
+    def get_markerfirst(self):
+        """Return whether marker is plotted first in legend."""
+        return getattr(self, '_markerfirst', True)
+
+    def set_markerfirst(self, first):
+        """Set whether marker is plotted first in legend."""
+        self._markerfirst = first
+        self.stale = True
+
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {
+            'parent': self.parent,
+            'handles': self.legend_handles,
+            'texts': [t.get_text() for t in self.texts],
+            '_loc': self._loc,
+            'numpoints': self.numpoints,
+            'markerscale': self.markerscale,
+            '_markerfirst': getattr(self, '_markerfirst', True),
+            'scatterpoints': self.scatterpoints,
+            'scatteryoffsets': self._scatteryoffsets,
+            'prop': self.prop,
+            'fontsize': self._fontsize,
+            'labelcolor': None,  # Will be restored from texts
+            'borderpad': self.borderpad,
+            'labelspacing': self.labelspacing,
+            'handlelength': self.handlelength,
+            'handleheight': self.handleheight,
+            'handletextpad': self.handletextpad,
+            'borderaxespad': self.borderaxespad,
+            'columnspacing': self.columnspacing,
+            'ncols': self._ncols,
+            'mode': self._mode,
+            'fancybox': isinstance(self.legendPatch.get_boxstyle(), mpatches.BoxStyle.Round) if hasattr(self, 'legendPatch') else False,
+            'shadow': self.shadow,
+            'title': self._legend_title_box._text.get_text() if self._legend_title_box else '',
+            'framealpha': self.get_frame().get_alpha(),
+            'edgecolor': self.get_frame().get_edgecolor(),
+            'facecolor': self.get_frame().get_facecolor(),
+            'bbox_to_anchor': self._bbox_to_anchor,
+            'bbox_transform': self.get_bbox_to_anchor()._transform,
+            'alignment': self._alignment,
+            'draggable': hasattr(self, '_draggable') and self._draggable is not None
+        }
+        return state
+
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        # Initialize with basic state
+        self.__init__(state['parent'], state['handles'], state['texts'],
+                     numpoints=state['numpoints'],
+                     markerscale=state['markerscale'],
+                     markerfirst=state['_markerfirst'],
+                     scatterpoints=state['scatterpoints'],
+                     scatteryoffsets=state['scatteryoffsets'],
+                     prop=state['prop'],
+                     fontsize=state['fontsize'],
+                     labelcolor=state['labelcolor'],
+                     borderpad=state['borderpad'],
+                     labelspacing=state['labelspacing'],
+                     handlelength=state['handlelength'],
+                     handleheight=state['handleheight'],
+                     handletextpad=state['handletextpad'],
+                     borderaxespad=state['borderaxespad'],
+                     columnspacing=state['columnspacing'],
+                     ncols=state['ncols'],
+                     mode=state['mode'],
+                     fancybox=state['fancybox'],
+                     shadow=state['shadow'],
+                     title=state['title'],
+                     framealpha=state['framealpha'],
+                     edgecolor=state['edgecolor'],
+                     facecolor=state['facecolor'],
+                     bbox_to_anchor=state['bbox_to_anchor'],
+                     bbox_transform=state['bbox_transform'],
+                     alignment=state['alignment'])
+
+        # Restore additional state
+        self._loc = state['_loc']
+        self._markerfirst = state['_markerfirst']
+        
+        # Ensure legend box is properly initialized
+        if not hasattr(self, '_legend_box'):
+            self._init_legend_box(state['handles'], state['texts'])
+        
+        # Restore figure reference
+        if hasattr(self.parent, 'figure'):
+            self.set_figure(self.parent.figure)
+        elif hasattr(self.parent, 'get_figure'):
+            self.set_figure(self.parent.get_figure())
+            
+        # Restore draggable state if needed
+        if state.get('draggable', False):
+            self.set_draggable(True)
+
+    def get_markerfirst(self):
+        """Return whether marker is plotted first in legend."""
+        return getattr(self, '_markerfirst', True)
+
+    def set_markerfirst(self, first):
+        """Set whether marker is plotted first in legend."""
+        self._markerfirst = first
+        self.stale = True
+
+    def __getstate__(self):
+        """Get picklable state."""
+        state = {
+            'parent': self.parent,
+            'handles': self.legend_handles,
+            'texts': [t.get_text() for t in self.texts],
+            '_loc': self._loc,
+            'numpoints': self.numpoints,
+            'markerscale': self.markerscale,
+            '_markerfirst': getattr(self, '_markerfirst', True),
+            'scatterpoints': self.scatterpoints,
+            'scatteryoffsets': self._scatteryoffsets,
+            'prop': self.prop,
+            'fontsize': self._fontsize,
+            'labelcolor': None,  # Will be restored from texts
+            'borderpad': self.borderpad,
+            'labelspacing': self.labelspacing,
+            'handlelength': self.handlelength,
+            'handleheight': self.handleheight,
+            'handletextpad': self.handletextpad,
+            'borderaxespad': self.borderaxespad,
+            'columnspacing': self.columnspacing,
+            'ncols': self._ncols,
+            'mode': self._mode,
+            'fancybox': isinstance(self.legendPatch.get_boxstyle(), mpatches.BoxStyle.Round) if hasattr(self, 'legendPatch') else False,
+            'shadow': self.shadow,
+            'title': self._legend_title_box._text.get_text() if self._legend_title_box else '',
+            'framealpha': self.get_frame().get_alpha(),
+            'edgecolor': self.get_frame().get_edgecolor(),
+            'facecolor': self.get_frame().get_facecolor(),
+            'bbox_to_anchor': self._bbox_to_anchor,
+            'bbox_transform': self.get_bbox_to_anchor()._transform,
+            'alignment': self._alignment,
+            'draggable': hasattr(self, '_draggable') and self._draggable is not None
+        }
+        return state
+
+    def __setstate__(self, state):
+        """Restore from pickled state."""
+        # Initialize with basic state
+        self.__init__(state['parent'], state['handles'], state['texts'],
+                     numpoints=state['numpoints'],
+                     markerscale=state['markerscale'],
+                     markerfirst=state['_markerfirst'],
+                     scatterpoints=state['scatterpoints'],
+                     scatteryoffsets=state['scatteryoffsets'],
+                     prop=state['prop'],
+                     fontsize=state['fontsize'],
+                     labelcolor=state['labelcolor'],
+                     borderpad=state['borderpad'],
+                     labelspacing=state['labelspacing'],
+                     handlelength=state['handlelength'],
+                     handleheight=state['handleheight'],
+                     handletextpad=state['handletextpad'],
+                     borderaxespad=state['borderaxespad'],
+                     columnspacing=state['columnspacing'],
+                     ncols=state['ncols'],
+                     mode=state['mode'],
+                     fancybox=state['fancybox'],
+                     shadow=state['shadow'],
+                     title=state['title'],
+                     framealpha=state['framealpha'],
+                     edgecolor=state['edgecolor'],
+                     facecolor=state['facecolor'],
+                     bbox_to_anchor=state['bbox_to_anchor'],
+                     bbox_transform=state['bbox_transform'],
+                     alignment=state['alignment'])
+
+        # Restore additional state
+        self._loc = state['_loc']
+        self._markerfirst = state['_markerfirst']
+        
+        # Ensure legend box is properly initialized
+        if not hasattr(self, '_legend_box'):
+            self._init_legend_box(state['handles'], state['texts'])
+        
+        # Restore figure reference
+        if hasattr(self.parent, 'figure'):
+            self.set_figure(self.parent.figure)
+        elif hasattr(self.parent, 'get_figure'):
+            self.set_figure(self.parent.get_figure())
+            
+        # Restore draggable state if needed
+        if state.get('draggable', False):
+            self.set_draggable(True)
+
     def __str__(self):
         return "Legend"
 
@@ -1352,4 +1830,4 @@ def _parse_legend_args(axs, *args, handles=None, labels=None, **kwargs):
     else:
         raise TypeError('Invalid arguments to legend.')
 
-    return handles, labels, extra_args, kwargs
+    return handles, labels, extra_args, kwargs
\ No newline at end of file
diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py
index ec6bdcc2fe..493efc079f 100644
--- a/lib/matplotlib/tests/test_pickle.py
+++ b/lib/matplotlib/tests/test_pickle.py
@@ -282,3 +282,29 @@ def test_dynamic_norm():
 def test_vertexselector():
     line, = plt.plot([0, 1], picker=True)
     pickle.loads(pickle.dumps(VertexSelector(line)))
+
+def test_draggable_legend():
+    """Test pickling of figure with draggable legend."""
+    fig, ax = plt.subplots()
+    ax.plot([1, 2, 3], label='test')
+    leg = ax.legend()
+    leg.set_draggable(True)
+    # Test pickling the figure
+    fig_unpickled = pickle.loads(pickle.dumps(fig))
+    # Verify the legend is still draggable
+    assert fig_unpickled.axes[0].get_legend().get_draggable()
+    plt.close(fig)
+    plt.close(fig_unpickled)
+
+def test_draggable_legend():
+    """Test pickling of figure with draggable legend."""
+    fig, ax = plt.subplots()
+    ax.plot([1, 2, 3], label='test')
+    leg = ax.legend()
+    leg.set_draggable(True)
+    # Test pickling the figure
+    fig_unpickled = pickle.loads(pickle.dumps(fig))
+    # Verify the legend is still draggable
+    assert fig_unpickled.axes[0].get_legend().get_draggable()
+    plt.close(fig)
+    plt.close(fig_unpickled)
\ No newline at end of file
