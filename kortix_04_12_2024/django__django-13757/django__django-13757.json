{
  "instance_id": "django__django-13757",
  "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..ccf5cb372f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,12 +368,20 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check if the key doesn't exist\n+        lhs, params, key_transforms = self.lhs.preprocess_lhs(compiler, connection)\n+        # Add paths directly into SQL because path expressions cannot be passed\n+        # as bind variables on Oracle\n+        json_path = compile_json_path(key_transforms)\n+        return \"NOT JSON_EXISTS(%s, '%s')\" % (lhs, json_path), params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check if the key doesn't exist using JSON_TYPE\n+        lhs, params, key_transforms = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        return \"JSON_TYPE(%s, %s) IS NULL\" % (lhs, '%s'), params + [json_path]\n \n \n class KeyTransformIn(lookups.In):\n@@ -523,4 +531,4 @@ class KeyTransformFactory:\n         self.key_name = key_name\n \n     def __call__(self, *args, **kwargs):\n-        return KeyTransform(self.key_name, *args, **kwargs)\n+        return KeyTransform(self.key_name, *args, **kwargs)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}