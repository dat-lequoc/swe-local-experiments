=== Evaluation for Instance django__django-12856 ===

=== Patch Application Output ===
APPLY_PATCH_PASS
/tmp/patch.diff:46: trailing whitespace.
        
Checking patch django/db/models/base.py...
Checking patch django/db/models/constraints.py...
Checking patch tests/model_validation/__init__.py...
/tmp/patch.diff:74: new blank line at EOF.
+
Checking patch tests/model_validation/models.py...
Checking patch tests/model_validation/test_unique_constraint.py...
Applied patch django/db/models/base.py cleanly.
Applied patch django/db/models/constraints.py cleanly.
Applied patch tests/model_validation/__init__.py cleanly.
Applied patch tests/model_validation/models.py cleanly.
Applied patch tests/model_validation/test_unique_constraint.py cleanly.
warning: 2 lines add whitespace errors.


=== Test Output ===
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=2
+++ CONDA_SHLVL=2
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_1=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_1=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=3
++ CONDA_SHLVL=3
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_2=/opt/miniconda3
++ CONDA_PREFIX_2=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
+ git show
+ git diff 8328811f048fed0dd22573224def8c65410c9f2e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=4
+++ CONDA_SHLVL=4
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_3=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_3=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''5'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_4='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''5'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_4='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=5
++ CONDA_SHLVL=5
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_4=/opt/miniconda3
++ CONDA_PREFIX_4=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 8328811f048fed0dd22573224def8c65410c9f2e tests/invalid_models_tests/test_models.py
Updated 0 paths from 760dc48546
+ git apply -v -
Checking patch tests/invalid_models_tests/test_models.py...
Applied patch tests/invalid_models_tests/test_models.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 invalid_models_tests.test_models
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
test_check_constraints (invalid_models_tests.test_models.ConstraintsTests) ... ERROR
test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests) ... ERROR
test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests) ... ok
test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests) ... ok
test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests) ... ok
test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests) ... FAIL
test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests) ... FAIL
test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests) ... FAIL
test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests) ... ok
test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests) ... ok
test_M2M_long_column_name (invalid_models_tests.test_models.FieldNamesTests) ... skipped "The database doesn't have a column name length limit."
test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests) ... ok
test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests) ... ok
test_including_separator (invalid_models_tests.test_models.FieldNamesTests) ... ok
test_local_field_long_column_name (invalid_models_tests.test_models.FieldNamesTests) ... skipped "The database doesn't have a column name length limit."
test_pk (invalid_models_tests.test_models.FieldNamesTests) ... ok
test_index_with_condition (invalid_models_tests.test_models.IndexesTests) ... ok
test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests) ... ok
test_max_name_length (invalid_models_tests.test_models.IndexesTests) ... ok
test_name_constraints (invalid_models_tests.test_models.IndexesTests) ... ok
test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests) ... ok
test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests) ... ok
test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests) ... ok
test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests) ... ok
test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests) ... ok
test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests) ... ok
test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests) ... ok
test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_non_list (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests) ... ok
test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests) ... ok
test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests) ... ok
test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests) ... ok
test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests) ... ok
test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests) ... ok
test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests) ... ok
test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests) ... ok
test_non_valid (invalid_models_tests.test_models.OtherModelTests) ... ok
test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests) ... ok
test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests) ... ok
test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests) ... ok
test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests) ... ok
test_single_primary_key (invalid_models_tests.test_models.OtherModelTests) ... ok
test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests) ... ok
test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests) ... ok
test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests) ... ok
test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests) ... ok
test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests) ... ok
test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests) ... ok
test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests) ... ok
test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests) ... ok
test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests) ... ok
test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests) ... ok
test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_non_list (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests) ... ok
test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests) ... ok

======================================================================
ERROR: test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/invalid_models_tests/test_models.py", line 1395, in test_check_constraints
    errors = Model.check(databases=self.databases)
  File "/testbed/django/db/models/base.py", line 1287, in check
    errors.extend(constraint.check(cls))
TypeError: 'Q' object is not callable

======================================================================
ERROR: test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/invalid_models_tests/test_models.py", line 1415, in test_check_constraints_required_db_features
    self.assertEqual(Model.check(databases=self.databases), [])
  File "/testbed/django/db/models/base.py", line 1287, in check
    errors.extend(constraint.check(cls))
TypeError: 'Q' object is not callable

======================================================================
FAIL: test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/invalid_models_tests/test_models.py", line 1531, in test_unique_constraint_pointing_to_m2m_field
    id='models.E013',
AssertionError: Lists differ: [] != [<Error: level=40, msg="'constraints' refe[239 chars]13'>]

Second list contains 1 additional elements.
First extra element 0:
<Error: level=40, msg="'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.", hint=None, obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_m2m_field.<locals>.Model'>, id='models.E013'>

- []
+ [<Error: level=40, msg="'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.", hint=None, obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_m2m_field.<locals>.Model'>, id='models.E013'>]

======================================================================
FAIL: test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/invalid_models_tests/test_models.py", line 1515, in test_unique_constraint_pointing_to_missing_field
    id='models.E012',
AssertionError: Lists differ: [<Err[14 chars]msg="The field 'missing_field' was declared fo[203 chars]12'>] != [<Err[14 chars]msg="'constraints' refers to the nonexistent f[177 chars]12'>]

First differing element 0:
<Erro[13 chars]msg="The field 'missing_field' was declared fo[202 chars]012'>
<Erro[13 chars]msg="'constraints' refers to the nonexistent f[176 chars]012'>

- [<Error: level=40, msg="The field 'missing_field' was declared for unique constraint name, but it doesn't exist.", hint=None, obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_missing_field.<locals>.Model'>, id='models.E012'>]
+ [<Error: level=40, msg="'constraints' refers to the nonexistent field 'missing_field'.", hint=None, obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_missing_field.<locals>.Model'>, id='models.E012'>]

======================================================================
FAIL: test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/invalid_models_tests/test_models.py", line 1553, in test_unique_constraint_pointing_to_non_local_field
    id='models.E016',
AssertionError: Lists differ: [] != [<Error: level=40, msg="'constraints' refe[265 chars]16'>]

Second list contains 1 additional elements.
First extra element 0:
<Error: level=40, msg="'constraints' refers to field 'field1' which is not local to model 'Child'.", hint='This issue may be caused by multi-table inheritance.', obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_non_local_field.<locals>.Child'>, id='models.E016'>

- []
+ [<Error: level=40, msg="'constraints' refers to field 'field1' which is not local to model 'Child'.", hint='This issue may be caused by multi-table inheritance.', obj=<class 'invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_non_local_field.<locals>.Child'>, id='models.E016'>]

----------------------------------------------------------------------
Ran 83 tests in 0.127s

FAILED (failures=3, errors=2, skipped=2)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
+ git checkout 8328811f048fed0dd22573224def8c65410c9f2e tests/invalid_models_tests/test_models.py
Updated 1 path from 760dc48546
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/base.py
	modified:   django/db/models/constraints.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	tests/model_validation/

no changes added to commit (use "git add" and/or "git commit -a")
commit 8328811f048fed0dd22573224def8c65410c9f2e
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Wed May 20 09:18:19 2020 +0200

    Refs #31607 -- Added release notes for a125da6a7c79b1d4c55677d0bed6f9b1d7d77353.

diff --git a/docs/releases/3.0.7.txt b/docs/releases/3.0.7.txt
index def27a49ec..38e0233460 100644
--- a/docs/releases/3.0.7.txt
+++ b/docs/releases/3.0.7.txt
@@ -22,3 +22,6 @@ Bugfixes
 * Fixed a regression in Django 3.0 where ``QuerySet.values()`` and
   ``values_list()`` crashed if a queryset contained an aggregation and an
   ``Exists()`` annotation on Oracle (:ticket:`31584`).
+
+* Fixed a regression in Django 3.0 where all resolved ``Subquery()``
+  expressions were considered equal (:ticket:`31607`).
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7bb3fa4706..a219a3b23d 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1281,6 +1281,10 @@ class Model(metaclass=ModelBase):
                 *cls._check_ordering(),
                 *cls._check_constraints(databases),
             ]
+            # Check constraints
+            for constraint in cls._meta.constraints:
+                if hasattr(constraint, 'check'):
+                    errors.extend(constraint.check(cls))
 
         return errors
 
@@ -1979,4 +1983,4 @@ def model_unpickle(model_id):
     return model.__new__(model)
 
 
-model_unpickle.__safe_for_unpickle__ = True
+model_unpickle.__safe_for_unpickle__ = True
\ No newline at end of file
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..8bf84c2d15 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -1,5 +1,6 @@
 from enum import Enum
 
+from django.core import checks
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
 
@@ -95,6 +96,28 @@ class UniqueConstraint(BaseConstraint):
         self.deferrable = deferrable
         super().__init__(name)
 
+    def check(self, model):
+        errors = []
+        available_fields = {
+            f.name: f for f in model._meta.get_fields()
+        }
+        available_attnames = {
+            f.attname: f for f in model._meta.get_fields()
+            if hasattr(f, 'attname')
+        }
+        
+        for field_name in self.fields:
+            if field_name not in available_fields and field_name not in available_attnames:
+                errors.append(
+                    checks.Error(
+                        "The field '%s' was declared for unique constraint %s, "
+                        "but it doesn't exist." % (field_name, self.name),
+                        obj=model,
+                        id='models.E012',
+                    )
+                )
+        return errors
+
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
             return None
@@ -150,4 +173,4 @@ class UniqueConstraint(BaseConstraint):
             kwargs['condition'] = self.condition
         if self.deferrable:
             kwargs['deferrable'] = self.deferrable
-        return path, args, kwargs
+        return path, args, kwargs
\ No newline at end of file
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
Testing against Django installed in '/testbed/django'
Importing application invalid_models_tests
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, invalid_models_tests, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, invalid_models_tests, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).


