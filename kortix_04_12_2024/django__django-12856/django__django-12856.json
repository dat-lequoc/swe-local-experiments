{
  "instance_id": "django__django-12856",
  "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7bb3fa4706..a219a3b23d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1281,6 +1281,10 @@ class Model(metaclass=ModelBase):\n                 *cls._check_ordering(),\n                 *cls._check_constraints(databases),\n             ]\n+            # Check constraints\n+            for constraint in cls._meta.constraints:\n+                if hasattr(constraint, 'check'):\n+                    errors.extend(constraint.check(cls))\n \n         return errors\n \n@@ -1979,4 +1983,4 @@ def model_unpickle(model_id):\n     return model.__new__(model)\n \n \n-model_unpickle.__safe_for_unpickle__ = True\n+model_unpickle.__safe_for_unpickle__ = True\n\\ No newline at end of file\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 64bd60484e..8bf84c2d15 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -1,5 +1,6 @@\n from enum import Enum\n \n+from django.core import checks\n from django.db.models.query_utils import Q\n from django.db.models.sql.query import Query\n \n@@ -95,6 +96,28 @@ class UniqueConstraint(BaseConstraint):\n         self.deferrable = deferrable\n         super().__init__(name)\n \n+    def check(self, model):\n+        errors = []\n+        available_fields = {\n+            f.name: f for f in model._meta.get_fields()\n+        }\n+        available_attnames = {\n+            f.attname: f for f in model._meta.get_fields()\n+            if hasattr(f, 'attname')\n+        }\n+        \n+        for field_name in self.fields:\n+            if field_name not in available_fields and field_name not in available_attnames:\n+                errors.append(\n+                    checks.Error(\n+                        \"The field '%s' was declared for unique constraint %s, \"\n+                        \"but it doesn't exist.\" % (field_name, self.name),\n+                        obj=model,\n+                        id='models.E012',\n+                    )\n+                )\n+        return errors\n+\n     def _get_condition_sql(self, model, schema_editor):\n         if self.condition is None:\n             return None\n@@ -150,4 +173,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n\\ No newline at end of file\ndiff --git a/tests/model_validation/__init__.py b/tests/model_validation/__init__.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/tests/model_validation/__init__.py\n@@ -0,0 +1 @@\n+\ndiff --git a/tests/model_validation/models.py b/tests/model_validation/models.py\nnew file mode 100644\nindex 0000000000..b0d46649ba\n--- /dev/null\n+++ b/tests/model_validation/models.py\n@@ -0,0 +1,3 @@\n+from django.db import models\n+\n+# Empty models file for test isolation\ndiff --git a/tests/model_validation/test_unique_constraint.py b/tests/model_validation/test_unique_constraint.py\nnew file mode 100644\nindex 0000000000..174d503363\n--- /dev/null\n+++ b/tests/model_validation/test_unique_constraint.py\n@@ -0,0 +1,44 @@\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+class UniqueConstraintTests(SimpleTestCase):\n+    @isolate_apps('model_validation')\n+    def test_field_not_found(self):\n+        class ModelWithMissingField(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['missing_field'],\n+                        name='unique_missing_field',\n+                    ),\n+                ]\n+\n+        errors = ModelWithMissingField.check()\n+        expected = [\n+            checks.Error(\n+                \"The field 'missing_field' was declared for unique constraint \"\n+                \"unique_missing_field, but it doesn't exist.\",\n+                obj=ModelWithMissingField,\n+                id='models.E012',\n+            ),\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_field_exists(self):\n+        class ModelWithField(models.Model):\n+            field = models.CharField(max_length=100)\n+\n+            class Meta:\n+                app_label = 'model_validation'\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['field'],\n+                        name='unique_field',\n+                    ),\n+                ]\n+\n+        self.assertEqual(ModelWithField.check(), [])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}