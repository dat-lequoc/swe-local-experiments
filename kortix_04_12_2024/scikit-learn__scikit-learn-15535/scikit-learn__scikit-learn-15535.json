{
  "instance_id": "scikit-learn__scikit-learn-15535",
  "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..86d1fb8f8 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n@@ -966,4 +966,4 @@ def entropy(labels):\n     pi_sum = np.sum(pi)\n     # log(a / b) should be calculated as log(a) - log(b) for\n     # possible loss of precision\n-    return -np.sum((pi / pi_sum) * (np.log(pi) - log(pi_sum)))\n+    return -np.sum((pi / pi_sum) * (np.log(pi) - log(pi_sum)))\n\\ No newline at end of file\ndiff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex d2d2dd6fa..7988777fc 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -256,6 +256,23 @@ def test_contingency_matrix():\n     assert_array_almost_equal(C, C2 + .1)\n \n \n+def test_mutual_info_score_string_labels():\n+    # Test mutual_info_score with string labels, including object arrays\n+    x = np.array(['a', 'b', 'a', 'c', 'b', 'c']).astype(object)\n+    y = np.array(['a', 'b', 'a', 'c', 'b', 'c']).astype(object)\n+    assert_almost_equal(mutual_info_score(x, y), 1.0)\n+    \n+    # Test with regular string arrays\n+    x2 = np.array(['a', 'b', 'a', 'c', 'b', 'c'])\n+    y2 = np.array(['a', 'b', 'a', 'c', 'b', 'c'])\n+    assert_almost_equal(mutual_info_score(x2, y2), 1.0)\n+    \n+    # Test with mixed labels\n+    x3 = np.array(['a', 'b', 'a', 'c', 'b', 'c'])\n+    y3 = np.array([1, 2, 1, 3, 2, 3])\n+    score = mutual_info_score(x3, y3)\n+    assert_almost_equal(score, 1.0)\n+\n def test_contingency_matrix_sparse():\n     labels_a = np.array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3])\n     labels_b = np.array([1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 2])\n@@ -336,4 +353,4 @@ def test_fowlkes_mallows_score_properties():\n \n     # symmetric and permutation(both together)\n     score_both = fowlkes_mallows_score(labels_b, (labels_a + 2) % 3)\n-    assert_almost_equal(score_both, expected)\n+    assert_almost_equal(score_both, expected)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}