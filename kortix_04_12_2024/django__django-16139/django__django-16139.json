{
  "instance_id": "django__django-16139",
  "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..c7043c6adb 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n@@ -482,4 +482,4 @@ class AdminPasswordChangeForm(forms.Form):\n         for name in self.fields:\n             if name not in data:\n                 return []\n-        return [\"password\"]\n+        return [\"password\"]\n\\ No newline at end of file\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 3bacd7a9fb..5e713c6748 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -802,6 +802,12 @@ class PasswordChangeFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.cleaned_data[\"new_password1\"], data[\"new_password1\"])\n         self.assertEqual(form.cleaned_data[\"new_password2\"], data[\"new_password2\"])\n \n+    def test_password_help_text_with_to_field(self):\n+        \"\"\"Password help text link is correct when accessed via to_field.\"\"\"\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        self.assertIn(f\"../../{user.pk}/password/\", form.fields['password'].help_text)\n+\n     def test_html_autocomplete_attributes(self):\n         user = User.objects.get(username=\"testclient\")\n         form = PasswordChangeForm(user)\n@@ -1281,4 +1287,4 @@ class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n             with self.subTest(field_name=field_name, autocomplete=autocomplete):\n                 self.assertEqual(\n                     form.fields[field_name].widget.attrs[\"autocomplete\"], autocomplete\n-                )\n+                )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}