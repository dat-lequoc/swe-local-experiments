diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..47bb715716 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -1025,6 +1025,29 @@ def _print_Tuple(self, e):
         mrow.appendChild(x)
         return mrow
 
+    def _print_Indexed(self, e):
+        """Handles printing of indexed objects in Presentation MathML."""
+        mrow = self.dom.createElement('mrow')
+        if len(e.indices) == 1:
+            msub = self.dom.createElement('msub')
+            msub.appendChild(self._print(e.base))
+            msub.appendChild(self._print(e.indices[0]))
+            mrow.appendChild(msub)
+        else:
+            msubsup = self.dom.createElement('msubsup')
+            msubsup.appendChild(self._print(e.base))
+            # Create a mrow for multiple indices
+            indices_row = self.dom.createElement('mrow')
+            for i, index in enumerate(e.indices):
+                if i > 0:
+                    comma = self.dom.createElement('mo')
+                    comma.appendChild(self.dom.createTextNode(','))
+                    indices_row.appendChild(comma)
+                indices_row.appendChild(self._print(index))
+            msubsup.appendChild(indices_row)
+            mrow.appendChild(msubsup)
+        return mrow
+
     def _print_Interval(self, i):
         mrow = self.dom.createElement('mrow')
         brac = self.dom.createElement('mfenced')
@@ -1318,4 +1341,4 @@ def print_mathml(expr, printer='content', **settings):
     print(pretty_xml)
 
 #For backward compatibility
-MathMLPrinter = MathMLContentPrinter
+MathMLPrinter = MathMLContentPrinter
\ No newline at end of file
diff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py
index 74e09fb2b5..f9cc8a1832 100644
--- a/sympy/printing/tests/test_mathml.py
+++ b/sympy/printing/tests/test_mathml.py
@@ -1,4 +1,4 @@
-from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, \
+from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, IndexedBase, \
     tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh, E, I, oo, \
     pi, GoldenRatio, EulerGamma, Sum, Eq, Ne, Ge, Lt, Float, Matrix, Basic, S, \
     MatrixSymbol, Function, Derivative, log, Lambda
@@ -383,6 +383,20 @@ def test_content_symbol():
     del mml
 
 
+def test_content_mathml_indexed():
+    # Test indexed objects in content MathML
+    x = Symbol('x')
+    A = IndexedBase('A')
+    assert mathml(A[x]) == '<apply><selector/><ci>A</ci><ci>x</ci></apply>'
+    assert mathml(A[1,2]) == '<apply><selector/><ci>A</ci><cn>1</cn><cn>2</cn></apply>'
+
+def test_presentation_mathml_indexed():
+    # Test indexed objects in presentation MathML
+    x = Symbol('x')
+    A = IndexedBase('A')
+    assert mathml(A[x], printer='presentation') == '<mrow><msub><mi>A</mi><mi>x</mi></msub></mrow>'
+    assert mathml(A[1,2], printer='presentation') == '<mrow><msubsup><mi>A</mi><mrow><mn>1</mn><mo>,</mo><mn>2</mn></mrow></msubsup></mrow>'
+
 def test_content_mathml_greek():
     mml = mp._print(Symbol('alpha'))
     assert mml.nodeName == 'ci'
@@ -1138,4 +1152,4 @@ def test_print_matrix_symbol():
 def test_print_random_symbol():
     R = RandomSymbol(Symbol('R'))
     assert mpp.doprint(R) == '<mi>R</mi>'
-    assert mp.doprint(R) == '<ci>R</ci>'
+    assert mp.doprint(R) == '<ci>R</ci>'
\ No newline at end of file
diff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py
index b07f91c6ff..2aa4d12b04 100644
--- a/sympy/utilities/pytest.py
+++ b/sympy/utilities/pytest.py
@@ -197,7 +197,7 @@ def warns(warningcls, **kwargs):
 
 
 else:
-    XFAIL = py.test.mark.xfail
+    XFAIL = pytest.mark.xfail
     slow = py.test.mark.slow
 
     def SKIP(reason):
@@ -281,4 +281,4 @@ def ignore_warnings(warningcls):
     # Reissue any warnings that we aren't testing for
     for w in warnrec:
         if not issubclass(w.category, warningcls):
-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
\ No newline at end of file
