{
  "patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -120,6 +120,16 @@ def as_variable(obj, name=None) -> \"Union[Variable, IndexVariable]\":\n     if isinstance(obj, Variable):\n         obj = obj.copy(deep=False)\n     elif isinstance(obj, tuple):\n+        if isinstance(obj[1], DataArray):\n+            # TODO: change into TypeError\n+            warnings.warn(\n+                (\n+                    \"Using a DataArray object to construct a variable is\"\n+                    \" ambiguous, please extract the data using the .data property.\"\n+                    \" This will raise a TypeError in 0.19.0.\"\n+                ),\n+                DeprecationWarning,\n+            )\n         try:\n             obj = Variable(*obj)\n         except (TypeError, ValueError) as error:\n",
  "test_patch": "diff --git a/xarray/tests/test_dask.py b/xarray/tests/test_dask.py\n--- a/xarray/tests/test_dask.py\n+++ b/xarray/tests/test_dask.py\n@@ -1233,7 +1233,7 @@ def test_map_blocks_to_array(map_ds):\n         lambda x: x.drop_vars(\"x\"),\n         lambda x: x.expand_dims(k=[1, 2, 3]),\n         lambda x: x.expand_dims(k=3),\n-        lambda x: x.assign_coords(new_coord=(\"y\", x.y * 2)),\n+        lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n         lambda x: x.astype(np.int32),\n         lambda x: x.x,\n     ],\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -4959,13 +4959,13 @@ def test_reduce_keepdims(self):\n         # Coordinates involved in the reduction should be removed\n         actual = ds.mean(keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True))}, coords={\"c\": ds.c}\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True).data)}, coords={\"c\": ds.c}\n         )\n         assert_identical(expected, actual)\n \n         actual = ds.mean(\"x\", keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True))},\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True).data)},\n             coords={\"y\": ds.y, \"c\": ds.c},\n         )\n         assert_identical(expected, actual)\ndiff --git a/xarray/tests/test_interp.py b/xarray/tests/test_interp.py\n--- a/xarray/tests/test_interp.py\n+++ b/xarray/tests/test_interp.py\n@@ -190,7 +190,7 @@ def func(obj, dim, new_x):\n             \"w\": xdest[\"w\"],\n             \"z2\": xdest[\"z2\"],\n             \"y\": da[\"y\"],\n-            \"x\": ((\"z\", \"w\"), xdest),\n+            \"x\": ((\"z\", \"w\"), xdest.data),\n             \"x2\": ((\"z\", \"w\"), func(da[\"x2\"], \"x\", xdest)),\n         },\n     )\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -8,7 +8,7 @@\n import pytest\n import pytz\n \n-from xarray import Coordinate, Dataset, IndexVariable, Variable, set_options\n+from xarray import Coordinate, DataArray, Dataset, IndexVariable, Variable, set_options\n from xarray.core import dtypes, duck_array_ops, indexing\n from xarray.core.common import full_like, ones_like, zeros_like\n from xarray.core.indexing import (\n@@ -1081,6 +1081,9 @@ def test_as_variable(self):\n         td = np.array([timedelta(days=x) for x in range(10)])\n         assert as_variable(td, \"time\").dtype.kind == \"m\"\n \n+        with pytest.warns(DeprecationWarning):\n+            as_variable((\"x\", DataArray([])))\n+\n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         expected = dedent(\n"
}