{
  "instance_id": "django__django-16820",
  "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..a1a161b0bc 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -647,6 +647,27 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        # Handle consecutive AlterIndexTogether operations\n+        if isinstance(operation, AlterIndexTogether) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        \n+        # Convert index_together to AddIndex operations\n+        if self.option_value:\n+            indexes = []\n+            for fields in self.option_value:\n+                index_name = f\"{self.name_lower}_{'_'.join(fields)}_idx\"\n+                indexes.append(\n+                    AddIndex(\n+                        self.name,\n+                        models.Index(fields=list(fields), name=index_name)\n+                    )\n+                )\n+            return indexes\n+        \n+        # Let parent handle other cases\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -1139,4 +1160,4 @@ class RemoveConstraint(IndexOperation):\n \n     @property\n     def migration_name_fragment(self):\n-        return \"remove_%s_%s\" % (self.model_name_lower, self.name.lower())\n+        return \"remove_%s_%s\" % (self.model_name_lower, self.name.lower())\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 2f6616ad5b..9992ef9e91 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -254,6 +254,32 @@ class OptimizerTests(SimpleTestCase):\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"c\"]]),\n         )\n \n+    def test_index_together_to_indexes_conversion(self):\n+        \"\"\"\n+        AlterIndexTogether should be converted to AddIndex operations during optimization.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"b\"], [\"c\", \"d\"]]),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Foo\",\n+                    models.Index(fields=[\"a\", \"b\"], name=\"foo_a_b_idx\"),\n+                ),\n+                migrations.AddIndex(\n+                    \"Foo\",\n+                    models.Index(fields=[\"c\", \"d\"], name=\"foo_c_d_idx\"),\n+                ),\n+            ],\n+        )\n+\n+        # Empty index_together should optimize to empty list\n+        self.assertOptimizesTo(\n+            [migrations.AlterIndexTogether(\"Foo\", set())],\n+            [],\n+        )\n+\n     def test_alter_alter_owrt_model(self):\n         self._test_alter_alter(\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\"),\n@@ -1171,4 +1197,4 @@ class OptimizerTests(SimpleTestCase):\n                 migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n             ],\n             [],\n-        )\n+        )\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_settings.py b/tests/migrations/test_settings.py\nnew file mode 100644\nindex 0000000000..43f6913ffa\n--- /dev/null\n+++ b/tests/migrations/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy'\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..43f6913ffa\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy'\n",
  "model_name_or_path": "KortixAI"
}