diff --git a/pylint/config/option.py b/pylint/config/option.py
index 5043fe765..64091042c 100644
--- a/pylint/config/option.py
+++ b/pylint/config/option.py
@@ -21,9 +21,24 @@ def _csv_validator(_, name, value):
 
 # pylint: disable=unused-argument
 def _regexp_validator(_, name, value):
+    """Validate a regexp pattern, with support for Unicode properties via the regex module."""
     if hasattr(value, "pattern"):
         return value
-    return re.compile(value)
+    
+    if r"\p{" in value:
+        try:
+            import regex
+            return regex.compile(value)
+        except ImportError:
+            raise optparse.OptionValueError(
+                "Unicode properties require the 'regex' module"
+            )
+        except regex.error as exc:
+            raise sre_constants.error(str(exc), exc.pos) from exc
+    try:
+        return re.compile(value)
+    except re.error as exc:
+        raise
 
 
 # pylint: disable=unused-argument
@@ -215,4 +230,4 @@ class Option(optparse.Option):
         # And then take whatever action is expected of us.
         # This is a separate method to make life easier for
         # subclasses to add new actions.
-        return self.take_action(self.action, self.dest, opt, value, values, parser)
+        return self.take_action(self.action, self.dest, opt, value, values, parser)
\ No newline at end of file
diff --git a/tests/config/test_unicode_property_config.py b/tests/config/test_unicode_property_config.py
new file mode 100644
index 000000000..cbdff8371
--- /dev/null
+++ b/tests/config/test_unicode_property_config.py
@@ -0,0 +1,25 @@
+"""Tests for Unicode property support in configuration."""
+import pytest
+
+from pylint.config import option
+
+def test_regexp_validator_unicode_property():
+    """Test that the regexp validator supports Unicode properties."""
+    try:
+        import regex  # pylint: disable=unused-import
+        has_regex = True
+    except ImportError:
+        has_regex = False
+
+    if has_regex:
+        result = option._regexp_validator(None, None, r"[\p{Han}a-z]+")
+        assert result is not None
+    else:
+        with pytest.raises(Exception) as excinfo:
+            option._regexp_validator(None, None, r"[\p{Han}a-z]+")
+        assert "Unicode properties require the 'regex' module" in str(excinfo.value)
+
+def test_regexp_validator_fallback():
+    """Test that the regexp validator falls back to re for simple patterns."""
+    result = option._regexp_validator(None, None, r"[a-z]+")
+    assert result is not None
