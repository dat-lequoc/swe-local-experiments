{
  "instance_id": "sympy__sympy-15011",
  "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..663fe3285e 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,7 +707,7 @@ def _preprocess(self, args, expr):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n@@ -725,11 +725,12 @@ def _preprocess(self, args, expr):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n-                    dummy = Dummy()\n+                    dummy = Dummy() if isinstance(arg, Symbol) else \\\n+                           MatrixSymbol(Dummy().name, *arg.shape)\n                     argstrs.append(self._argrepr(dummy))\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n@@ -930,4 +931,4 @@ def implemented_function(symfunc, implementation):\n     elif not isinstance(symfunc, UndefinedFunction):\n         raise ValueError('symfunc should be either a string or'\n                          ' an UndefinedFunction instance.')\n-    return symfunc\n+    return symfunc\n\\ No newline at end of file\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 149a7e3136..34a1330c50 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -884,6 +884,12 @@ def test_lambdify_inspect():\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n+def test_matrix_symbol_special_name():\n+    from sympy import MatrixSymbol\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    f = lambdify(curlyv, curlyv, dummify=True)\n+    assert isinstance(f, type(lambda: None))\n+\n def test_issue_14941():\n     x, y = Dummy(), Dummy()\n \n@@ -897,4 +903,4 @@ def test_issue_14941():\n \n     # test list\n     f3 = lambdify([x, y], [y, x], 'sympy')\n-    assert f3(2, 3) == [3, 2]\n+    assert f3(2, 3) == [3, 2]\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}