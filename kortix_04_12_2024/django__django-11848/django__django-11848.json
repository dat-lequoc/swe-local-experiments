{
  "instance_id": "django__django-11848",
  "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..dfcc9933e2 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,12 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            candidate_year = current_century + year\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n@@ -471,4 +473,4 @@ def escape_leading_slashes(url):\n     \"\"\"\n     if url.startswith('//'):\n         url = '/%2F{}'.format(url[2:])\n-    return url\n+    return url\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex bc8bcfe977..a60bbbe802 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -312,6 +312,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n+    def test_rfc850_two_digit_year(self):\n+        \"\"\"\n+        RFC850 two-digit years are interpreted according to RFC 7231:\n+        If the year appears to be more than 50 years in the future,\n+        it's interpreted as the most recent matching year in the past.\n+        \"\"\"\n+        current_year = datetime.now().year\n+        current_yy = current_year % 100\n+        tests = [\n+            # Test years that should be interpreted in the current century\n+            (current_yy - 1, current_year - 1),  # Last year\n+            (current_yy, current_year),          # Current year\n+            (current_yy + 1, current_year + 1),  # Next year\n+            # Test years that should be interpreted in the previous century\n+            ((current_yy + 51) % 100, current_year - 49),  # 51 years future -> 49 years past\n+        ]\n+        for two_digit, expected_year in tests:\n+            date_str = 'Sunday, %02d-Nov-%02d 08:49:37 GMT' % (6, two_digit)\n+            timestamp = parse_http_date(date_str)\n+            dt = datetime.utcfromtimestamp(timestamp)\n+            self.assertEqual(dt.year, expected_year)\n+\n     def test_parsing_rfc1123(self):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n@@ -337,4 +359,4 @@ class EscapeLeadingSlashesTests(unittest.TestCase):\n         )\n         for url, expected in tests:\n             with self.subTest(url=url):\n-                self.assertEqual(escape_leading_slashes(url), expected)\n+                self.assertEqual(escape_leading_slashes(url), expected)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}