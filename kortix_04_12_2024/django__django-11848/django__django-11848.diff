diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..dfcc9933e2 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -176,10 +176,12 @@ def parse_http_date(date):
     try:
         year = int(m.group('year'))
         if year < 100:
-            if year < 70:
-                year += 2000
-            else:
-                year += 1900
+            current_year = datetime.datetime.now().year
+            current_century = current_year // 100 * 100
+            candidate_year = current_century + year
+            if candidate_year - current_year > 50:
+                candidate_year -= 100
+            year = candidate_year
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
@@ -471,4 +473,4 @@ def escape_leading_slashes(url):
     """
     if url.startswith('//'):
         url = '/%2F{}'.format(url[2:])
-    return url
+    return url
\ No newline at end of file
diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py
index bc8bcfe977..a60bbbe802 100644
--- a/tests/utils_tests/test_http.py
+++ b/tests/utils_tests/test_http.py
@@ -312,6 +312,28 @@ class HttpDateProcessingTests(unittest.TestCase):
         t = 1167616461.0
         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')
 
+    def test_rfc850_two_digit_year(self):
+        """
+        RFC850 two-digit years are interpreted according to RFC 7231:
+        If the year appears to be more than 50 years in the future,
+        it's interpreted as the most recent matching year in the past.
+        """
+        current_year = datetime.now().year
+        current_yy = current_year % 100
+        tests = [
+            # Test years that should be interpreted in the current century
+            (current_yy - 1, current_year - 1),  # Last year
+            (current_yy, current_year),          # Current year
+            (current_yy + 1, current_year + 1),  # Next year
+            # Test years that should be interpreted in the previous century
+            ((current_yy + 51) % 100, current_year - 49),  # 51 years future -> 49 years past
+        ]
+        for two_digit, expected_year in tests:
+            date_str = 'Sunday, %02d-Nov-%02d 08:49:37 GMT' % (6, two_digit)
+            timestamp = parse_http_date(date_str)
+            dt = datetime.utcfromtimestamp(timestamp)
+            self.assertEqual(dt.year, expected_year)
+
     def test_parsing_rfc1123(self):
         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')
         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))
@@ -337,4 +359,4 @@ class EscapeLeadingSlashesTests(unittest.TestCase):
         )
         for url, expected in tests:
             with self.subTest(url=url):
-                self.assertEqual(escape_leading_slashes(url), expected)
+                self.assertEqual(escape_leading_slashes(url), expected)
\ No newline at end of file
