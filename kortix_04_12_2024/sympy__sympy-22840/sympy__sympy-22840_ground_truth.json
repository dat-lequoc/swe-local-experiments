{
  "patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -567,6 +567,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n         Substitutions containing any Symbol from ``ignore`` will be ignored.\n     \"\"\"\n     from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd\n+    from sympy.matrices.expressions.matexpr import MatrixElement\n     from sympy.polys.rootoftools import RootOf\n \n     if opt_subs is None:\n@@ -586,7 +587,10 @@ def _find_repeated(expr):\n         if isinstance(expr, RootOf):\n             return\n \n-        if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):\n+        if isinstance(expr, Basic) and (\n+                expr.is_Atom or\n+                expr.is_Order or\n+                isinstance(expr, (MatrixSymbol, MatrixElement))):\n             if expr.is_Symbol:\n                 excluded_symbols.add(expr)\n             return\n",
  "test_patch": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,10 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+    assert cse(A[0] * A[0]) == ([], [A[0]*A[0]])\n+\n+    assert cse(A[0,0]*A[0,1] + A[0,0]*A[0,1]*A[0,2]) == ([(x0, A[0, 0]*A[0, 1])], [x0*A[0, 2] + x0])\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\ndiff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -531,26 +531,9 @@ def test_multidim_c_argument_cse():\n         '#include \"test.h\"\\n'\n         \"#include <math.h>\\n\"\n         \"void c(double *A, double *b, double *out) {\\n\"\n-        \"   double x0[9];\\n\"\n-        \"   x0[0] = A[0];\\n\"\n-        \"   x0[1] = A[1];\\n\"\n-        \"   x0[2] = A[2];\\n\"\n-        \"   x0[3] = A[3];\\n\"\n-        \"   x0[4] = A[4];\\n\"\n-        \"   x0[5] = A[5];\\n\"\n-        \"   x0[6] = A[6];\\n\"\n-        \"   x0[7] = A[7];\\n\"\n-        \"   x0[8] = A[8];\\n\"\n-        \"   double x1[3];\\n\"\n-        \"   x1[0] = b[0];\\n\"\n-        \"   x1[1] = b[1];\\n\"\n-        \"   x1[2] = b[2];\\n\"\n-        \"   const double x2 = x1[0];\\n\"\n-        \"   const double x3 = x1[1];\\n\"\n-        \"   const double x4 = x1[2];\\n\"\n-        \"   out[0] = x2*x0[0] + x3*x0[1] + x4*x0[2];\\n\"\n-        \"   out[1] = x2*x0[3] + x3*x0[4] + x4*x0[5];\\n\"\n-        \"   out[2] = x2*x0[6] + x3*x0[7] + x4*x0[8];\\n\"\n+        \"   out[0] = A[0]*b[0] + A[1]*b[1] + A[2]*b[2];\\n\"\n+        \"   out[1] = A[3]*b[0] + A[4]*b[1] + A[5]*b[2];\\n\"\n+        \"   out[2] = A[6]*b[0] + A[7]*b[1] + A[8]*b[2];\\n\"\n         \"}\\n\"\n     )\n     assert code == expected\n"
}