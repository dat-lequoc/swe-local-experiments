{
  "instance_id": "matplotlib__matplotlib-25442",
  "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..e4a98d4e4a 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1507,8 +1507,14 @@ class DraggableBase:\n                 'button_release_event', self.on_release),\n         ]\n \n-    # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    @property\n+    def canvas(self):\n+        # Cache canvas reference and handle None case\n+        if not hasattr(self, '_canvas'):\n+            self._canvas = (self.ref_artist.figure.canvas \n+                          if self.ref_artist and self.ref_artist.figure \n+                          else None)\n+        return self._canvas\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1558,14 +1564,16 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if hasattr(self, '_canvas') and self._canvas is not None:\n+            for cid in self.cids:\n+                self._canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self._canvas.mpl_disconnect(c1)\n+        self._canvas = None\n \n     def save_offset(self):\n         pass\n@@ -1614,4 +1622,4 @@ class DraggableAnnotation(DraggableBase):\n     def update_offset(self, dx, dy):\n         ann = self.annotation\n         ann.xyann = ann.get_transform().inverted().transform(\n-            (self.ox + dx, self.oy + dy))\n+            (self.ox + dx, self.oy + dy))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}