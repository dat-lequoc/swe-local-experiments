{
  "instance_id": "django__django-11630",
  "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..2e756316dc 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -9,7 +9,14 @@ from django.core.checks import Error, Tags, register\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    from django.db import router\n+\n+    def get_model_database(model):\n+        \"\"\"Helper to get the database for a model using the router\"\"\"\n+        return router.db_for_write(model) or 'default'\n+\n+    # Use nested defaultdict to group by database then table\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,7 +26,8 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_name = get_model_database(model)\n+            db_table_models[db_name][model._meta.db_table].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +43,17 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+    for db_name, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                        % (db_table, db_name, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n@@ -195,4 +204,4 @@ def _check_lazy_references(apps, ignore=None):\n \n @register(Tags.models)\n def check_lazy_references(app_configs=None, **kwargs):\n-    return _check_lazy_references(apps)\n+    return _check_lazy_references(apps)\n\\ No newline at end of file\ndiff --git a/tests/model_validation/__init__.py b/tests/model_validation/__init__.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/tests/model_validation/__init__.py\n@@ -0,0 +1 @@\n+\ndiff --git a/tests/model_validation/test_model_checks.py b/tests/model_validation/test_model_checks.py\nnew file mode 100644\nindex 0000000000..a4d9f054fb\n--- /dev/null\n+++ b/tests/model_validation/test_model_checks.py\n@@ -0,0 +1,163 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.core.checks import run_checks\n+\n+\"\"\"Test cases for model table name validation.\"\"\"\n+\n+from django.test.utils import override_settings\n+from django.core.checks import run_checks\n+from django.test import TestCase\n+from django.db import models\n+\n+class TestRouter:\n+    \"\"\"Router for testing table name validation across databases.\"\"\"\n+    def db_for_read(self, model, **hints):\n+        if model._meta.app_label == 'model_validation':\n+            if model._meta.object_name == 'ModelOne':\n+                return 'other_db'\n+            elif model._meta.object_name == 'ModelTwo':\n+                return 'default'\n+        return None\n+\n+    def db_for_write(self, model, **hints):\n+        if model._meta.app_label == 'model_validation':\n+            if model._meta.object_name == 'ModelOne':\n+                return 'other_db'\n+            elif model._meta.object_name == 'ModelTwo':\n+                return 'default'\n+        return None\n+\n+    def allow_migrate(self, db, app_label, model_name=None, **hints):\n+        return True\n+\n+class TestRouter:\n+    \"\"\"Router for testing table name validation across databases.\"\"\"\n+    def db_for_read(self, model, **hints):\n+        if model._meta.app_label == 'model_validation':\n+            return 'other' if model._meta.object_name == 'ModelOne' else 'default'\n+        return None\n+\n+    def db_for_write(self, model, **hints):\n+        if model._meta.app_label == 'model_validation':\n+            return 'other' if model._meta.object_name == 'ModelOne' else 'default'\n+        return None\n+\n+    def allow_migrate(self, db, app_label, model_name=None, **hints):\n+        return True\n+\n+class TableNameValidationTests(TestCase):\n+    databases = {'default', 'other'}\n+    \n+    def setUp(self):\n+        super().setUp()\n+        # Clear app registry to avoid model conflicts\n+        from django.apps import apps\n+        apps.all_models['model_validation'] = {}\n+        apps.clear_cache()\n+\n+    @override_settings(\n+        DATABASE_ROUTERS=['model_validation.test_model_checks.TestRouter'],\n+        DATABASES={\n+            'default': {'ENGINE': 'django.db.backends.sqlite3'},\n+            'other': {'ENGINE': 'django.db.backends.sqlite3'},\n+        }\n+    )\n+    def test_same_table_different_db(self):\n+        \"\"\"Test that same table name is allowed in different databases.\"\"\"\n+        class ModelOne(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_table'\n+\n+        class ModelTwo(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_table'\n+\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 0)\n+\n+    def test_same_table_same_db(self):\n+        \"\"\"Test that same table name is not allowed in the same database.\"\"\"\n+        class ModelThree(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_db_table'\n+\n+        class ModelFour(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_db_table'\n+\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 1)\n+        self.assertIn('same_db_table', table_errors[0].msg)\n+        self.assertIn('default', table_errors[0].msg)\n+\n+    @override_settings(\n+        DATABASE_ROUTERS=['model_validation.test_model_checks.TestRouter'],\n+        DATABASES={\n+            'default': {'ENGINE': 'django.db.backends.sqlite3'},\n+            'db1': {'ENGINE': 'django.db.backends.sqlite3'},\n+            'db2': {'ENGINE': 'django.db.backends.sqlite3'},\n+        }\n+    )\n+    def test_same_table_different_db(self):\n+        \"\"\"Test that same table name is allowed in different databases.\"\"\"\n+        class ModelOne(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_table'\n+\n+        class ModelTwo(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_table'\n+\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 0)\n+\n+    def test_same_table_same_db(self):\n+        \"\"\"Test that same table name is not allowed in the same database.\"\"\"\n+        class ModelThree(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_db_table'\n+\n+        class ModelFour(models.Model):\n+            class Meta:\n+                app_label = 'model_validation'\n+                db_table = 'same_db_table'\n+\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 1)\n+        self.assertIn('same_db_table', table_errors[0].msg)\n+        self.assertIn('default', table_errors[0].msg)\n+\n+    @override_settings(\n+        DATABASE_ROUTERS=['model_validation.test_model_checks.TestRouter'],\n+        DATABASES={\n+            'default': {'ENGINE': 'django.db.backends.sqlite3'},\n+            'db1': {'ENGINE': 'django.db.backends.sqlite3'},\n+            'db2': {'ENGINE': 'django.db.backends.sqlite3'},\n+        }\n+    )\n+    def test_same_table_different_db(self):\n+        \"\"\"Test that same table name is allowed in different databases.\"\"\"\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 0)\n+\n+    def test_same_table_same_db(self):\n+        \"\"\"Test that same table name is not allowed in the same database.\"\"\"\n+        errors = run_checks()\n+        table_errors = [e for e in errors if e.id == 'models.E028']\n+        self.assertEqual(len(table_errors), 1)\n+        self.assertIn('same_db_table', table_errors[0].msg)\n+        self.assertIn('default', table_errors[0].msg)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}