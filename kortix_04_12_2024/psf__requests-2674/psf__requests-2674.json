{
  "instance_id": "psf__requests-2674",
  "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..f52f794d 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -27,6 +27,8 @@ from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import ResponseError\n+from .packages.urllib3.exceptions import DecodeError\n+from .packages.urllib3.exceptions import TimeoutError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError)\n@@ -203,6 +205,7 @@ class HTTPAdapter(BaseAdapter):\n         :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n         :param resp: The urllib3 response object.\n         \"\"\"\n+        try:\n         response = Response()\n \n         # Fallback to None if there's no status_code, for whatever reason.\n@@ -228,7 +231,11 @@ class HTTPAdapter(BaseAdapter):\n         response.request = req\n         response.connection = self\n \n-        return response\n+            return response\n+        except DecodeError as e:\n+            raise ContentDecodingError(e, request=req)\n+        except TimeoutError as e:\n+            raise Timeout(e, request=req)\n \n     def get_connection(self, url, proxies=None):\n         \"\"\"Returns a urllib3 connection for the given URL. This should not be\n@@ -429,7 +436,11 @@ class HTTPAdapter(BaseAdapter):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\n                 raise ReadTimeout(e, request=request)\n+            elif isinstance(e, DecodeError):\n+                raise ContentDecodingError(e, request=request)\n+            elif isinstance(e, TimeoutError):\n+                raise Timeout(e, request=request)\n             else:\n                 raise\n \n-        return self.build_response(request, resp)\n+        return self.build_response(request, resp)\n\\ No newline at end of file\ndiff --git a/test_requests.py b/test_requests.py\nindex 5f4f472a..3a44fdef 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -312,6 +312,34 @@ class RequestsTestCase(unittest.TestCase):\n         with pytest.raises(ConnectionError):\n             requests.get(\"http://httpbin.org:1\", timeout=1)\n \n+    def test_urllib3_decode_error_is_wrapped(self):\n+        \"\"\"Test that urllib3's DecodeError is wrapped as ContentDecodingError\"\"\"\n+        from requests.packages.urllib3.exceptions import DecodeError\n+        def throw_decode_error(*args, **kwargs):\n+            raise DecodeError(\"Test decode error\")\n+        \n+        s = requests.Session()\n+        a = requests.adapters.HTTPAdapter()\n+        s.mount('http://', a)\n+        a.build_response = throw_decode_error\n+        \n+        with pytest.raises(requests.exceptions.ContentDecodingError):\n+            s.get('http://example.com')\n+\n+    def test_urllib3_timeout_error_is_wrapped(self):\n+        \"\"\"Test that urllib3's TimeoutError is wrapped as Timeout\"\"\"\n+        from requests.packages.urllib3.exceptions import TimeoutError\n+        def throw_timeout_error(*args, **kwargs):\n+            raise TimeoutError(\"Test timeout error\")\n+        \n+        s = requests.Session()\n+        a = requests.adapters.HTTPAdapter()\n+        s.mount('http://', a)\n+        a.build_response = throw_timeout_error\n+        \n+        with pytest.raises(requests.exceptions.Timeout):\n+            s.get('http://example.com')\n+\n     def test_LocationParseError(self):\n         \"\"\"Inputing a URL that cannot be parsed should raise an InvalidURL error\"\"\"\n         with pytest.raises(InvalidURL):\n@@ -452,8 +480,10 @@ class RequestsTestCase(unittest.TestCase):\n     def test_conflicting_post_params(self):\n         url = httpbin('post')\n         with open('requirements.txt') as f:\n-            pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n-            pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n+            with pytest.raises(ValueError):\n+                requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})\n+            with pytest.raises(ValueError):\n+                requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\n \n     def test_request_ok_set(self):\n         r = requests.get(httpbin('status', '404'))\n@@ -1663,4 +1693,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}