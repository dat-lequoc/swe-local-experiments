{
  "instance_id": "django__django-13158",
  "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..2e90e1bbfb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -918,6 +918,12 @@ class QuerySet:\n \n     def none(self):\n         \"\"\"Return an empty QuerySet.\"\"\"\n+        if self.query.combinator:\n+            # For combined queries, create a new empty queryset of the same model\n+            empty_qs = self.model.objects.none()\n+            clone = self._chain()\n+            clone.query = empty_qs.query\n+            return clone\n         clone = self._chain()\n         clone.query.set_empty()\n         return clone\n@@ -1976,4 +1982,4 @@ def get_related_populators(klass_info, select, db):\n     for rel_klass_info in related_klass_infos:\n         rel_cls = RelatedPopulator(rel_klass_info, select, db)\n         iterators.append(rel_cls)\n-    return iterators\n+    return iterators\n\\ No newline at end of file\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex ab611afca7..470f1b3f39 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1323,6 +1323,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and not value:\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and not value:\n+            if hasattr(self.queryset.query, 'combinator'):\n+                return self.queryset.model.objects.none()\n             return self.queryset.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n@@ -1352,6 +1354,34 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                 self.error_messages['invalid_list'],\n                 code='invalid_list',\n             )\n+\n+        # Handle combined queries specially\n+        if hasattr(self.queryset.query, 'combined_queries'):\n+            base_qs = self.queryset.model._default_manager\n+            valid_pks = set()\n+            \n+            # Get all valid PKs from component queries\n+            for component_query in self.queryset.query.combined_queries:\n+                filtered_qs = base_qs.filter(component_query.where)\n+                valid_pks.update(filtered_qs.values_list(key, flat=True))\n+            \n+            # Convert all values to strings for comparison\n+            value_pks = {str(val) for val in value}\n+            found_pks = {str(pk) for pk in valid_pks}\n+            \n+            # Check for invalid values\n+            invalid_values = value_pks - found_pks\n+            if invalid_values:\n+                raise ValidationError(\n+                    self.error_messages['invalid_choice'],\n+                    code='invalid_choice',\n+                    params={'value': next(iter(invalid_values))},\n+                )\n+            \n+            # Return queryset with valid PKs\n+            return self.queryset.model._default_manager.filter(**{'%s__in' % key: valid_pks})\n+\n+        # Original validation for non-combined queries\n         for pk in value:\n             try:\n                 self.queryset.filter(**{key: pk})\n@@ -1398,4 +1428,4 @@ def modelform_defines_fields(form_class):\n     return hasattr(form_class, '_meta') and (\n         form_class._meta.fields is not None or\n         form_class._meta.exclude is not None\n-    )\n+    )\n\\ No newline at end of file\ndiff --git a/tests/forms_tests/test_combined_queries.py b/tests/forms_tests/test_combined_queries.py\nnew file mode 100644\nindex 0000000000..ace28a8835\n--- /dev/null\n+++ b/tests/forms_tests/test_combined_queries.py\n@@ -0,0 +1,56 @@\n+from django.db import models\n+from django.forms import ModelMultipleChoiceField\n+from django.test import TestCase\n+\n+class CombinedQueriesPublication(models.Model):\n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+class CombinedQueriesArticle(models.Model):\n+    publications = models.ManyToManyField(CombinedQueriesPublication)\n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+class ModelMultipleChoiceFieldCombinedQueriesTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.p1 = CombinedQueriesPublication.objects.create(id=1)\n+        cls.p2 = CombinedQueriesPublication.objects.create(id=2)\n+        cls.p3 = CombinedQueriesPublication.objects.create(id=6)\n+        cls.p4 = CombinedQueriesPublication.objects.create(id=7)\n+\n+    def test_none_with_combined_queries(self):\n+        # Test with OR query\n+        field1 = ModelMultipleChoiceField(\n+            CombinedQueriesPublication.objects.filter(id__lt=2) | \n+            CombinedQueriesPublication.objects.filter(id__gt=5),\n+            required=False,\n+        )\n+        self.assertEqual(list(field1.clean([])), [])\n+\n+        # Test with union query\n+        field2 = ModelMultipleChoiceField(\n+            CombinedQueriesPublication.objects.filter(id__lt=2).union(\n+                CombinedQueriesPublication.objects.filter(id__gt=5)\n+            ),\n+            required=False,\n+        )\n+        self.assertEqual(list(field2.clean([])), [])\n+\n+    def test_none_with_combined_queries_values(self):\n+        # Test that non-empty values work correctly with OR query\n+        field1 = ModelMultipleChoiceField(\n+            CombinedQueriesPublication.objects.filter(id__lt=2) | \n+            CombinedQueriesPublication.objects.filter(id__gt=5),\n+            required=False,\n+        )\n+        self.assertEqual(list(field1.clean([self.p1.pk])), [self.p1])\n+\n+        # Test that non-empty values work correctly with union query\n+        field2 = ModelMultipleChoiceField(\n+            CombinedQueriesPublication.objects.filter(id__lt=2).union(\n+                CombinedQueriesPublication.objects.filter(id__gt=5)\n+            ),\n+            required=False,\n+        )\n+        self.assertEqual(list(field2.clean([self.p1.pk])), [self.p1])\ndiff --git a/tests/forms_tests/tests/test_fields.py b/tests/forms_tests/tests/test_fields.py\nnew file mode 100644\nindex 0000000000..cb7b5d1de6\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_fields.py\n@@ -0,0 +1,37 @@\n+from django.db import models\n+from django.forms import ModelMultipleChoiceField\n+from django.test import TestCase\n+\n+class Publication(models.Model):\n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+class Article(models.Model):\n+    publications = models.ManyToManyField(Publication)\n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+class ModelMultipleChoiceFieldTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.p1 = Publication.objects.create(id=1)\n+        cls.p2 = Publication.objects.create(id=2)\n+        cls.p3 = Publication.objects.create(id=6)\n+        cls.p4 = Publication.objects.create(id=7)\n+\n+    def test_none_with_combined_queries(self):\n+        # Test with OR query\n+        field1 = ModelMultipleChoiceField(\n+            Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),\n+            required=False,\n+        )\n+        self.assertEqual(list(field1.clean([])), [])\n+\n+        # Test with union query\n+        field2 = ModelMultipleChoiceField(\n+            Publication.objects.filter(id__lt=2).union(\n+                Publication.objects.filter(id__gt=5)\n+            ),\n+            required=False,\n+        )\n+        self.assertEqual(list(field2.clean([])), [])\n",
  "model_name_or_path": "KortixAI"
}