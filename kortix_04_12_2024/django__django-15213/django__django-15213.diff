diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..b34a3dd312 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -963,6 +963,27 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
         super().__init__(output_field=output_field)
         self.expression = expression
 
+    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
+        """
+        Resolve expression handling special case of negated empty IN clauses.
+        Use explicit integer values with BooleanField output.
+        """
+        if isinstance(self.expression, Q):
+            if len(self.expression.children) == 1:
+                child = self.expression.children[0]
+                if isinstance(child, tuple) and len(child) == 2:
+                    lookup, value = child
+                    if lookup.endswith('__in') and value == []:
+                        # Use explicit integer Value with BooleanField output
+                        return Value(1 if self.expression.negated else 0, 
+                                   output_field=fields.BooleanField())
+
+        if isinstance(self.expression, Expression):
+            expression = self.expression.resolve_expression(query, allow_joins, reuse, summarize, for_save)
+            expression.output_field = self.output_field
+            return expression
+        return super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
+
     def set_source_expressions(self, exprs):
         self.expression = exprs[0]
 
@@ -1482,4 +1503,4 @@ class ValueRange(WindowFrame):
     frame_type = 'RANGE'
 
     def window_frame_start_end(self, connection, start, end):
-        return connection.ops.window_frame_range_start_end(start, end)
+        return connection.ops.window_frame_range_start_end(start, end)
\ No newline at end of file
diff --git a/tests/expressions/test_expressions.py b/tests/expressions/test_expressions.py
new file mode 100644
index 0000000000..cedb844dc9
--- /dev/null
+++ b/tests/expressions/test_expressions.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.db.models import BooleanField, ExpressionWrapper, Q
+from django.test import TestCase
+
+class ExpressionWrapperTests(TestCase):
+    def test_negated_q_empty_in(self):
+        """
+        Test that ExpressionWrapper correctly handles negated Q objects with empty IN clauses.
+        """
+        class DummyModel(models.Model):
+            class Meta:
+                app_label = 'expressions'
+
+        qs = DummyModel.objects.all()
+        
+        # Test non-negated empty IN
+        expr = ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())
+        qs = qs.annotate(foo=expr)
+        sql = str(qs.values('foo').query)
+        self.assertIn('0', sql.upper())
+        
+        # Test negated empty IN
+        expr = ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())
+        qs = qs.annotate(foo=expr)
+        sql = str(qs.values('foo').query)
+        self.assertIn('1', sql.upper())
