{"instance_id": "astropy__astropy-6938", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b1..c9a4f029f6 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field[:] = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n@@ -1328,4 +1328,4 @@ def _has_unicode_fields(array):\n     \"\"\"\n \n     dtypes = (d[0] for d in array.dtype.fields.values())\n-    return any(d.kind == 'U' for d in dtypes)\n+    return any(d.kind == 'U' for d in dtypes)\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "django__django-11001", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..2b9e40053d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,9 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            # Normalize SQL to handle multiline expressions\n+            sql_normalized = ' '.join(sql.split())\n+            without_ordering = self.ordering_parts.search(sql_normalized).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n@@ -366,7 +368,9 @@ class SQLCompiler:\n         if self.query.distinct and not self.query.distinct_fields:\n             select_sql = [t[1] for t in select]\n             for expr, (sql, params, is_ref) in order_by:\n-                without_ordering = self.ordering_parts.search(sql).group(1)\n+                # Normalize SQL to handle multiline expressions\n+            sql_normalized = ' '.join(sql.split())\n+            without_ordering = self.ordering_parts.search(sql_normalized).group(1)\n                 if not is_ref and (without_ordering, params) not in select_sql:\n                     extra_select.append((expr, (without_ordering, params), None))\n         return extra_select\n@@ -1504,4 +1508,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):\n         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):\n             yield rows if col_count is None else [r[:col_count] for r in rows]\n     finally:\n-        cursor.close()\n+        cursor.close()\n\\ No newline at end of file\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex bce514c0bf..470845be9c 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -622,6 +622,23 @@ class Queries1Tests(TestCase):\n             Tag.objects.filter(parent=self.t1, name='t3').order_by('name'),\n             ['<Tag: t3>']\n         )\n+        \n+    def test_multiline_rawsql_ordering(self):\n+        \"\"\"Test that multiline RawSQL expressions in order_by work correctly.\"\"\"\n+        qs = Tag.objects.all().order_by(\n+            RawSQL('''\n+                CASE WHEN name = 't1'\n+                     THEN 1\n+                     ELSE 2 END''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN name = 't2'\n+                     THEN 1\n+                     ELSE 2 END''', []).desc()\n+        )\n+        # Both order by clauses should be present in the query\n+        sql = str(qs.query)\n+        self.assertIn(\"CASE WHEN name = 't1'\", sql)\n+        self.assertIn(\"CASE WHEN name = 't2'\", sql)\n         self.assertQuerysetEqual(\n             Tag.objects.exclude(parent=self.t1, name='t3').order_by('name'),\n             ['<Tag: t1>', '<Tag: t2>', '<Tag: t4>', '<Tag: t5>']\n@@ -3927,4 +3944,4 @@ class Ticket23622Tests(TestCase):\n             set(Ticket23605A.objects.filter(qx).values_list('pk', flat=True)),\n             set(Ticket23605A.objects.filter(qy).values_list('pk', flat=True))\n         )\n-        self.assertSequenceEqual(Ticket23605A.objects.filter(qx), [a2])\n+        self.assertSequenceEqual(Ticket23605A.objects.filter(qx), [a2])\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "django__django-10914", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..9ba30e5b26 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n@@ -631,4 +631,4 @@ SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n SECURE_SSL_HOST = None\n-SECURE_SSL_REDIRECT = False\n+SECURE_SSL_REDIRECT = False\n\\ No newline at end of file\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 434869554c..ffa7c12037 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -488,6 +488,28 @@ class FileStorageTests(SimpleTestCase):\n         with self.assertRaises(OSError):\n             self.storage.save('error.file', f1)\n \n+    def test_file_permissions_for_both_upload_types(self):\n+        \"\"\"\n+        File storage should set consistent permissions for both upload types.\n+        \"\"\"\n+        # Test small file (MemoryUploadedFile)\n+        small_file = SimpleUploadedFile('small.txt', b'small contents')\n+        small_name = self.storage.save('small.txt', small_file)\n+        small_path = self.storage.path(small_name)\n+        small_mode = os.stat(small_path).st_mode & 0o777\n+        self.assertEqual(small_mode, 0o644)\n+        self.storage.delete(small_name)\n+\n+        # Test large file (TemporaryUploadedFile)\n+        large_file = TemporaryUploadedFile('large.txt', 'text/plain', 0, 'utf-8')\n+        large_file.write(b'large contents')\n+        large_file.seek(0)\n+        large_name = self.storage.save('large.txt', large_file)\n+        large_path = self.storage.path(large_name)\n+        large_mode = os.stat(large_path).st_mode & 0o777\n+        self.assertEqual(large_mode, 0o644)\n+        self.storage.delete(large_name)\n+\n     def test_delete_no_name(self):\n         \"\"\"\n         Calling delete with an empty name should not try to remove the base\n@@ -995,4 +1017,4 @@ class FileLikeObjectTestCase(LiveServerTestCase):\n \n         remote_file = urlopen(self.live_server_url + '/')\n         with self.storage.open(stored_filename) as stored_file:\n-            self.assertEqual(stored_file.read(), remote_file.read())\n+            self.assertEqual(stored_file.read(), remote_file.read())\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..40e4dcf767 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -487,7 +487,7 @@ class NDArithmeticMixin:\n         Calculate the resulting mask.\n \n         This is implemented as the piecewise ``or`` operation if both have a\n-        mask.\n+        mask. If only one operand has a mask, that mask is propagated to the result.\n \n         Parameters\n         ----------\n@@ -512,19 +512,21 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        # If neither has a mask or handle_mask is None, return None\n+        if ((self.mask is None and operand is not None and operand.mask is None) \n+                or handle_mask is None):\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n+            \n+        # If only one operand has a mask, return a copy of that mask\n+        if self.mask is None and operand is not None:\n             return deepcopy(operand.mask)\n         elif operand is None:\n             return deepcopy(self.mask)\n-        else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+        elif operand.mask is None:\n+            return deepcopy(self.mask)\n+            \n+        # Both have masks, apply the handle_mask operation\n+        return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n@@ -747,4 +749,4 @@ class NDArithmeticMixin:\n             )\n \n         # Return a new class based on the result\n-        return cls(result, **init_kwds)\n+        return cls(result, **init_kwds)\n\\ No newline at end of file\ndiff --git a/astropy/nddata/tests/test_nddata.py b/astropy/nddata/tests/test_nddata.py\nindex 033b555fa0..2c977ce140 100644\n--- a/astropy/nddata/tests/test_nddata.py\n+++ b/astropy/nddata/tests/test_nddata.py\n@@ -214,6 +214,35 @@ def test_nddata_init_data_masked_quantity():\n     np.testing.assert_array_equal(nd.mask, np.array(m))\n \n \n+def test_mask_propagation_with_none():\n+    \"\"\"Test mask propagation when one operand has no mask.\"\"\"\n+    from astropy.nddata import NDDataRef\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+    \n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+    \n+    # Test no mask * no mask\n+    result1 = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    assert result1.mask is None\n+    \n+    # Test no mask * no mask (two NDDataRef)\n+    result2 = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    assert result2.mask is None\n+    \n+    # Test mask * no mask (scalar)\n+    result3 = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    assert_array_equal(result3.mask, mask)\n+    \n+    # Test mask * mask\n+    result4 = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    assert_array_equal(result4.mask, mask)\n+    \n+    # Test mask * no mask (NDDataRef)\n+    result5 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    assert_array_equal(result5.mask, mask)\n+\n def test_nddata_init_data_nddata():\n     nd1 = NDData(np.array([1]))\n     nd2 = NDData(nd1)\n@@ -706,4 +735,4 @@ def test_collapse(mask, unit, propagate_uncertainties, operation_ignores_mask):\n             # min/max data value. We've created the uncertainties to have the same value\n             # as the data array, so we can just check for equality:\n             if method in ext_methods and propagate_uncertainties:\n-                assert np.ma.all(np.ma.equal(astropy_method, nddata_method))\n+                assert np.ma.all(np.ma.equal(astropy_method, nddata_method))\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 15bb49f22b..dc9c3c5f37 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"cython==0.29.34\",\n             \"oldest-supported-numpy\",\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..ac89de64b2 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -639,4 +639,4 @@ class QDP(basic.Basic):\n     def write(self, table):\n         self._check_multidim_table(table)\n         lines = _write_table_qdp(table, err_specs=self.err_specs)\n-        return lines\n+        return lines\n\\ No newline at end of file\ndiff --git a/astropy/io/ascii/tests/data/lowercase.qdp b/astropy/io/ascii/tests/data/lowercase.qdp\nnew file mode 100644\nindex 0000000000..b5750561d5\n--- /dev/null\n+++ b/astropy/io/ascii/tests/data/lowercase.qdp\n@@ -0,0 +1,2 @@\n+read serr 1 2\n+1 0.5 1 0.5\ndiff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex ef24e6f6a3..522b73972d 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -233,6 +233,23 @@ def test_read_write_simple_specify_name(tmp_path):\n     assert np.all(t2[\"a\"] == t1[\"a\"])\n \n \n+def test_lowercase_commands(tmp_path):\n+    \"\"\"Test that QDP commands are case-insensitive.\"\"\"\n+    example_qdp = \"\"\"\n+    ! Test lowercase commands\n+    read serr 1 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    test_file = tmp_path / \"test.qdp\"\n+    with open(test_file, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    \n+    t = Table.read(test_file, format=\"ascii.qdp\", names=[\"a\", \"b\"])\n+    assert np.allclose(t[\"a\"], [1])\n+    assert np.allclose(t[\"a_err\"], [0.5])\n+    assert np.allclose(t[\"b\"], [1])\n+    assert np.allclose(t[\"b_err\"], [0.5])\n+\n def test_get_lines_from_qdp(tmp_path):\n     test_file = str(tmp_path / \"test.qdp\")\n     text_string = \"A\\nB\"\n@@ -244,4 +261,4 @@ def test_get_lines_from_qdp(tmp_path):\n     for i, line in enumerate([\"A\", \"B\"]):\n         assert file_output[i] == line\n         assert list_output[i] == line\n-        assert text_output[i] == line\n+        assert text_output[i] == line\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 287a356a08..f2ee6c47cc 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..53aac3e244 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,13 +1212,19 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            # Convert inputs to arrays and check for empty inputs\n+            arrays = [np.asarray(x) for x in axes]\n+            if any(x.size == 0 for x in arrays):\n+                # Return empty arrays of correct shape\n+                return [np.array([], dtype=float) for _ in range(self.naxis)]\n+            \n             try:\n-                axes = np.broadcast_arrays(*axes)\n+                arrays = np.broadcast_arrays(*arrays)\n             except ValueError:\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+            xy = np.hstack([x.reshape((x.size, 1)) for x in arrays])\n \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n@@ -1231,6 +1237,11 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n+            # Convert input to array and handle empty input\n+            xy = np.asarray(xy)\n+            if xy.size == 0:\n+                return np.array([]).reshape(0, self.naxis)\n+                \n             if xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n@@ -3296,4 +3307,4 @@ def validate(source):\n \n                 wcs_results.extend([str(x.message) for x in warning_lines])\n \n-    return results\n+    return results\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b207..22b995e44e 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -117,37 +117,52 @@ class Media:\n     @staticmethod\n     def merge(list_1, list_2):\n         \"\"\"\n-        Merge two lists while trying to keep the relative order of the elements.\n-        Warn if the lists have the same two elements in a different relative\n-        order.\n+        Merge lists while trying to keep the relative order of the elements.\n+        Warn if there's a genuine circular dependency between files.\n \n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n         \"\"\"\n-        # Start with a copy of list_1.\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n+        combined = list(list_1)\n+        positions = {path: i for i, path in enumerate(combined)}\n+        \n+        # Track seen conflicts to avoid duplicate warnings\n+        seen_conflicts = set()\n+        \n+        # Track dependencies to avoid false positives\n+        dependencies = {}\n+        \n+        for path in list_2:\n+            if path in positions:\n+                current_pos = positions[path]\n+                # Check for actual circular dependencies\n+                for i, existing in enumerate(combined[current_pos + 1:], start=current_pos + 1):\n+                    if existing in list_2:\n+                        # Get positions in list_2\n+                        path_idx = list_2.index(path)\n+                        existing_idx = list_2.index(existing)\n+                        \n+                        # Only warn if this creates a genuine circular dependency\n+                        if existing_idx < path_idx:\n+                            # Ensure consistent warning message order\n+                            first, second = sorted([existing, path])\n+                            conflict_key = (first, second)\n+                            if conflict_key not in seen_conflicts:\n+                                seen_conflicts.add(conflict_key)\n+                                warnings.warn(\n+                                    'Detected circular Media file dependencies:\\n%s and %s' % \n+                                    (first, second),\n+                                    MediaOrderConflictWarning,\n+                                )\n+                    # Track dependency\n+                    if existing_idx > path_idx:\n+                        dependencies.setdefault(path, []).append(existing)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n-        return combined_list\n+                combined.append(path)\n+                positions[path] = len(combined) - 1\n+                \n+        return combined\n \n     def __add__(self, other):\n         combined = Media()\n@@ -1080,4 +1095,4 @@ class SelectDateWidget(Widget):\n         return not any(\n             ('{}_{}'.format(name, interval) in data)\n             for interval in ('year', 'month', 'day')\n-        )\n+        )\n\\ No newline at end of file\ndiff --git a/tests/forms_tests/tests/test_media.py b/tests/forms_tests/tests/test_media.py\nindex 8cb484a15e..c82e2e1cfc 100644\n--- a/tests/forms_tests/tests/test_media.py\n+++ b/tests/forms_tests/tests/test_media.py\n@@ -538,9 +538,27 @@ class FormsMediaTestCase(SimpleTestCase):\n                 self.assertEqual(Media.merge(list1, list2), expected)\n \n     def test_merge_warning(self):\n-        msg = 'Detected duplicate Media files in an opposite order:\\n1\\n2'\n+        msg = 'Detected circular Media file dependencies:\\n1 and 2'\n         with self.assertWarnsMessage(RuntimeWarning, msg):\n             self.assertEqual(Media.merge([1, 2], [2, 1]), [1, 2])\n+            \n+    def test_merge_with_dependencies(self):\n+        \"\"\"Test merging media with dependencies is handled correctly.\"\"\"\n+        # text-editor-extras.js depends on text-editor.js\n+        list1 = ['color-picker.js']\n+        list2 = ['text-editor.js']\n+        list3 = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\n+        \n+        # Merge first two lists\n+        merged = Media.merge(list1, list2)\n+        # Merge with third list\n+        final = Media.merge(merged, list3)\n+        \n+        # Verify correct ordering\n+        self.assertEqual(\n+            final,\n+            ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\n+        )\n \n     def test_merge_js_three_way(self):\n         \"\"\"\n@@ -570,4 +588,4 @@ class FormsMediaTestCase(SimpleTestCase):\n         # ...but merging succeeds as the relative ordering of a.css and b.css\n         # was never specified.\n         merged = widget3 + form1 + form2\n-        self.assertEqual(merged._css, {'screen': ['a.css', 'b.css'], 'all': ['c.css']})\n+        self.assertEqual(merged._css, {'screen': ['a.css', 'b.css'], 'all': ['c.css']})\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..72b4067a61 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,47 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n+        if header_rows is not None:\n+            self.header_rows = header_rows\n \n     def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        if hasattr(self, 'header_rows'):\n+            # Calculate column widths including header rows\n+            widths = []\n+            for col in self.cols:\n+                widths.append(max(len(str(val)) for val in [col.info.name] + \n+                            [row[col.info.name] for row in self.header_rows] +\n+                            [str(v) for v in col.str_vals]))\n+            \n+            # Create the separator line\n+            sep = ' '.join('=' * w for w in widths)\n+            \n+            # Write header rows\n+            lines = [sep]\n+            for row in self.header_rows:\n+                lines.append(' '.join(str(row.get(col.info.name, '')).ljust(w) \n+                           for col, w in zip(self.cols, widths)))\n+                lines.append(sep)\n+            \n+            # Write column names\n+            lines.append(' '.join(col.info.name.ljust(w) \n+                       for col, w in zip(self.cols, widths)))\n+            lines.append(sep)\n+            \n+            # Write data rows\n+            for i, col in enumerate(self.cols):\n+                for j, val in enumerate(col.str_vals):\n+                    if i == 0:\n+                        lines.append('')\n+                    lines[len(lines) - 1] = (lines[len(lines) - 1] + ' ' + \n+                                           str(val).ljust(widths[i])).strip()\n+            \n+            lines.append(sep)\n+            return lines\n+        else:\n+            # Original behavior\n+            lines = super().write(lines)\n+            lines = [lines[1]] + lines + [lines[1]]\n+            return lines\n\\ No newline at end of file\ndiff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex 84d6fed401..20859d012a 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -185,3 +185,27 @@ Col1      Col2 Col3 Col4\n ==== ========= ==== ====\n \"\"\",\n     )\n+\n+def test_write_with_header_rows():\n+    \"\"\"Write a table with header rows\"\"\"\n+    from astropy.table import Table\n+    import astropy.units as u\n+    \n+    tbl = Table()\n+    tbl['wave'] = [350.0, 950.0] * u.nm\n+    tbl['response'] = [0.7, 1.2] * u.count\n+    \n+    out = StringIO()\n+    ascii.write(tbl, out, format='rst', header_rows=[{'wave': 'nm', 'response': 'ct'}])\n+    assert_equal_splitlines(\n+        out.getvalue(),\n+        \"\"\"\\\n+===== ========\n+  nm      ct\n+===== ========\n+ wave response\n+===== ========\n+350.0      0.7\n+950.0      1.2\n+===== ========\n+\"\"\")\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0d1ee66ab9..ec234472e2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n", "model_name_or_path": "KortixAI"}
{"instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..54f6e4eb49 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1668,6 +1668,37 @@ class FilePathField(Field):\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def get_path(self):\n+        \"\"\"Resolve the path at runtime.\"\"\"\n+        path = self.path\n+        if callable(path):\n+            path = path()\n+        if path is None:\n+            return ''\n+        return os.path.abspath(path)</old_string>\n+        </replacement>\n+        <replacement>\n+            <old_string>    def formfield(self, **kwargs):\n+        return super().formfield(**{\n+            'path': self.get_path(),\n+            'match': self.match,\n+            'recursive': self.recursive,\n+            'form_class': forms.FilePathField,\n+            'allow_files': self.allow_files,\n+            'allow_folders': self.allow_folders,\n+            **kwargs,\n+        })</old_string>\n+            <new_string>    def formfield(self, **kwargs):\n+        return super().formfield(**{\n+            'path': self.get_path(),\n+            'match': self.match,\n+            'recursive': self.recursive,\n+            'form_class': forms.FilePathField,\n+            'allow_files': self.allow_files,\n+            'allow_folders': self.allow_folders,\n+            **kwargs,\n+        })\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1709,7 +1740,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self.get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n@@ -2365,4 +2396,4 @@ class UUIDField(Field):\n         return super().formfield(**{\n             'form_class': forms.UUIDField,\n             **kwargs,\n-        })\n+        })\n\\ No newline at end of file\ndiff --git a/tests/model_fields/test_filepathfield.py b/tests/model_fields/test_filepathfield.py\nnew file mode 100644\nindex 0000000000..61ba38306c\n--- /dev/null\n+++ b/tests/model_fields/test_filepathfield.py\n@@ -0,0 +1,34 @@\n+import os\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+class FilePathFieldTests(SimpleTestCase):\n+    def test_filepathfield_callable_path(self):\n+        def get_path():\n+            return os.path.dirname(__file__)\n+\n+        class TestModel(models.Model):\n+            path = models.FilePathField(path=get_path)\n+\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        field = TestModel._meta.get_field('path')\n+        self.assertEqual(field.path, get_path)\n+        self.assertEqual(field.get_path(), os.path.abspath(os.path.dirname(__file__)))\n+\n+    def test_filepathfield_callable_path_validation(self):\n+        def get_invalid_path():\n+            return '/invalid/path/does/not/exist'\n+\n+        class TestModel(models.Model):\n+            path = models.FilePathField(path=get_invalid_path)\n+\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        field = TestModel._meta.get_field('path')\n+        self.assertEqual(field.path, get_invalid_path)\n+        self.assertEqual(field.get_path(), os.path.abspath('/invalid/path/does/not/exist'))\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..dd024418e8 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -304,9 +304,17 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            # Handle & operator specially to preserve independence\n+            from scipy.linalg import block_diag\n+            left_matrix = _separable(transform.left)\n+            right_matrix = _separable(transform.right)\n+            return block_diag(left_matrix, right_matrix)\n+        else:\n+            # For other operators, use existing behavior\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n@@ -314,4 +322,4 @@ def _separable(transform):\n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n-              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n+              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 3364d30740..02dddbe713 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.22\",\n", "model_name_or_path": "KortixAI"}
