{
  "patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -231,6 +231,20 @@ def _print_Symbol(self, expr):\n         else:\n             return name\n \n+    def _print_Relational(self, expr):\n+        lhs_code = self._print(expr.lhs)\n+        rhs_code = self._print(expr.rhs)\n+        op = expr.rel_op\n+        return (\"{0} {1} {2}\").format(lhs_code, op, rhs_code)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions.elementary.trigonometric import sin\n+        from sympy.core.relational import Ne\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise(\n+            (sin(expr.args[0]) / expr.args[0], Ne(expr.args[0], 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_AugmentedAssignment(self, expr):\n         lhs_code = self._print(expr.lhs)\n         op = expr.rel_op\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -120,6 +120,16 @@ def test_ccode_boolean():\n     assert ccode((x | y) & z) == \"z && (x || y)\"\n \n \n+def test_ccode_Relational():\n+    from sympy import Eq, Ne, Le, Lt, Gt, Ge\n+    assert ccode(Eq(x, y)) == \"x == y\"\n+    assert ccode(Ne(x, y)) == \"x != y\"\n+    assert ccode(Le(x, y)) == \"x <= y\"\n+    assert ccode(Lt(x, y)) == \"x < y\"\n+    assert ccode(Gt(x, y)) == \"x > y\"\n+    assert ccode(Ge(x, y)) == \"x >= y\"\n+\n+\n def test_ccode_Piecewise():\n     expr = Piecewise((x, x < 1), (x**2, True))\n     assert ccode(expr) == (\n@@ -162,6 +172,18 @@ def test_ccode_Piecewise():\n     raises(ValueError, lambda: ccode(expr))\n \n \n+def test_ccode_sinc():\n+    from sympy import sinc\n+    expr = sinc(x)\n+    assert ccode(expr) == (\n+            \"((x != 0) ? (\\n\"\n+            \"   sin(x)/x\\n\"\n+            \")\\n\"\n+            \": (\\n\"\n+            \"   1\\n\"\n+            \"))\")\n+\n+\n def test_ccode_Piecewise_deep():\n     p = ccode(2*Piecewise((x, x < 1), (x + 1, x < 2), (x**2, True)))\n     assert p == (\n"
}