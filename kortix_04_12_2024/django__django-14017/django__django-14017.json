{
  "instance_id": "django__django-14017",
  "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..180b59a2b6 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,17 +40,15 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        if hasattr(other, 'conditional') and other.conditional:\n+            other = Q(other)\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n-        # If the other Q() is empty, ignore it and just use `self`.\n-        if not other:\n-            _, args, kwargs = self.deconstruct()\n-            return type(self)(*args, **kwargs)\n-        # Or if this Q is empty, ignore it and just use `other`.\n-        elif not self:\n-            _, args, kwargs = other.deconstruct()\n-            return type(other)(*args, **kwargs)\n+        if not other.children:\n+            return self.copy()\n+        if not self.children:\n+            return other.copy()\n \n         obj = type(self)()\n         obj.connector = conn\n@@ -70,6 +68,11 @@ class Q(tree.Node):\n         obj.negate()\n         return obj\n \n+    def __rand__(self, other):\n+        if hasattr(other, 'conditional') and other.conditional:\n+            return Q(other) & self\n+        raise TypeError(other)\n+\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         # We must promote any new joins to left outer joins so that when Q is\n         # used as an expression, rows aren't filtered due to joins.\n@@ -321,4 +324,4 @@ class FilteredRelation:\n         # Resolve the condition in Join.filtered_relation.\n         query = compiler.query\n         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\n-        return compiler.compile(where)\n+        return compiler.compile(where)\n\\ No newline at end of file\ndiff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 6dcf36ce02..0c6caad0d9 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,4 @@\n-from django.db.models import F, Q\n+from django.db.models import F, Q, Exists\n from django.test import SimpleTestCase\n \n \n@@ -62,6 +62,14 @@ class QTests(SimpleTestCase):\n         ))\n         self.assertEqual(kwargs, {'_connector': 'OR'})\n \n+    def test_combine_with_exists(self):\n+        exists = Exists(Q())\n+        q = Q(price=1)\n+        self.assertEqual(exists & q, Q(exists) & q)\n+        self.assertEqual(q & exists, q & Q(exists))\n+        self.assertEqual(exists & Q(), Q(exists))\n+        self.assertEqual(Q() & exists, Q(exists))\n+\n     def test_deconstruct_and(self):\n         q1 = Q(price__gt=F('discounted_price'))\n         q2 = Q(price=F('discounted_price'))\n@@ -110,4 +118,4 @@ class QTests(SimpleTestCase):\n         q2 = Q(price=F('discounted_price'))\n         q = q1 & q2\n         path, args, kwargs = q.deconstruct()\n-        self.assertEqual(Q(*args, **kwargs), q)\n+        self.assertEqual(Q(*args, **kwargs), q)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}