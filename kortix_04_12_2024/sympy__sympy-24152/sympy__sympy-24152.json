{
  "instance_id": "sympy__sympy-24152",
  "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 78accaf295..7b1953c017 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):\n             if isinstance(args[i], Add):\n                 for aa in args[i].args:\n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(),)\n+                    add_args.append(Mul(*c_part)*Mul(*nc_part))\n                 break\n \n         if add_args:\n@@ -417,4 +418,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n\\ No newline at end of file\ndiff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex f1765640ea..644c7b3789 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -44,6 +44,10 @@ def test_tensor_product_abstract():\n def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n+    \n+    # Test expansion with scalar factors\n+    assert TP(2*A - B, C + D).expand(tensorproduct=True) == \\\n+        2*TP(A, C) + 2*TP(A, D) - TP(B, C) - TP(B, D)\n \n \n def test_tensor_product_commutator():\n@@ -117,4 +121,4 @@ def test_eval_trace():\n     assert t.doit() == ( 1.0*A*Dagger(A)*Tr(B*Dagger(B)) +\n                         1.0*A*Dagger(C)*Tr(B*Dagger(D)) +\n                         1.0*C*Dagger(A)*Tr(D*Dagger(B)) +\n-                        1.0*C*Dagger(C)*Tr(D*Dagger(D)))\n+                        1.0*C*Dagger(C)*Tr(D*Dagger(D)))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}