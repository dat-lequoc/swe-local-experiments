{
  "instance_id": "django__django-14787",
  "test_result": {
    "apply_patch_output": "APPLY_PATCH_PASS\n/tmp/patch.diff:44: trailing whitespace.\n        \nChecking patch django/utils/decorators.py...\nChecking patch tests/utils_tests/test_decorators.py...\nApplied patch django/utils/decorators.py cleanly.\nApplied patch tests/utils_tests/test_decorators.py cleanly.\nwarning: 1 line adds whitespace errors.\n",
    "test_output": "+ source /opt/miniconda3/bin/activate\n++ _CONDA_ROOT=/opt/miniconda3\n++ . /opt/miniconda3/etc/profile.d/conda.sh\n+++ export CONDA_EXE=/opt/miniconda3/bin/conda\n+++ CONDA_EXE=/opt/miniconda3/bin/conda\n+++ export _CE_M=\n+++ _CE_M=\n+++ export _CE_CONDA=\n+++ _CE_CONDA=\n+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ '[' -z x ']'\n++ conda activate\n++ local cmd=activate\n++ case \"$cmd\" in\n++ __conda_activate activate\n++ '[' -n '' ']'\n++ local ask_conda\n+++ PS1=\n+++ __conda_exe shell.posix activate\n+++ /opt/miniconda3/bin/conda shell.posix activate\n++ ask_conda='PS1='\\''(base) '\\''\nexport PATH='\\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3'\\''\nexport CONDA_SHLVL='\\''2'\\''\nexport CONDA_DEFAULT_ENV='\\''base'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(base) '\\''\nexport CONDA_PREFIX_1='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n++ eval 'PS1='\\''(base) '\\''\nexport PATH='\\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3'\\''\nexport CONDA_SHLVL='\\''2'\\''\nexport CONDA_DEFAULT_ENV='\\''base'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(base) '\\''\nexport CONDA_PREFIX_1='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n+++ PS1='(base) '\n+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n+++ export CONDA_PREFIX=/opt/miniconda3\n+++ CONDA_PREFIX=/opt/miniconda3\n+++ export CONDA_SHLVL=2\n+++ CONDA_SHLVL=2\n+++ export CONDA_DEFAULT_ENV=base\n+++ CONDA_DEFAULT_ENV=base\n+++ export 'CONDA_PROMPT_MODIFIER=(base) '\n+++ CONDA_PROMPT_MODIFIER='(base) '\n+++ export CONDA_PREFIX_1=/opt/miniconda3/envs/testbed\n+++ CONDA_PREFIX_1=/opt/miniconda3/envs/testbed\n+++ export CONDA_EXE=/opt/miniconda3/bin/conda\n+++ CONDA_EXE=/opt/miniconda3/bin/conda\n+++ export _CE_M=\n+++ _CE_M=\n+++ export _CE_CONDA=\n+++ _CE_CONDA=\n+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n++ __conda_hashr\n++ '[' -n '' ']'\n++ '[' -n '' ']'\n++ hash -r\n+ conda activate testbed\n+ local cmd=activate\n+ case \"$cmd\" in\n+ __conda_activate activate testbed\n+ '[' -n '' ']'\n+ local ask_conda\n++ PS1='(base) '\n++ __conda_exe shell.posix activate testbed\n++ /opt/miniconda3/bin/conda shell.posix activate testbed\n+ ask_conda='PS1='\\''(testbed) '\\''\nexport PATH='\\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_SHLVL='\\''3'\\''\nexport CONDA_DEFAULT_ENV='\\''testbed'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(testbed) '\\''\nexport CONDA_PREFIX_2='\\''/opt/miniconda3'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n+ eval 'PS1='\\''(testbed) '\\''\nexport PATH='\\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_SHLVL='\\''3'\\''\nexport CONDA_DEFAULT_ENV='\\''testbed'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(testbed) '\\''\nexport CONDA_PREFIX_2='\\''/opt/miniconda3'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n++ PS1='(testbed) '\n++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed\n++ CONDA_PREFIX=/opt/miniconda3/envs/testbed\n++ export CONDA_SHLVL=3\n++ CONDA_SHLVL=3\n++ export CONDA_DEFAULT_ENV=testbed\n++ CONDA_DEFAULT_ENV=testbed\n++ export 'CONDA_PROMPT_MODIFIER=(testbed) '\n++ CONDA_PROMPT_MODIFIER='(testbed) '\n++ export CONDA_PREFIX_2=/opt/miniconda3\n++ CONDA_PREFIX_2=/opt/miniconda3\n++ export CONDA_EXE=/opt/miniconda3/bin/conda\n++ CONDA_EXE=/opt/miniconda3/bin/conda\n++ export _CE_M=\n++ _CE_M=\n++ export _CE_CONDA=\n++ _CE_CONDA=\n++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+ __conda_hashr\n+ '[' -n '' ']'\n+ '[' -n '' ']'\n+ hash -r\n+ cd /testbed\n+ git config --global --add safe.directory /testbed\n+ cd /testbed\n+ git status\n+ git show\n+ git diff 004b4620f6f4ad87261e149898940f2dcd5757ef\n+ source /opt/miniconda3/bin/activate\n++ _CONDA_ROOT=/opt/miniconda3\n++ . /opt/miniconda3/etc/profile.d/conda.sh\n+++ export CONDA_EXE=/opt/miniconda3/bin/conda\n+++ CONDA_EXE=/opt/miniconda3/bin/conda\n+++ export _CE_M=\n+++ _CE_M=\n+++ export _CE_CONDA=\n+++ _CE_CONDA=\n+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ '[' -z x ']'\n++ conda activate\n++ local cmd=activate\n++ case \"$cmd\" in\n++ __conda_activate activate\n++ '[' -n '' ']'\n++ local ask_conda\n+++ PS1='(testbed) '\n+++ __conda_exe shell.posix activate\n+++ /opt/miniconda3/bin/conda shell.posix activate\n++ ask_conda='PS1='\\''(base) '\\''\nexport PATH='\\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3'\\''\nexport CONDA_SHLVL='\\''4'\\''\nexport CONDA_DEFAULT_ENV='\\''base'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(base) '\\''\nexport CONDA_PREFIX_3='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n++ eval 'PS1='\\''(base) '\\''\nexport PATH='\\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3'\\''\nexport CONDA_SHLVL='\\''4'\\''\nexport CONDA_DEFAULT_ENV='\\''base'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(base) '\\''\nexport CONDA_PREFIX_3='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n+++ PS1='(base) '\n+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n+++ export CONDA_PREFIX=/opt/miniconda3\n+++ CONDA_PREFIX=/opt/miniconda3\n+++ export CONDA_SHLVL=4\n+++ CONDA_SHLVL=4\n+++ export CONDA_DEFAULT_ENV=base\n+++ CONDA_DEFAULT_ENV=base\n+++ export 'CONDA_PROMPT_MODIFIER=(base) '\n+++ CONDA_PROMPT_MODIFIER='(base) '\n+++ export CONDA_PREFIX_3=/opt/miniconda3/envs/testbed\n+++ CONDA_PREFIX_3=/opt/miniconda3/envs/testbed\n+++ export CONDA_EXE=/opt/miniconda3/bin/conda\n+++ CONDA_EXE=/opt/miniconda3/bin/conda\n+++ export _CE_M=\n+++ _CE_M=\n+++ export _CE_CONDA=\n+++ _CE_CONDA=\n+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n++ __conda_hashr\n++ '[' -n '' ']'\n++ '[' -n '' ']'\n++ hash -r\n+ conda activate testbed\n+ local cmd=activate\n+ case \"$cmd\" in\n+ __conda_activate activate testbed\n+ '[' -n '' ']'\n+ local ask_conda\n++ PS1='(base) '\n++ __conda_exe shell.posix activate testbed\n++ /opt/miniconda3/bin/conda shell.posix activate testbed\n+ ask_conda='PS1='\\''(testbed) '\\''\nexport PATH='\\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_SHLVL='\\''5'\\''\nexport CONDA_DEFAULT_ENV='\\''testbed'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(testbed) '\\''\nexport CONDA_PREFIX_4='\\''/opt/miniconda3'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n+ eval 'PS1='\\''(testbed) '\\''\nexport PATH='\\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\\''\nexport CONDA_PREFIX='\\''/opt/miniconda3/envs/testbed'\\''\nexport CONDA_SHLVL='\\''5'\\''\nexport CONDA_DEFAULT_ENV='\\''testbed'\\''\nexport CONDA_PROMPT_MODIFIER='\\''(testbed) '\\''\nexport CONDA_PREFIX_4='\\''/opt/miniconda3'\\''\nexport CONDA_EXE='\\''/opt/miniconda3/bin/conda'\\''\nexport _CE_M='\\'''\\''\nexport _CE_CONDA='\\'''\\''\nexport CONDA_PYTHON_EXE='\\''/opt/miniconda3/bin/python'\\'''\n++ PS1='(testbed) '\n++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed\n++ CONDA_PREFIX=/opt/miniconda3/envs/testbed\n++ export CONDA_SHLVL=5\n++ CONDA_SHLVL=5\n++ export CONDA_DEFAULT_ENV=testbed\n++ CONDA_DEFAULT_ENV=testbed\n++ export 'CONDA_PROMPT_MODIFIER=(testbed) '\n++ CONDA_PROMPT_MODIFIER='(testbed) '\n++ export CONDA_PREFIX_4=/opt/miniconda3\n++ CONDA_PREFIX_4=/opt/miniconda3\n++ export CONDA_EXE=/opt/miniconda3/bin/conda\n++ CONDA_EXE=/opt/miniconda3/bin/conda\n++ export _CE_M=\n++ _CE_M=\n++ export _CE_CONDA=\n++ _CE_CONDA=\n++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python\n+ __conda_hashr\n+ '[' -n '' ']'\n+ '[' -n '' ']'\n+ hash -r\n+ python -m pip install -e .\nWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\n+ git checkout 004b4620f6f4ad87261e149898940f2dcd5757ef tests/decorators/tests.py\nUpdated 0 paths from 233f505d74\n+ git apply -v -\nChecking patch tests/decorators/tests.py...\nApplied patch tests/decorators/tests.py cleanly.\n+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 decorators.tests\ntest_cache_control_decorator_http_request (decorators.tests.CacheControlDecoratorTest) ... ok\ntest_argumented (decorators.tests.MethodDecoratorTests) ... ok\ntest_bad_iterable (decorators.tests.MethodDecoratorTests) ... ok\ntest_class_decoration (decorators.tests.MethodDecoratorTests)\n@method_decorator can be used to decorate a class and its methods. ... ok\ntest_descriptors (decorators.tests.MethodDecoratorTests) ... ok\ntest_invalid_method_name_to_decorate (decorators.tests.MethodDecoratorTests)\n@method_decorator on a nonexistent method raises an error. ... ok\ntest_invalid_non_callable_attribute_decoration (decorators.tests.MethodDecoratorTests)\n@method_decorator on a non-callable attribute raises an error. ... ok\ntest_new_attribute (decorators.tests.MethodDecoratorTests)\nA decorator that sets a new attribute on the method. ... ok\ntest_preserve_attributes (decorators.tests.MethodDecoratorTests) ... ok\ntest_preserve_signature (decorators.tests.MethodDecoratorTests) ... ok\ntest_tuple_of_decorators (decorators.tests.MethodDecoratorTests)\n@method_decorator can accept a tuple of decorators. ... ok\ntest_wrapper_assignments (decorators.tests.MethodDecoratorTests)\n@method_decorator preserves wrapper assignments. ... ok\ntest_never_cache_decorator (decorators.tests.NeverCacheDecoratorTest) ... ok\ntest_never_cache_decorator_http_request (decorators.tests.NeverCacheDecoratorTest) ... ok\ntest_attributes (decorators.tests.DecoratorsTest)\nBuilt-in decorators set certain attributes of the wrapped function. ... ok\ntest_cache_page (decorators.tests.DecoratorsTest) ... ok\ntest_require_safe_accepts_only_safe_methods (decorators.tests.DecoratorsTest)\nTest for the require_safe decorator. ... ok\ntest_user_passes_test_composition (decorators.tests.DecoratorsTest)\nThe user_passes_test decorator can be applied multiple times (#9474). ... ok\ntest_deny_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\nEnsures @xframe_options_deny properly sets the X-Frame-Options header. ... ok\ntest_exempt_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\nEnsures @xframe_options_exempt properly instructs the ... ok\ntest_sameorigin_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\nEnsures @xframe_options_sameorigin properly sets the X-Frame-Options ... ok\n\n----------------------------------------------------------------------\nRan 21 tests in 0.005s\n\nOK\n+ git checkout 004b4620f6f4ad87261e149898940f2dcd5757ef tests/decorators/tests.py\nUpdated 1 path from 233f505d74\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/utils/decorators.py\n\tmodified:   tests/utils_tests/test_decorators.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 004b4620f6f4ad87261e149898940f2dcd5757ef\nAuthor: Shreya Bamne <shreya.bamne@gmail.com>\nDate:   Tue Aug 3 15:20:49 2021 +0100\n\n    Fixed #32987 -- Added system check for template tag modules with the same name.\n    \n    Co-authored-by: Daniel Fairhead <daniel@dev.ngo>\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 55e6579840..01adc8575a 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -223,6 +223,7 @@ answer newbie questions, and generally made Django that much better:\n     Daniel Alves Barbosa de Oliveira Vaz <danielvaz@gmail.com>\n     Daniel Duan <DaNmarner@gmail.com>\n     Daniele Procida <daniele@vurt.org>\n+    Daniel Fairhead <danthedeckie@gmail.com>\n     Daniel Greenfeld\n     dAniel hAhler\n     Daniel Jilg <daniel@breakthesystem.org>\n@@ -860,6 +861,7 @@ answer newbie questions, and generally made Django that much better:\n     Shai Berger <shai@platonix.com>\n     Shannon -jj Behrens <https://www.jjinux.com/>\n     Shawn Milochik <shawn@milochik.com>\n+    Shreya Bamne <shreya.bamne@gmail.com>\n     Silvan Spross <silvan.spross@gmail.com>\n     Simeon Visser <http://simeonvisser.com>\n     Simon Blanchard\ndiff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 8c4b7c172b..14325bd3e0 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -1,6 +1,8 @@\n import copy\n+from collections import defaultdict\n \n from django.conf import settings\n+from django.template.backends.django import get_template_tag_modules\n \n from . import Error, Tags, register\n \n@@ -13,6 +15,10 @@ E002 = Error(\n     \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {} ({}).\",\n     id=\"templates.E002\",\n )\n+E003 = Error(\n+    '{} is used for multiple template tag modules: {}',\n+    id='templates.E003',\n+)\n \n \n @register(Tags.templates)\n@@ -33,3 +39,29 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n             error.msg = error.msg.format(string_if_invalid, type(string_if_invalid).__name__)\n             errors.append(error)\n     return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(list)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get('OPTIONS', {}).get('libraries', {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].append(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].append(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(Error(\n+                E003.msg.format(\n+                    repr(library_name),\n+                    ', '.join(repr(item) for item in items),\n+                ),\n+                id=E003.id,\n+            ))\n+\n+    return errors\ndiff --git a/docs/ref/checks.txt b/docs/ref/checks.txt\nindex 727d16b772..6c95b9376d 100644\n--- a/docs/ref/checks.txt\n+++ b/docs/ref/checks.txt\n@@ -541,6 +541,8 @@ configured:\n * **templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES`\n   :setting:`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}``\n   (``{type}``).\n+* **templates.E003**:``<name>`` is used for multiple template tag modules:\n+  ``<module list>``.\n \n Translation\n -----------\ndiff --git a/tests/check_framework/template_test_apps/__init__.py b/tests/check_framework/template_test_apps/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/__init__.py b/tests/check_framework/template_test_apps/different_tags_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/apps.py b/tests/check_framework/template_test_apps/different_tags_app/apps.py\nnew file mode 100644\nindex 0000000000..90d54b3d50\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/different_tags_app/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class DifferentTagsAppAppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.different_tags_app'\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/templatetags/__init__.py b/tests/check_framework/template_test_apps/different_tags_app/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py b/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_1/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/apps.py b/tests/check_framework/template_test_apps/same_tags_app_1/apps.py\nnew file mode 100644\nindex 0000000000..44149177a0\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_1/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class SameTagsApp1AppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.same_tags_app_1'\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_2/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/apps.py b/tests/check_framework/template_test_apps/same_tags_app_2/apps.py\nnew file mode 100644\nindex 0000000000..d90c800d1f\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_2/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class SameTagsApp2AppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.same_tags_app_2'\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 955c863822..88c0479436 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -1,8 +1,9 @@\n from copy import copy, deepcopy\n \n+from django.core.checks import Error\n from django.core.checks.templates import (\n-    E001, E002, check_setting_app_dirs_loaders,\n-    check_string_if_invalid_is_string,\n+    E001, E002, E003, check_for_template_tags_with_the_same_name,\n+    check_setting_app_dirs_loaders, check_string_if_invalid_is_string,\n )\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n@@ -87,3 +88,85 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n         del TEMPLATES[1]['OPTIONS']['string_if_invalid']\n         with self.settings(TEMPLATES=TEMPLATES):\n             self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n+\n+\n+class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'same_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                \"templatetags.same_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_2.\"\n+                \"templatetags.same_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'OPTIONS': {\n+                'libraries': {\n+                    module_name: f'check_framework.template_test_apps.{module_path}',\n+                },\n+            },\n+        }\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1',\n+        'check_framework.template_test_apps.same_tags_app_2',\n+    ])\n+    def test_template_tags_with_same_name(self):\n+        self.assertEqual(\n+            check_for_template_tags_with_the_same_name(None),\n+            [self.error_same_tags],\n+        )\n+\n+    def test_template_tags_with_same_library_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings('same_tags', 'same_tags_app_1.templatetags.same_tags'),\n+            self.get_settings('same_tags', 'same_tags_app_2.templatetags.same_tags'),\n+        ]):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [self.error_same_tags],\n+            )\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1'\n+    ])\n+    def test_template_tags_with_same_library_name_and_module_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings(\n+                'same_tags',\n+                'different_tags_app.templatetags.different_tags',\n+            ),\n+        ]):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [Error(\n+                E003.msg.format(\n+                    \"'same_tags'\",\n+                    \"'check_framework.template_test_apps.different_tags_app.\"\n+                    \"templatetags.different_tags', \"\n+                    \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                    \"templatetags.same_tags'\",\n+                ),\n+                id=E003.id,\n+            )])\n+\n+    def test_template_tags_with_different_library_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings('same_tags', 'same_tags_app_1.templatetags.same_tags'),\n+            self.get_settings('not_same_tags', 'same_tags_app_2.templatetags.same_tags'),\n+        ]):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1',\n+        'check_framework.template_test_apps.different_tags_app',\n+    ])\n+    def test_template_tags_with_different_name(self):\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\ndiff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..1f9460fa8d 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)  # Preserve the original method's attributes\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n@@ -176,4 +177,4 @@ def async_only_middleware(func):\n     \"\"\"Mark a middleware factory as returning an async middleware.\"\"\"\n     func.sync_capable = False\n     func.async_capable = True\n-    return func\n+    return func\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_decorators.py b/tests/utils_tests/test_decorators.py\nindex 4cd8320d0b..13723b8ef0 100644\n--- a/tests/utils_tests/test_decorators.py\n+++ b/tests/utils_tests/test_decorators.py\n@@ -53,11 +53,29 @@ class FullMiddleware:\n full_dec = decorator_from_middleware(FullMiddleware)\n \n \n+def attribute_preserving_decorator(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        return func(*args, **kwargs)\n+    wrapper.custom_attribute = \"test_value\"\n+    return wrapper\n+\n class DecoratorFromMiddlewareTests(SimpleTestCase):\n     \"\"\"\n     Tests for view decorators created using\n     ``django.utils.decorators.decorator_from_middleware``.\n     \"\"\"\n+    def test_method_decorator_preserves_attributes(self):\n+        class TestClass:\n+            @method_decorator(attribute_preserving_decorator)\n+            def test_method(self):\n+                return \"test\"\n+        \n+        instance = TestClass()\n+        self.assertEqual(instance.test_method.__name__, \"test_method\")\n+        # Verify the decorator's custom attribute is preserved\n+        self.assertTrue(hasattr(instance.test_method, \"custom_attribute\"))\n+        self.assertEqual(instance.test_method.custom_attribute, \"test_value\")\n     rf = RequestFactory()\n \n     def test_process_view_middleware(self):\n@@ -113,4 +131,4 @@ class DecoratorFromMiddlewareTests(SimpleTestCase):\n         response.render()\n         self.assertTrue(getattr(request, 'process_response_reached', False))\n         # process_response saw the rendered content\n-        self.assertEqual(request.process_response_content, b\"Hello world\")\n+        self.assertEqual(request.process_response_content, b\"Hello world\")\n\\ No newline at end of file\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211020091547) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211020091547) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.3.2->Django==4.1.dev20211020091547) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20211020091547-0.editable-py3-none-any.whl size=26778 sha256=fa322bc16c3cbf372004838f9cd56644b2a74cd0b75e54a9bbfcad83daa12208\n  Stored in directory: /tmp/pip-ephem-wheel-cache-30457_yn/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20211020091547\n    Uninstalling Django-4.1.dev20211020091547:\n      Successfully uninstalled Django-4.1.dev20211020091547\nSuccessfully installed Django-4.1.dev20211020091547\nTesting against Django installed in '/testbed/django'\nImporting application decorators\nFound 21 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n",
    "report": {
      "patch_is_None": false,
      "patch_exists": true,
      "patch_successfully_applied": true,
      "resolved": true,
      "tests_status": {
        "FAIL_TO_PASS": {
          "success": [
            "@method_decorator preserves wrapper assignments."
          ],
          "failure": []
        },
        "PASS_TO_PASS": {
          "success": [
            "test_cache_control_decorator_http_request (decorators.tests.CacheControlDecoratorTest)",
            "Ensures @xframe_options_deny properly sets the X-Frame-Options header.",
            "Ensures @xframe_options_exempt properly instructs the",
            "Ensures @xframe_options_sameorigin properly sets the X-Frame-Options",
            "Built-in decorators set certain attributes of the wrapped function.",
            "test_cache_page (decorators.tests.DecoratorsTest)",
            "Test for the require_safe decorator.",
            "The user_passes_test decorator can be applied multiple times (#9474).",
            "test_never_cache_decorator (decorators.tests.NeverCacheDecoratorTest)",
            "test_never_cache_decorator_http_request (decorators.tests.NeverCacheDecoratorTest)",
            "test_argumented (decorators.tests.MethodDecoratorTests)",
            "test_bad_iterable (decorators.tests.MethodDecoratorTests)",
            "@method_decorator can be used to decorate a class and its methods.",
            "test_descriptors (decorators.tests.MethodDecoratorTests)",
            "@method_decorator on a nonexistent method raises an error.",
            "@method_decorator on a non-callable attribute raises an error.",
            "A decorator that sets a new attribute on the method.",
            "test_preserve_attributes (decorators.tests.MethodDecoratorTests)",
            "test_preserve_signature (decorators.tests.MethodDecoratorTests)",
            "@method_decorator can accept a tuple of decorators."
          ],
          "failure": []
        },
        "FAIL_TO_FAIL": {
          "success": [],
          "failure": []
        },
        "PASS_TO_FAIL": {
          "success": [],
          "failure": []
        }
      }
    }
  }
}