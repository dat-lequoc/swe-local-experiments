diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..1f9460fa8d 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
         bound_method = partial(method.__get__(self, type(self)))
+        update_wrapper(bound_method, method)  # Preserve the original method's attributes
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
@@ -176,4 +177,4 @@ def async_only_middleware(func):
     """Mark a middleware factory as returning an async middleware."""
     func.sync_capable = False
     func.async_capable = True
-    return func
+    return func
\ No newline at end of file
diff --git a/tests/utils_tests/test_decorators.py b/tests/utils_tests/test_decorators.py
index 4cd8320d0b..13723b8ef0 100644
--- a/tests/utils_tests/test_decorators.py
+++ b/tests/utils_tests/test_decorators.py
@@ -53,11 +53,29 @@ class FullMiddleware:
 full_dec = decorator_from_middleware(FullMiddleware)
 
 
+def attribute_preserving_decorator(func):
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        return func(*args, **kwargs)
+    wrapper.custom_attribute = "test_value"
+    return wrapper
+
 class DecoratorFromMiddlewareTests(SimpleTestCase):
     """
     Tests for view decorators created using
     ``django.utils.decorators.decorator_from_middleware``.
     """
+    def test_method_decorator_preserves_attributes(self):
+        class TestClass:
+            @method_decorator(attribute_preserving_decorator)
+            def test_method(self):
+                return "test"
+        
+        instance = TestClass()
+        self.assertEqual(instance.test_method.__name__, "test_method")
+        # Verify the decorator's custom attribute is preserved
+        self.assertTrue(hasattr(instance.test_method, "custom_attribute"))
+        self.assertEqual(instance.test_method.custom_attribute, "test_value")
     rf = RequestFactory()
 
     def test_process_view_middleware(self):
@@ -113,4 +131,4 @@ class DecoratorFromMiddlewareTests(SimpleTestCase):
         response.render()
         self.assertTrue(getattr(request, 'process_response_reached', False))
         # process_response saw the rendered content
-        self.assertEqual(request.process_response_content, b"Hello world")
+        self.assertEqual(request.process_response_content, b"Hello world")
\ No newline at end of file
