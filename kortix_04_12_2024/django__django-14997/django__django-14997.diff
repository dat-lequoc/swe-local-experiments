diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index f0c81c123b..93be26472a 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -6,7 +6,7 @@ from django.db import NotSupportedError
 from django.db.backends.base.schema import BaseDatabaseSchemaEditor
 from django.db.backends.ddl_references import Statement
 from django.db.backends.utils import strip_quotes
-from django.db.models import UniqueConstraint
+from django.db.models import UniqueConstraint, F
 from django.db.transaction import atomic
 
 
@@ -236,7 +236,24 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
                 if delete_field.name not in index.fields
             ]
 
-        constraints = list(model._meta.constraints)
+        constraints = []
+        for constraint in model._meta.constraints:
+            if isinstance(constraint, UniqueConstraint):
+                # Handle F() expressions in unique constraints for SQLite
+                fields = []
+                for field in constraint.fields:
+                    if isinstance(field, F):
+                        # Convert F() expression to column name
+                        fields.append(field.name)
+                    else:
+                        fields.append(field)
+                constraint = UniqueConstraint(
+                    *fields,
+                    name=constraint.name,
+                    condition=constraint.condition,
+                    deferrable=constraint.deferrable,
+                )
+            constraints.append(constraint)
 
         # Provide isolated instances of the fields to the new model body so
         # that the existing model's internals aren't interfered with when
@@ -441,4 +458,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             self._remake_table(model)
 
     def _collate_sql(self, collation):
-        return 'COLLATE ' + collation
+        return 'COLLATE ' + collation
\ No newline at end of file
