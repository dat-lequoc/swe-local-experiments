diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index 6ec7bd891c..7be1903c70 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -398,6 +398,7 @@ def pycode(expr, **settings):
 _in_mpmath = [(k, v) for k, v in _known_functions_math.items() if k not in _not_in_mpmath]
 _known_functions_mpmath = dict(_in_mpmath, **{
     'sign': 'sign',
+    'Identity': 'identity',
 })
 _known_constants_mpmath = {
     'Pi': 'pi'
@@ -472,6 +473,7 @@ def _print_log1p(self, e):
     'atanh': 'arctanh',
     'exp2': 'exp2',
     'sign': 'sign',
+    'Identity': 'identity',
 })
 
 
@@ -602,6 +604,9 @@ def _print_re(self, expr):
     def _print_sinc(self, expr):
         return "%s(%s)" % (self._module_format('numpy.sinc'), self._print(expr.args[0]/S.Pi))
 
+    def _print_Identity(self, expr):
+        return "%s(%s)" % (self._module_format('numpy.identity'), self._print(expr.shape[0]))
+
     def _print_MatrixBase(self, expr):
         func = self.known_functions.get(expr.__class__.__name__, None)
         if func is None:
@@ -753,4 +758,4 @@ class SymPyPrinter(PythonCodePrinter):
     def _print_Function(self, expr):
         mod = expr.func.__module__ or ''
         return '%s(%s)' % (self._module_format(mod + ('.' if mod else '') + expr.func.__name__),
-                           ', '.join(map(lambda arg: self._print(arg), expr.args)))
+                           ', '.join(map(lambda arg: self._print(arg), expr.args)))
\ No newline at end of file
diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py
index e56fd6461e..be4479077c 100644
--- a/sympy/utilities/tests/test_lambdify.py
+++ b/sympy/utilities/tests/test_lambdify.py
@@ -4,7 +4,9 @@
 import inspect
 
 import mpmath
-from sympy.utilities.pytest import XFAIL, raises
+from pytest import mark
+XFAIL = mark.xfail
+from sympy.utilities.pytest import raises
 from sympy import (
     symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational,
     Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,
@@ -420,6 +422,16 @@ def test_numpy_inverse():
     numpy.testing.assert_array_equal(f(2), numpy.array([[1, -2], [0,  1]]))
 
 
+def test_numpy_identity_matrix():
+    if not numpy:
+        skip("numpy not installed.")
+    n = symbols('n', integer=True)
+    A = MatrixSymbol("A", 2, 2)
+    expr = A + Identity(2)
+    f = lambdify(A, expr, modules="numpy")
+    a = numpy.array([[1, 2], [3, 4]])
+    numpy.testing.assert_array_equal(f(a), numpy.array([[2, 2], [3, 5]]))
+
 def test_numpy_old_matrix():
     if not numpy:
         skip("numpy not installed.")
@@ -1163,4 +1175,4 @@ def test_issue_16930():
     x = symbols("x")
     f = lambda x:  S.GoldenRatio * x**2
     f_ = lambdify(x, f(x), modules='scipy')
-    assert f_(1) == scipy.constants.golden_ratio
+    assert f_(1) == scipy.constants.golden_ratio
\ No newline at end of file
