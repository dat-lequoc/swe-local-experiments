diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py
index f0b663222a..24c7964722 100644
--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -55,11 +55,11 @@ class Command(BaseCommand):
                 migration_name, app_label))
         targets = [(app_label, migration.name)]
 
-        # Show begin/end around output only for atomic migrations
-        self.output_transaction = migration.atomic
+        # Show begin/end around output only for atomic migrations on DBs that support transactional DDL
+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl
 
         # Make a plan that represents just the requested migrations and show SQL
         # for it
         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]
         sql_statements = executor.collect_sql(plan)
-        return '\n'.join(sql_statements)
+        return '\n'.join(sql_statements)
\ No newline at end of file
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 0e8fa9fdd1..cce0dbb5bd 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -616,6 +616,21 @@ class MigrateTests(MigrationTestBase):
             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)
         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)
 
+    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
+    def test_sqlmigrate_no_transactions_if_db_doesnt_support(self):
+        """
+        Transaction wrappers aren't shown for databases that don't support
+        transactional DDL statements, even if the migration is atomic.
+        """
+        out = io.StringIO()
+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):
+            call_command("sqlmigrate", "migrations", "0001", stdout=out)
+        output = out.getvalue().lower()
+        queries = [q.strip() for q in output.splitlines()]
+        if connection.ops.start_transaction_sql():
+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)
+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)
+
     @override_settings(
         INSTALLED_APPS=[
             "migrations.migrations_test_apps.migrated_app",
@@ -1591,4 +1606,4 @@ class AppLabelErrorTests(TestCase):
 
     def test_squashmigrations_app_name_specified_as_label(self):
         with self.assertRaisesMessage(CommandError, self.did_you_mean_auth_error):
-            call_command('squashmigrations', 'django.contrib.auth', '0002')
+            call_command('squashmigrations', 'django.contrib.auth', '0002')
\ No newline at end of file
