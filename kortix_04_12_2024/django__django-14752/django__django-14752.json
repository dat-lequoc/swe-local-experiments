{
  "instance_id": "django__django-14752",
  "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..3167b3f48a 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,28 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Serialize object for JSON response.\n+        \n+        Args:\n+            obj: The model instance\n+            to_field_name: The field to use for the object's ID\n+            \n+        Returns:\n+            dict: Serialized object with 'id' and 'text' keys\n+        \"\"\"\n+        return {\n+            'id': str(getattr(obj, to_field_name)),\n+            'text': str(obj),\n+        }\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n@@ -99,4 +115,4 @@ class AutocompleteJsonView(BaseListView):\n \n     def has_perm(self, request, obj=None):\n         \"\"\"Check if user has permission to access the related model.\"\"\"\n-        return self.model_admin.has_view_permission(request, obj=obj)\n+        return self.model_admin.has_view_permission(request, obj=obj)\n\\ No newline at end of file\ndiff --git a/tests/admin_views/test_autocomplete.py b/tests/admin_views/test_autocomplete.py\nnew file mode 100644\nindex 0000000000..22bf86d968\n--- /dev/null\n+++ b/tests/admin_views/test_autocomplete.py\n@@ -0,0 +1,45 @@\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.contrib.auth.models import Permission, User\n+from django.test import RequestFactory, TestCase\n+from django.urls import path, reverse\n+\n+from .models import Parent, Child\n+from .admin import ParentAdmin, site\n+\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', email='super@example.com', password='secret'\n+        )\n+        cls.user = User.objects.create_user(\n+            username='user', email='user@example.com', password='secret'\n+        )\n+        cls.factory = RequestFactory()\n+        cls.parent = Parent.objects.create(name=\"Test Parent\")\n+        cls.child = Child.objects.create(name=\"Test Child\", parent=cls.parent)\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_serialize_result(self):\n+        view = AutocompleteJsonView()\n+        view.admin_site = site\n+        result = view.serialize_result(self.parent, 'id')\n+        self.assertEqual(result, {'id': str(self.parent.id), 'text': str(self.parent)})\n+\n+    def test_custom_serialize_result(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                result = super().serialize_result(obj, to_field_name)\n+                result['extra'] = 'custom'\n+                return result\n+\n+        view = CustomAutocompleteJsonView()\n+        view.admin_site = site\n+        result = view.serialize_result(self.parent, 'id')\n+        self.assertEqual(\n+            result,\n+            {'id': str(self.parent.id), 'text': str(self.parent), 'extra': 'custom'}\n+        )\n",
  "model_name_or_path": "KortixAI"
}