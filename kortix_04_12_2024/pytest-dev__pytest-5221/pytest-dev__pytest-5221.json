{
  "instance_id": "pytest-dev__pytest-5221",
  "model_patch": "diff --git a/src/_pytest/helpconfig.py b/src/_pytest/helpconfig.py\nindex 2b383d264..31bd7dcfd 100644\n--- a/src/_pytest/helpconfig.py\n+++ b/src/_pytest/helpconfig.py\n@@ -151,6 +151,27 @@ def showhelp(config):\n     )\n     tw.line()\n \n+    def get_fixture_scope(fixturedef):\n+        \"\"\"Get scope from fixture definition.\"\"\"\n+        return getattr(fixturedef, \"scope\", \"function\")\n+\n+    def format_fixture_line(name, fixturedef):\n+        \"\"\"Format fixture line with scope information.\"\"\"\n+        scope = get_fixture_scope(fixturedef)\n+        return \"{} (scope: {})\".format(name, scope)\n+\n+    def get_fixture_scope(fixturedef):\n+        \"\"\"Get scope from fixture definition.\"\"\"\n+        return getattr(fixturedef, \"scope\", \"function\")\n+\n+    # Get fixture manager\n+    fm = config.pluginmanager.get_plugin(\"funcmanage\")\n+\n+    def format_fixture(fixture):\n+        \"\"\"Format fixture with scope information.\"\"\"\n+        scope = getattr(fixture, \"scope\", \"function\")\n+        return \"{} (scope: {})\".format(fixture.name, scope)\n+\n     columns = tw.fullwidth  # costly call\n     for name in config._parser._ininames:\n         help, type, default = config._parser._inidict[name]\n@@ -178,9 +199,28 @@ def showhelp(config):\n     tw.line(\n         \"(shown according to specified file_or_dir or current dir \"\n         \"if not specified; fixtures with leading '_' are only shown \"\n-        \"with the '-v' option\"\n+        \"with the '-v' option; fixture scope shown in parentheses\"\n     )\n \n+    # Get all fixtures from the plugin manager\n+    fm = config.pluginmanager.get_plugin(\"funcmanage\")\n+\n+    # Get fixture definitions\n+    fm = config.pluginmanager.get_plugin(\"funcmanager\")\n+    if fm is not None:\n+        for name, fixturedef in fm._arg2fixturedefs.items():\n+            if fixturedef:\n+                scope = get_fixture_scope(fixturedef[-1])\n+                tw.line(f\"{name} (scope: {scope})\")\n+\n+    # Get fixture definitions from fixture manager\n+    fm = config.pluginmanager.get_plugin(\"funcmanager\")\n+    if fm is not None:\n+        for name, fixturedefs in sorted(fm._arg2fixturedefs.items()):\n+            if fixturedefs:\n+                fixturedef = fixturedefs[-1]\n+                tw.line(format_fixture_line(name, fixturedef))\n+\n     for warningreport in reporter.stats.get(\"warnings\", []):\n         tw.line(\"warning : \" + warningreport.message, red=True)\n     return\n@@ -219,4 +259,4 @@ def pytest_report_header(config):\n             else:\n                 r = repr(plugin)\n             lines.append(\"    %-20s: %s\" % (name, r))\n-    return lines\n+    return lines\n\\ No newline at end of file\ndiff --git a/testing/test_helpconfig.py b/testing/test_helpconfig.py\nindex 9c7806d54..95f472b96 100644\n--- a/testing/test_helpconfig.py\n+++ b/testing/test_helpconfig.py\n@@ -75,3 +75,25 @@ def test_PYTEST_DEBUG(testdir, monkeypatch):\n     result.stderr.fnmatch_lines(\n         [\"*pytest_plugin_registered*\", \"*manager*PluginManager*\"]\n     )\n+\n+def test_fixtures_show_scope(testdir):\n+    testdir.makepyfile('''\n+        import pytest\n+        @pytest.fixture(scope=\"session\")\n+        def session_fix():\n+            return 1\n+            \n+        @pytest.fixture(scope=\"module\")\n+        def module_fix():\n+            return 1\n+            \n+        @pytest.fixture(scope=\"function\")\n+        def function_fix():\n+            return 1\n+    ''')\n+    result = testdir.runpytest(\"--fixtures\")\n+    result.stdout.fnmatch_lines([\n+        \"*function_fix (scope: function)*\",\n+        \"*module_fix (scope: module)*\",\n+        \"*session_fix (scope: session)*\",\n+    ])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}