{
  "instance_id": "django__django-14155",
  "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..85c6c675a7 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,28 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n-            # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+        # Handle functools.partial\n+        if isinstance(func, functools.partial):\n+            inner_func = func.func\n+            # Store partial info for repr\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords or {}\n+            # Use the inner function for path generation\n+            if not hasattr(inner_func, '__name__'):\n+                # A class-based view\n+                self._func_path = inner_func.__class__.__module__ + '.' + inner_func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = inner_func.__module__ + '.' + inner_func.__name__\n         else:\n-            # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._partial_args = ()\n+            self._partial_keywords = {}\n+            if not hasattr(func, '__name__'):\n+                # A class-based view\n+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = func.__module__ + '.' + func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +75,19 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if self._partial_args or self._partial_keywords:\n+            partial_args = ', '.join([repr(arg) for arg in self._partial_args])\n+            partial_kwargs = ', '.join([f\"{k}={repr(v)}\" for k, v in self._partial_keywords.items()])\n+            partial_params = []\n+            if partial_args:\n+                partial_params.append(partial_args)\n+            if partial_kwargs:\n+                partial_params.append(partial_kwargs)\n+            if partial_params:\n+                func_repr = f\"{self._func_path}({', '.join(partial_params)})\"\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n@@ -691,4 +718,4 @@ class URLResolver:\n                 \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                 \"a valid view function or pattern name.\" % {'view': lookup_view_s}\n             )\n-        raise NoReverseMatch(msg)\n+        raise NoReverseMatch(msg)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}