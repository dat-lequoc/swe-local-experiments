{
  "patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -12,6 +12,7 @@\n \n import matplotlib as mpl\n from . import _api, cbook\n+from .colors import BoundaryNorm\n from .cm import ScalarMappable\n from .path import Path\n from .transforms import (Bbox, IdentityTransform, Transform, TransformedBbox,\n@@ -1303,10 +1304,20 @@ def format_cursor_data(self, data):\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n+                if isinstance(self.norm, BoundaryNorm):\n+                    # not an invertible normalization mapping\n+                    cur_idx = np.argmin(np.abs(self.norm.boundaries - data))\n+                    neigh_idx = max(0, cur_idx - 1)\n+                    # use max diff to prevent delta == 0\n+                    delta = np.diff(\n+                        self.norm.boundaries[neigh_idx:cur_idx + 2]\n+                    ).max()\n+\n+                else:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(normed * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n                 g_sig_digits = cbook._g_sig_digits(data, delta)\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py\n--- a/lib/matplotlib/tests/test_artist.py\n+++ b/lib/matplotlib/tests/test_artist.py\n@@ -5,6 +5,8 @@\n \n import pytest\n \n+from matplotlib import cm\n+import matplotlib.colors as mcolors\n import matplotlib.pyplot as plt\n import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n@@ -372,3 +374,164 @@ class MyArtist4(MyArtist3):\n         pass\n \n     assert MyArtist4.set is MyArtist3.set\n+\n+\n+def test_format_cursor_data_BoundaryNorm():\n+    \"\"\"Test if cursor data is correct when using BoundaryNorm.\"\"\"\n+    X = np.empty((3, 3))\n+    X[0, 0] = 0.9\n+    X[0, 1] = 0.99\n+    X[0, 2] = 0.999\n+    X[1, 0] = -1\n+    X[1, 1] = 0\n+    X[1, 2] = 1\n+    X[2, 0] = 0.09\n+    X[2, 1] = 0.009\n+    X[2, 2] = 0.0009\n+\n+    # map range -1..1 to 0..256 in 0.1 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.1\")\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 20), 256)\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+\n+    labels_list = [\n+        \"[0.9]\",\n+        \"[1.]\",\n+        \"[1.]\",\n+        \"[-1.0]\",\n+        \"[0.0]\",\n+        \"[1.0]\",\n+        \"[0.09]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.1))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # map range -1..1 to 0..256 in 0.01 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.01\")\n+    cmap = cm.get_cmap('RdBu_r', 200)\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 200), 200)\n+    img = ax.imshow(X, cmap=cmap, norm=norm)\n+\n+    labels_list = [\n+        \"[0.90]\",\n+        \"[0.99]\",\n+        \"[1.0]\",\n+        \"[-1.00]\",\n+        \"[0.00]\",\n+        \"[1.00]\",\n+        \"[0.09]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.01))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # map range -1..1 to 0..256 in 0.01 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.001\")\n+    cmap = cm.get_cmap('RdBu_r', 2000)\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 2000), 2000)\n+    img = ax.imshow(X, cmap=cmap, norm=norm)\n+\n+    labels_list = [\n+        \"[0.900]\",\n+        \"[0.990]\",\n+        \"[0.999]\",\n+        \"[-1.000]\",\n+        \"[0.000]\",\n+        \"[1.000]\",\n+        \"[0.090]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.001))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # different testing data set with\n+    # out of bounds values for 0..1 range\n+    X = np.empty((7, 1))\n+    X[0] = -1.0\n+    X[1] = 0.0\n+    X[2] = 0.1\n+    X[3] = 0.5\n+    X[4] = 0.9\n+    X[5] = 1.0\n+    X[6] = 2.0\n+\n+    labels_list = [\n+        \"[-1.0]\",\n+        \"[0.0]\",\n+        \"[0.1]\",\n+        \"[0.5]\",\n+        \"[0.9]\",\n+        \"[1.0]\",\n+        \"[2.0]\",\n+    ]\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, neither\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='neither')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, min\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='min')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, max\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='max')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, both\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='both')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"clip, neither\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=True, extend='neither')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n"
}