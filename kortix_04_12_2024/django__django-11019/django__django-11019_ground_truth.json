{
  "patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -6,16 +6,21 @@\n import datetime\n import re\n import warnings\n+from collections import defaultdict\n from itertools import chain\n \n from django.conf import settings\n from django.forms.utils import to_current_timezone\n from django.templatetags.static import static\n from django.utils import datetime_safe, formats\n+from django.utils.datastructures import OrderedSet\n from django.utils.dates import MONTHS\n from django.utils.formats import get_format\n from django.utils.html import format_html, html_safe\n from django.utils.safestring import mark_safe\n+from django.utils.topological_sort import (\n+    CyclicDependencyError, stable_topological_sort,\n+)\n from django.utils.translation import gettext_lazy as _\n \n from .renderers import get_default_renderer\n@@ -59,22 +64,15 @@ def __str__(self):\n \n     @property\n     def _css(self):\n-        css = self._css_lists[0]\n-        # filter(None, ...) avoids calling merge with empty dicts.\n-        for obj in filter(None, self._css_lists[1:]):\n-            css = {\n-                medium: self.merge(css.get(medium, []), obj.get(medium, []))\n-                for medium in css.keys() | obj.keys()\n-            }\n-        return css\n+        css = defaultdict(list)\n+        for css_list in self._css_lists:\n+            for medium, sublist in css_list.items():\n+                css[medium].append(sublist)\n+        return {medium: self.merge(*lists) for medium, lists in css.items()}\n \n     @property\n     def _js(self):\n-        js = self._js_lists[0]\n-        # filter(None, ...) avoids calling merge() with empty lists.\n-        for obj in filter(None, self._js_lists[1:]):\n-            js = self.merge(js, obj)\n-        return js\n+        return self.merge(*self._js_lists)\n \n     def render(self):\n         return mark_safe('\\n'.join(chain.from_iterable(getattr(self, 'render_' + name)() for name in MEDIA_TYPES)))\n@@ -115,39 +113,37 @@ def __getitem__(self, name):\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n-    def merge(list_1, list_2):\n+    def merge(*lists):\n         \"\"\"\n-        Merge two lists while trying to keep the relative order of the elements.\n-        Warn if the lists have the same two elements in a different relative\n-        order.\n+        Merge lists while trying to keep the relative order of the elements.\n+        Warn if the lists have the same elements in a different relative order.\n \n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n         \"\"\"\n-        # Start with a copy of list_1.\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n-            else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n-        return combined_list\n+        dependency_graph = defaultdict(set)\n+        all_items = OrderedSet()\n+        for list_ in filter(None, lists):\n+            head = list_[0]\n+            # The first items depend on nothing but have to be part of the\n+            # dependency graph to be included in the result.\n+            dependency_graph.setdefault(head, set())\n+            for item in list_:\n+                all_items.add(item)\n+                # No self dependencies\n+                if head != item:\n+                    dependency_graph[item].add(head)\n+                head = item\n+        try:\n+            return stable_topological_sort(all_items, dependency_graph)\n+        except CyclicDependencyError:\n+            warnings.warn(\n+                'Detected duplicate Media files in an opposite order: {}'.format(\n+                    ', '.join(repr(l) for l in lists)\n+                ), MediaOrderConflictWarning,\n+            )\n+            return list(all_items)\n \n     def __add__(self, other):\n         combined = Media()\n",
  "test_patch": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -497,10 +497,10 @@ def test_inline_media_only_inline(self):\n             response.context['inline_admin_formsets'][0].media._js,\n             [\n                 'admin/js/vendor/jquery/jquery.min.js',\n-                'admin/js/jquery.init.js',\n-                'admin/js/inlines.min.js',\n                 'my_awesome_inline_scripts.js',\n                 'custom_number.js',\n+                'admin/js/jquery.init.js',\n+                'admin/js/inlines.min.js',\n             ]\n         )\n         self.assertContains(response, 'my_awesome_inline_scripts.js')\ndiff --git a/tests/admin_widgets/test_autocomplete_widget.py b/tests/admin_widgets/test_autocomplete_widget.py\n--- a/tests/admin_widgets/test_autocomplete_widget.py\n+++ b/tests/admin_widgets/test_autocomplete_widget.py\n@@ -139,4 +139,4 @@ def test_media(self):\n                 else:\n                     expected_files = base_files\n                 with translation.override(lang):\n-                    self.assertEqual(AutocompleteSelect(rel, admin.site).media._js, expected_files)\n+                    self.assertEqual(AutocompleteSelect(rel, admin.site).media._js, list(expected_files))\ndiff --git a/tests/forms_tests/tests/test_media.py b/tests/forms_tests/tests/test_media.py\n--- a/tests/forms_tests/tests/test_media.py\n+++ b/tests/forms_tests/tests/test_media.py\n@@ -25,8 +25,8 @@ def test_construction(self):\n         )\n         self.assertEqual(\n             repr(m),\n-            \"Media(css={'all': ('path/to/css1', '/path/to/css2')}, \"\n-            \"js=('/path/to/js1', 'http://media.other.com/path/to/js2', 'https://secure.other.com/path/to/js3'))\"\n+            \"Media(css={'all': ['path/to/css1', '/path/to/css2']}, \"\n+            \"js=['/path/to/js1', 'http://media.other.com/path/to/js2', 'https://secure.other.com/path/to/js3'])\"\n         )\n \n         class Foo:\n@@ -125,8 +125,8 @@ class Media:\n <link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n         # media addition hasn't affected the original objects\n@@ -151,6 +151,17 @@ class Media:\n         self.assertEqual(str(w4.media), \"\"\"<link href=\"/path/to/css1\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\"\"\")\n \n+    def test_media_deduplication(self):\n+        # A deduplication test applied directly to a Media object, to confirm\n+        # that the deduplication doesn't only happen at the point of merging\n+        # two or more media objects.\n+        media = Media(\n+            css={'all': ('/path/to/css1', '/path/to/css1')},\n+            js=('/path/to/js1', '/path/to/js1'),\n+        )\n+        self.assertEqual(str(media), \"\"\"<link href=\"/path/to/css1\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n+<script type=\"text/javascript\" src=\"/path/to/js1\"></script>\"\"\")\n+\n     def test_media_property(self):\n         ###############################################################\n         # Property-based media definitions\n@@ -197,12 +208,12 @@ def _media(self):\n         self.assertEqual(\n             str(w6.media),\n             \"\"\"<link href=\"http://media.example.com/static/path/to/css1\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n-<link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <link href=\"/other/path\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n+<link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n+<script type=\"text/javascript\" src=\"/other/js\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/other/js\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n     def test_media_inheritance(self):\n@@ -247,8 +258,8 @@ class Media:\n <link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n     def test_media_inheritance_from_property(self):\n@@ -322,8 +333,8 @@ class Media:\n <link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n     def test_media_inheritance_single_type(self):\n@@ -420,8 +431,8 @@ def __init__(self, attrs=None):\n <link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n     def test_form_media(self):\n@@ -462,8 +473,8 @@ class MyForm(Form):\n <link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n         # Form media can be combined to produce a single media definition.\n@@ -477,8 +488,8 @@ class AnotherForm(Form):\n <link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n-<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n         # Forms can also define media, following the same rules as widgets.\n@@ -495,28 +506,28 @@ class Media:\n         self.assertEqual(\n             str(f3.media),\n             \"\"\"<link href=\"http://media.example.com/static/path/to/css1\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n+<link href=\"/some/form/css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n-<link href=\"/some/form/css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n+<script type=\"text/javascript\" src=\"/some/form/javascript\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n <script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n-<script type=\"text/javascript\" src=\"/some/form/javascript\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n         )\n \n         # Media works in templates\n         self.assertEqual(\n             Template(\"{{ form.media.js }}{{ form.media.css }}\").render(Context({'form': f3})),\n             \"\"\"<script type=\"text/javascript\" src=\"/path/to/js1\"></script>\n+<script type=\"text/javascript\" src=\"/some/form/javascript\"></script>\n <script type=\"text/javascript\" src=\"http://media.other.com/path/to/js2\"></script>\n-<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\n <script type=\"text/javascript\" src=\"/path/to/js4\"></script>\n-<script type=\"text/javascript\" src=\"/some/form/javascript\"></script>\"\"\"\n+<script type=\"text/javascript\" src=\"https://secure.other.com/path/to/js3\"></script>\"\"\"\n             \"\"\"<link href=\"http://media.example.com/static/path/to/css1\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n+<link href=\"/some/form/css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n <link href=\"/path/to/css2\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n-<link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\n-<link href=\"/some/form/css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\"\"\"\n+<link href=\"/path/to/css3\" type=\"text/css\" media=\"all\" rel=\"stylesheet\">\"\"\"\n         )\n \n     def test_html_safe(self):\n@@ -526,19 +537,23 @@ def test_html_safe(self):\n \n     def test_merge(self):\n         test_values = (\n-            (([1, 2], [3, 4]), [1, 2, 3, 4]),\n+            (([1, 2], [3, 4]), [1, 3, 2, 4]),\n             (([1, 2], [2, 3]), [1, 2, 3]),\n             (([2, 3], [1, 2]), [1, 2, 3]),\n             (([1, 3], [2, 3]), [1, 2, 3]),\n             (([1, 2], [1, 3]), [1, 2, 3]),\n             (([1, 2], [3, 2]), [1, 3, 2]),\n+            (([1, 2], [1, 2]), [1, 2]),\n+            ([[1, 2], [1, 3], [2, 3], [5, 7], [5, 6], [6, 7, 9], [8, 9]], [1, 5, 8, 2, 6, 3, 7, 9]),\n+            ((), []),\n+            (([1, 2],), [1, 2]),\n         )\n-        for (list1, list2), expected in test_values:\n-            with self.subTest(list1=list1, list2=list2):\n-                self.assertEqual(Media.merge(list1, list2), expected)\n+        for lists, expected in test_values:\n+            with self.subTest(lists=lists):\n+                self.assertEqual(Media.merge(*lists), expected)\n \n     def test_merge_warning(self):\n-        msg = 'Detected duplicate Media files in an opposite order:\\n1\\n2'\n+        msg = 'Detected duplicate Media files in an opposite order: [1, 2], [2, 1]'\n         with self.assertWarnsMessage(RuntimeWarning, msg):\n             self.assertEqual(Media.merge([1, 2], [2, 1]), [1, 2])\n \n@@ -546,28 +561,30 @@ def test_merge_js_three_way(self):\n         \"\"\"\n         The relative order of scripts is preserved in a three-way merge.\n         \"\"\"\n-        # custom_widget.js doesn't depend on jquery.js.\n-        widget1 = Media(js=['custom_widget.js'])\n-        widget2 = Media(js=['jquery.js', 'uses_jquery.js'])\n-        form_media = widget1 + widget2\n-        # The relative ordering of custom_widget.js and jquery.js has been\n-        # established (but without a real need to).\n-        self.assertEqual(form_media._js, ['custom_widget.js', 'jquery.js', 'uses_jquery.js'])\n-        # The inline also uses custom_widget.js. This time, it's at the end.\n-        inline_media = Media(js=['jquery.js', 'also_jquery.js']) + Media(js=['custom_widget.js'])\n-        merged = form_media + inline_media\n-        self.assertEqual(merged._js, ['custom_widget.js', 'jquery.js', 'uses_jquery.js', 'also_jquery.js'])\n+        widget1 = Media(js=['color-picker.js'])\n+        widget2 = Media(js=['text-editor.js'])\n+        widget3 = Media(js=['text-editor.js', 'text-editor-extras.js', 'color-picker.js'])\n+        merged = widget1 + widget2 + widget3\n+        self.assertEqual(merged._js, ['text-editor.js', 'text-editor-extras.js', 'color-picker.js'])\n+\n+    def test_merge_js_three_way2(self):\n+        # The merge prefers to place 'c' before 'b' and 'g' before 'h' to\n+        # preserve the original order. The preference 'c'->'b' is overridden by\n+        # widget3's media, but 'g'->'h' survives in the final ordering.\n+        widget1 = Media(js=['a', 'c', 'f', 'g', 'k'])\n+        widget2 = Media(js=['a', 'b', 'f', 'h', 'k'])\n+        widget3 = Media(js=['b', 'c', 'f', 'k'])\n+        merged = widget1 + widget2 + widget3\n+        self.assertEqual(merged._js, ['a', 'b', 'c', 'f', 'g', 'h', 'k'])\n \n     def test_merge_css_three_way(self):\n-        widget1 = Media(css={'screen': ['a.css']})\n-        widget2 = Media(css={'screen': ['b.css']})\n-        widget3 = Media(css={'all': ['c.css']})\n-        form1 = widget1 + widget2\n-        form2 = widget2 + widget1\n-        # form1 and form2 have a.css and b.css in different order...\n-        self.assertEqual(form1._css, {'screen': ['a.css', 'b.css']})\n-        self.assertEqual(form2._css, {'screen': ['b.css', 'a.css']})\n-        # ...but merging succeeds as the relative ordering of a.css and b.css\n-        # was never specified.\n-        merged = widget3 + form1 + form2\n-        self.assertEqual(merged._css, {'screen': ['a.css', 'b.css'], 'all': ['c.css']})\n+        widget1 = Media(css={'screen': ['c.css'], 'all': ['d.css', 'e.css']})\n+        widget2 = Media(css={'screen': ['a.css']})\n+        widget3 = Media(css={'screen': ['a.css', 'b.css', 'c.css'], 'all': ['e.css']})\n+        merged = widget1 + widget2\n+        # c.css comes before a.css because widget1 + widget2 establishes this\n+        # order.\n+        self.assertEqual(merged._css, {'screen': ['c.css', 'a.css'], 'all': ['d.css', 'e.css']})\n+        merged = merged + widget3\n+        # widget3 contains an explicit ordering of c.css and a.css.\n+        self.assertEqual(merged._css, {'screen': ['a.css', 'b.css', 'c.css'], 'all': ['d.css', 'e.css']})\n"
}