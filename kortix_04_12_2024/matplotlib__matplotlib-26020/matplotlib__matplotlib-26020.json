{
  "instance_id": "matplotlib__matplotlib-26020",
  "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..2e075ff9fd 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,23 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Try dict-like access first\n+    try:\n+        if hasattr(ax.axis, \"__getitem__\"):\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+            return\n+    except (TypeError, KeyError, AttributeError):\n+        pass\n+        \n+    # Fallback to standard matplotlib methods\n+    if bottom_off:\n+        ax.xaxis.set_ticklabels([])\n+        ax.set_xlabel(\"\")\n+    if left_off:\n+        ax.yaxis.set_ticklabels([])\n+        ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n@@ -568,4 +583,4 @@ class ImageGrid(Grid):\n         self._divider.set_vertical(v)\n \n \n-AxesGrid = ImageGrid\n+AxesGrid = ImageGrid\n\\ No newline at end of file\ndiff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\nindex d1554020cd..79e77815ea 100644\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -591,6 +591,19 @@ def test_axes_class_tuple():\n     axes_class = (mpl_toolkits.axes_grid1.mpl_axes.Axes, {})\n     gr = AxesGrid(fig, 111, nrows_ncols=(1, 1), axes_class=axes_class)\n \n+def test_non_dict_axes():\n+    \"\"\"Test that AxesGrid works with axes classes that don't have dict-like axis.\"\"\"\n+    fig = plt.figure()\n+    # Create a simple Mock class that simulates GeoAxes behavior\n+    class MockGeoAxes(plt.Axes):\n+        @property\n+        def axis(self):\n+            return lambda v: None\n+    \n+    axes_class = (MockGeoAxes, {})\n+    gr = AxesGrid(fig, 111, nrows_ncols=(1, 1), axes_class=axes_class)\n+    assert gr is not None  # Basic check that grid was created\n+\n \n def test_grid_axes_lists():\n     \"\"\"Test Grid axes_all, axes_row and axes_column relationship.\"\"\"\n@@ -766,4 +779,4 @@ def test_anchored_locator_base_call():\n     axins = zoomed_inset_axes(ax, zoom=2, loc=\"upper left\")\n     axins.set(xticks=[], yticks=[])\n \n-    axins.imshow(Z, extent=extent, origin=\"lower\")\n+    axins.imshow(Z, extent=extent, origin=\"lower\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}