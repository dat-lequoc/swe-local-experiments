diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index 4c2ffd81e1..3e3f0dd933 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -3,6 +3,7 @@
 """
 
 from __future__ import print_function, division
+from sympy.core import Tuple, Add, Mul, Pow
 from sympy.printing.codeprinter import CodePrinter
 from sympy.printing.str import StrPrinter
 from sympy.printing.precedence import precedence
@@ -65,8 +66,21 @@ def __init__(self, settings={}):
 
     def _print_Pow(self, expr):
         PREC = precedence(expr)
-        return '%s^%s' % (self.parenthesize(expr.base, PREC),
-                          self.parenthesize(expr.exp, PREC))
+        if expr.base.is_Float:
+            base = self._print_Float(expr.base)
+        else:
+            base = self._print(expr.base)
+        if expr.exp.is_Float:
+            exp = self._print_Float(expr.exp)
+        else:
+            exp = self._print(expr.exp)
+        # Add parentheses for compound expressions
+        if isinstance(expr.exp, (Add, Mul)) or \
+           (isinstance(expr.exp, Pow) and not expr.exp.is_Integer):
+            exp = "(%s)" % exp
+        if isinstance(expr.base, Mul):
+            base = "(%s)" % base
+        return '%s^%s' % (base, exp)
 
     def _print_Mul(self, expr):
         PREC = precedence(expr)
@@ -109,6 +123,48 @@ def _print_Integral(self, expr):
     def _print_Sum(self, expr):
         return "Hold[Sum[" + ', '.join(self.doprint(a) for a in expr.args) + "]]"
 
+    def _print_Derivative(self, der):
+        if len(der.variables) > 1:
+            curr_symbol = der.variables[0]
+            count = 1
+            l = []
+            for i in range(1, len(der.variables)):
+                if der.variables[i] == curr_symbol:
+                    count += 1
+                else:
+                    if count > 1:
+                        l.append("{%s, %d}" % (self._print(curr_symbol), count))
+                    else:
+                        l.append(self._print(curr_symbol))
+                    curr_symbol = der.variables[i]
+                    count = 1
+            if count > 1:
+                l.append("{%s, %d}" % (self._print(curr_symbol), count))
+            else:
+                l.append(self._print(curr_symbol))
+            return "D[%s, %s]" % (self._print(der.expr), ", ".join(l))
+        else:
+            return "D[%s, %s]" % (self._print(der.expr), self._print(der.variables[0]))
+
+    def _print_Float(self, expr):
+        s = str(expr)
+        if 'e' in s:
+            mantissa, exp = s.split('e')
+            # Normalize mantissa
+            if '.' not in mantissa:
+                mantissa += '.0'
+            mantissa = mantissa.rstrip('0').rstrip('.')
+            if '.' not in mantissa:
+                mantissa += '.0'
+            return '%s*^%s' % (mantissa, exp)
+        # Handle non-exponential floats
+        if '.' not in s:
+            return s + '.0'
+        s = s.rstrip('0').rstrip('.')
+        if '.' not in s:
+            s += '.0'
+        return s
+
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
@@ -121,4 +177,4 @@ def mathematica_code(expr, **settings):
     >>> mcode(sin(x).series(x).removeO())
     '(1/120)*x^5 - 1/6*x^3 + x'
     """
-    return MCodePrinter(settings).doprint(expr)
+    return MCodePrinter(settings).doprint(expr)
\ No newline at end of file
diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py
index 8fd05ae544..9d208f0d76 100644
--- a/sympy/printing/tests/test_mathematica.py
+++ b/sympy/printing/tests/test_mathematica.py
@@ -1,5 +1,6 @@
 from sympy.core import (S, pi, oo, symbols, Function,
-                        Rational, Integer, Tuple)
+                        Rational, Integer, Tuple, Derivative)
+from sympy.core.numbers import Float
 from sympy.integrals import Integral
 from sympy.concrete import Sum
 from sympy.functions import exp, sin, cos
@@ -81,3 +82,18 @@ def test_Sum():
                      (y, -oo, oo))) == \
         "Hold[Sum[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, " \
         "{y, -Infinity, Infinity}]]"
+
+
+def test_Derivative():
+    t = symbols('t')
+    assert mcode(Derivative(f(t), t)) == "D[f[t], t]"
+    assert mcode(Derivative(f(t), t, t)) == "D[f[t], {t, 2}]"
+    assert mcode(Derivative(f(t), t, 2)) == "D[f[t], {t, 2}]"
+    assert mcode(Derivative(f(x, y), x, y)) == "D[f[x, y], x, y]"
+    assert mcode(Derivative(f(x, y), x, x, y)) == "D[f[x, y], {x, 2}, y]"
+
+
+def test_Float():
+    assert mcode(Float('1.0e-10')) == '1.0*^-10'
+    assert mcode(Float('1.0e10')) == '1.0*^10'
+    assert mcode(Float('1.234567890123456e-10')) == '1.234567890123456*^-10'
\ No newline at end of file
