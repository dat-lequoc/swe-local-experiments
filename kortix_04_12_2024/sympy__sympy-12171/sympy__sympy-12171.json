{
  "instance_id": "sympy__sympy-12171",
  "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 4c2ffd81e1..3e3f0dd933 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -3,6 +3,7 @@\n \"\"\"\n \n from __future__ import print_function, division\n+from sympy.core import Tuple, Add, Mul, Pow\n from sympy.printing.codeprinter import CodePrinter\n from sympy.printing.str import StrPrinter\n from sympy.printing.precedence import precedence\n@@ -65,8 +66,21 @@ def __init__(self, settings={}):\n \n     def _print_Pow(self, expr):\n         PREC = precedence(expr)\n-        return '%s^%s' % (self.parenthesize(expr.base, PREC),\n-                          self.parenthesize(expr.exp, PREC))\n+        if expr.base.is_Float:\n+            base = self._print_Float(expr.base)\n+        else:\n+            base = self._print(expr.base)\n+        if expr.exp.is_Float:\n+            exp = self._print_Float(expr.exp)\n+        else:\n+            exp = self._print(expr.exp)\n+        # Add parentheses for compound expressions\n+        if isinstance(expr.exp, (Add, Mul)) or \\\n+           (isinstance(expr.exp, Pow) and not expr.exp.is_Integer):\n+            exp = \"(%s)\" % exp\n+        if isinstance(expr.base, Mul):\n+            base = \"(%s)\" % base\n+        return '%s^%s' % (base, exp)\n \n     def _print_Mul(self, expr):\n         PREC = precedence(expr)\n@@ -109,6 +123,48 @@ def _print_Integral(self, expr):\n     def _print_Sum(self, expr):\n         return \"Hold[Sum[\" + ', '.join(self.doprint(a) for a in expr.args) + \"]]\"\n \n+    def _print_Derivative(self, der):\n+        if len(der.variables) > 1:\n+            curr_symbol = der.variables[0]\n+            count = 1\n+            l = []\n+            for i in range(1, len(der.variables)):\n+                if der.variables[i] == curr_symbol:\n+                    count += 1\n+                else:\n+                    if count > 1:\n+                        l.append(\"{%s, %d}\" % (self._print(curr_symbol), count))\n+                    else:\n+                        l.append(self._print(curr_symbol))\n+                    curr_symbol = der.variables[i]\n+                    count = 1\n+            if count > 1:\n+                l.append(\"{%s, %d}\" % (self._print(curr_symbol), count))\n+            else:\n+                l.append(self._print(curr_symbol))\n+            return \"D[%s, %s]\" % (self._print(der.expr), \", \".join(l))\n+        else:\n+            return \"D[%s, %s]\" % (self._print(der.expr), self._print(der.variables[0]))\n+\n+    def _print_Float(self, expr):\n+        s = str(expr)\n+        if 'e' in s:\n+            mantissa, exp = s.split('e')\n+            # Normalize mantissa\n+            if '.' not in mantissa:\n+                mantissa += '.0'\n+            mantissa = mantissa.rstrip('0').rstrip('.')\n+            if '.' not in mantissa:\n+                mantissa += '.0'\n+            return '%s*^%s' % (mantissa, exp)\n+        # Handle non-exponential floats\n+        if '.' not in s:\n+            return s + '.0'\n+        s = s.rstrip('0').rstrip('.')\n+        if '.' not in s:\n+            s += '.0'\n+        return s\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n@@ -121,4 +177,4 @@ def mathematica_code(expr, **settings):\n     >>> mcode(sin(x).series(x).removeO())\n     '(1/120)*x^5 - 1/6*x^3 + x'\n     \"\"\"\n-    return MCodePrinter(settings).doprint(expr)\n+    return MCodePrinter(settings).doprint(expr)\n\\ No newline at end of file\ndiff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 8fd05ae544..9d208f0d76 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,5 +1,6 @@\n from sympy.core import (S, pi, oo, symbols, Function,\n-                        Rational, Integer, Tuple)\n+                        Rational, Integer, Tuple, Derivative)\n+from sympy.core.numbers import Float\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n from sympy.functions import exp, sin, cos\n@@ -81,3 +82,18 @@ def test_Sum():\n                      (y, -oo, oo))) == \\\n         \"Hold[Sum[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, \" \\\n         \"{y, -Infinity, Infinity}]]\"\n+\n+\n+def test_Derivative():\n+    t = symbols('t')\n+    assert mcode(Derivative(f(t), t)) == \"D[f[t], t]\"\n+    assert mcode(Derivative(f(t), t, t)) == \"D[f[t], {t, 2}]\"\n+    assert mcode(Derivative(f(t), t, 2)) == \"D[f[t], {t, 2}]\"\n+    assert mcode(Derivative(f(x, y), x, y)) == \"D[f[x, y], x, y]\"\n+    assert mcode(Derivative(f(x, y), x, x, y)) == \"D[f[x, y], {x, 2}, y]\"\n+\n+\n+def test_Float():\n+    assert mcode(Float('1.0e-10')) == '1.0*^-10'\n+    assert mcode(Float('1.0e10')) == '1.0*^10'\n+    assert mcode(Float('1.234567890123456e-10')) == '1.234567890123456*^-10'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}