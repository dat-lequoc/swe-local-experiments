diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..7c720bd49e 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -180,9 +180,32 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
                     'syms should be given as a sequence, e.g. a list')
             syms = [i for i in syms if i in var]
             if syms != var:
+                # Get base solutions first
+                base_sols = diophantine(eq, param)
+                # Create mapping for reordering
                 dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                # Reorder solutions
+                reordered = {tuple([t[dict_sym_index[i]] for i in var])
+                            for t in base_sols}
+                # If permute is True, apply permutations after reordering
+                if permute:
+                    final = set()
+                    for sol in reordered:
+                        if all(_is_int(s) for s in sol):
+                            if do_permute_signs:
+                                final.update(set(permute_signs(sol)))
+                            elif permute_few_signs:
+                                lst = list(permute_signs(sol))
+                                lst = list(filter(lambda x: x[0]*x[1] == sol[1]*sol[0], lst))
+                                final.update(set(lst))
+                            elif do_permute_signs_var:
+                                final.update(set(signed_permutations(sol)))
+                            else:
+                                final.add(sol)
+                        else:
+                            final.add(sol)
+                    return final
+                return reordered
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
@@ -3339,4 +3362,4 @@ def _can_do_sum_of_squares(n, k):
             return False
     # every number can be written as a sum of 4 squares; for k > 4 partitions
     # can be 0
-    return True
+    return True
\ No newline at end of file
diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py
index e4e8972ae0..d555c30d5c 100644
--- a/sympy/solvers/tests/test_diophantine.py
+++ b/sympy/solvers/tests/test_diophantine.py
@@ -475,6 +475,14 @@ def test_descent():
 
 
 def test_diophantine():
+    # Test symbol order independence with permute=True
+    from sympy.abc import m, n
+    eq = n**4 + m**4 - 2**4 - 3**4
+    sol1 = diophantine(eq, syms=(m,n), permute=True)
+    sol2 = diophantine(eq, syms=(n,m), permute=True)
+    assert len(sol1) == len(sol2)
+    assert sol1 == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}
+    
     assert check_solutions((x - y)*(y - z)*(z - x))
     assert check_solutions((x - y)*(x**2 + y**2 - z**2))
     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))
@@ -947,4 +955,4 @@ def test_ternary_quadratic():
     assert parametrize_ternary_quadratic(
         124*x**2 - 30*y**2 - 7729*z**2) == (
         -1410*p**2 - 363263*q**2, 2700*p**2 + 30916*p*q -
-        695610*q**2, -60*p**2 + 5400*p*q + 15458*q**2)
+        695610*q**2, -60*p**2 + 5400*p*q + 15458*q**2)
\ No newline at end of file
diff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py
index 400001e1ce..dcf18f9b40 100644
--- a/sympy/utilities/pytest.py
+++ b/sympy/utilities/pytest.py
@@ -201,7 +201,7 @@ def warns(warningcls, **kwargs):
 
 
 else:
-    XFAIL = py.test.mark.xfail
+    XFAIL = pytest.mark.xfail
     SKIP = py.test.mark.skip
     slow = py.test.mark.slow
     nocache_fail = py.test.mark.nocache_fail
@@ -278,4 +278,4 @@ def ignore_warnings(warningcls):
     # Reissue any warnings that we aren't testing for
     for w in warnrec:
         if not issubclass(w.category, warningcls):
-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
\ No newline at end of file
