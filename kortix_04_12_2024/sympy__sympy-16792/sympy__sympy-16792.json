{
  "instance_id": "sympy__sympy-16792",
  "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..a74d2e62f9 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -441,9 +441,13 @@ def _prototype_arg(self, arg):\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        # Check for array types even if no dimensions specified\n+        if arg.dimensions or isinstance(arg.name, (MatrixSymbol, MatrixBase)):\n             self._need_numpy = True\n-            ndim = len(arg.dimensions)\n+            if arg.dimensions:\n+                ndim = len(arg.dimensions)\n+            else:\n+                ndim = len(arg.name.shape)\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n@@ -1118,4 +1122,4 @@ def ufuncify(args, expr, language=None, backend='numpy', tempdir=None,\n         args = [y] + indexed_args + [m]\n         args_with_indices = [a[i] for a in indexed_args]\n         return autowrap(Eq(y[i], f(*args_with_indices)), language, backend,\n-                        tempdir, args, flags, verbose, helpers, **kwargs)\n+                        tempdir, args, flags, verbose, helpers, **kwargs)\n\\ No newline at end of file\ndiff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..7ca8c9f0f8 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -266,6 +266,11 @@ def get_default_datatype(expr, complex_allowed=None):\n         final_dtype = \"complex\"\n     else:\n         final_dtype = \"float\"\n+    \n+    # Handle MatrixSymbol and array types explicitly\n+    if isinstance(expr, (MatrixSymbol, MatrixBase)):\n+        return default_datatypes[\"float\"]  # Arrays are always treated as float\n+    \n     if expr.is_integer:\n         return default_datatypes[\"int\"]\n     elif expr.is_real:\n@@ -274,9 +279,9 @@ def get_default_datatype(expr, complex_allowed=None):\n         #check all entries\n         dt = \"int\"\n         for element in expr:\n-            if dt is \"int\" and not element.is_integer:\n+            if not element.is_integer:\n                 dt = \"float\"\n-            if dt is \"float\" and not element.is_real:\n+            if not element.is_real:\n                 return default_datatypes[final_dtype]\n         return default_datatypes[dt]\n     else:\n@@ -2229,4 +2234,4 @@ def make_routine(name, expr, argument_sequence=None,\n     # initialize a new code generator\n     code_gen = get_code_generator(language)\n \n-    return code_gen.routine(name, expr, argument_sequence, global_vars)\n+    return code_gen.routine(name, expr, argument_sequence, global_vars)\n\\ No newline at end of file\ndiff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py\nindex aa7db99d2f..c56f9adfef 100644\n--- a/sympy/utilities/pytest.py\n+++ b/sympy/utilities/pytest.py\n@@ -197,7 +197,11 @@ def warns(warningcls, **kwargs):\n \n \n else:\n-    XFAIL = py.test.mark.xfail\n+    try:\n+    import pytest\n+    XFAIL = pytest.mark.xfail\n+except ImportError:\n+    XFAIL = lambda *args, **kwargs: lambda f: f\n     slow = py.test.mark.slow\n \n     def SKIP(reason):\n@@ -281,4 +285,4 @@ def ignore_warnings(warningcls):\n     # Reissue any warnings that we aren't testing for\n     for w in warnrec:\n         if not issubclass(w.category, warningcls):\n-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n\\ No newline at end of file\ndiff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 47fe933dc1..837255fdf7 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -205,6 +205,13 @@ def test_cython_wrapper_unique_dummyvars():\n     expected = expected_template.format(x_id=x_id, y_id=y_id, z_id=z_id)\n     assert source == expected\n \n+def test_autowrap_unused_matrix_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = S(1.0)\n+    f = autowrap(expr, args=(x,), backend='dummy')\n+    assert f.args == \"x\"\n+    assert f.returns == \"nameless\"\n+\n def test_autowrap_dummy():\n     x, y, z = symbols('x y z')\n \n@@ -466,4 +473,4 @@ def test_ufuncify_source_multioutput():\n     Py_DECREF(ufunc0);\n }\n #endif\"\"\" % {'num': CodeWrapper._module_counter}\n-    assert source == expected\n+    assert source == expected\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}