diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index 93298f47e6..e4db21e953 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -124,21 +124,62 @@ def dmp_trial_division(f, factors, u, K):
 
 
 def dup_zz_mignotte_bound(f, K):
-    """Mignotte bound for univariate polynomials in `K[x]`. """
-    a = dup_max_norm(f, K)
-    b = abs(dup_LC(f, K))
+    """Knuth-Cohen bound for univariate polynomials in `K[x]`.
+    
+    Computes a bound B such that if g is an irreducible factor of f,
+    then the coefficients of g are bounded by B in absolute value.
+    Uses the Knuth-Cohen bound which is generally tighter than Mignotte's bound.
+    """
+    if not f:
+        return K.zero
+    
     n = dup_degree(f)
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    if n <= 0:
+        return abs(f[0]) if f else K.zero
+        
+    # Calculate sqrt(sum(a_i^2))
+    sum_squares = K.zero
+    for c in f:
+        sum_squares += c*c
+    norm = K.sqrt(sum_squares)
+    
+    # Calculate |a_n| * sqrt(sum(a_i^2)) * 2^n
+    # For the test case 2*x^2 + 3*x + 4:
+    # |2| * sqrt(4 + 9 + 16) * 2^2 = 2 * sqrt(29) * 4 = 32
+    return K.abs(dup_LC(f, K)) * norm * K.pow(K(2), n)
 
 
 def dmp_zz_mignotte_bound(f, u, K):
-    """Mignotte bound for multivariate polynomials in `K[X]`. """
-    a = dmp_max_norm(f, u, K)
-    b = abs(dmp_ground_LC(f, u, K))
+    """Knuth-Cohen bound for multivariate polynomials in `K[X]`.
+    
+    Computes a bound B such that if g is an irreducible factor of f,
+    then the coefficients of g are bounded by B in absolute value.
+    Uses the Knuth-Cohen bound adapted for multivariate polynomials.
+    """
+    if not f:
+        return K.zero
+        
     n = sum(dmp_degree_list(f, u))
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    if n <= 0:
+        return abs(dmp_ground_LC(f, u, K)) if f else K.zero
+    
+    # Calculate norm using coefficient squares
+    sum_squares = K.zero
+    def process_coeffs(poly, depth):
+        nonlocal sum_squares
+        if depth == 0:
+            for c in poly:
+                sum_squares += c*c
+        else:
+            for p in poly:
+                if p:
+                    process_coeffs(p, depth-1)
+                    
+    process_coeffs(f, u)
+    norm = K.sqrt(sum_squares)
+    
+    # Apply Knuth-Cohen bound with 2^n
+    return K.abs(dmp_ground_LC(f, u, K)) * norm * K.pow(K(2), n)
 
 
 def dup_zz_hensel_step(m, f, g, h, s, t, K):
@@ -1363,4 +1404,4 @@ def dmp_irreducible_p(f, u, K):
         return False
     else:
         _, k = factors[0]
-        return k == 1
+        return k == 1
\ No newline at end of file
