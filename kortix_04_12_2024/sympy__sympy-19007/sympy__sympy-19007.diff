diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index b821c42845..530b94d7dd 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -233,18 +233,48 @@ def transpose(self):
         return self._eval_transpose()
 
     def _entry(self, i, j, **kwargs):
-        # Find row entry
-        for row_block, numrows in enumerate(self.rowblocksizes):
-            if (i < numrows) != False:
-                break
-            else:
-                i -= numrows
-        for col_block, numcols in enumerate(self.colblocksizes):
-            if (j < numcols) != False:
-                break
-            else:
-                j -= numcols
-        return self.blocks[row_block, col_block][i, j]
+        from sympy import Piecewise, And
+        from sympy.core.relational import LessThan
+        
+        # Track cumulative sizes for rows
+        cumul_rows = [0]
+        total = 0
+        for size in self.rowblocksizes:
+            total += size
+            cumul_rows.append(total)
+            
+        # Track cumulative sizes for columns
+        cumul_cols = [0]
+        total = 0
+        for size in self.colblocksizes:
+            total += size
+            cumul_cols.append(total)
+            
+        # Build piecewise expression for the element
+        pieces = []
+        for row_block in range(len(self.rowblocksizes)):
+            for col_block in range(len(self.colblocksizes)):
+                # Calculate local indices
+                row_start = cumul_rows[row_block]
+                col_start = cumul_cols[col_block]
+                
+                # Condition for this block
+                cond = And(
+                    LessThan(row_start, i + 1),
+                    LessThan(i, cumul_rows[row_block + 1]),
+                    LessThan(col_start, j + 1),
+                    LessThan(j, cumul_cols[col_block + 1])
+                )
+                
+                # Map to local indices
+                local_i = i - row_start
+                local_j = j - col_start
+                
+                pieces.append(
+                    (self.blocks[row_block, col_block][local_i, local_j], cond)
+                )
+                
+        return Piecewise(*pieces)
 
     @property
     def is_Identity(self):
@@ -568,4 +598,4 @@ def blockcut(expr, rowsizes, colsizes):
     colbounds = bounds(colsizes)
     return BlockMatrix([[MatrixSlice(expr, rowbound, colbound)
                          for colbound in colbounds]
-                         for rowbound in rowbounds])
+                         for rowbound in rowbounds])
\ No newline at end of file
diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py
index da17b9dbb5..c66f90226d 100644
--- a/sympy/matrices/expressions/tests/test_blockmatrix.py
+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py
@@ -57,6 +57,17 @@ def test_BlockMatrix():
     X = BlockMatrix(Matrix([[A, B], [C, D]]))
 
     assert X.__class__(*X.args) == X
+    
+    # Test symbolic index access
+    from sympy import symbols
+    n, i = symbols('n, i', integer=True)
+    A = MatrixSymbol('A', 1, 1)
+    B = MatrixSymbol('B', n, 1)
+    C = BlockMatrix([[A], [B]])
+    expr = C[i, 0]
+    # The result should be a Piecewise expression that considers both blocks
+    assert expr.is_Piecewise
+    # The expression should have conditions for both A and B blocks
 
     # block_collapse does nothing on normal inputs
     E = MatrixSymbol('E', n, m)
@@ -231,4 +242,4 @@ def test_block_collapse_type():
     assert block_collapse(Inverse(bm1)).__class__ == BlockDiagMatrix
     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix
-    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
+    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
\ No newline at end of file
