{
  "instance_id": "pytest-dev__pytest-9359",
  "model_patch": "diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py\nindex 6f54057c0..10a91f163 100644\n--- a/src/_pytest/_code/source.py\n+++ b/src/_pytest/_code/source.py\n@@ -147,8 +147,25 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i\n     # Flatten all statements and except handlers into one lineno-list.\n     # AST's line numbers start indexing at 1.\n     values: List[int] = []\n+    decorator_after_target = None\n+    \n     for x in ast.walk(node):\n         if isinstance(x, (ast.stmt, ast.ExceptHandler)):\n+            if isinstance(x, ast.FunctionDef):\n+                # Check for decorators after target line\n+                if x.decorator_list:\n+                    for dec in x.decorator_list:\n+                        if dec.lineno - 1 > lineno:\n+                            # Found decorator after target line\n+                            decorator_after_target = dec.lineno - 1\n+                            break\n+                    if decorator_after_target is not None:\n+                        continue\n+                # Skip function if it starts after target line\n+                if x.lineno - 1 > lineno:\n+                    continue\n+            \n+            # For non-function statements or valid functions\n             values.append(x.lineno - 1)\n             for name in (\"finalbody\", \"orelse\"):\n                 val: Optional[List[ast.stmt]] = getattr(x, name, None)\n@@ -162,6 +179,9 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i\n         end = None\n     else:\n         end = values[insert_index]\n+        # If we found a decorator after target line, use it as the end\n+        if decorator_after_target is not None and decorator_after_target < end:\n+            end = decorator_after_target\n     return start, end\n \n \n@@ -209,4 +229,4 @@ def getstatementrange_ast(\n             end -= 1\n         else:\n             break\n-    return astnode, start, end\n+    return astnode, start, end\n\\ No newline at end of file\ndiff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex e8717590d..987351b1f 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -332,6 +332,23 @@ def callequal(left: Any, right: Any, verbose: int = 0) -> Optional[List[str]]:\n \n \n class TestAssert_reprcompare:\n+    def test_assert_with_decorator_after(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\"\"\"\n+            def deco(f):\n+                return f\n+\n+            def test_func():\n+                assert 1 == 2\n+\n+                @deco\n+                def inner():\n+                    return True\n+        \"\"\")\n+        result = pytester.runpytest()\n+        result.stdout.fnmatch_lines([\n+            \"*assert 1 == 2*\",\n+        ])\n+        assert \"@deco\" not in result.stdout.str()\n     def test_different_types(self) -> None:\n         assert callequal([0, 1], \"foo\") is None\n \n@@ -1676,4 +1693,4 @@ def test_assertion_location_with_coverage(pytester: Pytester) -> None:\n             \"E       assert False\",\n             \"*= 1 failed in*\",\n         ]\n-    )\n+    )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}