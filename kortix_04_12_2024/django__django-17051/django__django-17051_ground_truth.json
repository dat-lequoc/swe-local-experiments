{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,12 +1837,17 @@ def _batched_insert(\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+            if bulk_return and (\n+                on_conflict is None or on_conflict == OnConflict.UPDATE\n+            ):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n",
  "test_patch": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -582,12 +582,16 @@ def _test_update_conflicts_two_fields(self, unique_fields):\n             TwoFields(f1=1, f2=1, name=\"c\"),\n             TwoFields(f1=2, f2=2, name=\"d\"),\n         ]\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=unique_fields,\n             update_fields=[\"name\"],\n         )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(TwoFields.objects.count(), 2)\n         self.assertCountEqual(\n             TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n@@ -619,7 +623,6 @@ def test_update_conflicts_unique_fields_pk(self):\n                 TwoFields(f1=2, f2=2, name=\"b\"),\n             ]\n         )\n-        self.assertEqual(TwoFields.objects.count(), 2)\n \n         obj1 = TwoFields.objects.get(f1=1)\n         obj2 = TwoFields.objects.get(f1=2)\n@@ -627,12 +630,16 @@ def test_update_conflicts_unique_fields_pk(self):\n             TwoFields(pk=obj1.pk, f1=3, f2=3, name=\"c\"),\n             TwoFields(pk=obj2.pk, f1=4, f2=4, name=\"d\"),\n         ]\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=[\"pk\"],\n             update_fields=[\"name\"],\n         )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(TwoFields.objects.count(), 2)\n         self.assertCountEqual(\n             TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n@@ -680,12 +687,16 @@ def _test_update_conflicts_unique_two_fields(self, unique_fields):\n                 description=(\"Japan is an island country in East Asia.\"),\n             ),\n         ]\n-        Country.objects.bulk_create(\n+        results = Country.objects.bulk_create(\n             new_data,\n             update_conflicts=True,\n             update_fields=[\"description\"],\n             unique_fields=unique_fields,\n         )\n+        self.assertEqual(len(results), len(new_data))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(Country.objects.count(), 6)\n         self.assertCountEqual(\n             Country.objects.values(\"iso_two_letter\", \"description\"),\n@@ -743,12 +754,16 @@ def _test_update_conflicts(self, unique_fields):\n             UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n             UpsertConflict(number=3, rank=1, name=\"Hannah\"),\n         ]\n-        UpsertConflict.objects.bulk_create(\n+        results = UpsertConflict.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             update_fields=[\"name\", \"rank\"],\n             unique_fields=unique_fields,\n         )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(UpsertConflict.objects.count(), 3)\n         self.assertCountEqual(\n             UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n@@ -759,12 +774,16 @@ def _test_update_conflicts(self, unique_fields):\n             ],\n         )\n \n-        UpsertConflict.objects.bulk_create(\n+        results = UpsertConflict.objects.bulk_create(\n             conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n             update_conflicts=True,\n             update_fields=[\"name\", \"rank\"],\n             unique_fields=unique_fields,\n         )\n+        self.assertEqual(len(results), 4)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(UpsertConflict.objects.count(), 4)\n         self.assertCountEqual(\n             UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n@@ -803,12 +822,16 @@ def test_update_conflicts_unique_fields_update_fields_db_column(self):\n             FieldsWithDbColumns(rank=1, name=\"c\"),\n             FieldsWithDbColumns(rank=2, name=\"d\"),\n         ]\n-        FieldsWithDbColumns.objects.bulk_create(\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=[\"rank\"],\n             update_fields=[\"name\"],\n         )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n         self.assertCountEqual(\n             FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n"
}