{
  "instance_id": "sympy__sympy-20212",
  "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 984398c760..38a1965c73 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -297,6 +297,8 @@ def __new__(cls, b, e, evaluate=None):\n                 return S.One\n             elif e is S.One:\n                 return b\n+            elif e is S.NegativeInfinity and b.is_zero:\n+                return S.ComplexInfinity\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n@@ -1742,4 +1744,4 @@ def _eval_difference_delta(self, n, step):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n\\ No newline at end of file\ndiff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 413fbd4532..ea07279265 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -321,6 +321,9 @@ def test_issue_6208():\n     assert root(exp(5*I), 3).exp == Rational(1, 3)\n \n \n+def test_zero_neg_infinity():\n+    assert (S.Zero**S.NegativeInfinity) == S.ComplexInfinity\n+\n def test_issue_6990():\n     x = Symbol('x')\n     a = Symbol('a')\n@@ -578,4 +581,4 @@ def _(a, b):\n     # NewPow called by dispatch\n     assert power(a, b) == NewPow(a, b)\n     assert power(b, a) == NewPow(b, a)\n-    assert power(b, b) == NewPow(b, b)\n+    assert power(b, b) == NewPow(b, b)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}