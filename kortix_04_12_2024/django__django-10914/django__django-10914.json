{
  "instance_id": "django__django-10914",
  "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..9ba30e5b26 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n@@ -631,4 +631,4 @@ SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n SECURE_SSL_HOST = None\n-SECURE_SSL_REDIRECT = False\n+SECURE_SSL_REDIRECT = False\n\\ No newline at end of file\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 434869554c..ffa7c12037 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -488,6 +488,28 @@ class FileStorageTests(SimpleTestCase):\n         with self.assertRaises(OSError):\n             self.storage.save('error.file', f1)\n \n+    def test_file_permissions_for_both_upload_types(self):\n+        \"\"\"\n+        File storage should set consistent permissions for both upload types.\n+        \"\"\"\n+        # Test small file (MemoryUploadedFile)\n+        small_file = SimpleUploadedFile('small.txt', b'small contents')\n+        small_name = self.storage.save('small.txt', small_file)\n+        small_path = self.storage.path(small_name)\n+        small_mode = os.stat(small_path).st_mode & 0o777\n+        self.assertEqual(small_mode, 0o644)\n+        self.storage.delete(small_name)\n+\n+        # Test large file (TemporaryUploadedFile)\n+        large_file = TemporaryUploadedFile('large.txt', 'text/plain', 0, 'utf-8')\n+        large_file.write(b'large contents')\n+        large_file.seek(0)\n+        large_name = self.storage.save('large.txt', large_file)\n+        large_path = self.storage.path(large_name)\n+        large_mode = os.stat(large_path).st_mode & 0o777\n+        self.assertEqual(large_mode, 0o644)\n+        self.storage.delete(large_name)\n+\n     def test_delete_no_name(self):\n         \"\"\"\n         Calling delete with an empty name should not try to remove the base\n@@ -995,4 +1017,4 @@ class FileLikeObjectTestCase(LiveServerTestCase):\n \n         remote_file = urlopen(self.live_server_url + '/')\n         with self.storage.open(stored_filename) as stored_file:\n-            self.assertEqual(stored_file.read(), remote_file.read())\n+            self.assertEqual(stored_file.read(), remote_file.read())\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}