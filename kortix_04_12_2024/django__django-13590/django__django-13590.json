{
  "instance_id": "django__django-13590",
  "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..e609f4967e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,14 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = tuple(\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            if isinstance(value, tuple) and hasattr(value, '_fields'):\n+                # Handle named tuples by expanding resolved values\n+                return type(value)(*resolved_values)\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n@@ -2466,4 +2470,4 @@ class JoinPromoter:\n             # and again we could safely demote to INNER.\n         query.promote_joins(to_promote)\n         query.demote_joins(to_demote)\n-        return to_demote\n+        return to_demote\n\\ No newline at end of file\ndiff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 523fa607f0..ad649321ac 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,4 +1,5 @@\n from datetime import datetime\n+from collections import namedtuple\n \n from django.core.exceptions import FieldError\n from django.db.models import BooleanField, CharField, F, Q\n@@ -130,6 +131,16 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(name_exact, Exact)\n         self.assertEqual(name_exact.rhs, \"['a', 'b']\")\n \n+    def test_named_tuple_lookup_value(self):\n+        query = Query(Item)\n+        Range = namedtuple('Range', ['start', 'end'])\n+        range_value = Range(1, 10)\n+        where = query.build_where(Q(id__range=range_value))\n+        range_lookup = where.children[0]\n+        self.assertIsInstance(range_lookup.rhs, Range)\n+        self.assertEqual(range_lookup.rhs.start, 1)\n+        self.assertEqual(range_lookup.rhs.end, 10)\n+\n     def test_filter_conditional(self):\n         query = Query(Item)\n         where = query.build_where(Func(output_field=BooleanField()))\n@@ -149,4 +160,4 @@ class TestQuery(SimpleTestCase):\n         query = Query(Item)\n         msg = 'Cannot filter against a non-conditional expression.'\n         with self.assertRaisesMessage(TypeError, msg):\n-            query.build_where(Func(output_field=CharField()))\n+            query.build_where(Func(output_field=CharField()))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}