diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..e609f4967e 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,14 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = tuple(
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
             )
+            if isinstance(value, tuple) and hasattr(value, '_fields'):
+                # Handle named tuples by expanding resolved values
+                return type(value)(*resolved_values)
+            return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
@@ -2466,4 +2470,4 @@ class JoinPromoter:
             # and again we could safely demote to INNER.
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
-        return to_demote
+        return to_demote
\ No newline at end of file
diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py
index 523fa607f0..ad649321ac 100644
--- a/tests/queries/test_query.py
+++ b/tests/queries/test_query.py
@@ -1,4 +1,5 @@
 from datetime import datetime
+from collections import namedtuple
 
 from django.core.exceptions import FieldError
 from django.db.models import BooleanField, CharField, F, Q
@@ -130,6 +131,16 @@ class TestQuery(SimpleTestCase):
         self.assertIsInstance(name_exact, Exact)
         self.assertEqual(name_exact.rhs, "['a', 'b']")
 
+    def test_named_tuple_lookup_value(self):
+        query = Query(Item)
+        Range = namedtuple('Range', ['start', 'end'])
+        range_value = Range(1, 10)
+        where = query.build_where(Q(id__range=range_value))
+        range_lookup = where.children[0]
+        self.assertIsInstance(range_lookup.rhs, Range)
+        self.assertEqual(range_lookup.rhs.start, 1)
+        self.assertEqual(range_lookup.rhs.end, 10)
+
     def test_filter_conditional(self):
         query = Query(Item)
         where = query.build_where(Func(output_field=BooleanField()))
@@ -149,4 +160,4 @@ class TestQuery(SimpleTestCase):
         query = Query(Item)
         msg = 'Cannot filter against a non-conditional expression.'
         with self.assertRaisesMessage(TypeError, msg):
-            query.build_where(Func(output_field=CharField()))
+            query.build_where(Func(output_field=CharField()))
\ No newline at end of file
