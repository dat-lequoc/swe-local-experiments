{
  "instance_id": "sympy__sympy-18532",
  "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 6866648d4e..7314221872 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -434,10 +434,9 @@ def _repr_latex_(self):\n     def atoms(self, *types):\n         \"\"\"Returns the atoms that form the current object.\n \n-        By default, only objects that are truly atomic and can't\n-        be divided into smaller pieces are returned: symbols, numbers,\n-        and number symbols like I and pi. It is possible to request\n-        atoms of any type, however, as demonstrated below.\n+        By default, only objects that have no args (leaf nodes) are returned.\n+        It is possible to request specific types of atoms as well, as\n+        demonstrated below.\n \n         Examples\n         ========\n@@ -503,13 +502,17 @@ def atoms(self, *types):\n         if types:\n             types = tuple(\n                 [t if isinstance(t, type) else type(t) for t in types])\n+            result = set()\n+            for expr in preorder_traversal(self):\n+                if isinstance(expr, types):\n+                    result.add(expr)\n+            return result\n         else:\n-            types = (Atom,)\n-        result = set()\n-        for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n-        return result\n+            result = set()\n+            for expr in preorder_traversal(self):\n+                if not hasattr(expr, 'args') or not expr.args:\n+                    result.add(expr)\n+            return result\n \n     @property\n     def free_symbols(self):\n@@ -2066,4 +2069,4 @@ def _make_find_query(query):\n         return lambda expr: isinstance(expr, query)\n     elif isinstance(query, Basic):\n         return lambda expr: expr.match(query) is not None\n-    return query\n+    return query\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}