diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py
index 00182fa0a..d581601bb 100644
--- a/sklearn/utils/tests/test_validation.py
+++ b/sklearn/utils/tests/test_validation.py
@@ -336,6 +336,10 @@ def test_check_array_pandas_dtype_object_conversion():
     # smoke-test against dataframes with column named "dtype"
     X_df.dtype = "Hans"
     assert_equal(check_array(X_df, ensure_2d=False).dtype.kind, "f")
+    
+    # Test that warn_on_dtype works with dataframes
+    assert_warns(DataConversionWarning, check_array, X_df,
+                warn_on_dtype=True)
 
 
 def test_check_array_on_mock_dataframe():
@@ -747,4 +751,4 @@ def test_check_array_memmap(copy):
     with TempMemmap(X, mmap_mode='r') as X_memmap:
         X_checked = check_array(X_memmap, copy=copy)
         assert np.may_share_memory(X_memmap, X_checked) == (not copy)
-        assert X_checked.flags['WRITEABLE'] == copy
+        assert X_checked.flags['WRITEABLE'] == copy
\ No newline at end of file
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index fe1f7236e..d35dbe296 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -461,11 +461,33 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
     # store whether originally we wanted numeric dtype
     dtype_numeric = isinstance(dtype, six.string_types) and dtype == "numeric"
 
-    dtype_orig = getattr(array, "dtype", None)
+    # Get original dtype for dataframes and other array-like objects
+    if hasattr(array, 'dtypes'):
+        # pandas dataframe
+        dtype_orig = array.dtypes.iloc[0]
+    else:
+        dtype_orig = getattr(array, "dtype", None)
+
     if not hasattr(dtype_orig, 'kind'):
         # not a data type (e.g. a column named dtype in a pandas DataFrame)
         dtype_orig = None
 
+    if estimator is not None:
+        if isinstance(estimator, six.string_types):
+            estimator_name = estimator
+        else:
+            estimator_name = estimator.__class__.__name__
+    else:
+        estimator_name = "Estimator"
+    context = " by %s" % estimator_name if estimator is not None else ""
+
+    if warn_on_dtype and dtype_orig is not None and hasattr(array, 'dtypes'):
+        # For DataFrames, check if conversion will happen
+        if dtype is None and dtype_numeric and dtype_orig.kind == 'O':
+            msg = ("Data with input dtype %s was converted to %s%s."
+                   % (dtype_orig, np.float64, context))
+            warnings.warn(msg, DataConversionWarning)
+
     if dtype_numeric:
         if dtype_orig is not None and dtype_orig.kind == "O":
             # if input is object, convert to float.
@@ -935,4 +957,4 @@ def check_non_negative(X, whom):
     """
     X = X.data if sp.issparse(X) else X
     if (X < 0).any():
-        raise ValueError("Negative values in data passed to %s" % whom)
+        raise ValueError("Negative values in data passed to %s" % whom)
\ No newline at end of file
