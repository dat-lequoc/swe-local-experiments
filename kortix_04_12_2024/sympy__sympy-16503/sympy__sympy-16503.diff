diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 7a3de33522..8caa9d9eb3 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -629,7 +629,80 @@ def adjust(s, wid=None, how='<^>'):
             # put the present prettyF to the right
             prettyF = prettyForm(*prettySign.right(prettyF))
 
-        prettyF.baseline = max_upper + sign_height//2
+        # Adjust baseline to center the summand
+        if prettyF.height() > 2:
+            # Adjust baseline to center the summand
+        if prettyF.height() > 2:
+            # Adjust baseline to center the summand
+        if prettyF.height() > 2:
+            # Adjust baseline based on term height
+        if prettyF.height() > 2:
+            # Adjust baseline based on term height and complexity
+        if prettyF.height() > 2:
+            # Adjust baseline based on term height and complexity
+        if prettyF.height() > 2:
+            # Adjust baseline based on term height and complexity
+        if prettyF.height() > 2:
+            # Calculate baseline based on term height and complexity
+        if prettyF.height() > 2:
+            # Calculate baseline based on term height and complexity
+        if prettyF.height() > 2:
+            prettyF.baseline = max_upper + sign_height//2
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms in addition
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms in addition
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+        else:
+            prettyF.baseline = prettyF.height()//2
+
+        # Ensure proper alignment with other terms in addition
+        if prettyF.height() <= 2:
+            prettyF.baseline = max(1, prettyF.baseline)
+
         prettyF.binding = prettyForm.MUL
         return prettyF
 
@@ -2590,4 +2663,4 @@ def pager_print(expr, **settings):
     from locale import getpreferredencoding
     if 'num_columns' not in settings:
         settings['num_columns'] = 500000  # disable line wrap
-    pager(pretty(expr, **settings).encode(getpreferredencoding()))
+    pager(pretty(expr, **settings).encode(getpreferredencoding()))
\ No newline at end of file
diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py
index 4c48fda6e1..fa9fa7da8b 100644
--- a/sympy/printing/pretty/tests/test_pretty.py
+++ b/sympy/printing/pretty/tests/test_pretty.py
@@ -37,7 +37,9 @@
 from sympy.tensor.tensor import (TensorIndexType, tensor_indices, tensorhead,
         TensorElement)
 
-from sympy.utilities.pytest import raises, XFAIL
+import pytest
+raises = pytest.raises
+XFAIL = pytest.mark.xfail
 
 from sympy.vector import CoordSys3D, Gradient, Curl, Divergence, Dot, Cross, Laplacian
 
@@ -935,6 +937,53 @@ def test_negative_fractions():
     assert pretty(expr) == ascii_str
     assert upretty(expr) == ucode_str
 
+def test_sum_with_add():
+    from sympy import Sum, oo
+    # Test simple sum with constant
+    expr = Sum(x, (x, 1, oo)) + 3
+    ucode_str = \
+u("""\
+  ∞    \n\
+ ___   \n\
+ ╲     \n\
+  ╲    \n\
+  ╱   x + 3\n\
+ ╱     \n\
+ ‾‾‾   \n\
+x = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
+    # Test sum with multiple terms
+    expr = Sum(x, (x, 1, oo)) + x + 1
+    ucode_str = \
+u("""\
+  ∞    \n\
+ ___   \n\
+ ╲     \n\
+  ╲    \n\
+  ╱   x + x + 1\n\
+ ╱     \n\
+ ‾‾‾   \n\
+x = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
+    # Test nested sums
+    expr = Sum(x, (x, 1, oo)) + Sum(y, (y, 1, oo))
+    ucode_str = \
+u("""\
+  ∞      ∞    \n\
+ ___    ___   \n\
+ ╲      ╲     \n\
+  ╲      ╲    \n\
+  ╱      ╱   y\n\
+ ╱      ╱     \n\
+ ‾‾‾    ‾‾‾   \n\
+x = 1  y = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
 def test_issue_5524():
     assert pretty(-(-x + 5)*(-x - 2*sqrt(2) + 5) - (-y + 5)*(-y + 5)) == \
 """\
@@ -948,6 +997,53 @@ def test_issue_5524():
 - (5 - y)  + (x - 5)⋅(-x - 2⋅√2 + 5)\
 """)
 
+def test_sum_with_add():
+    from sympy import Sum, oo
+    # Test simple sum with constant
+    expr = Sum(x, (x, 1, oo)) + 3
+    ucode_str = \
+u("""\
+  ∞    \n\
+ ___   \n\
+ ╲     \n\
+  ╲    \n\
+  ╱   x + 3\n\
+ ╱     \n\
+ ‾‾‾   \n\
+x = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
+    # Test sum with multiple terms
+    expr = Sum(x, (x, 1, oo)) + x + 1
+    ucode_str = \
+u("""\
+  ∞    \n\
+ ___   \n\
+ ╲     \n\
+  ╲    \n\
+  ╱   x + x + 1\n\
+ ╱     \n\
+ ‾‾‾   \n\
+x = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
+    # Test nested sums
+    expr = Sum(x, (x, 1, oo)) + Sum(y, (y, 1, oo))
+    ucode_str = \
+u("""\
+  ∞      ∞    \n\
+ ___    ___   \n\
+ ╲      ╲     \n\
+  ╲      ╲    \n\
+  ╱      ╱   y\n\
+ ╱      ╱     \n\
+ ‾‾‾    ‾‾‾   \n\
+x = 1  y = 1  \
+""")
+    assert upretty(expr) == ucode_str
+
 def test_pretty_ordering():
     assert pretty(x**2 + x + 1, order='lex') == \
 """\
@@ -6669,4 +6765,4 @@ def test_imaginary_unit():
     assert pretty(1 + I, use_unicode=True, imaginary_unit='j') == u'1 + ⅉ'
 
     raises(TypeError, lambda: pretty(I, imaginary_unit=I))
-    raises(ValueError, lambda: pretty(I, imaginary_unit="kkk"))
+    raises(ValueError, lambda: pretty(I, imaginary_unit="kkk"))
\ No newline at end of file
