{
  "instance_id": "django__django-13321",
  "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..4cec65183a 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -132,8 +132,20 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n+            # Add padding if necessary\n+            pad_len = len(session_data) % 4\n+            if pad_len:\n+                session_data += '=' * (4 - pad_len)\n+            \n+            # Attempt base64 decode\n+            try:\n+                encoded_data = base64.b64decode(session_data.encode('ascii'))\n+            except Exception as e:\n+                logger = logging.getLogger('django.security.SuspiciousSession')\n+                logger.warning(f'Invalid base64 session data: {str(e)}')\n+                return {}\n+\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n@@ -383,4 +395,4 @@ class SessionBase:\n         NotImplementedError. If it isn't necessary, because the backend has\n         a built-in expiration mechanism, it should be a no-op.\n         \"\"\"\n-        raise NotImplementedError('This backend does not support clear_expired().')\n+        raise NotImplementedError('This backend does not support clear_expired().')\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}