{
  "instance_id": "sympy__sympy-12481",
  "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..865c738a66 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,12 +895,13 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if not is_cycle and has_dups(temp):\n+            raise ValueError('there were repeated elements.')\n+        if is_cycle:\n+            # Check for duplicates within individual cycles\n+            for cycle in args:\n+                if has_dups(cycle):\n+                    raise ValueError('Elements within a cycle must be unique.')\n         temp = set(temp)\n \n         if not is_cycle and \\\n@@ -2832,4 +2833,4 @@ def _merge(arr, temp, left, mid, right):\n     return inv_count\n \n Perm = Permutation\n-_af_new = Perm._af_new\n+_af_new = Perm._af_new\n\\ No newline at end of file\ndiff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 7f8cd572e7..ddf0f4c71d 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -11,6 +11,11 @@\n \n \n def test_Permutation():\n+    # Test non-disjoint cycles\n+    assert Permutation([[0,1], [0,1]]).is_Identity\n+    assert Permutation([[0,1], [1,2], [0,1]]) == Permutation([2,0,1])\n+    assert Permutation([[0,1,2], [1,2]]) == Permutation([1,0,2])\n+    \n     # don't auto fill 0\n     raises(ValueError, lambda: Permutation([1]))\n     p = Permutation([0, 1, 2, 3])\n@@ -418,4 +423,4 @@ def test_printing_non_cyclic():\n     assert repr(p3) == 'Permutation([0, 2, 1])'\n     assert str(p3) == 'Permutation([0, 2, 1])'\n     p4 = Permutation([0, 1, 3, 2, 4, 5, 6, 7])\n-    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'\n+    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}