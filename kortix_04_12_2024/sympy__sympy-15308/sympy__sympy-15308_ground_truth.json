{
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -289,6 +289,10 @@ def _do_exponent(self, expr, exp):\n         else:\n             return expr\n \n+    def _print_Basic(self, expr):\n+        l = [self._print(o) for o in expr.args]\n+        return self._deal_with_super_sub(expr.__class__.__name__) + r\"\\left(%s\\right)\" % \", \".join(l)\n+\n     def _print_bool(self, e):\n         return r\"\\mathrm{%s}\" % e\n \n@@ -1462,6 +1466,10 @@ def _print_Transpose(self, expr):\n         else:\n             return \"%s^T\" % self._print(mat)\n \n+    def _print_Trace(self, expr):\n+        mat = expr.arg\n+        return r\"\\mathrm{tr}\\left (%s \\right )\" % self._print(mat)\n+\n     def _print_Adjoint(self, expr):\n         mat = expr.arg\n         from sympy.matrices import MatrixSymbol\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1866,3 +1866,35 @@ def test_latex_printer_tensor():\n \n     expr = TensorElement(K(i,j,-k,-l), {i:3})\n     assert latex(expr) == 'K{}^{i=3,j}{}_{kl}'\n+\n+\n+def test_trace():\n+    # Issue 15303\n+    from sympy import trace\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    assert latex(trace(A)) == r\"\\mathrm{tr}\\left (A \\right )\"\n+    assert latex(trace(A**2)) == r\"\\mathrm{tr}\\left (A^{2} \\right )\"\n+\n+\n+def test_print_basic():\n+    # Issue 15303\n+    from sympy import Basic, Expr\n+\n+    # dummy class for testing printing where the function is not implemented in latex.py\n+    class UnimplementedExpr(Expr):\n+        def __new__(cls, e):\n+            return Basic.__new__(cls, e)\n+\n+    # dummy function for testing\n+    def unimplemented_expr(expr):\n+        return UnimplementedExpr(expr).doit()\n+\n+    # override class name to use superscript / subscript\n+    def unimplemented_expr_sup_sub(expr):\n+        result = UnimplementedExpr(expr)\n+        result.__class__.__name__ = 'UnimplementedExpr_x^1'\n+        return result\n+\n+    assert latex(unimplemented_expr(x)) == r'UnimplementedExpr\\left(x\\right)'\n+    assert latex(unimplemented_expr(x**2)) == r'UnimplementedExpr\\left(x^{2}\\right)'\n+    assert latex(unimplemented_expr_sup_sub(x)) == r'UnimplementedExpr^{1}_{x}\\left(x\\right)'\n"
}