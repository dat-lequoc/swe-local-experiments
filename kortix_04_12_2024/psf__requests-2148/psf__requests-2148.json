{
  "instance_id": "psf__requests-2148",
  "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 1ce54470..afb0c5dd 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -191,32 +191,39 @@ class HTTPAdapter(BaseAdapter):\n         :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n         :param resp: The urllib3 response object.\n         \"\"\"\n-        response = Response()\n+        try:\n+            response = Response()\n \n-        # Fallback to None if there's no status_code, for whatever reason.\n-        response.status_code = getattr(resp, 'status', None)\n+            # Fallback to None if there's no status_code, for whatever reason.\n+            response.status_code = getattr(resp, 'status', None)\n \n-        # Make headers case-insensitive.\n-        response.headers = CaseInsensitiveDict(getattr(resp, 'headers', {}))\n+            # Make headers case-insensitive.\n+            response.headers = CaseInsensitiveDict(getattr(resp, 'headers', {}))\n \n-        # Set encoding.\n-        response.encoding = get_encoding_from_headers(response.headers)\n-        response.raw = resp\n-        response.reason = response.raw.reason\n+            # Set encoding.\n+            response.encoding = get_encoding_from_headers(response.headers)\n+            response.raw = resp\n+            response.reason = response.raw.reason\n \n-        if isinstance(req.url, bytes):\n-            response.url = req.url.decode('utf-8')\n-        else:\n-            response.url = req.url\n+            if isinstance(req.url, bytes):\n+                response.url = req.url.decode('utf-8')\n+            else:\n+                response.url = req.url\n \n-        # Add new cookies from the server.\n-        extract_cookies_to_jar(response.cookies, req, resp)\n+            # Add new cookies from the server.\n+            extract_cookies_to_jar(response.cookies, req, resp)\n \n-        # Give the Response some context.\n-        response.request = req\n-        response.connection = self\n+            # Give the Response some context.\n+            response.request = req\n+            response.connection = self\n \n-        return response\n+            return response\n+        except socket.error as e:\n+            raise ConnectionError(e, request=req)\n+        except Exception as e:\n+            if isinstance(e, socket.error):\n+                raise ConnectionError(e, request=req)\n+            raise\n \n     def get_connection(self, url, proxies=None):\n         \"\"\"Returns a urllib3 connection for the given URL. This should not be\n@@ -386,10 +393,7 @@ class HTTPAdapter(BaseAdapter):\n                     # All is well, return the connection to the pool.\n                     conn._put_conn(low_conn)\n \n-        except socket.error as sockerr:\n-            raise ConnectionError(sockerr, request=request)\n-\n-        except MaxRetryError as e:\n+        except (socket.error, MaxRetryError) as e:\n             raise ConnectionError(e, request=request)\n \n         except _ProxyError as e:\n@@ -400,7 +404,9 @@ class HTTPAdapter(BaseAdapter):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, TimeoutError):\n                 raise Timeout(e, request=request)\n+            elif isinstance(e, socket.error):\n+                raise ConnectionError(e, request=request)\n             else:\n                 raise\n \n-        return self.build_response(request, resp)\n+        return self.build_response(request, resp)\n\\ No newline at end of file\ndiff --git a/test_requests.py b/test_requests.py\nindex 283353b9..20209c32 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -417,7 +417,8 @@ class RequestsTestCase(unittest.TestCase):\n     def test_conflicting_post_params(self):\n         url = httpbin('post')\n         with open('requirements.txt') as f:\n-            pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n+            with pytest.raises(ValueError):\n+                requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})\n             pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n \n     def test_request_ok_set(self):\n@@ -1422,4 +1423,4 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}