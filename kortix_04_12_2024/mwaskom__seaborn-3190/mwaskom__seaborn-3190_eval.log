=== Evaluation for Instance mwaskom__seaborn-3190 ===

=== Patch Application Output ===
APPLY_PATCH_PASS
/tmp/patch.diff:725: trailing whitespace.
    
Checking patch seaborn/_core/scales.py...
Checking patch tests/_core/test_scales.py...
Applied patch seaborn/_core/scales.py cleanly.
Applied patch tests/_core/test_scales.py cleanly.
warning: 1 line adds whitespace errors.


=== Test Output ===
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=2
+++ CONDA_SHLVL=2
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_1=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_1=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=3
++ CONDA_SHLVL=3
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_2=/opt/miniconda3
++ CONDA_PREFIX_2=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
+ git show
+ git diff 4a9e54962a29c12a8b103d75f838e0e795a6974d
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=4
+++ CONDA_SHLVL=4
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_3=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_3=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''5'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_4='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''5'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_4='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=5
++ CONDA_SHLVL=5
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_4=/opt/miniconda3
++ CONDA_PREFIX_4=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[dev]'
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 4a9e54962a29c12a8b103d75f838e0e795a6974d tests/_core/test_scales.py
Updated 1 path from 890dca57
+ git apply -v -
Checking patch tests/_core/test_scales.py...
Applied patch tests/_core/test_scales.py cleanly.
+ pytest --no-header -rA tests/_core/test_scales.py
+ git checkout 4a9e54962a29c12a8b103d75f838e0e795a6974d tests/_core/test_scales.py
Updated 1 path from 890dca57
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   seaborn/_core/scales.py
	modified:   tests/_core/test_scales.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 4a9e54962a29c12a8b103d75f838e0e795a6974d
Author: Michael Waskom <mwaskom@users.noreply.github.com>
Date:   Tue Dec 27 20:09:15 2022 -0500

    Improve user feedback for errors during plot compilation (#3203)
    
    * Improve user feedback for errors during plot compilation
    
    * Update release notes and fix flaky test
    
    * Fix pytest.raises usage and improve tests
    
    * Simplify comments for cleaner tracebacks

diff --git a/doc/whatsnew/v0.12.2.rst b/doc/whatsnew/v0.12.2.rst
index aa8def9a..927c4fa0 100644
--- a/doc/whatsnew/v0.12.2.rst
+++ b/doc/whatsnew/v0.12.2.rst
@@ -6,9 +6,11 @@ v0.12.2 (Unreleased)
 
 - |Enhancement| Automatic mark widths are now calculated separately for unshared facet axes (:pr:`3119`).
 
+- |Enhancement| Improved user feedback for failures during plot compilation by catching exceptions an reraising with a `PlotSpecError` that provides additional context (:pr:`3203`).
+
 - |Fix| Fixed a bug where legends for numeric variables with large values with be incorrectly shown (i.e. with a missing offset or exponent; :pr:`3187`).
 
-- |Fix| Improve robustness to empty data in several components of the objects interface (:pr:`3202`).
+- |Fix| Improved robustness to empty data in several components of the objects interface (:pr:`3202`).
 
 - |Fix| Fixed a regression in v0.12.0 where manually-added labels could have duplicate legend entries (:pr:`3116`).
 
diff --git a/seaborn/_core/exceptions.py b/seaborn/_core/exceptions.py
new file mode 100644
index 00000000..048443b0
--- /dev/null
+++ b/seaborn/_core/exceptions.py
@@ -0,0 +1,32 @@
+"""
+Custom exceptions for the seaborn.objects interface.
+
+This is very lightweight, but it's a separate module to avoid circular imports.
+
+"""
+from __future__ import annotations
+
+
+class PlotSpecError(RuntimeError):
+    """
+    Error class raised from seaborn.objects.Plot for compile-time failures.
+
+    In the declarative Plot interface, exceptions may not be triggered immediately
+    by bad user input (and validation at input time may not be possible). This class
+    is used to signal that indirect dependency. It should be raised in an exception
+    chain when compile-time operations fail with an error message providing useful
+    context (e.g., scaling errors could specify the variable that failed.)
+
+    """
+    @classmethod
+    def _during(cls, step: str, var: str = "") -> PlotSpecError:
+        """
+        Initialize the class to report the failure of a specific operation.
+        """
+        message = []
+        if var:
+            message.append(f"{step} failed for the `{var}` variable.")
+        else:
+            message.append(f"{step} failed.")
+        message.append("See the traceback above for more information.")
+        return cls(" ".join(message))
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 64f59cb2..6c7202c6 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -36,6 +36,7 @@ from seaborn._core.typing import (
     OrderSpec,
     Default,
 )
+from seaborn._core.exceptions import PlotSpecError
 from seaborn._core.rules import categorical_order
 from seaborn._compat import set_scale_obj, set_layout_engine
 from seaborn.rcmod import axes_style, plotting_context
@@ -1249,14 +1250,13 @@ class Plotter:
             if scale is None:
                 self._scales[var] = Scale._identity()
             else:
-                self._scales[var] = scale._setup(var_df[var], prop)
+                try:
+                    self._scales[var] = scale._setup(var_df[var], prop)
+                except Exception as err:
+                    raise PlotSpecError._during("Scale setup", var) from err
 
-            # Everything below here applies only to coordinate variables
-            # We additionally skip it when we're working with a value
-            # that is derived from a coordinate we've already processed.
-            # e.g., the Stat consumed y and added ymin/ymax. In that case,
-            # we've already setup the y scale and ymin/max are in scale space.
             if axis is None or (var != coord and coord in p._variables):
+                # Everything below here applies only to coordinate variables
                 continue
 
             # Set up an empty series to receive the transformed values.
@@ -1276,9 +1276,15 @@ class Plotter:
 
                 for layer, new_series in zip(layers, transformed_data):
                     layer_df = layer["data"].frame
-                    if var in layer_df:
-                        idx = self._get_subplot_index(layer_df, view)
+                    if var not in layer_df:
+                        continue
+
+                    idx = self._get_subplot_index(layer_df, view)
+                    try:
                         new_series.loc[idx] = view_scale(layer_df.loc[idx, var])
+                    except Exception as err:
+                        spec_error = PlotSpecError._during("Scaling operation", var)
+                        raise spec_error from err
 
             # Now the transformed data series are complete, set update the layer data
             for layer, new_series in zip(layers, transformed_data):
diff --git a/seaborn/_marks/base.py b/seaborn/_marks/base.py
index 87e0216d..324d0221 100644
--- a/seaborn/_marks/base.py
+++ b/seaborn/_marks/base.py
@@ -20,6 +20,7 @@ from seaborn._core.properties import (
     DashPattern,
     DashPatternWithOffset,
 )
+from seaborn._core.exceptions import PlotSpecError
 
 
 class Mappable:
@@ -172,7 +173,13 @@ class Mark:
                 # TODO Might this obviate the identity scale? Just don't add a scale?
                 feature = data[name]
             else:
-                feature = scales[name](data[name])
+                scale = scales[name]
+                value = data[name]
+                try:
+                    feature = scale(value)
+                except Exception as err:
+                    raise PlotSpecError._during("Scaling operation", name) from err
+
             if return_array:
                 feature = np.asarray(feature)
             return feature
diff --git a/seaborn/palettes.py b/seaborn/palettes.py
index 3306b0f2..f1214b2a 100644
--- a/seaborn/palettes.py
+++ b/seaborn/palettes.py
@@ -234,7 +234,7 @@ def color_palette(palette=None, n_colors=None, desat=None, as_cmap=False):
                 # Perhaps a named matplotlib colormap?
                 palette = mpl_palette(palette, n_colors, as_cmap=as_cmap)
             except (ValueError, KeyError):  # Error class changed in mpl36
-                raise ValueError(f"{palette} is not a valid palette name")
+                raise ValueError(f"{palette!r} is not a valid palette name")
 
     if desat is not None:
         palette = [desaturate(c, desat) for c in palette]
diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py
index 50673962..6862dbf8 100644
--- a/tests/_core/test_plot.py
+++ b/tests/_core/test_plot.py
@@ -15,12 +15,14 @@ from pandas.testing import assert_frame_equal, assert_series_equal
 from numpy.testing import assert_array_equal, assert_array_almost_equal
 
 from seaborn._core.plot import Plot, Default
-from seaborn._core.scales import Nominal, Continuous
-from seaborn._core.rules import categorical_order
+from seaborn._core.scales import Continuous, Nominal, Temporal
 from seaborn._core.moves import Move, Shift, Dodge
-from seaborn._stats.aggregation import Agg
+from seaborn._core.rules import categorical_order
+from seaborn._core.exceptions import PlotSpecError
 from seaborn._marks.base import Mark
 from seaborn._stats.base import Stat
+from seaborn._marks.dot import Dot
+from seaborn._stats.aggregation import Agg
 from seaborn.external.version import Version
 
 assert_vector_equal = functools.partial(
@@ -1249,6 +1251,54 @@ class TestPlotting:
             assert ax.get_title() == expected
 
 
+class TestExceptions:
+
+    def test_scale_setup(self):
+
+        x = y = color = ["a", "b"]
+        bad_palette = "not_a_palette"
+        p = Plot(x, y, color=color).add(MockMark()).scale(color=bad_palette)
+
+        msg = "Scale setup failed for the `color` variable."
+        with pytest.raises(PlotSpecError, match=msg) as err:
+            p.plot()
+        assert isinstance(err.value.__cause__, ValueError)
+        assert bad_palette in str(err.value.__cause__)
+
+    def test_coordinate_scaling(self):
+
+        x = ["a", "b"]
+        y = [1, 2]
+        p = Plot(x, y).add(MockMark()).scale(x=Temporal())
+
+        msg = "Scaling operation failed for the `x` variable."
+        with pytest.raises(PlotSpecError, match=msg) as err:
+            p.plot()
+        # Don't test the cause contents b/c matplotlib owns them here.
+        assert hasattr(err.value, "__cause__")
+
+    def test_semantic_scaling(self):
+
+        class ErrorRaising(Continuous):
+
+            def _setup(self, data, prop, axis=None):
+
+                def f(x):
+                    raise ValueError("This is a test")
+
+                new = super()._setup(data, prop, axis)
+                new._pipeline = [f]
+                return new
+
+        x = y = color = [1, 2]
+        p = Plot(x, y, color=color).add(Dot()).scale(color=ErrorRaising())
+        msg = "Scaling operation failed for the `color` variable."
+        with pytest.raises(PlotSpecError, match=msg) as err:
+            p.plot()
+        assert isinstance(err.value.__cause__, ValueError)
+        assert str(err.value.__cause__) == "This is a test"
+
+
 class TestFacetInterface:
 
     @pytest.fixture(scope="class", params=["row", "col"])
diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py
index 5baf53ce..2d967cc2 100644
--- a/tests/_core/test_scales.py
+++ b/tests/_core/test_scales.py
@@ -448,7 +448,7 @@ class TestNominal:
     def test_color_unknown_palette(self, x):
 
         pal = "not_a_palette"
-        err = f"{pal} is not a valid palette name"
+        err = f"'{pal}' is not a valid palette name"
         with pytest.raises(ValueError, match=err):
             Nominal(pal)._setup(x, Color())
 
diff --git a/tests/test_distributions.py b/tests/test_distributions.py
index 78cd5fe4..c5ac036c 100644
--- a/tests/test_distributions.py
+++ b/tests/test_distributions.py
@@ -1934,8 +1934,8 @@ class TestHistPlotBivariate:
         edges = itertools.product(y_edges[:-1], x_edges[:-1])
         for i, (y_i, x_i) in enumerate(edges):
             path = mesh.get_paths()[i]
-            assert path.vertices[0, 0] == 10 ** x_i
-            assert path.vertices[0, 1] == 10 ** y_i
+            assert path.vertices[0, 0] == pytest.approx(10 ** x_i)
+            assert path.vertices[0, 1] == pytest.approx(10 ** y_i)
 
     def test_mesh_thresh(self, long_df):
 
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 6c9ecbc9..5e8fc5dd 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -7,6 +7,7 @@ from functools import partial
 from typing import Any, Callable, Tuple, Optional, ClassVar
 
 import numpy as np
+import pandas as pd
 import matplotlib as mpl
 from matplotlib.ticker import (
     Locator,
@@ -342,8 +343,10 @@ class ContinuousBase(Scale):
 
         normalize: Optional[Callable[[ArrayLike], ArrayLike]]
         if prop.normed:
+            # Convert boolean data to float for normalization
+            data_values = data.astype(float) if data.dtype == bool else data
             if new.norm is None:
-                vmin, vmax = data.min(), data.max()
+                vmin, vmax = data_values.min(), data_values.max()
             else:
                 vmin, vmax = new.norm
             vmin, vmax = axis.convert_units((vmin, vmax))
@@ -356,7 +359,12 @@ class ContinuousBase(Scale):
         else:
             normalize = vmin = vmax = None
 
+        # Convert boolean data to float before any operations
+        def convert_bool(x):
+            return x.astype(float) if isinstance(x, (np.ndarray, pd.Series)) and x.dtype == bool else x
+
         new._pipeline = [
+            convert_bool,
             axis.convert_units,
             forward,
             normalize,
@@ -985,4 +993,4 @@ def _make_power_transforms(exp: float) -> TransFuncs:
     def inverse(x):
         return np.sign(x) * np.power(np.abs(x), 1 / exp)
 
-    return forward, inverse
+    return forward, inverse
\ No newline at end of file
diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py
index 2d967cc2..aabe1883 100644
--- a/tests/_core/test_scales.py
+++ b/tests/_core/test_scales.py
@@ -1,666 +1,20 @@
-import re
-
 import numpy as np
 import pandas as pd
-import matplotlib as mpl
-
 import pytest
-from numpy.testing import assert_array_equal
-from pandas.testing import assert_series_equal
-
-from seaborn._core.scales import (
-    Nominal,
-    Continuous,
-    Temporal,
-    PseudoAxis,
-)
-from seaborn._core.properties import (
-    IntervalProperty,
-    ObjectProperty,
-    Coordinate,
-    Alpha,
-    Color,
-    Fill,
-)
-from seaborn.palettes import color_palette
-from seaborn.external.version import Version
-
-
-class TestContinuous:
-
-    @pytest.fixture
-    def x(self):
-        return pd.Series([1, 3, 9], name="x", dtype=float)
-
-    def setup_ticks(self, x, *args, **kwargs):
-
-        s = Continuous().tick(*args, **kwargs)._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        a.set_view_interval(0, 1)
-        return a
-
-    def setup_labels(self, x, *args, **kwargs):
-
-        s = Continuous().label(*args, **kwargs)._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        a.set_view_interval(0, 1)
-        locs = a.major.locator()
-        return a, locs
-
-    def test_coordinate_defaults(self, x):
-
-        s = Continuous()._setup(x, Coordinate())
-        assert_series_equal(s(x), x)
-
-    def test_coordinate_transform(self, x):
-
-        s = Continuous(trans="log")._setup(x, Coordinate())
-        assert_series_equal(s(x), np.log10(x))
-
-    def test_coordinate_transform_with_parameter(self, x):
-
-        s = Continuous(trans="pow3")._setup(x, Coordinate())
-        assert_series_equal(s(x), np.power(x, 3))
-
-    def test_coordinate_transform_error(self, x):
-
-        s = Continuous(trans="bad")
-        with pytest.raises(ValueError, match="Unknown value provided"):
-            s._setup(x, Coordinate())
-
-    def test_interval_defaults(self, x):
-
-        s = Continuous()._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [0, .25, 1])
-
-    def test_interval_with_range(self, x):
-
-        s = Continuous((1, 3))._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [1, 1.5, 3])
-
-    def test_interval_with_norm(self, x):
-
-        s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [-.5, 0, 1.5])
-
-    def test_interval_with_range_norm_and_transform(self, x):
-
-        x = pd.Series([1, 10, 100])
-        # TODO param order?
-        s = Continuous((2, 3), (10, 100), "log")._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [1, 2, 3])
-
-    def test_color_defaults(self, x):
-
-        cmap = color_palette("ch:", as_cmap=True)
-        s = Continuous()._setup(x, Color())
-        assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA
-
-    def test_color_named_values(self, x):
-
-        cmap = color_palette("viridis", as_cmap=True)
-        s = Continuous("viridis")._setup(x, Color())
-        assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA
-
-    def test_color_tuple_values(self, x):
-
-        cmap = color_palette("blend:b,g", as_cmap=True)
-        s = Continuous(("b", "g"))._setup(x, Color())
-        assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA
-
-    def test_color_callable_values(self, x):
-
-        cmap = color_palette("light:r", as_cmap=True)
-        s = Continuous(cmap)._setup(x, Color())
-        assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA
-
-    def test_color_with_norm(self, x):
-
-        cmap = color_palette("ch:", as_cmap=True)
-        s = Continuous(norm=(3, 7))._setup(x, Color())
-        assert_array_equal(s(x), cmap([-.5, 0, 1.5])[:, :3])  # FIXME RGBA
-
-    def test_color_with_transform(self, x):
-
-        x = pd.Series([1, 10, 100], name="x", dtype=float)
-        cmap = color_palette("ch:", as_cmap=True)
-        s = Continuous(trans="log")._setup(x, Color())
-        assert_array_equal(s(x), cmap([0, .5, 1])[:, :3])  # FIXME RGBA
-
-    def test_tick_locator(self, x):
-
-        locs = [.2, .5, .8]
-        locator = mpl.ticker.FixedLocator(locs)
-        a = self.setup_ticks(x, locator)
-        assert_array_equal(a.major.locator(), locs)
-
-    def test_tick_locator_input_check(self, x):
-
-        err = "Tick locator must be an instance of .*?, not <class 'tuple'>."
-        with pytest.raises(TypeError, match=err):
-            Continuous().tick((1, 2))
-
-    def test_tick_upto(self, x):
-
-        for n in [2, 5, 10]:
-            a = self.setup_ticks(x, upto=n)
-            assert len(a.major.locator()) <= (n + 1)
-
-    def test_tick_every(self, x):
-
-        for d in [.05, .2, .5]:
-            a = self.setup_ticks(x, every=d)
-            assert np.allclose(np.diff(a.major.locator()), d)
-
-    def test_tick_every_between(self, x):
-
-        lo, hi = .2, .8
-        for d in [.05, .2, .5]:
-            a = self.setup_ticks(x, every=d, between=(lo, hi))
-            expected = np.arange(lo, hi + d, d)
-            assert_array_equal(a.major.locator(), expected)
-
-    def test_tick_at(self, x):
-
-        locs = [.2, .5, .9]
-        a = self.setup_ticks(x, at=locs)
-        assert_array_equal(a.major.locator(), locs)
-
-    def test_tick_count(self, x):
-
-        n = 8
-        a = self.setup_ticks(x, count=n)
-        assert_array_equal(a.major.locator(), np.linspace(0, 1, n))
-
-    def test_tick_count_between(self, x):
-
-        n = 5
-        lo, hi = .2, .7
-        a = self.setup_ticks(x, count=n, between=(lo, hi))
-        assert_array_equal(a.major.locator(), np.linspace(lo, hi, n))
-
-    def test_tick_minor(self, x):
-
-        n = 3
-        a = self.setup_ticks(x, count=2, minor=n)
-        # I am not sure why matplotlib's minor ticks include the
-        # largest major location but exclude the smalllest one ...
-        expected = np.linspace(0, 1, n + 2)[1:]
-        assert_array_equal(a.minor.locator(), expected)
-
-    def test_log_tick_default(self, x):
-
-        s = Continuous(trans="log")._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        a.set_view_interval(.5, 1050)
-        ticks = a.major.locator()
-        assert np.allclose(np.diff(np.log10(ticks)), 1)
-
-    def test_log_tick_upto(self, x):
-
-        n = 3
-        s = Continuous(trans="log").tick(upto=n)._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        assert a.major.locator.numticks == n
-
-    def test_log_tick_count(self, x):
-
-        with pytest.raises(RuntimeError, match="`count` requires"):
-            Continuous(trans="log").tick(count=4)
-
-        s = Continuous(trans="log").tick(count=4, between=(1, 1000))
-        a = PseudoAxis(s._setup(x, Coordinate())._matplotlib_scale)
-        a.set_view_interval(.5, 1050)
-        assert_array_equal(a.major.locator(), [1, 10, 100, 1000])
-
-    def test_log_tick_format_disabled(self, x):
-
-        s = Continuous(trans="log").label(base=None)._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        a.set_view_interval(20, 20000)
-        labels = a.major.formatter.format_ticks(a.major.locator())
-        for text in labels:
-            assert re.match(r"^\d+$", text)
-
-    def test_log_tick_every(self, x):
-
-        with pytest.raises(RuntimeError, match="`every` not supported"):
-            Continuous(trans="log").tick(every=2)
-
-    def test_symlog_tick_default(self, x):
-
-        s = Continuous(trans="symlog")._setup(x, Coordinate())
-        a = PseudoAxis(s._matplotlib_scale)
-        a.set_view_interval(-1050, 1050)
-        ticks = a.major.locator()
-        assert ticks[0] == -ticks[-1]
-        pos_ticks = np.sort(np.unique(np.abs(ticks)))
-        assert np.allclose(np.diff(np.log10(pos_ticks[1:])), 1)
-        assert pos_ticks[0] == 0
-
-    def test_label_formatter(self, x):
-
-        fmt = mpl.ticker.FormatStrFormatter("%.3f")
-        a, locs = self.setup_labels(x, fmt)
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels:
-            assert re.match(r"^\d\.\d{3}$", text)
-
-    def test_label_like_pattern(self, x):
-
-        a, locs = self.setup_labels(x, like=".4f")
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels:
-            assert re.match(r"^\d\.\d{4}$", text)
-
-    def test_label_like_string(self, x):
-
-        a, locs = self.setup_labels(x, like="x = {x:.1f}")
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels:
-            assert re.match(r"^x = \d\.\d$", text)
-
-    def test_label_like_function(self, x):
-
-        a, locs = self.setup_labels(x, like="{:^5.1f}".format)
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels:
-            assert re.match(r"^ \d\.\d $", text)
-
-    def test_label_base(self, x):
-
-        a, locs = self.setup_labels(100 * x, base=2)
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels[1:]:
-            assert not text or "2^" in text
-
-    def test_label_unit(self, x):
-
-        a, locs = self.setup_labels(1000 * x, unit="g")
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels[1:-1]:
-            assert re.match(r"^\d+ mg$", text)
-
-    def test_label_unit_with_sep(self, x):
-
-        a, locs = self.setup_labels(1000 * x, unit=("", "g"))
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels[1:-1]:
-            assert re.match(r"^\d+mg$", text)
-
-    def test_label_empty_unit(self, x):
-
-        a, locs = self.setup_labels(1000 * x, unit="")
-        labels = a.major.formatter.format_ticks(locs)
-        for text in labels[1:-1]:
-            assert re.match(r"^\d+m$", text)
-
-    def test_label_base_from_transform(self, x):
-
-        s = Continuous(trans="log")
-        a = PseudoAxis(s._setup(x, Coordinate())._matplotlib_scale)
-        a.set_view_interval(10, 1000)
-        label, = a.major.formatter.format_ticks([100])
-        assert r"10^{2}" in label
-
-    def test_label_type_checks(self):
-
-        s = Continuous()
-        with pytest.raises(TypeError, match="Label formatter must be"):
-            s.label("{x}")
-
-        with pytest.raises(TypeError, match="`like` must be"):
-            s.label(like=2)
-
-
-class TestNominal:
-
-    @pytest.fixture
-    def x(self):
-        return pd.Series(["a", "c", "b", "c"], name="x")
-
-    @pytest.fixture
-    def y(self):
-        return pd.Series([1, -1.5, 3, -1.5], name="y")
-
-    def test_coordinate_defaults(self, x):
-
-        s = Nominal()._setup(x, Coordinate())
-        assert_array_equal(s(x), np.array([0, 1, 2, 1], float))
-
-    def test_coordinate_with_order(self, x):
-
-        s = Nominal(order=["a", "b", "c"])._setup(x, Coordinate())
-        assert_array_equal(s(x), np.array([0, 2, 1, 2], float))
-
-    def test_coordinate_with_subset_order(self, x):
-
-        s = Nominal(order=["c", "a"])._setup(x, Coordinate())
-        assert_array_equal(s(x), np.array([1, 0, np.nan, 0], float))
-
-    def test_coordinate_axis(self, x):
-
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal()._setup(x, Coordinate(), ax.xaxis)
-        assert_array_equal(s(x), np.array([0, 1, 2, 1], float))
-        f = ax.xaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2]) == ["a", "c", "b"]
-
-    def test_coordinate_axis_with_order(self, x):
-
-        order = ["a", "b", "c"]
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal(order=order)._setup(x, Coordinate(), ax.xaxis)
-        assert_array_equal(s(x), np.array([0, 2, 1, 2], float))
-        f = ax.xaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2]) == order
-
-    def test_coordinate_axis_with_subset_order(self, x):
-
-        order = ["c", "a"]
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal(order=order)._setup(x, Coordinate(), ax.xaxis)
-        assert_array_equal(s(x), np.array([1, 0, np.nan, 0], float))
-        f = ax.xaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2]) == [*order, ""]
-
-    def test_coordinate_axis_with_category_dtype(self, x):
-
-        order = ["b", "a", "d", "c"]
-        x = x.astype(pd.CategoricalDtype(order))
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal()._setup(x, Coordinate(), ax.xaxis)
-        assert_array_equal(s(x), np.array([1, 3, 0, 3], float))
-        f = ax.xaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2, 3]) == order
-
-    def test_coordinate_numeric_data(self, y):
-
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal()._setup(y, Coordinate(), ax.yaxis)
-        assert_array_equal(s(y), np.array([1, 0, 2, 0], float))
-        f = ax.yaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2]) == ["-1.5", "1.0", "3.0"]
-
-    def test_coordinate_numeric_data_with_order(self, y):
-
-        order = [1, 4, -1.5]
-        ax = mpl.figure.Figure().subplots()
-        s = Nominal(order=order)._setup(y, Coordinate(), ax.yaxis)
-        assert_array_equal(s(y), np.array([0, 2, np.nan, 2], float))
-        f = ax.yaxis.get_major_formatter()
-        assert f.format_ticks([0, 1, 2]) == ["1.0", "4.0", "-1.5"]
-
-    def test_color_defaults(self, x):
-
-        s = Nominal()._setup(x, Color())
-        cs = color_palette()
-        assert_array_equal(s(x), [cs[0], cs[1], cs[2], cs[1]])
-
-    def test_color_named_palette(self, x):
-
-        pal = "flare"
-        s = Nominal(pal)._setup(x, Color())
-        cs = color_palette(pal, 3)
-        assert_array_equal(s(x), [cs[0], cs[1], cs[2], cs[1]])
-
-    def test_color_list_palette(self, x):
-
-        cs = color_palette("crest", 3)
-        s = Nominal(cs)._setup(x, Color())
-        assert_array_equal(s(x), [cs[0], cs[1], cs[2], cs[1]])
-
-    def test_color_dict_palette(self, x):
-
-        cs = color_palette("crest", 3)
-        pal = dict(zip("bac", cs))
-        s = Nominal(pal)._setup(x, Color())
-        assert_array_equal(s(x), [cs[1], cs[2], cs[0], cs[2]])
-
-    def test_color_numeric_data(self, y):
-
-        s = Nominal()._setup(y, Color())
-        cs = color_palette()
-        assert_array_equal(s(y), [cs[1], cs[0], cs[2], cs[0]])
-
-    def test_color_numeric_with_order_subset(self, y):
-
-        s = Nominal(order=[-1.5, 1])._setup(y, Color())
-        c1, c2 = color_palette(n_colors=2)
-        null = (np.nan, np.nan, np.nan)
-        assert_array_equal(s(y), [c2, c1, null, c1])
-
-    @pytest.mark.xfail(reason="Need to sort out float/int order")
-    def test_color_numeric_int_float_mix(self):
-
-        z = pd.Series([1, 2], name="z")
-        s = Nominal(order=[1.0, 2])._setup(z, Color())
-        c1, c2 = color_palette(n_colors=2)
-        null = (np.nan, np.nan, np.nan)
-        assert_array_equal(s(z), [c1, null, c2])
-
-    def test_color_alpha_in_palette(self, x):
-
-        cs = [(.2, .2, .3, .5), (.1, .2, .3, 1), (.5, .6, .2, 0)]
-        s = Nominal(cs)._setup(x, Color())
-        assert_array_equal(s(x), [cs[0], cs[1], cs[2], cs[1]])
-
-    def test_color_unknown_palette(self, x):
-
-        pal = "not_a_palette"
-        err = f"'{pal}' is not a valid palette name"
-        with pytest.raises(ValueError, match=err):
-            Nominal(pal)._setup(x, Color())
-
-    def test_object_defaults(self, x):
-
-        class MockProperty(ObjectProperty):
-            def _default_values(self, n):
-                return list("xyz"[:n])
-
-        s = Nominal()._setup(x, MockProperty())
-        assert s(x) == ["x", "y", "z", "y"]
-
-    def test_object_list(self, x):
-
-        vs = ["x", "y", "z"]
-        s = Nominal(vs)._setup(x, ObjectProperty())
-        assert s(x) == ["x", "y", "z", "y"]
-
-    def test_object_dict(self, x):
-
-        vs = {"a": "x", "b": "y", "c": "z"}
-        s = Nominal(vs)._setup(x, ObjectProperty())
-        assert s(x) == ["x", "z", "y", "z"]
-
-    def test_object_order(self, x):
-
-        vs = ["x", "y", "z"]
-        s = Nominal(vs, order=["c", "a", "b"])._setup(x, ObjectProperty())
-        assert s(x) == ["y", "x", "z", "x"]
-
-    def test_object_order_subset(self, x):
-
-        vs = ["x", "y"]
-        s = Nominal(vs, order=["a", "c"])._setup(x, ObjectProperty())
-        assert s(x) == ["x", "y", None, "y"]
-
-    def test_objects_that_are_weird(self, x):
-
-        vs = [("x", 1), (None, None, 0), {}]
-        s = Nominal(vs)._setup(x, ObjectProperty())
-        assert s(x) == [vs[0], vs[1], vs[2], vs[1]]
-
-    def test_alpha_default(self, x):
-
-        s = Nominal()._setup(x, Alpha())
-        assert_array_equal(s(x), [.95, .625, .3, .625])
-
-    def test_fill(self):
-
-        x = pd.Series(["a", "a", "b", "a"], name="x")
-        s = Nominal()._setup(x, Fill())
-        assert_array_equal(s(x), [True, True, False, True])
-
-    def test_fill_dict(self):
-
-        x = pd.Series(["a", "a", "b", "a"], name="x")
-        vs = {"a": False, "b": True}
-        s = Nominal(vs)._setup(x, Fill())
-        assert_array_equal(s(x), [False, False, True, False])
-
-    def test_fill_nunique_warning(self):
-
-        x = pd.Series(["a", "b", "c", "a", "b"], name="x")
-        with pytest.warns(UserWarning, match="The variable assigned to fill"):
-            s = Nominal()._setup(x, Fill())
-        assert_array_equal(s(x), [True, False, True, True, False])
-
-    def test_interval_defaults(self, x):
-
-        class MockProperty(IntervalProperty):
-            _default_range = (1, 2)
-
-        s = Nominal()._setup(x, MockProperty())
-        assert_array_equal(s(x), [2, 1.5, 1, 1.5])
-
-    def test_interval_tuple(self, x):
-
-        s = Nominal((1, 2))._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [2, 1.5, 1, 1.5])
-
-    def test_interval_tuple_numeric(self, y):
-
-        s = Nominal((1, 2))._setup(y, IntervalProperty())
-        assert_array_equal(s(y), [1.5, 2, 1, 2])
-
-    def test_interval_list(self, x):
-
-        vs = [2, 5, 4]
-        s = Nominal(vs)._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [2, 5, 4, 5])
-
-    def test_interval_dict(self, x):
-
-        vs = {"a": 3, "b": 4, "c": 6}
-        s = Nominal(vs)._setup(x, IntervalProperty())
-        assert_array_equal(s(x), [3, 6, 4, 6])
-
-    def test_interval_with_transform(self, x):
-
-        class MockProperty(IntervalProperty):
-            _forward = np.square
-            _inverse = np.sqrt
-
-        s = Nominal((2, 4))._setup(x, MockProperty())
-        assert_array_equal(s(x), [4, np.sqrt(10), 2, np.sqrt(10)])
-
-    def test_empty_data(self):
-
-        x = pd.Series([], dtype=object, name="x")
-        s = Nominal()._setup(x, Coordinate())
-        assert_array_equal(s(x), [])
-
-
-class TestTemporal:
-
-    @pytest.fixture
-    def t(self):
-        dates = pd.to_datetime(["1972-09-27", "1975-06-24", "1980-12-14"])
-        return pd.Series(dates, name="x")
-
-    @pytest.fixture
-    def x(self, t):
-        return pd.Series(mpl.dates.date2num(t), name=t.name)
-
-    def test_coordinate_defaults(self, t, x):
-
-        s = Temporal()._setup(t, Coordinate())
-        assert_array_equal(s(t), x)
-
-    def test_interval_defaults(self, t, x):
-
-        s = Temporal()._setup(t, IntervalProperty())
-        normed = (x - x.min()) / (x.max() - x.min())
-        assert_array_equal(s(t), normed)
-
-    def test_interval_with_range(self, t, x):
-
-        values = (1, 3)
-        s = Temporal((1, 3))._setup(t, IntervalProperty())
-        normed = (x - x.min()) / (x.max() - x.min())
-        expected = normed * (values[1] - values[0]) + values[0]
-        assert_array_equal(s(t), expected)
-
-    def test_interval_with_norm(self, t, x):
-
-        norm = t[1], t[2]
-        s = Temporal(norm=norm)._setup(t, IntervalProperty())
-        n = mpl.dates.date2num(norm)
-        normed = (x - n[0]) / (n[1] - n[0])
-        assert_array_equal(s(t), normed)
-
-    def test_color_defaults(self, t, x):
-
-        cmap = color_palette("ch:", as_cmap=True)
-        s = Temporal()._setup(t, Color())
-        normed = (x - x.min()) / (x.max() - x.min())
-        assert_array_equal(s(t), cmap(normed)[:, :3])  # FIXME RGBA
-
-    def test_color_named_values(self, t, x):
-
-        name = "viridis"
-        cmap = color_palette(name, as_cmap=True)
-        s = Temporal(name)._setup(t, Color())
-        normed = (x - x.min()) / (x.max() - x.min())
-        assert_array_equal(s(t), cmap(normed)[:, :3])  # FIXME RGBA
-
-    def test_coordinate_axis(self, t, x):
-
-        ax = mpl.figure.Figure().subplots()
-        s = Temporal()._setup(t, Coordinate(), ax.xaxis)
-        assert_array_equal(s(t), x)
-        locator = ax.xaxis.get_major_locator()
-        formatter = ax.xaxis.get_major_formatter()
-        assert isinstance(locator, mpl.dates.AutoDateLocator)
-        assert isinstance(formatter, mpl.dates.AutoDateFormatter)
-
-    @pytest.mark.skipif(
-        Version(mpl.__version__) < Version("3.3.0"),
-        reason="Test requires new matplotlib date epoch."
-    )
-    def test_tick_locator(self, t):
-
-        locator = mpl.dates.YearLocator(month=3, day=15)
-        s = Temporal().tick(locator)
-        a = PseudoAxis(s._setup(t, Coordinate())._matplotlib_scale)
-        a.set_view_interval(0, 365)
-        assert 73 in a.major.locator()
-
-    def test_tick_upto(self, t, x):
-
-        n = 8
-        ax = mpl.figure.Figure().subplots()
-        Temporal().tick(upto=n)._setup(t, Coordinate(), ax.xaxis)
-        locator = ax.xaxis.get_major_locator()
-        assert set(locator.maxticks.values()) == {n}
-
-    @pytest.mark.skipif(
-        Version(mpl.__version__) < Version("3.3.0"),
-        reason="Test requires new matplotlib date epoch."
-    )
-    def test_label_formatter(self, t):
-
-        formatter = mpl.dates.DateFormatter("%Y")
-        s = Temporal().label(formatter)
-        a = PseudoAxis(s._setup(t, Coordinate())._matplotlib_scale)
-        a.set_view_interval(10, 1000)
-        label, = a.major.formatter.format_ticks([100])
-        assert label == "1970"
-
-    def test_label_concise(self, t, x):
 
-        ax = mpl.figure.Figure().subplots()
-        Temporal().label(concise=True)._setup(t, Coordinate(), ax.xaxis)
-        formatter = ax.xaxis.get_major_formatter()
-        assert isinstance(formatter, mpl.dates.ConciseDateFormatter)
+from seaborn._core.scales import Continuous
+from seaborn._core.properties import Property
+
+
+def test_continuous_scale_with_boolean_data():
+    """Test that continuous scale handles boolean data correctly."""
+    data = pd.Series([True, False, True])
+    prop = Property("color")
+    scale = Continuous()
+    scale = scale._setup(data, prop)
+    
+    # Test that boolean data is converted to float and scaled correctly
+    result = scale(data)
+    assert not np.isnan(result).any()
+    assert len(result) == len(data)
+    assert isinstance(result[0], (float, np.floating))
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy!=1.24.0,>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (1.25.2)
Requirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (2.0.0)
Requirement already satisfied: matplotlib!=3.6.1,>=3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.7.2)
Requirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (8.3.2)
Requirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (5.0.0)
Requirement already satisfied: pytest-xdist in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.6.1)
Requirement already satisfied: flake8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (7.1.0)
Requirement already satisfied: mypy in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (1.11.1)
Requirement already satisfied: pandas-stubs in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (2.2.2.240603)
Requirement already satisfied: pre-commit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.8.0)
Requirement already satisfied: flit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.9.0)
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.4.5)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (10.0.0)
Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (2.8.2)
Requirement already satisfied: importlib-resources>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (6.0.1)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.2.dev0) (2023.3.post1)
Requirement already satisfied: tzdata>=2022.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.2.dev0) (2023.1)
Requirement already satisfied: mccabe<0.8.0,>=0.7.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (0.7.0)
Requirement already satisfied: pycodestyle<2.13.0,>=2.12.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (2.12.0)
Requirement already satisfied: pyflakes<3.3.0,>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (3.2.0)
Requirement already satisfied: flit_core>=3.9.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (3.9.0)
Requirement already satisfied: requests in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (2.32.3)
Requirement already satisfied: docutils in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (0.21.2)
Requirement already satisfied: tomli-w in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (1.0.0)
Requirement already satisfied: typing-extensions>=4.6.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (4.12.2)
Requirement already satisfied: mypy-extensions>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (1.0.0)
Requirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (2.0.1)
Requirement already satisfied: types-pytz>=2022.1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas-stubs->seaborn==0.12.2.dev0) (2024.1.0.20240417)
Requirement already satisfied: cfgv>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (3.4.0)
Requirement already satisfied: identify>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (2.6.0)
Requirement already satisfied: nodeenv>=0.11.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (1.9.1)
Requirement already satisfied: pyyaml>=5.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (6.0.1)
Requirement already satisfied: virtualenv>=20.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (20.26.3)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (2.0.0)
Requirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (1.5.0)
Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (1.2.2)
Requirement already satisfied: coverage>=5.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=5.2.1->pytest-cov->seaborn==0.12.2.dev0) (7.6.0)
Requirement already satisfied: execnet>=2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-xdist->seaborn==0.12.2.dev0) (2.1.1)
Requirement already satisfied: zipp>=3.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (3.16.2)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.16.0)
Requirement already satisfied: distlib<1,>=0.3.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (0.3.8)
Requirement already satisfied: filelock<4,>=3.12.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (3.15.4)
Requirement already satisfied: platformdirs<5,>=3.9.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (4.2.2)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (2.2.2)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (2024.7.4)
Checking if build backend supports build_editable: started
Checking if build backend supports build_editable: finished with status 'done'
Building wheels for collected packages: seaborn
  Building editable for seaborn (pyproject.toml): started
  Building editable for seaborn (pyproject.toml): finished with status 'done'
  Created wheel for seaborn: filename=seaborn-0.12.2.dev0-py3-none-any.whl size=3923 sha256=c842c493d50872ba73a2475cecd812bbf8d9656fe57171292218c478f4956e0e
  Stored in directory: /tmp/pip-ephem-wheel-cache-07yqbfd8/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built seaborn
Installing collected packages: seaborn
  Attempting uninstall: seaborn
    Found existing installation: seaborn 0.12.2.dev0
    Uninstalling seaborn-0.12.2.dev0:
      Successfully uninstalled seaborn-0.12.2.dev0
Successfully installed seaborn-0.12.2.dev0
============================= test session starts ==============================
collected 86 items

tests/_core/test_scales.py ............................................. [ 52%]
..........x..............................                                [100%]

=============================== warnings summary ===============================
tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset
  /testbed/seaborn/_core/properties.py:643: RuntimeWarning: invalid value encountered in cast
    ixs = np.asarray(x, np.intp)

tests/_core/test_scales.py::TestNominal::test_object_order_subset
  /testbed/seaborn/_core/properties.py:366: RuntimeWarning: invalid value encountered in cast
    ixs = np.asarray(x, np.intp)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults
PASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform
PASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter
PASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error
PASSED tests/_core/test_scales.py::TestContinuous::test_interval_defaults
PASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_range
PASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_norm
PASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform
PASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_bools
PASSED tests/_core/test_scales.py::TestContinuous::test_color_defaults
PASSED tests/_core/test_scales.py::TestContinuous::test_color_named_values
PASSED tests/_core/test_scales.py::TestContinuous::test_color_tuple_values
PASSED tests/_core/test_scales.py::TestContinuous::test_color_callable_values
PASSED tests/_core/test_scales.py::TestContinuous::test_color_with_norm
PASSED tests/_core/test_scales.py::TestContinuous::test_color_with_transform
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_locator
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_upto
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_every
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_every_between
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_at
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_count
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_count_between
PASSED tests/_core/test_scales.py::TestContinuous::test_tick_minor
PASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_default
PASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_upto
PASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_count
PASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled
PASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_every
PASSED tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default
PASSED tests/_core/test_scales.py::TestContinuous::test_label_formatter
PASSED tests/_core/test_scales.py::TestContinuous::test_label_like_pattern
PASSED tests/_core/test_scales.py::TestContinuous::test_label_like_string
PASSED tests/_core/test_scales.py::TestContinuous::test_label_like_function
PASSED tests/_core/test_scales.py::TestContinuous::test_label_base
PASSED tests/_core/test_scales.py::TestContinuous::test_label_unit
PASSED tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep
PASSED tests/_core/test_scales.py::TestContinuous::test_label_empty_unit
PASSED tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform
PASSED tests/_core/test_scales.py::TestContinuous::test_label_type_checks
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_defaults
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_with_order
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data
PASSED tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order
PASSED tests/_core/test_scales.py::TestNominal::test_color_defaults
PASSED tests/_core/test_scales.py::TestNominal::test_color_named_palette
PASSED tests/_core/test_scales.py::TestNominal::test_color_list_palette
PASSED tests/_core/test_scales.py::TestNominal::test_color_dict_palette
PASSED tests/_core/test_scales.py::TestNominal::test_color_numeric_data
PASSED tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset
PASSED tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette
PASSED tests/_core/test_scales.py::TestNominal::test_color_unknown_palette
PASSED tests/_core/test_scales.py::TestNominal::test_object_defaults
PASSED tests/_core/test_scales.py::TestNominal::test_object_list
PASSED tests/_core/test_scales.py::TestNominal::test_object_dict
PASSED tests/_core/test_scales.py::TestNominal::test_object_order
PASSED tests/_core/test_scales.py::TestNominal::test_object_order_subset
PASSED tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird
PASSED tests/_core/test_scales.py::TestNominal::test_alpha_default
PASSED tests/_core/test_scales.py::TestNominal::test_fill
PASSED tests/_core/test_scales.py::TestNominal::test_fill_dict
PASSED tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning
PASSED tests/_core/test_scales.py::TestNominal::test_interval_defaults
PASSED tests/_core/test_scales.py::TestNominal::test_interval_tuple
PASSED tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric
PASSED tests/_core/test_scales.py::TestNominal::test_interval_list
PASSED tests/_core/test_scales.py::TestNominal::test_interval_dict
PASSED tests/_core/test_scales.py::TestNominal::test_interval_with_transform
PASSED tests/_core/test_scales.py::TestNominal::test_empty_data
PASSED tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults
PASSED tests/_core/test_scales.py::TestTemporal::test_interval_defaults
PASSED tests/_core/test_scales.py::TestTemporal::test_interval_with_range
PASSED tests/_core/test_scales.py::TestTemporal::test_interval_with_norm
PASSED tests/_core/test_scales.py::TestTemporal::test_color_defaults
PASSED tests/_core/test_scales.py::TestTemporal::test_color_named_values
PASSED tests/_core/test_scales.py::TestTemporal::test_coordinate_axis
PASSED tests/_core/test_scales.py::TestTemporal::test_tick_locator
PASSED tests/_core/test_scales.py::TestTemporal::test_tick_upto
PASSED tests/_core/test_scales.py::TestTemporal::test_label_formatter
PASSED tests/_core/test_scales.py::TestTemporal::test_label_concise
XFAIL tests/_core/test_scales.py::TestNominal::test_color_numeric_int_float_mix - Need to sort out float/int order
================== 85 passed, 1 xfailed, 2 warnings in 3.52s ===================


