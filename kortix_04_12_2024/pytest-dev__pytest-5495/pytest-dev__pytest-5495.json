{
  "instance_id": "pytest-dev__pytest-5495",
  "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..b4d0a95db 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -259,9 +259,18 @@ def _compare_eq_sequence(left, right, verbose=0):\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                left_chr = chr(left[i]) if 32 <= left[i] <= 126 else '\\\\x{:02x}'.format(left[i])\n+                right_chr = chr(right[i]) if 32 <= right[i] <= 126 else '\\\\x{:02x}'.format(right[i])\n+                explanation += [\n+                    \"At index {} diff: b'{}' (ASCII {}) != b'{}' (ASCII {})\".format(\n+                        i, left_chr, left[i], right_chr, right[i]\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n@@ -275,14 +284,31 @@ def _compare_eq_sequence(left, right, verbose=0):\n             extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n-            explanation += [\n-                \"{} contains one more item: {}\".format(dir_with_more, extra)\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                extra_byte = left[len_right] if len_diff > 0 else right[len_left]\n+                extra_chr = chr(extra_byte) if 32 <= extra_byte <= 126 else '\\\\x{:02x}'.format(extra_byte)\n+                explanation += [\n+                    \"{} contains one more item: b'{}' (ASCII {})\".format(\n+                        dir_with_more, extra_chr, extra_byte\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"{} contains one more item: {}\".format(dir_with_more, extra)\n+                ]\n         else:\n-            explanation += [\n-                \"%s contains %d more items, first extra item: %s\"\n-                % (dir_with_more, len_diff, extra)\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                extra_byte = left[len_right] if len_diff > 0 else right[len_left]\n+                extra_chr = chr(extra_byte) if 32 <= extra_byte <= 126 else '\\\\x{:02x}'.format(extra_byte)\n+                explanation += [\n+                    \"%s contains %d more items, first extra item: b'%s' (ASCII %d)\"\n+                    % (dir_with_more, len_diff, extra_chr, extra_byte)\n+                ]\n+            else:\n+                explanation += [\n+                    \"%s contains %d more items, first extra item: %s\"\n+                    % (dir_with_more, len_diff, extra)\n+                ]\n     return explanation\n \n \n@@ -388,4 +414,4 @@ def _notin_text(term, text, verbose=0):\n             newdiff.append(\"  \" + line[2:])\n         else:\n             newdiff.append(line)\n-    return newdiff\n+    return newdiff\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}