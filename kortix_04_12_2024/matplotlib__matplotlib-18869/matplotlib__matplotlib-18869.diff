diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index b657a35cf7..7b660be704 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -148,6 +148,11 @@ def __getattr__(name):
         else:  # Get the version from the _version.py setuptools_scm file.
             __version__ = _version.version
         return __version__
+    elif name == "version_info":
+        global version_info  # cache it
+        version = __getattr__("__version__")  # ensure __version__ is set
+        version_info = _version._parse_version(version)
+        return version_info
     raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
 
 
@@ -1409,4 +1414,4 @@ def _preprocess_data(func=None, *, replace_names=None, label_namer=None):
 
 _log.debug('interactive is %s', is_interactive())
 _log.debug('platform is %s', sys.platform)
-_log.debug('loaded modules: %s', list(sys.modules))
+_log.debug('loaded modules: %s', list(sys.modules))
\ No newline at end of file
diff --git a/lib/matplotlib/tests/test_version.py b/lib/matplotlib/tests/test_version.py
new file mode 100644
index 0000000000..24dc500007
--- /dev/null
+++ b/lib/matplotlib/tests/test_version.py
@@ -0,0 +1,38 @@
+import pytest
+import matplotlib as mpl
+from matplotlib import _version
+
+def test_version_info_exists():
+    """Test that version_info exists and has correct format."""
+    assert hasattr(mpl, 'version_info')
+    assert len(mpl.version_info) == 5
+    assert all(isinstance(x, (int, str)) for x in mpl.version_info)
+    assert isinstance(mpl.version_info[0], int)  # major
+    assert isinstance(mpl.version_info[1], int)  # minor
+    assert isinstance(mpl.version_info[2], int)  # micro
+    assert isinstance(mpl.version_info[3], str)  # releaselevel
+    assert isinstance(mpl.version_info[4], int)  # serial
+
+def test_version_info_components():
+    """Test that version_info components match version string."""
+    major, minor, micro, releaselevel, serial = mpl.version_info
+    version = mpl.__version__
+    
+    # Basic version number check
+    assert str(major) == version.split('.')[0]
+    assert str(minor) == version.split('.')[1]
+    
+    # Version info should be comparable
+    assert mpl.version_info >= (0, 0, 0, 'alpha', 0)
+    assert mpl.version_info > (0, 0, 0, 'alpha', 0)
+    
+    # Development versions should parse correctly
+    if 'dev' in version:
+        assert releaselevel == 'dev'
+        assert serial > 0
+    elif any(x in version for x in ('a', 'b', 'rc')):
+        assert releaselevel in ('alpha', 'beta', 'candidate')
+        assert serial > 0
+    else:
+        assert releaselevel == 'final'
+        assert serial == 0
