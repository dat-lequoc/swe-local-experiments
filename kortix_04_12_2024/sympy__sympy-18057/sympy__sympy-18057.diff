diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 24d89897f7..4c9fc07058 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -120,14 +120,15 @@ def _hashable_content(self):
         return self._args
 
     def __eq__(self, other):
-        try:
-            other = sympify(other)
-            if not isinstance(other, Expr):
+        if not isinstance(other, Basic):
+            try:
+                other = _sympify(other)
+            except (SympifyError, SyntaxError):
                 return False
-        except (SympifyError, SyntaxError):
+        if not isinstance(other, Expr):
             return False
         # check for pure number expr
-        if  not (self.is_Number and other.is_Number) and (
+        if not (self.is_Number and other.is_Number) and (
                 type(self) != type(other)):
             return False
         a, b = self._hashable_content(), other._hashable_content()
@@ -3959,4 +3960,4 @@ def search_element(self, elem):
 from .function import Derivative, Function
 from .mod import Mod
 from .exprtools import factor_terms
-from .numbers import Integer, Rational
+from .numbers import Integer, Rational
\ No newline at end of file
diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py
index 87a0de25fa..9d4aa31590 100644
--- a/sympy/core/tests/test_sympify.py
+++ b/sympy/core/tests/test_sympify.py
@@ -434,6 +434,19 @@ def test_issue_4133():
     assert a == Integer(4)
     assert a.is_Integer
 
+def test_sympify_unsafe_repr():
+    class BadRepr:
+        def __repr__(self):
+            return 'x.y'  # unsafe repr
+    
+    x = Symbol('x')
+    assert x != BadRepr()
+
+    class FakeSymbol:
+        def __repr__(self):
+            return 'x'  # looks like a symbol
+    
+    assert x != FakeSymbol()
 
 def test_issue_3982():
     a = [3, 2.0]
@@ -695,3 +708,45 @@ def test_issue_16759():
 def test_issue_17811():
     a = Function('a')
     assert sympify('a(x)*5', evaluate=False) == Mul(a(x), 5, evaluate=False)
+
+def test_sympify_unsafe_repr():
+    class BadRepr:
+        def __repr__(self):
+            return 'x.y'  # unsafe repr
+    
+    x = Symbol('x')
+    assert x != BadRepr()
+
+    class FakeSymbol:
+        def __repr__(self):
+            return 'x'  # looks like a symbol
+    
+    assert x != FakeSymbol()
+
+def test_sympify_unsafe_repr():
+    class BadRepr:
+        def __repr__(self):
+            return 'x.y'  # unsafe repr
+    
+    x = Symbol('x')
+    assert x != BadRepr()
+
+    class FakeSymbol:
+        def __repr__(self):
+            return 'x'  # looks like a symbol
+    
+    assert x != FakeSymbol()
+
+def test_sympify_unsafe_repr():
+    class BadRepr:
+        def __repr__(self):
+            return 'x.y'  # unsafe repr
+    
+    x = Symbol('x')
+    assert x != BadRepr()
+
+    class FakeSymbol:
+        def __repr__(self):
+            return 'x'  # looks like a symbol
+    
+    assert x != FakeSymbol()
\ No newline at end of file
