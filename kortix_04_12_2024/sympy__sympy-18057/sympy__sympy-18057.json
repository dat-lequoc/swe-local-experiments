{
  "instance_id": "sympy__sympy-18057",
  "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..4c9fc07058 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,14 +120,15 @@ def _hashable_content(self):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if not isinstance(other, Basic):\n+            try:\n+                other = _sympify(other)\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        if not isinstance(other, Expr):\n             return False\n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n+        if not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n@@ -3959,4 +3960,4 @@ def search_element(self, elem):\n from .function import Derivative, Function\n from .mod import Mod\n from .exprtools import factor_terms\n-from .numbers import Integer, Rational\n+from .numbers import Integer, Rational\n\\ No newline at end of file\ndiff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 87a0de25fa..9d4aa31590 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -434,6 +434,19 @@ def test_issue_4133():\n     assert a == Integer(4)\n     assert a.is_Integer\n \n+def test_sympify_unsafe_repr():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'  # unsafe repr\n+    \n+    x = Symbol('x')\n+    assert x != BadRepr()\n+\n+    class FakeSymbol:\n+        def __repr__(self):\n+            return 'x'  # looks like a symbol\n+    \n+    assert x != FakeSymbol()\n \n def test_issue_3982():\n     a = [3, 2.0]\n@@ -695,3 +708,45 @@ def test_issue_16759():\n def test_issue_17811():\n     a = Function('a')\n     assert sympify('a(x)*5', evaluate=False) == Mul(a(x), 5, evaluate=False)\n+\n+def test_sympify_unsafe_repr():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'  # unsafe repr\n+    \n+    x = Symbol('x')\n+    assert x != BadRepr()\n+\n+    class FakeSymbol:\n+        def __repr__(self):\n+            return 'x'  # looks like a symbol\n+    \n+    assert x != FakeSymbol()\n+\n+def test_sympify_unsafe_repr():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'  # unsafe repr\n+    \n+    x = Symbol('x')\n+    assert x != BadRepr()\n+\n+    class FakeSymbol:\n+        def __repr__(self):\n+            return 'x'  # looks like a symbol\n+    \n+    assert x != FakeSymbol()\n+\n+def test_sympify_unsafe_repr():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'  # unsafe repr\n+    \n+    x = Symbol('x')\n+    assert x != BadRepr()\n+\n+    class FakeSymbol:\n+        def __repr__(self):\n+            return 'x'  # looks like a symbol\n+    \n+    assert x != FakeSymbol()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}