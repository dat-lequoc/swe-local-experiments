diff --git a/requests/sessions.py b/requests/sessions.py
index d701ff2e..be688b99 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -375,6 +375,12 @@ class Session(SessionRedirectMixin):
         )
         return p
 
+    def _ensure_str(self, method):
+        """Ensure the HTTP method is a proper string."""
+        if isinstance(method, bytes):
+            return method.decode('ascii')
+        return str(method)
+
     def request(self, method, url,
         params=None,
         data=None,
@@ -425,7 +431,7 @@ class Session(SessionRedirectMixin):
             If Tuple, ('cert', 'key') pair.
         """
 
-        method = builtin_str(method)
+        method = self._ensure_str(method)
 
         # Create the Request.
         req = Request(
@@ -668,4 +674,4 @@ class Session(SessionRedirectMixin):
 def session():
     """Returns a :class:`Session` for context-management."""
 
-    return Session()
+    return Session()
\ No newline at end of file
diff --git a/test_requests.py b/test_requests.py
index 467c5bc6..4701216a 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -1516,5 +1516,23 @@ def test_prepare_unicode_url():
     )
     assert_copy(p, p.copy())
 
+    def test_binary_method_handling(self):
+        """Test that binary string methods are handled correctly."""
+        s = requests.Session()
+        url = httpbin('get')
+        r = s.request(b'GET', url)
+        assert r.status_code == 200
+        r = s.request('GET', url)
+        assert r.status_code == 200
+
+    def test_binary_method_handling(self):
+        """Test that binary string methods are handled correctly."""
+        s = requests.Session()
+        url = httpbin('get')
+        r = s.request(b'GET', url)
+        assert r.status_code == 200
+        r = s.request('GET', url)
+        assert r.status_code == 200
+
 if __name__ == '__main__':
-    unittest.main()
+    unittest.main()
\ No newline at end of file
