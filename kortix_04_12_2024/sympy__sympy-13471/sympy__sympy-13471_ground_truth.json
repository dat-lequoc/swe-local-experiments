{
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1042,6 +1042,11 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n+                # If we're loading an object pickled in Python 2 into\n+                # Python 3, we may need to strip a tailing 'L' because\n+                # of a shim for int on Python 3, see issue #13470.\n+                if num[1].endswith('L'):\n+                    num[1] = num[1][:-1]\n                 num[1] = long(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,6 +582,12 @@ def test_Float_issue_2107():\n     assert S.Zero + b + (-b) == 0\n \n \n+def test_Float_from_tuple():\n+    a = Float((0, '1L', 0, 1))\n+    b = Float((0, '1', 0, 1))\n+    assert a == b\n+\n+\n def test_Infinity():\n     assert oo != 1\n     assert 1*oo == oo\n"
}