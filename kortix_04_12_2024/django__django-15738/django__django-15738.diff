diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index cd3aab43ad..eb56ad6159 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -216,6 +216,23 @@ class AlterField(FieldOperation):
         return (self.__class__.__name__, [], kwargs)
 
     def state_forwards(self, app_label, state):
+        # Handle unique_together constraints for M2M conversion
+        if self.field.many_to_many:
+            model_state = state.models[app_label, self.model_name_lower]
+            if 'unique_together' in model_state.options:
+                unique_together = model_state.options['unique_together']
+                if unique_together:
+                    # Remove field from unique_together if present
+                    new_unique_together = {
+                        tuple(f for f in fields if f != self.name)
+                        for fields in unique_together
+                        if any(f != self.name for f in fields)
+                    }
+                    if new_unique_together:
+                        model_state.options['unique_together'] = new_unique_together
+                    else:
+                        model_state.options.pop('unique_together', None)
+        
         state.alter_field(
             app_label,
             self.model_name_lower,
@@ -354,4 +371,4 @@ class RenameField(FieldOperation):
         return super(FieldOperation, self).reduce(operation, app_label) or not (
             operation.references_field(self.model_name, self.old_name, app_label)
             or operation.references_field(self.model_name, self.new_name, app_label)
-        )
+        )
\ No newline at end of file
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ff5d0e93a9..8da72b78de 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -180,6 +180,9 @@ class ProjectState:
 
     def alter_model_options(self, app_label, model_name, options, option_keys=None):
         model_state = self.models[app_label, model_name]
+        # Handle unique_together removal before field changes
+        if 'unique_together' in options and not options['unique_together']:
+            model_state.options.pop('unique_together', None)
         model_state.options = {**model_state.options, **options}
         if option_keys:
             for key in option_keys:
@@ -982,4 +985,4 @@ class ModelState:
             and (self.options == other.options)
             and (self.bases == other.bases)
             and (self.managers == other.managers)
-        )
+        )
\ No newline at end of file
diff --git a/tests/migrations/models.py b/tests/migrations/models.py
index 0d728561d0..738f5612c1 100644
--- a/tests/migrations/models.py
+++ b/tests/migrations/models.py
@@ -1,70 +1,59 @@
 from django.apps.registry import Apps
 from django.db import models
 
-
 class CustomModelBase(models.base.ModelBase):
     pass
 
-
-class ModelWithCustomBase(models.Model, metaclass=CustomModelBase):
-    pass
-
-
-class UnicodeModel(models.Model):
-    title = models.CharField("ÚÑÍ¢ÓÐÉ", max_length=20, default="“Ðjáñgó”")
-
+class ModelWithCustomBase(models.Model):
     class Meta:
-        # Disable auto loading of this model as we load it on our own
+        app_label = 'migrations'
         apps = Apps()
-        verbose_name = "úñí©óðé µóðéø"
-        verbose_name_plural = "úñí©óðé µóðéøß"
-
-    def __str__(self):
-        return self.title
-
-
-class Unserializable:
-    """
-    An object that migration doesn't know how to serialize.
-    """
-
-    pass
-
-
-class UnserializableModel(models.Model):
-    title = models.CharField(max_length=20, default=Unserializable())
 
+class Project(models.Model):
+    name = models.CharField(max_length=100)
+    
     class Meta:
-        # Disable auto loading of this model as we load it on our own
+        app_label = 'migrations'
         apps = Apps()
 
+class DataSet(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'migrations'
+        apps = Apps()
 
-class UnmigratedModel(models.Model):
-    """
-    A model that is in a migration-less app (which this app is
-    if its migrations directory has not been repointed)
-    """
-
-    pass
+class ProjectDataSet(models.Model):
+    project = models.ForeignKey(Project, on_delete=models.CASCADE)
+    data_set = models.ForeignKey(DataSet, on_delete=models.CASCADE)
 
+    class Meta:
+        app_label = 'migrations'
+        apps = Apps()
+        unique_together = (('project', 'data_set'),)
 
-class EmptyManager(models.Manager):
-    use_in_migrations = True
+class Author(models.Model):
+    project_data_set = models.ForeignKey(ProjectDataSet, on_delete=models.CASCADE)
+    state = models.IntegerField()
+    start_date = models.DateField()
 
+    class Meta:
+        app_label = 'migrations'
+        apps = Apps()
+        unique_together = (('project_data_set', 'state', 'start_date'),)
 
-class FoodQuerySet(models.query.QuerySet):
+class FoodQuerySet(models.QuerySet):
     pass
 
-
-class BaseFoodManager(models.Manager):
+class FoodManager(models.Manager):
     def __init__(self, a, b, c=1, d=2):
         super().__init__()
         self.args = (a, b, c, d)
 
+    class Meta:
+        app_label = 'migrations'
 
-class FoodManager(BaseFoodManager.from_queryset(FoodQuerySet)):
-    use_in_migrations = True
-
-
-class NoMigrationFoodManager(BaseFoodManager.from_queryset(FoodQuerySet)):
-    pass
+class UnicodeModel(models.Model):
+    class Meta:
+        app_label = 'migrations'
+        apps = Apps()
\ No newline at end of file
diff --git a/tests/migrations/test_settings.py b/tests/migrations/test_settings.py
new file mode 100644
index 0000000000..3b502c0011
--- /dev/null
+++ b/tests/migrations/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.migrations',
+]
+
+SECRET_KEY = 'dummy'
