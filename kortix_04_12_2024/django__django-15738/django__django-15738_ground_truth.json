{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1022,8 +1022,9 @@ def generate_added_fields(self):\n \n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.to_state.models[app_label, model_name].get_field(field_name)\n-        # Fields that are foreignkeys/m2ms depend on stuff\n-        dependencies = []\n+        # Adding a field always depends at least on its removal.\n+        dependencies = [(app_label, model_name, field_name, False)]\n+        # Fields that are foreignkeys/m2ms depend on stuff.\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(\n                 self._get_dependencies_for_foreign_key(\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -868,6 +868,18 @@ class AutodetectorTests(TestCase):\n             \"unique_together\": {(\"title\", \"newfield2\")},\n         },\n     )\n+    book_unique_together = ModelState(\n+        \"otherapp\",\n+        \"Book\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n+            (\"title\", models.CharField(max_length=200)),\n+        ],\n+        {\n+            \"unique_together\": {(\"author\", \"title\")},\n+        },\n+    )\n     attribution = ModelState(\n         \"otherapp\",\n         \"Attribution\",\n@@ -3798,16 +3810,16 @@ def test_many_to_many_changed_to_concrete_field(self):\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"testapp\", 1)\n         self.assertOperationTypes(\n-            changes, \"testapp\", 0, [\"RemoveField\", \"AddField\", \"DeleteModel\"]\n+            changes, \"testapp\", 0, [\"RemoveField\", \"DeleteModel\", \"AddField\"]\n         )\n         self.assertOperationAttributes(\n             changes, \"testapp\", 0, 0, name=\"publishers\", model_name=\"author\"\n         )\n+        self.assertOperationAttributes(changes, \"testapp\", 0, 1, name=\"Publisher\")\n         self.assertOperationAttributes(\n-            changes, \"testapp\", 0, 1, name=\"publishers\", model_name=\"author\"\n+            changes, \"testapp\", 0, 2, name=\"publishers\", model_name=\"author\"\n         )\n-        self.assertOperationAttributes(changes, \"testapp\", 0, 2, name=\"Publisher\")\n-        self.assertOperationFieldAttributes(changes, \"testapp\", 0, 1, max_length=100)\n+        self.assertOperationFieldAttributes(changes, \"testapp\", 0, 2, max_length=100)\n \n     def test_non_circular_foreignkey_dependency_removal(self):\n         \"\"\"\n@@ -4346,6 +4358,36 @@ def test_fk_dependency_other_app(self):\n             changes, \"testapp\", 0, [(\"otherapp\", \"__first__\")]\n         )\n \n+    def test_alter_unique_together_fk_to_m2m(self):\n+        changes = self.get_changes(\n+            [self.author_name, self.book_unique_together],\n+            [\n+                self.author_name,\n+                ModelState(\n+                    \"otherapp\",\n+                    \"Book\",\n+                    [\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"author\", models.ManyToManyField(\"testapp.Author\")),\n+                        (\"title\", models.CharField(max_length=200)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(\n+            changes, \"otherapp\", 0, [\"AlterUniqueTogether\", \"RemoveField\", \"AddField\"]\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\", unique_together=set()\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, model_name=\"book\", name=\"author\"\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 2, model_name=\"book\", name=\"author\"\n+        )\n+\n     def test_alter_field_to_fk_dependency_other_app(self):\n         changes = self.get_changes(\n             [self.author_empty, self.book_with_no_author_fk],\n"
}