{
  "instance_id": "django__django-15738",
  "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..eb56ad6159 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -216,6 +216,23 @@ class AlterField(FieldOperation):\n         return (self.__class__.__name__, [], kwargs)\n \n     def state_forwards(self, app_label, state):\n+        # Handle unique_together constraints for M2M conversion\n+        if self.field.many_to_many:\n+            model_state = state.models[app_label, self.model_name_lower]\n+            if 'unique_together' in model_state.options:\n+                unique_together = model_state.options['unique_together']\n+                if unique_together:\n+                    # Remove field from unique_together if present\n+                    new_unique_together = {\n+                        tuple(f for f in fields if f != self.name)\n+                        for fields in unique_together\n+                        if any(f != self.name for f in fields)\n+                    }\n+                    if new_unique_together:\n+                        model_state.options['unique_together'] = new_unique_together\n+                    else:\n+                        model_state.options.pop('unique_together', None)\n+        \n         state.alter_field(\n             app_label,\n             self.model_name_lower,\n@@ -354,4 +371,4 @@ class RenameField(FieldOperation):\n         return super(FieldOperation, self).reduce(operation, app_label) or not (\n             operation.references_field(self.model_name, self.old_name, app_label)\n             or operation.references_field(self.model_name, self.new_name, app_label)\n-        )\n+        )\n\\ No newline at end of file\ndiff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex ff5d0e93a9..8da72b78de 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -180,6 +180,9 @@ class ProjectState:\n \n     def alter_model_options(self, app_label, model_name, options, option_keys=None):\n         model_state = self.models[app_label, model_name]\n+        # Handle unique_together removal before field changes\n+        if 'unique_together' in options and not options['unique_together']:\n+            model_state.options.pop('unique_together', None)\n         model_state.options = {**model_state.options, **options}\n         if option_keys:\n             for key in option_keys:\n@@ -982,4 +985,4 @@ class ModelState:\n             and (self.options == other.options)\n             and (self.bases == other.bases)\n             and (self.managers == other.managers)\n-        )\n+        )\n\\ No newline at end of file\ndiff --git a/tests/migrations/models.py b/tests/migrations/models.py\nindex 0d728561d0..738f5612c1 100644\n--- a/tests/migrations/models.py\n+++ b/tests/migrations/models.py\n@@ -1,70 +1,59 @@\n from django.apps.registry import Apps\n from django.db import models\n \n-\n class CustomModelBase(models.base.ModelBase):\n     pass\n \n-\n-class ModelWithCustomBase(models.Model, metaclass=CustomModelBase):\n-    pass\n-\n-\n-class UnicodeModel(models.Model):\n-    title = models.CharField(\"\u00da\u00d1\u00cd\u00a2\u00d3\u00d0\u00c9\", max_length=20, default=\"\u201c\u00d0j\u00e1\u00f1g\u00f3\u201d\")\n-\n+class ModelWithCustomBase(models.Model):\n     class Meta:\n-        # Disable auto loading of this model as we load it on our own\n+        app_label = 'migrations'\n         apps = Apps()\n-        verbose_name = \"\u00fa\u00f1\u00ed\u00a9\u00f3\u00f0\u00e9 \u00b5\u00f3\u00f0\u00e9\u00f8\"\n-        verbose_name_plural = \"\u00fa\u00f1\u00ed\u00a9\u00f3\u00f0\u00e9 \u00b5\u00f3\u00f0\u00e9\u00f8\u00df\"\n-\n-    def __str__(self):\n-        return self.title\n-\n-\n-class Unserializable:\n-    \"\"\"\n-    An object that migration doesn't know how to serialize.\n-    \"\"\"\n-\n-    pass\n-\n-\n-class UnserializableModel(models.Model):\n-    title = models.CharField(max_length=20, default=Unserializable())\n \n+class Project(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n     class Meta:\n-        # Disable auto loading of this model as we load it on our own\n+        app_label = 'migrations'\n         apps = Apps()\n \n+class DataSet(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'migrations'\n+        apps = Apps()\n \n-class UnmigratedModel(models.Model):\n-    \"\"\"\n-    A model that is in a migration-less app (which this app is\n-    if its migrations directory has not been repointed)\n-    \"\"\"\n-\n-    pass\n+class ProjectDataSet(models.Model):\n+    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n+    data_set = models.ForeignKey(DataSet, on_delete=models.CASCADE)\n \n+    class Meta:\n+        app_label = 'migrations'\n+        apps = Apps()\n+        unique_together = (('project', 'data_set'),)\n \n-class EmptyManager(models.Manager):\n-    use_in_migrations = True\n+class Author(models.Model):\n+    project_data_set = models.ForeignKey(ProjectDataSet, on_delete=models.CASCADE)\n+    state = models.IntegerField()\n+    start_date = models.DateField()\n \n+    class Meta:\n+        app_label = 'migrations'\n+        apps = Apps()\n+        unique_together = (('project_data_set', 'state', 'start_date'),)\n \n-class FoodQuerySet(models.query.QuerySet):\n+class FoodQuerySet(models.QuerySet):\n     pass\n \n-\n-class BaseFoodManager(models.Manager):\n+class FoodManager(models.Manager):\n     def __init__(self, a, b, c=1, d=2):\n         super().__init__()\n         self.args = (a, b, c, d)\n \n+    class Meta:\n+        app_label = 'migrations'\n \n-class FoodManager(BaseFoodManager.from_queryset(FoodQuerySet)):\n-    use_in_migrations = True\n-\n-\n-class NoMigrationFoodManager(BaseFoodManager.from_queryset(FoodQuerySet)):\n-    pass\n+class UnicodeModel(models.Model):\n+    class Meta:\n+        app_label = 'migrations'\n+        apps = Apps()\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_settings.py b/tests/migrations/test_settings.py\nnew file mode 100644\nindex 0000000000..3b502c0011\n--- /dev/null\n+++ b/tests/migrations/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests.migrations',\n+]\n+\n+SECRET_KEY = 'dummy'\n",
  "model_name_or_path": "KortixAI"
}