{
  "patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -424,6 +424,15 @@ def _bell_incomplete_poly(n, k, symbols):\n \n     @classmethod\n     def eval(cls, n, k_sym=None, symbols=None):\n+        if n is S.Infinity:\n+            if k_sym is None:\n+                return S.Infinity\n+            else:\n+                raise ValueError(\"Bell polynomial is not defined\")\n+\n+        if n.is_negative or n.is_integer is False:\n+            raise ValueError(\"a non-negative integer expected\")\n+\n         if n.is_Integer and n.is_nonnegative:\n             if k_sym is None:\n                 return Integer(cls._bell(int(n)))\n",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_comb_numbers.py b/sympy/functions/combinatorial/tests/test_comb_numbers.py\n--- a/sympy/functions/combinatorial/tests/test_comb_numbers.py\n+++ b/sympy/functions/combinatorial/tests/test_comb_numbers.py\n@@ -73,6 +73,11 @@ def test_bell():\n     assert bell(1, x) == x\n     assert bell(2, x) == x**2 + x\n     assert bell(5, x) == x**5 + 10*x**4 + 25*x**3 + 15*x**2 + x\n+    assert bell(oo) == S.Infinity\n+    raises(ValueError, lambda: bell(oo, x))\n+\n+    raises(ValueError, lambda: bell(-1))\n+    raises(ValueError, lambda: bell(S(1)/2))\n \n     X = symbols('x:6')\n     # X = (x0, x1, .. x5)\n@@ -99,9 +104,9 @@ def test_bell():\n     for i in [0, 2, 3, 7, 13, 42, 55]:\n         assert bell(i).evalf() == bell(n).rewrite(Sum).evalf(subs={n: i})\n \n-    # For negative numbers, the formula does not hold\n-    m = Symbol('m', integer=True)\n-    assert bell(-1).evalf() == bell(m).rewrite(Sum).evalf(subs={m: -1})\n+    # issue 9184\n+    n = Dummy('n')\n+    assert bell(n).limit(n, S.Infinity) == S.Infinity\n \n \n def test_harmonic():\n"
}