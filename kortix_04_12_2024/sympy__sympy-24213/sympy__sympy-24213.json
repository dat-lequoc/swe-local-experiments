{
  "instance_id": "sympy__sympy-24213",
  "model_patch": "diff --git a/sympy/physics/units/tests/test_dimensions.py b/sympy/physics/units/tests/test_dimensions.py\nindex 6455df4106..87a5edacb4 100644\n--- a/sympy/physics/units/tests/test_dimensions.py\n+++ b/sympy/physics/units/tests/test_dimensions.py\n@@ -9,7 +9,8 @@\n from sympy.functions.elementary.trigonometric import (acos, atan2, cos)\n from sympy.physics.units.dimensions import Dimension\n from sympy.physics.units.definitions.dimension_definitions import (\n-    length, time, mass, force, pressure, angle\n+    length, time, mass, force, pressure, angle,\n+    velocity, acceleration\n )\n from sympy.physics.units import foot\n from sympy.testing.pytest import raises\n@@ -135,6 +136,28 @@ def test_Dimension_functions():\n     raises(TypeError, lambda: dimsys_SI.get_dimensional_dependencies(log(100, length)))\n     raises(TypeError, lambda: dimsys_SI.get_dimensional_dependencies(log(length, 10)))\n \n+def test_equivalent_dimensions():\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.definitions import meter, second\n+    \n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+    \n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+    \n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+    \n+    # This should not raise an error since velocity and acceleration*time are equivalent\n+    expr1 = a1*t1 + v1\n+    factor, dim = SI._collect_factor_and_dimension(expr1)\n+    assert dimsys_SI.equivalent_dims(dim, velocity)\n+\n     assert dimsys_SI.get_dimensional_dependencies(pi) == {}\n \n     assert dimsys_SI.get_dimensional_dependencies(cos(1)) == {}\n@@ -147,4 +170,4 @@ def test_Dimension_functions():\n     assert dimsys_SI.get_dimensional_dependencies(Abs(length)) == {length: 1}\n     assert dimsys_SI.get_dimensional_dependencies(Abs(length / length)) == {}\n \n-    assert dimsys_SI.get_dimensional_dependencies(sqrt(-1)) == {}\n+    assert dimsys_SI.get_dimensional_dependencies(sqrt(-1)) == {}\n\\ No newline at end of file\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..859ae60e3c 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if dim != addend_dim and not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n@@ -202,4 +202,4 @@ def get_units_non_prefixed(self) -> tSet[Quantity]:\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}