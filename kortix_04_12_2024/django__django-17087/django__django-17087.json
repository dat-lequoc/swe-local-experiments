{
  "instance_id": "django__django-17087",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..ff7f8f6e4c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n@@ -397,4 +397,4 @@ def serializer_factory(value):\n         \"Cannot serialize: %r\\nThere are some values Django cannot serialize into \"\n         \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n         \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n-    )\n+    )\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_serializer.py b/tests/migrations/test_serializer.py\nnew file mode 100644\nindex 0000000000..ba5f4268d8\n--- /dev/null\n+++ b/tests/migrations/test_serializer.py\n@@ -0,0 +1,16 @@\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.db.migrations.serializer import serializer_factory\n+\n+class SerializerTests(TestCase):\n+    def test_serialize_nested_class_method(self):\n+        class Model:\n+            class Nested:\n+                @classmethod\n+                def default_method(cls):\n+                    return []\n+        \n+        # Test serialization of nested class method\n+        serializer = serializer_factory(Model.Nested.default_method)\n+        string, imports = serializer.serialize()\n+        self.assertIn(\"Model.Nested.default_method\", string)\n",
  "model_name_or_path": "KortixAI"
}