{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -927,6 +927,10 @@ def generate_altered_fields(self):\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n+                        # Repoint both model and field name because to_field\n+                        # inclusion in ForeignKey.deconstruct() is based on\n+                        # both.\n+                        new_field.remote_field.model = old_field.remote_field.model\n                         new_field.remote_field.field_name = old_field.remote_field.field_name\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -932,6 +932,30 @@ def test_rename_foreign_object_fields(self):\n             changes, 'app', 0, 1, model_name='bar', old_name='second', new_name='second_renamed',\n         )\n \n+    def test_rename_referenced_primary_key(self):\n+        before = [\n+            ModelState('app', 'Foo', [\n+                ('id', models.CharField(primary_key=True, serialize=False)),\n+            ]),\n+            ModelState('app', 'Bar', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('foo', models.ForeignKey('app.Foo', models.CASCADE)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'Foo', [\n+                ('renamed_id', models.CharField(primary_key=True, serialize=False))\n+            ]),\n+            ModelState('app', 'Bar', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('foo', models.ForeignKey('app.Foo', models.CASCADE)),\n+            ]),\n+        ]\n+        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RenameField'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, old_name='id', new_name='renamed_id')\n+\n     def test_rename_field_preserved_db_column(self):\n         \"\"\"\n         RenameField is used if a field is renamed and db_column equal to the\n"
}