{
  "instance_id": "scikit-learn__scikit-learn-14087",
  "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..93aae7cce 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, :, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n@@ -2243,4 +2243,4 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n         if isinstance(scoring, str):\n             scoring = get_scorer(scoring)\n \n-        return scoring(self, X, y, sample_weight=sample_weight)\n+        return scoring(self, X, y, sample_weight=sample_weight)\n\\ No newline at end of file\ndiff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 6ad9a4ec9..61651d4cf 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -594,6 +594,16 @@ def test_multinomial_logistic_regression_string_inputs():\n     assert_equal(sorted(np.unique(lr_cv_str.predict(X_ref))), ['bar', 'baz'])\n \n \n+def test_logistic_cv_refit_false_multinomial():\n+    # Test that LogisticRegressionCV works correctly with refit=False\n+    X, y = make_classification(n_samples=100, n_features=3,\n+                               n_classes=3, n_informative=3, random_state=0)\n+    clf = LogisticRegressionCV(cv=5, solver='saga', multi_class='multinomial',\n+                               tol=1e-2, refit=False, random_state=0)\n+    clf.fit(X, y)\n+    assert_equal(clf.coef_.shape[0], 3)  # 3 classes\n+    assert_equal(clf.coef_.shape[1], 3)  # 3 features\n+\n def test_logistic_cv_sparse():\n     X, y = make_classification(n_samples=50, n_features=5,\n                                random_state=0)\n@@ -1737,4 +1747,4 @@ def test_penalty_none(solver):\n         \"penalty='none' is not useful and not supported by \"\n         \"LogisticRegressionCV\",\n         lr.fit, X, y\n-    )\n+    )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}