{
  "instance_id": "django__django-13964",
  "model_patch": "diff --git a/tests/model_fields/test_foreignkey.py b/tests/model_fields/test_foreignkey.py\nindex d30cca9b5c..1b4531895a 100644\n--- a/tests/model_fields/test_foreignkey.py\n+++ b/tests/model_fields/test_foreignkey.py\n@@ -8,6 +8,7 @@ from django.test import TestCase, skipIfDBFeature\n from django.test.utils import isolate_apps\n \n from .models import Bar, FkToChar, Foo, PrimaryKeyCharModel\n+from django.db import transaction\n \n \n class ForeignKeyTests(TestCase):\n@@ -29,6 +30,19 @@ class ForeignKeyTests(TestCase):\n         self.assertEqual(fk_model_empty.out, char_model_empty)\n \n     @isolate_apps('model_fields')\n+    def test_non_numeric_pk_assignment_after_parent_set(self):\n+        \"\"\"\n+        ForeignKey should handle non-numeric PKs correctly when PK is set after\n+        parent relationship is established.\n+        \"\"\"\n+        char_model = PrimaryKeyCharModel()\n+        fk_model = FkToChar(out=char_model)\n+        char_model.string = \"test\"\n+        char_model.save()\n+        fk_model.save()\n+        self.assertEqual(fk_model.out_id, \"test\")\n+        self.assertTrue(FkToChar.objects.filter(out=char_model).exists())\n+\n     def test_warning_when_unique_true_on_fk(self):\n         class Foo(models.Model):\n             pass\n@@ -146,4 +160,4 @@ class ForeignKeyTests(TestCase):\n             \"local to model 'model_fields.Child'.\"\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n-            Related._meta.get_field('child').related_fields\n+            Related._meta.get_field('child').related_fields\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}