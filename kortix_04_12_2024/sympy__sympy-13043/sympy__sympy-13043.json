{
  "instance_id": "sympy__sympy-13043",
  "model_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex fc72bd206f..527b8dbcd5 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -593,7 +593,23 @@ def decompose(expr, separate=False):\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        # Sort by total degree and then lexicographically\n+        def sort_key(term):\n+            if term.is_number:\n+                return (0, str(term))\n+            if term.is_Symbol:\n+                return (1, str(term))\n+            if term.is_Mul:\n+                degree = sum(exp for base, exp in term.as_powers_dict().items() if not base.is_number)\n+                return (degree, str(term))\n+            if term.is_Pow:\n+                base, exp = term.args\n+                if base.is_Symbol:\n+                    return (exp, str(term))\n+                return (sum(exp for b, exp in base.as_powers_dict().items() if not b.is_number), str(term))\n+            return (sum(exp for base, exp in term.as_powers_dict().items() if not base.is_number), str(term))\n+            \n+        return sorted(poly_dict.values(), key=sort_key)\n     return poly_dict\n \n \n@@ -778,4 +794,4 @@ def plot_polynomial(expr):\n     if len(gens) == 2:\n         plot3d(expr)\n     else:\n-        plot(expr)\n+        plot(expr)\n\\ No newline at end of file\ndiff --git a/sympy/integrals/tests/test_intpoly.py b/sympy/integrals/tests/test_intpoly.py\nindex 1e0cc29731..2b39d11623 100644\n--- a/sympy/integrals/tests/test_intpoly.py\n+++ b/sympy/integrals/tests/test_intpoly.py\n@@ -26,6 +26,7 @@ def test_decompose():\n     assert decompose(9*x**2 + y + 4*x + x**3 + y**2*x + 3) ==\\\n         {0: 3, 1: 4*x + y, 2: 9*x**2, 3: x**3 + x*y**2}\n \n+    # Test ordered decomposition with separate=True\n     assert decompose(x, True) == [x]\n     assert decompose(x ** 2, True) == [x ** 2]\n     assert decompose(x * y, True) == [x * y]\n@@ -34,7 +35,11 @@ def test_decompose():\n     assert decompose(8 * x ** 2 + 4 * y + 7, True) == [7, 4*y, 8*x**2]\n     assert decompose(x ** 2 + 3 * y * x, True) == [x ** 2, 3 * x * y]\n     assert decompose(9 * x ** 2 + y + 4 * x + x ** 3 + y ** 2 * x + 3, True) == \\\n-           [3, y, x**3, 4*x, 9*x**2, x*y**2]\n+           [3, y, 4*x, 9*x**2, x**3, x*y**2]\n+           \n+    # Additional tests for consistent ordering\n+    assert decompose(y**2 + x + 1, True) == [1, x, y**2]\n+    assert decompose(x**2*y + x*y**2 + x + y, True) == [x, y, x**2*y, x*y**2]\n \n \n def test_best_origin():\n@@ -165,4 +170,4 @@ def test_polytopes_intersecting_sides():\n                    Point(-1.605, -2.308), Point(4.516, -0.771),\n                    Point(4.203, 0.478))\n     assert polytope_integrate(fig6, x**2 + x*y + y**2) ==\\\n-        S(88161333955921)/(3*10**12)\n+        S(88161333955921)/(3*10**12)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}