diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index 11c800704b..5e06c8b7a8 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -39,7 +39,7 @@ def doit(p, q):
             if p.is_infinite or q.is_infinite or p is nan or q is nan:
                 return nan
             if (p == q or p == -q or
-                    p.is_Pow and p.exp.is_Integer and p.base == q or
+                    (p.is_Pow and p.exp.is_Integer and p.base == q and p.base.is_integer) or
                     p.is_integer and q == 1):
                 return S.Zero
 
@@ -152,4 +152,4 @@ def _eval_is_nonnegative(self):
 
     def _eval_is_nonpositive(self):
         if self.args[1].is_negative:
-            return True
+            return True
\ No newline at end of file
diff --git a/sympy/core/tests/test_mod.py b/sympy/core/tests/test_mod.py
new file mode 100644
index 0000000000..b3c7da99c0
--- /dev/null
+++ b/sympy/core/tests/test_mod.py
@@ -0,0 +1,15 @@
+from sympy import Mod, S, Float
+from sympy.abc import x
+
+def test_mod_power():
+    # Test integer cases (should remain zero)
+    assert Mod(x**2, x).subs(x, 2) == 0
+    assert Mod(x**2, x).subs(x, -2) == 0
+    
+    # Test float cases (should not be zero)
+    assert Mod(x**2, x).subs(x, Float('1.5')) == Float('0.75')
+    assert Mod(x**2, x).subs(x, Float('2.5')) == Float('1.25')
+    
+    # Test edge cases
+    assert Mod(x**2, x).subs(x, 0) == S.NaN  # division by zero
+    assert Mod(x**2, x).subs(x, 1) == 0  # special case q = 1
