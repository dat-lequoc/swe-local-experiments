{
  "instance_id": "sympy__sympy-13177",
  "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 11c800704b..5e06c8b7a8 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -39,7 +39,7 @@ def doit(p, q):\n             if p.is_infinite or q.is_infinite or p is nan or q is nan:\n                 return nan\n             if (p == q or p == -q or\n-                    p.is_Pow and p.exp.is_Integer and p.base == q or\n+                    (p.is_Pow and p.exp.is_Integer and p.base == q and p.base.is_integer) or\n                     p.is_integer and q == 1):\n                 return S.Zero\n \n@@ -152,4 +152,4 @@ def _eval_is_nonnegative(self):\n \n     def _eval_is_nonpositive(self):\n         if self.args[1].is_negative:\n-            return True\n+            return True\n\\ No newline at end of file\ndiff --git a/sympy/core/tests/test_mod.py b/sympy/core/tests/test_mod.py\nnew file mode 100644\nindex 0000000000..b3c7da99c0\n--- /dev/null\n+++ b/sympy/core/tests/test_mod.py\n@@ -0,0 +1,15 @@\n+from sympy import Mod, S, Float\n+from sympy.abc import x\n+\n+def test_mod_power():\n+    # Test integer cases (should remain zero)\n+    assert Mod(x**2, x).subs(x, 2) == 0\n+    assert Mod(x**2, x).subs(x, -2) == 0\n+    \n+    # Test float cases (should not be zero)\n+    assert Mod(x**2, x).subs(x, Float('1.5')) == Float('0.75')\n+    assert Mod(x**2, x).subs(x, Float('2.5')) == Float('1.25')\n+    \n+    # Test edge cases\n+    assert Mod(x**2, x).subs(x, 0) == S.NaN  # division by zero\n+    assert Mod(x**2, x).subs(x, 1) == 0  # special case q = 1\n",
  "model_name_or_path": "KortixAI"
}