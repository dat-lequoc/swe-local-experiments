{
  "instance_id": "django__django-12184",
  "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2d4610aac4..88725441d4 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -354,6 +354,8 @@ class URLPattern:\n             new_path, args, kwargs = match\n             # Pass any extra_kwargs as **kwargs.\n             kwargs.update(self.default_args)\n+            # Filter out None values from kwargs to handle optional parameters\n+            kwargs = {k: v for k, v in kwargs.items() if v is not None}\n             return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))\n \n     @cached_property\n@@ -673,4 +675,4 @@ class URLResolver:\n                 \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                 \"a valid view function or pattern name.\" % {'view': lookup_view_s}\n             )\n-        raise NoReverseMatch(msg)\n+        raise NoReverseMatch(msg)\n\\ No newline at end of file\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 92c4e6399e..6420c6021b 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,6 +68,17 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n+    def test_optional_format_parameter(self):\n+        \"\"\"Test that optional format parameters are handled correctly.\"\"\"\n+        for url, expected_kwargs in (\n+            ('/module/', {}),\n+            ('/module/json/', {'format': 'json'}),\n+            ('/module/xml/', {'format': 'xml'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.kwargs, expected_kwargs)\n+\n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n@@ -229,4 +240,4 @@ class ConversionExceptionTests(SimpleTestCase):\n         def raises_value_error(value):\n             raise ValueError('This value error propagates.')\n         with self.assertRaisesMessage(ValueError, 'This value error propagates.'):\n-            reverse('dynamic', kwargs={'value': object()})\n+            reverse('dynamic', kwargs={'value': object()})\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}