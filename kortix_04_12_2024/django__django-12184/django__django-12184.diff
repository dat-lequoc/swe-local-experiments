diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2d4610aac4..88725441d4 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -354,6 +354,8 @@ class URLPattern:
             new_path, args, kwargs = match
             # Pass any extra_kwargs as **kwargs.
             kwargs.update(self.default_args)
+            # Filter out None values from kwargs to handle optional parameters
+            kwargs = {k: v for k, v in kwargs.items() if v is not None}
             return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))
 
     @cached_property
@@ -673,4 +675,4 @@ class URLResolver:
                 "Reverse for '%(view)s' not found. '%(view)s' is not "
                 "a valid view function or pattern name." % {'view': lookup_view_s}
             )
-        raise NoReverseMatch(msg)
+        raise NoReverseMatch(msg)
\ No newline at end of file
diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py
index 92c4e6399e..6420c6021b 100644
--- a/tests/urlpatterns/tests.py
+++ b/tests/urlpatterns/tests.py
@@ -68,6 +68,17 @@ class SimplifiedURLTests(SimpleTestCase):
                     r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?',
                 )
 
+    def test_optional_format_parameter(self):
+        """Test that optional format parameters are handled correctly."""
+        for url, expected_kwargs in (
+            ('/module/', {}),
+            ('/module/json/', {'format': 'json'}),
+            ('/module/xml/', {'format': 'xml'}),
+        ):
+            with self.subTest(url=url):
+                match = resolve(url)
+                self.assertEqual(match.kwargs, expected_kwargs)
+
     def test_path_lookup_with_inclusion(self):
         match = resolve('/included_urls/extra/something/')
         self.assertEqual(match.url_name, 'inner-extra')
@@ -229,4 +240,4 @@ class ConversionExceptionTests(SimpleTestCase):
         def raises_value_error(value):
             raise ValueError('This value error propagates.')
         with self.assertRaisesMessage(ValueError, 'This value error propagates.'):
-            reverse('dynamic', kwargs={'value': object()})
+            reverse('dynamic', kwargs={'value': object()})
\ No newline at end of file
