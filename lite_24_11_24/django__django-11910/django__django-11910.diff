diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index 402dae2829..e24a3d6c99 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -344,14 +344,19 @@ class RenameField(FieldOperation):
                         remote_field.model, model_app_label, model_name
                     )
                     if remote_model_tuple == model_tuple:
+                        # Update field_name if it matches the old name
                         if getattr(remote_field, 'field_name', None) == self.old_name:
                             remote_field.field_name = self.new_name
+                        # Update to_fields if they reference the old name
                         to_fields = getattr(field, 'to_fields', None)
                         if to_fields:
-                            field.to_fields = tuple([
-                                self.new_name if to_field_name == self.old_name else to_field_name
-                                for to_field_name in to_fields
-                            ])
+                            new_to_fields = []
+                            for to_field_name in to_fields:
+                                if to_field_name == self.old_name:
+                                    new_to_fields.append(self.new_name)
+                                else:
+                                    new_to_fields.append(to_field_name)
+                            field.to_fields = tuple(new_to_fields)
         state.reload_model(app_label, self.model_name_lower, delay=delay)
 
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..798019c2b2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,158 @@
+import os
+import sys
+from django.conf import settings
+from django.db import models, migrations
+from django.db.migrations.state import ProjectState
+from django.db.migrations.operations.fields import RenameField
+
+def setup_test_environment():
+    import django
+    if not settings.configured:
+        settings.configure(
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            USE_TZ=False,
+        )
+        django.setup()
+
+def test_rename_pk_with_fk_to_field():
+    """
+    Test that renaming a primary key field properly updates ForeignKey to_field references
+    """
+    # Set up our test state
+    project_state = ProjectState()
+    
+    # Define our models
+    operations = [
+        migrations.CreateModel(
+            "ModelA",
+            [
+                ("field_wrong", models.CharField(max_length=50, primary_key=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            "ModelB",
+            [
+                ("id", models.AutoField(primary_key=True)),
+                ("field_fk", models.ForeignKey(
+                    "ModelA",
+                    on_delete=models.CASCADE,
+                    to_field="field_wrong",
+                    null=True,
+                    blank=True,
+                )),
+            ],
+        ),
+    ]
+
+    # Apply initial operations
+    for operation in operations:
+        project_state = project_state.clone()
+        operation.state_forwards("app", project_state)
+
+    # Now test the rename operation
+    rename_operation = RenameField(
+        model_name="ModelA",
+        old_name="field_wrong",
+        new_name="field_fixed"
+    )
+
+    # Apply the rename
+    new_state = project_state.clone()
+    rename_operation.state_forwards("app", new_state)
+
+    # Verify the results
+    model_b = new_state.apps.get_model("app", "ModelB")
+    field_fk = model_b._meta.get_field('field_fk')
+    
+    # Check if to_field was properly updated
+    if field_fk.to_fields[0] == "field_fixed":
+        print("SUCCESS: ForeignKey to_field was properly updated")
+        return True
+    else:
+        print(f"FAILED: ForeignKey to_field still points to {field_fk.to_fields[0]}")
+        return False
+
+def test_edge_cases():
+    """
+    Test edge cases for field renaming
+    """
+    success = True
+    project_state = ProjectState()
+
+    # Edge case 1: Multiple foreign keys pointing to the same field
+    operations = [
+        migrations.CreateModel(
+            "ModelA",
+            [
+                ("field_wrong", models.CharField(max_length=50, primary_key=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            "ModelB",
+            [
+                ("id", models.AutoField(primary_key=True)),
+                ("fk1", models.ForeignKey(
+                    "ModelA",
+                    on_delete=models.CASCADE,
+                    to_field="field_wrong",
+                    related_name="fk1",
+                )),
+                ("fk2", models.ForeignKey(
+                    "ModelA",
+                    on_delete=models.CASCADE,
+                    to_field="field_wrong",
+                    related_name="fk2",
+                )),
+            ],
+        ),
+    ]
+
+    for operation in operations:
+        project_state = project_state.clone()
+        operation.state_forwards("app", project_state)
+
+    rename_operation = RenameField(
+        model_name="ModelA",
+        old_name="field_wrong",
+        new_name="field_fixed"
+    )
+
+    new_state = project_state.clone()
+    rename_operation.state_forwards("app", new_state)
+
+    model_b = new_state.apps.get_model("app", "ModelB")
+    fk1 = model_b._meta.get_field('fk1')
+    fk2 = model_b._meta.get_field('fk2')
+
+    if not (fk1.to_fields[0] == "field_fixed" and fk2.to_fields[0] == "field_fixed"):
+        print("FAILED: Multiple foreign keys were not properly updated")
+        success = False
+    else:
+        print("SUCCESS: Multiple foreign keys were properly updated")
+
+    return success
+
+if __name__ == "__main__":
+    setup_test_environment()
+    
+    print("\nTesting basic functionality:")
+    basic_test_success = test_rename_pk_with_fk_to_field()
+    
+    print("\nTesting edge cases:")
+    edge_cases_success = test_edge_cases()
+    
+    if basic_test_success and edge_cases_success:
+        print("\nAll tests PASSED!")
+        sys.exit(0)
+    else:
+        print("\nSome tests FAILED!")
+        sys.exit(1)
\ No newline at end of file
