{
  "instance_id": "django__django-11910",
  "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 402dae2829..e24a3d6c99 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -344,14 +344,19 @@ class RenameField(FieldOperation):\n                         remote_field.model, model_app_label, model_name\n                     )\n                     if remote_model_tuple == model_tuple:\n+                        # Update field_name if it matches the old name\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n+                        # Update to_fields if they reference the old name\n                         to_fields = getattr(field, 'to_fields', None)\n                         if to_fields:\n-                            field.to_fields = tuple([\n-                                self.new_name if to_field_name == self.old_name else to_field_name\n-                                for to_field_name in to_fields\n-                            ])\n+                            new_to_fields = []\n+                            for to_field_name in to_fields:\n+                                if to_field_name == self.old_name:\n+                                    new_to_fields.append(self.new_name)\n+                                else:\n+                                    new_to_fields.append(to_field_name)\n+                            field.to_fields = tuple(new_to_fields)\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..798019c2b2\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,158 @@\n+import os\n+import sys\n+from django.conf import settings\n+from django.db import models, migrations\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.operations.fields import RenameField\n+\n+def setup_test_environment():\n+    import django\n+    if not settings.configured:\n+        settings.configure(\n+            DATABASES={\n+                'default': {\n+                    'ENGINE': 'django.db.backends.sqlite3',\n+                    'NAME': ':memory:',\n+                }\n+            },\n+            INSTALLED_APPS=[\n+                'django.contrib.contenttypes',\n+                'django.contrib.auth',\n+            ],\n+            USE_TZ=False,\n+        )\n+        django.setup()\n+\n+def test_rename_pk_with_fk_to_field():\n+    \"\"\"\n+    Test that renaming a primary key field properly updates ForeignKey to_field references\n+    \"\"\"\n+    # Set up our test state\n+    project_state = ProjectState()\n+    \n+    # Define our models\n+    operations = [\n+        migrations.CreateModel(\n+            \"ModelA\",\n+            [\n+                (\"field_wrong\", models.CharField(max_length=50, primary_key=True)),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            \"ModelB\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"field_fk\", models.ForeignKey(\n+                    \"ModelA\",\n+                    on_delete=models.CASCADE,\n+                    to_field=\"field_wrong\",\n+                    null=True,\n+                    blank=True,\n+                )),\n+            ],\n+        ),\n+    ]\n+\n+    # Apply initial operations\n+    for operation in operations:\n+        project_state = project_state.clone()\n+        operation.state_forwards(\"app\", project_state)\n+\n+    # Now test the rename operation\n+    rename_operation = RenameField(\n+        model_name=\"ModelA\",\n+        old_name=\"field_wrong\",\n+        new_name=\"field_fixed\"\n+    )\n+\n+    # Apply the rename\n+    new_state = project_state.clone()\n+    rename_operation.state_forwards(\"app\", new_state)\n+\n+    # Verify the results\n+    model_b = new_state.apps.get_model(\"app\", \"ModelB\")\n+    field_fk = model_b._meta.get_field('field_fk')\n+    \n+    # Check if to_field was properly updated\n+    if field_fk.to_fields[0] == \"field_fixed\":\n+        print(\"SUCCESS: ForeignKey to_field was properly updated\")\n+        return True\n+    else:\n+        print(f\"FAILED: ForeignKey to_field still points to {field_fk.to_fields[0]}\")\n+        return False\n+\n+def test_edge_cases():\n+    \"\"\"\n+    Test edge cases for field renaming\n+    \"\"\"\n+    success = True\n+    project_state = ProjectState()\n+\n+    # Edge case 1: Multiple foreign keys pointing to the same field\n+    operations = [\n+        migrations.CreateModel(\n+            \"ModelA\",\n+            [\n+                (\"field_wrong\", models.CharField(max_length=50, primary_key=True)),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            \"ModelB\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"fk1\", models.ForeignKey(\n+                    \"ModelA\",\n+                    on_delete=models.CASCADE,\n+                    to_field=\"field_wrong\",\n+                    related_name=\"fk1\",\n+                )),\n+                (\"fk2\", models.ForeignKey(\n+                    \"ModelA\",\n+                    on_delete=models.CASCADE,\n+                    to_field=\"field_wrong\",\n+                    related_name=\"fk2\",\n+                )),\n+            ],\n+        ),\n+    ]\n+\n+    for operation in operations:\n+        project_state = project_state.clone()\n+        operation.state_forwards(\"app\", project_state)\n+\n+    rename_operation = RenameField(\n+        model_name=\"ModelA\",\n+        old_name=\"field_wrong\",\n+        new_name=\"field_fixed\"\n+    )\n+\n+    new_state = project_state.clone()\n+    rename_operation.state_forwards(\"app\", new_state)\n+\n+    model_b = new_state.apps.get_model(\"app\", \"ModelB\")\n+    fk1 = model_b._meta.get_field('fk1')\n+    fk2 = model_b._meta.get_field('fk2')\n+\n+    if not (fk1.to_fields[0] == \"field_fixed\" and fk2.to_fields[0] == \"field_fixed\"):\n+        print(\"FAILED: Multiple foreign keys were not properly updated\")\n+        success = False\n+    else:\n+        print(\"SUCCESS: Multiple foreign keys were properly updated\")\n+\n+    return success\n+\n+if __name__ == \"__main__\":\n+    setup_test_environment()\n+    \n+    print(\"\\nTesting basic functionality:\")\n+    basic_test_success = test_rename_pk_with_fk_to_field()\n+    \n+    print(\"\\nTesting edge cases:\")\n+    edge_cases_success = test_edge_cases()\n+    \n+    if basic_test_success and edge_cases_success:\n+        print(\"\\nAll tests PASSED!\")\n+        sys.exit(0)\n+    else:\n+        print(\"\\nSome tests FAILED!\")\n+        sys.exit(1)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}