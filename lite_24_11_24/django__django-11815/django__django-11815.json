{
  "instance_id": "django__django-11815",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..005232b79d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        name = self.value.name  # Use name instead of value\n+        imports = {'import %s' % module}\n+        return \"%s.%s['%s']\" % (module, enum_class.__name__, name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..482b2e12fd\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,71 @@\n+import os\n+import django\n+from enum import Enum\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+from django.utils.translation import gettext_lazy as _\n+from django.db.migrations.serializer import serializer_factory\n+\n+def test_edge_cases():\n+    # Test Case 1: Special characters in value\n+    class StatusWithSpecialChars(Enum):\n+        GOOD = _('Good!')\n+        BAD = _('Bad@#$%')\n+        \n+        def __str__(self):\n+            return self.name\n+    \n+    serializer = serializer_factory(StatusWithSpecialChars.GOOD)\n+    success1 = \"['GOOD']\" in str(serializer.serialize()[0])\n+    print(\"\\nTest 1: Special characters in value\")\n+    print(f\"Result: [PASS] Uses name instead of value with special chars\") if success1 else print(f\"Result: [FAIL] Special chars test failed\")\n+    \n+    # Test Case 2: Empty string value\n+    class StatusWithEmpty(Enum):\n+        EMPTY = _('')\n+        SPACE = _(' ')\n+        \n+        def __str__(self):\n+            return self.name\n+    \n+    serializer = serializer_factory(StatusWithEmpty.EMPTY)\n+    success2 = \"['EMPTY']\" in str(serializer.serialize()[0])\n+    print(\"\\nTest 2: Empty string value\")\n+    print(f\"Result: [PASS] Uses name instead of empty value\") if success2 else print(f\"Result: [FAIL] Empty value test failed\")\n+    \n+    # Test Case 3: Long values\n+    class StatusWithLongValue(Enum):\n+        VERY_LONG = _('This is a very long value that could potentially cause issues')\n+        \n+        def __str__(self):\n+            return self.name\n+    \n+    serializer = serializer_factory(StatusWithLongValue.VERY_LONG)\n+    success3 = \"['VERY_LONG']\" in str(serializer.serialize()[0])\n+    print(\"\\nTest 3: Long string value\")\n+    print(f\"Result: [PASS] Uses name instead of long value\") if success3 else print(f\"Result: [FAIL] Long value test failed\")\n+    \n+    # Test Case 4: Numeric values\n+    class StatusWithNumbers(Enum):\n+        ONE = _('1')  # Using string representation of numbers\n+        TWO = _('2')\n+        \n+        def __str__(self):\n+            return self.name\n+    \n+    serializer = serializer_factory(StatusWithNumbers.ONE)\n+    success4 = \"['ONE']\" in str(serializer.serialize()[0])\n+    print(\"\\nTest 4: Numeric values\")\n+    print(f\"Result: [PASS] Uses name instead of numeric value\") if success4 else print(f\"Result: [FAIL] Numeric value test failed\")\n+    \n+    return all([success1, success2, success3, success4])\n+\n+if __name__ == '__main__':\n+    print(\"Testing edge cases for Enum serialization:\")\n+    print(\"----------------------------------------\")\n+    \n+    success = test_edge_cases()\n+    print(\"\\nOverall Result:\", \"[PASS]\" if success else \"[FAIL]\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..c925793220\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,48 @@\n+from enum import Enum\n+from django.utils.translation import gettext_lazy as _\n+from django.db.migrations.serializer import serializer_factory\n+\n+def demonstrate_fix():\n+    # Define an enum with translated values\n+    class Status(Enum):\n+        GOOD = _('Good')\n+        BAD = _('Bad')\n+        def __str__(self):\n+            return self.name\n+\n+    print(\"\\nDemonstrating the fix for Enum serialization:\")\n+    print(\"--------------------------------------------\")\n+    \n+    # Show original enum properties\n+    print(f\"Enum name: {Status.GOOD.name}\")  # Should be 'GOOD'\n+    print(f\"Enum value: {Status.GOOD.value}\")  # Will be translated 'Good'\n+    \n+    # Test serialization\n+    serializer = serializer_factory(Status.GOOD)\n+    serialized, imports = serializer.serialize()\n+    \n+    print(\"\\nSerialization result:\")\n+    print(f\"Serialized: {serialized}\")\n+    print(f\"Imports: {imports}\")\n+    \n+    # Verify the fix\n+    if \"['GOOD']\" in serialized and \"('Good')\" not in serialized:\n+        print(\"\\nSuccess: Serialization uses enum name instead of value!\")\n+        return True\n+    else:\n+        print(\"\\nFailure: Serialization is not using enum name!\")\n+        return False\n+\n+if __name__ == '__main__':\n+    import os\n+    import django\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+    django.setup()\n+    \n+    success = demonstrate_fix()\n+    if success:\n+        print(\"\\nReproduction test passed successfully!\")\n+        exit(0)\n+    else:\n+        print(\"\\nReproduction test failed!\")\n+        exit(1)\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..d8274ce78b\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,12 @@\n+from django.db import models\n+from enum import Enum\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n\\ No newline at end of file\ndiff --git a/test_app/tests.py b/test_app/tests.py\nnew file mode 100644\nindex 0000000000..ea98a659a1\n--- /dev/null\n+++ b/test_app/tests.py\n@@ -0,0 +1,45 @@\n+from django.test import TestCase, override_settings\n+from django.db.migrations.serializer import serializer_factory\n+from .models import Status, Item\n+\n+class TestEnumSerialization(TestCase):\n+    def test_enum_serialization_basics(self):\n+        \"\"\"Test basic enum properties and serialization\"\"\"\n+        # Test basic enum properties\n+        self.assertEqual(Status.GOOD.name, 'GOOD')\n+        self.assertEqual(str(Status.GOOD.value), 'Good')\n+        self.assertEqual(Status['GOOD'], Status.GOOD)\n+\n+        # Test serialization\n+        serializer = serializer_factory(Status.GOOD)\n+        serialized, imports = serializer.serialize()\n+        \n+        # Verify the serialization uses the name instead of value\n+        self.assertIn(\"['GOOD']\", serialized)\n+        self.assertNotIn(\"('Good')\", serialized)\n+        self.assertTrue(any('import' in imp for imp in imports))\n+\n+    @override_settings(LANGUAGE_CODE='es')\n+    def test_enum_serialization_with_translation(self):\n+        \"\"\"Test enum serialization with different language settings\"\"\"\n+        # Test serialization remains consistent even with different language\n+        serializer = serializer_factory(Status.GOOD)\n+        serialized, imports = serializer.serialize()\n+        \n+        # Should still use name regardless of translation\n+        self.assertIn(\"['GOOD']\", serialized)\n+        self.assertNotIn(\"('Good')\", serialized)\n+\n+    def test_enum_serialization_edge_cases(self):\n+        \"\"\"Test enum serialization edge cases\"\"\"\n+        # Test BAD status serialization\n+        serializer = serializer_factory(Status.BAD)\n+        serialized, imports = serializer.serialize()\n+        self.assertIn(\"['BAD']\", serialized)\n+        \n+        # Verify imports are correct\n+        self.assertTrue(any('import' in imp for imp in imports))\n+        \n+        # Test accessing by name vs value\n+        self.assertEqual(Status['BAD'], Status.BAD)\n+        self.assertNotEqual(str(Status.BAD.value), Status.BAD.name)\n\\ No newline at end of file\ndiff --git a/test_enum_serialization.py b/test_enum_serialization.py\nnew file mode 100644\nindex 0000000000..be7c9828a9\n--- /dev/null\n+++ b/test_enum_serialization.py\n@@ -0,0 +1,65 @@\n+from django.test import TestCase, override_settings\n+from enum import Enum\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+from django.db.migrations.serializer import serializer_factory\n+\n+class TestEnumSerialization(TestCase):\n+    def setUp(self):\n+        class Status(Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+            def __str__(self):\n+                return self.name\n+        self.Status = Status\n+\n+        class Item(models.Model):\n+            status = models.CharField(default=Status.GOOD, max_length=128)\n+        self.Item = Item\n+\n+    def test_enum_serialization_basics(self):\n+        \"\"\"Test basic enum properties and serialization\"\"\"\n+        Status = self.Status\n+        \n+        # Test basic enum properties\n+        self.assertEqual(Status.GOOD.name, 'GOOD')\n+        self.assertEqual(str(Status.GOOD.value), 'Good')\n+        self.assertEqual(Status['GOOD'], Status.GOOD)\n+\n+        # Test serialization\n+        serializer = serializer_factory(Status.GOOD)\n+        serialized, imports = serializer.serialize()\n+        \n+        # Verify the serialization uses the name instead of value\n+        self.assertIn(\"['GOOD']\", serialized)\n+        self.assertNotIn(\"('Good')\", serialized)\n+        self.assertTrue(any('import' in imp for imp in imports))\n+\n+    @override_settings(LANGUAGE_CODE='es')\n+    def test_enum_serialization_with_translation(self):\n+        \"\"\"Test enum serialization with different language settings\"\"\"\n+        Status = self.Status\n+        \n+        # Test serialization remains consistent even with different language\n+        serializer = serializer_factory(Status.GOOD)\n+        serialized, imports = serializer.serialize()\n+        \n+        # Should still use name regardless of translation\n+        self.assertIn(\"['GOOD']\", serialized)\n+        self.assertNotIn(\"('Good')\", serialized)\n+\n+    def test_enum_serialization_edge_cases(self):\n+        \"\"\"Test enum serialization edge cases\"\"\"\n+        Status = self.Status\n+        \n+        # Test BAD status serialization\n+        serializer = serializer_factory(Status.BAD)\n+        serialized, imports = serializer.serialize()\n+        self.assertIn(\"['BAD']\", serialized)\n+        \n+        # Verify imports are correct\n+        self.assertTrue(any('import' in imp for imp in imports))\n+        \n+        # Test accessing by name vs value\n+        self.assertEqual(Status['BAD'], Status.BAD)\n+        self.assertNotEqual(str(Status.BAD.value), Status.BAD.name)\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..f838e3ef9d\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+SECRET_KEY = 'dummy'\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+USE_I18N = True\n+LANGUAGE_CODE = 'en-us'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}