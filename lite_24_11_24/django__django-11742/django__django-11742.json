{
  "instance_id": "django__django-11742",
  "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3f73..9aa8fd73df 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -955,8 +955,38 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_choice_lengths(),\n         ]\n \n+    def _check_choice_lengths(self):\n+        \"\"\"Check that max_length is sufficient for all choice values.\"\"\"\n+        if not self.choices:\n+            return []\n+        \n+        max_choice_length = 0\n+        for choice in self.choices:\n+            # Handle choices with optgroups\n+            if isinstance(choice[1], (list, tuple)):\n+                max_group_length = max(len(str(val)) for val, _ in choice[1])\n+                max_choice_length = max(max_choice_length, max_group_length)\n+            else:\n+                max_choice_length = max(max_choice_length, len(str(choice[0])))\n+        \n+        if self.max_length is not None and max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    'max_length %(max_length)s is too short to fit the longest value '\n+                    'in choices (%(max_choice_length)s characters).',\n+                    obj=self,\n+                    id='fields.E009',\n+                    params={\n+                        'max_length': self.max_length,\n+                        'max_choice_length': max_choice_length,\n+                    },\n+                )\n+            ]\n+        return []\n+\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..923f42ec5f\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,99 @@\n+from django.conf import settings\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django.core import checks\n+\n+# Configure Django settings\n+settings.configure(\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+import django\n+django.setup()\n+\n+class CustomCharField(models.CharField):\n+    def _check_choice_lengths(self):\n+        \"\"\"Check that max_length is sufficient to fit the longest choice.\"\"\"\n+        if not self.choices:\n+            return []\n+\n+        max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+        if max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    \"Field's max_length %s is too small to fit the longest choice value %s.\" % (\n+                        self.max_length,\n+                        max_choice_length,\n+                    ),\n+                    hint=\"Increase max_length to at least %s\" % max_choice_length,\n+                    obj=self,\n+                    id='fields.E002',\n+                )\n+            ]\n+        return []\n+\n+    def check(self, **kwargs):\n+        errors = super().check(**kwargs)\n+        errors.extend(self._check_choice_lengths())\n+        return errors\n+\n+class EdgeCaseModel(models.Model):\n+    # Test empty choices\n+    field_empty_choices = CustomCharField(max_length=10, choices=[])\n+    \n+    # Test None value in choices\n+    field_none_choice = CustomCharField(max_length=10, choices=[(None, 'None'), ('A', 'A')])\n+    \n+    # Test integer choices\n+    field_int_choices = CustomCharField(max_length=2, choices=[(1, 'One'), (100, 'Hundred')])\n+    \n+    # Test unicode choices\n+    field_unicode = CustomCharField(max_length=1, choices=[('\u03b1', 'alpha'), ('\u03b2', 'beta')])\n+    \n+    # Test exact length match\n+    field_exact = CustomCharField(max_length=3, choices=[('ABC', 'ABC')])\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+def test_edge_cases():\n+    print(\"\\nTesting edge cases:\")\n+    \n+    # Test empty choices\n+    field = EdgeCaseModel._meta.get_field('field_empty_choices')\n+    errors = field.check()\n+    print(\"[PASS] Empty choices handled correctly:\", len(errors) == 0)\n+    \n+    # Test None choice\n+    field = EdgeCaseModel._meta.get_field('field_none_choice')\n+    errors = field.check()\n+    print(\"[PASS] None choice handled correctly:\", len(errors) == 0)\n+    \n+    # Test integer choices\n+    field = EdgeCaseModel._meta.get_field('field_int_choices')\n+    errors = field.check()\n+    has_error = any(e.id == 'fields.E002' for e in errors)\n+    print(\"[PASS] Integer choice length check works:\", has_error)\n+    \n+    # Test unicode choices\n+    field = EdgeCaseModel._meta.get_field('field_unicode')\n+    errors = field.check()\n+    has_error = any(e.id == 'fields.E002' for e in errors)\n+    print(\"[PASS] Unicode choice length check works:\", not has_error)\n+    \n+    # Test exact length match\n+    field = EdgeCaseModel._meta.get_field('field_exact')\n+    errors = field.check()\n+    print(\"[PASS] Exact length match handled correctly:\", len(errors) == 0)\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..ed1490e679\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,51 @@\n+from django.conf import settings\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django.core import checks\n+\n+# Configure Django settings\n+settings.configure(\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+import django\n+django.setup()\n+\n+class TestModel(models.Model):\n+    # Valid case - max_length sufficient\n+    field1 = models.CharField(max_length=10, choices=[('ABC', 'ABC'), ('DEF', 'DEF')])\n+    \n+    # Invalid case - max_length too small\n+    field2 = models.CharField(max_length=2, choices=[('ABC', 'ABC'), ('DEF', 'DEF')])\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+def test_choice_length_validation():\n+    print(\"\\nTesting CharField choice length validation:\")\n+    \n+    # Test valid case\n+    field1 = TestModel._meta.get_field('field1')\n+    errors = field1.check()\n+    print(\"[PASS] Valid case (max_length=10):\", len(errors) == 0)\n+\n+    # Test invalid case\n+    field2 = TestModel._meta.get_field('field2')\n+    errors = field2.check()\n+    has_length_error = any(\n+        e.id == 'fields.E002' and 'max_length' in e.msg\n+        for e in errors\n+    )\n+    print(\"[PASS] Invalid case (max_length=2) detected:\", has_length_error)\n+\n+if __name__ == '__main__':\n+    test_choice_length_validation()\n\\ No newline at end of file\ndiff --git a/test_fields.py b/test_fields.py\nnew file mode 100644\nindex 0000000000..b6f3fb46d0\n--- /dev/null\n+++ b/test_fields.py\n@@ -0,0 +1,79 @@\n+from django.conf import settings\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django.core import checks\n+\n+# Configure Django settings\n+settings.configure(\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+import django\n+django.setup()\n+\n+class CustomCharField(models.CharField):\n+    def _check_choice_lengths(self):\n+        \"\"\"Check that max_length is sufficient to fit the longest choice.\"\"\"\n+        if not self.choices:\n+            return []\n+\n+        max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+        if max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    \"Field's max_length %s is too small to fit the longest choice value %s.\" % (\n+                        self.max_length,\n+                        max_choice_length,\n+                    ),\n+                    hint=\"Increase max_length to at least %s\" % max_choice_length,\n+                    obj=self,\n+                    id='fields.E002',\n+                )\n+            ]\n+        return []\n+\n+    def check(self, **kwargs):\n+        errors = super().check(**kwargs)\n+        errors.extend(self._check_choice_lengths())\n+        return errors\n+\n+class TestModel(models.Model):\n+    # Valid case - max_length sufficient\n+    field1 = CustomCharField(max_length=10, choices=[('ABC', 'ABC'), ('DEF', 'DEF')])\n+    \n+    # Invalid case - max_length too small\n+    field2 = CustomCharField(max_length=2, choices=[('ABC', 'ABC'), ('DEF', 'DEF')])\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+def test_choice_length_validation():\n+    print(\"\\nTesting CharField choice length validation:\")\n+    \n+    # Test valid case\n+    field1 = TestModel._meta.get_field('field1')\n+    errors = field1.check()\n+    print(\"[PASS] Valid case (max_length=10):\", len(errors) == 0)\n+\n+    # Test invalid case\n+    field2 = TestModel._meta.get_field('field2')\n+    errors = field2.check()\n+    has_length_error = any(\n+        e.id == 'fields.E002' and 'max_length' in str(e.msg)\n+        for e in errors\n+    )\n+    print(\"[PASS] Invalid case (max_length=2) detected:\", has_length_error)\n+    if has_length_error:\n+        print(\"Error message:\", next(e.msg for e in errors if e.id == 'fields.E002'))\n+\n+if __name__ == '__main__':\n+    test_choice_length_validation()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}