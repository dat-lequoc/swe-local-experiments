{
  "instance_id": "django__django-12700",
  "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..f6ab345ffb 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -83,13 +83,17 @@ class SafeExceptionReporterFilter:\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or list/tuple, recursively cleanse the values.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+                if isinstance(value, tuple):\n+                    cleansed = tuple(cleansed)\n             else:\n                 cleansed = value\n         except TypeError:\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..b4634be517\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,101 @@\n+from django.views.debug import SafeExceptionReporterFilter\n+import pprint\n+\n+def test_cleanse_settings():\n+    filter = SafeExceptionReporterFilter()\n+    \n+    # Test cases\n+    test_cases = {\n+        'Basic dictionary': {\n+            'input': {\n+                'API_KEY': 'secret123',\n+                'DEBUG': True,\n+                'HOST': 'localhost'\n+            },\n+            'desc': 'Should cleanse API_KEY but preserve others'\n+        },\n+        'Nested dictionary': {\n+            'input': {\n+                'DATABASE': {\n+                    'HOST': 'localhost',\n+                    'PASSWORD': 'secret123',\n+                    'PORT': 5432\n+                }\n+            },\n+            'desc': 'Should cleanse nested PASSWORD'\n+        },\n+        'List of values': {\n+            'input': {\n+                'ALLOWED_KEYS': ['normal', 'SECRET_KEY', 'API_TOKEN']\n+            },\n+            'desc': 'Should preserve list of strings even with sensitive names'\n+        },\n+        'List of dictionaries': {\n+            'input': {\n+                'CONNECTIONS': [\n+                    {'host': 'localhost', 'password': 'secret1'},\n+                    {'host': 'remote', 'password': 'secret2'}\n+                ]\n+            },\n+            'desc': 'Should cleanse passwords in list of dicts'\n+        },\n+        'Nested lists': {\n+            'input': {\n+                'COMPLEX': [\n+                    [{'token': 'secret1'}, {'normal': 'value'}],\n+                    [{'token': 'secret2'}, {'normal': 'value'}]\n+                ]\n+            },\n+            'desc': 'Should cleanse sensitive values in nested lists'\n+        },\n+        'Mixed types': {\n+            'input': {\n+                'MIXED': {\n+                    'list': ['normal', {'password': 'secret'}],\n+                    'tuple': ({'token': 'secret'}, 'normal'),\n+                    'dict': {'nested': {'password': 'secret'}}\n+                }\n+            },\n+            'desc': 'Should handle mixed nested types'\n+        },\n+        'Empty containers': {\n+            'input': {\n+                'EMPTY_DICT': {},\n+                'EMPTY_LIST': [],\n+                'EMPTY_TUPLE': ()\n+            },\n+            'desc': 'Should handle empty containers gracefully'\n+        }\n+    }\n+\n+    # Run tests\n+    failed = False\n+    for name, case in test_cases.items():\n+        print(f\"\\nTesting: {name}\")\n+        print(f\"Description: {case['desc']}\")\n+        print(\"Input:\")\n+        pprint.pprint(case['input'])\n+        \n+        try:\n+            result = filter.cleanse_setting(name, case['input'])\n+            print(\"\\nOutput:\")\n+            pprint.pprint(result)\n+            \n+            # Basic validation\n+            if isinstance(result, type(case['input'])):\n+                print(\"[PASS] Type preserved\")\n+            else:\n+                print(\"[FAIL] Type changed\")\n+                failed = True\n+                \n+        except Exception as e:\n+            print(f\"[FAIL] Error: {str(e)}\")\n+            failed = True\n+    \n+    if failed:\n+        print(\"\\n[FAIL] Some tests failed!\")\n+    else:\n+        print(\"\\n[PASS] All tests passed!\")\n+\n+if __name__ == '__main__':\n+    test_cleanse_settings()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..4960448afe\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,73 @@\n+from django.views.debug import SafeExceptionReporterFilter\n+import pprint\n+\n+def demonstrate_fix():\n+    # Create an instance of the filter\n+    filter = SafeExceptionReporterFilter()\n+    \n+    # Example from the PR description\n+    test_setting = {\n+        'foo': 'value',\n+        'secret': 'value',\n+        'token': 'value',\n+        'something': [\n+            {'foo': 'value'},\n+            {'secret': 'value'},\n+            {'token': 'value'},\n+        ],\n+        'else': [\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+        ]\n+    }\n+    \n+    print(\"Testing settings cleansing with nested sensitive data\")\n+    print(\"\\nInput settings:\")\n+    pprint.pprint(test_setting)\n+    \n+    print(\"\\nCleansed settings:\")\n+    result = filter.cleanse_setting('MY_SETTING', test_setting)\n+    pprint.pprint(result)\n+    \n+    # Verify the fix\n+    success = True\n+    \n+    # Check top-level sensitive keys\n+    if result['secret'] != '********************' or result['token'] != '********************':\n+        print(\"\\n[FAIL] Top-level sensitive keys not cleansed\")\n+        success = False\n+    \n+    # Check nested list sensitive keys\n+    for item in result['something']:\n+        if 'secret' in item and item['secret'] != '********************':\n+            print(\"\\n[FAIL] Nested list sensitive keys not cleansed\")\n+            success = False\n+        if 'token' in item and item['token'] != '********************':\n+            print(\"\\n[FAIL] Nested list sensitive keys not cleansed\")\n+            success = False\n+    \n+    # Check deeply nested list sensitive keys\n+    for sublist in result['else']:\n+        for item in sublist:\n+            if 'secret' in item and item['secret'] != '********************':\n+                print(\"\\n[FAIL] Deeply nested list sensitive keys not cleansed\")\n+                success = False\n+            if 'token' in item and item['token'] != '********************':\n+                print(\"\\n[FAIL] Deeply nested list sensitive keys not cleansed\")\n+                success = False\n+    \n+    if success:\n+        print(\"\\n[PASS] All sensitive data properly cleansed!\")\n+    else:\n+        print(\"\\n[FAIL] Some sensitive data not properly cleansed\")\n+\n+if __name__ == '__main__':\n+    demonstrate_fix()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}