diff --git a/django/views/debug.py b/django/views/debug.py
index e6b7d4d821..f6ab345ffb 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -83,13 +83,17 @@ class SafeExceptionReporterFilter:
     def cleanse_setting(self, key, value):
         """
         Cleanse an individual setting key/value of sensitive content. If the
-        value is a dictionary, recursively cleanse the keys in that dictionary.
+        value is a dictionary or list/tuple, recursively cleanse the values.
         """
         try:
             if self.hidden_settings.search(key):
                 cleansed = self.cleansed_substitute
             elif isinstance(value, dict):
                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
+            elif isinstance(value, (list, tuple)):
+                cleansed = [self.cleanse_setting(key, item) for item in value]
+                if isinstance(value, tuple):
+                    cleansed = tuple(cleansed)
             else:
                 cleansed = value
         except TypeError:
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..b4634be517
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,101 @@
+from django.views.debug import SafeExceptionReporterFilter
+import pprint
+
+def test_cleanse_settings():
+    filter = SafeExceptionReporterFilter()
+    
+    # Test cases
+    test_cases = {
+        'Basic dictionary': {
+            'input': {
+                'API_KEY': 'secret123',
+                'DEBUG': True,
+                'HOST': 'localhost'
+            },
+            'desc': 'Should cleanse API_KEY but preserve others'
+        },
+        'Nested dictionary': {
+            'input': {
+                'DATABASE': {
+                    'HOST': 'localhost',
+                    'PASSWORD': 'secret123',
+                    'PORT': 5432
+                }
+            },
+            'desc': 'Should cleanse nested PASSWORD'
+        },
+        'List of values': {
+            'input': {
+                'ALLOWED_KEYS': ['normal', 'SECRET_KEY', 'API_TOKEN']
+            },
+            'desc': 'Should preserve list of strings even with sensitive names'
+        },
+        'List of dictionaries': {
+            'input': {
+                'CONNECTIONS': [
+                    {'host': 'localhost', 'password': 'secret1'},
+                    {'host': 'remote', 'password': 'secret2'}
+                ]
+            },
+            'desc': 'Should cleanse passwords in list of dicts'
+        },
+        'Nested lists': {
+            'input': {
+                'COMPLEX': [
+                    [{'token': 'secret1'}, {'normal': 'value'}],
+                    [{'token': 'secret2'}, {'normal': 'value'}]
+                ]
+            },
+            'desc': 'Should cleanse sensitive values in nested lists'
+        },
+        'Mixed types': {
+            'input': {
+                'MIXED': {
+                    'list': ['normal', {'password': 'secret'}],
+                    'tuple': ({'token': 'secret'}, 'normal'),
+                    'dict': {'nested': {'password': 'secret'}}
+                }
+            },
+            'desc': 'Should handle mixed nested types'
+        },
+        'Empty containers': {
+            'input': {
+                'EMPTY_DICT': {},
+                'EMPTY_LIST': [],
+                'EMPTY_TUPLE': ()
+            },
+            'desc': 'Should handle empty containers gracefully'
+        }
+    }
+
+    # Run tests
+    failed = False
+    for name, case in test_cases.items():
+        print(f"\nTesting: {name}")
+        print(f"Description: {case['desc']}")
+        print("Input:")
+        pprint.pprint(case['input'])
+        
+        try:
+            result = filter.cleanse_setting(name, case['input'])
+            print("\nOutput:")
+            pprint.pprint(result)
+            
+            # Basic validation
+            if isinstance(result, type(case['input'])):
+                print("[PASS] Type preserved")
+            else:
+                print("[FAIL] Type changed")
+                failed = True
+                
+        except Exception as e:
+            print(f"[FAIL] Error: {str(e)}")
+            failed = True
+    
+    if failed:
+        print("\n[FAIL] Some tests failed!")
+    else:
+        print("\n[PASS] All tests passed!")
+
+if __name__ == '__main__':
+    test_cleanse_settings()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4960448afe
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,73 @@
+from django.views.debug import SafeExceptionReporterFilter
+import pprint
+
+def demonstrate_fix():
+    # Create an instance of the filter
+    filter = SafeExceptionReporterFilter()
+    
+    # Example from the PR description
+    test_setting = {
+        'foo': 'value',
+        'secret': 'value',
+        'token': 'value',
+        'something': [
+            {'foo': 'value'},
+            {'secret': 'value'},
+            {'token': 'value'},
+        ],
+        'else': [
+            [
+                {'foo': 'value'},
+                {'secret': 'value'},
+                {'token': 'value'},
+            ],
+            [
+                {'foo': 'value'},
+                {'secret': 'value'},
+                {'token': 'value'},
+            ],
+        ]
+    }
+    
+    print("Testing settings cleansing with nested sensitive data")
+    print("\nInput settings:")
+    pprint.pprint(test_setting)
+    
+    print("\nCleansed settings:")
+    result = filter.cleanse_setting('MY_SETTING', test_setting)
+    pprint.pprint(result)
+    
+    # Verify the fix
+    success = True
+    
+    # Check top-level sensitive keys
+    if result['secret'] != '********************' or result['token'] != '********************':
+        print("\n[FAIL] Top-level sensitive keys not cleansed")
+        success = False
+    
+    # Check nested list sensitive keys
+    for item in result['something']:
+        if 'secret' in item and item['secret'] != '********************':
+            print("\n[FAIL] Nested list sensitive keys not cleansed")
+            success = False
+        if 'token' in item and item['token'] != '********************':
+            print("\n[FAIL] Nested list sensitive keys not cleansed")
+            success = False
+    
+    # Check deeply nested list sensitive keys
+    for sublist in result['else']:
+        for item in sublist:
+            if 'secret' in item and item['secret'] != '********************':
+                print("\n[FAIL] Deeply nested list sensitive keys not cleansed")
+                success = False
+            if 'token' in item and item['token'] != '********************':
+                print("\n[FAIL] Deeply nested list sensitive keys not cleansed")
+                success = False
+    
+    if success:
+        print("\n[PASS] All sensitive data properly cleansed!")
+    else:
+        print("\n[FAIL] Some sensitive data not properly cleansed")
+
+if __name__ == '__main__':
+    demonstrate_fix()
\ No newline at end of file
