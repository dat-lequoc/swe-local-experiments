{
  "instance_id": "django__django-12308",
  "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..718ab84f20 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,6 +379,7 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models import JSONField\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -388,6 +389,10 @@ def display_for_field(value, field, empty_value_display):\n         return _boolean_icon(value)\n     elif value is None:\n         return empty_value_display\n+    elif isinstance(field, JSONField):\n+        if value is None:\n+            return empty_value_display\n+        return field.formfield().prepare_value(value)\n     elif isinstance(field, models.DateTimeField):\n         return formats.localize(timezone.template_localtime(value))\n     elif isinstance(field, (models.DateField, models.TimeField)):\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..2163564f40\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,83 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.contrib.admin.utils import display_for_field\n+from django.db.models import JSONField\n+from decimal import Decimal\n+import datetime\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.admin',\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+    )\n+    django.setup()\n+\n+def run_edge_case_tests():\n+    json_field = JSONField()\n+    \n+    # Complex test cases with edge cases\n+    test_cases = [\n+        # Very large nested structure\n+        ({\"a\": {\"b\": {\"c\": {\"d\": [1,2,3,4,5]}}}}, '{\"a\": {\"b\": {\"c\": {\"d\": [1, 2, 3, 4, 5]}}}}'),\n+        \n+        # Mixed types\n+        ({\"number\": 42, \"string\": \"text\", \"bool\": True, \"null\": None}, \n+         '{\"number\": 42, \"string\": \"text\", \"bool\": true, \"null\": null}'),\n+        \n+        # Special characters\n+        ({\"special\": \"!@#$%^&*()_+-=[]{}\\\\|;:'\\\",.<>?/~`\"}, \n+         '{\"special\": \"!@#$%^&*()_+-=[]{}\\\\\\\\|;:\\'\\\\\",.<>?/~`\"}'),\n+        \n+        # Unicode characters\n+        ({\"unicode\": \"Hello \u4e16\u754c\"}, '{\"unicode\": \"Hello \u4e16\u754c\"}'),\n+        \n+        # Very long string\n+        ({\"long\": \"x\" * 1000}, '{\"long\": \"' + \"x\" * 1000 + '\"}'),\n+        \n+        # Numbers\n+        ({\"numbers\": [0, -1, 1.5, 1e-10, float('inf')]},\n+         '{\"numbers\": [0, -1, 1.5, 1e-10, Infinity]}'),\n+    ]\n+    \n+    failed_tests = []\n+    passed_tests = []\n+    \n+    for value, expected in test_cases:\n+        try:\n+            result = display_for_field(value, json_field, \"\")\n+            if result == expected:\n+                passed_tests.append(f\"[PASS] Edge case passed for type: {type(value)}\")\n+            else:\n+                failed_tests.append(\n+                    f\"[FAIL] Edge case failed.\\nValue: {value}\\nExpected: {expected}\\nGot: {result}\")\n+        except Exception as e:\n+            failed_tests.append(f\"[ERROR] Edge case error: {str(e)}\\nValue: {value}\")\n+    \n+    print(\"\\n=== Edge Case Test Results ===\")\n+    for result in passed_tests:\n+        print(result)\n+    \n+    if failed_tests:\n+        print(\"\\n=== Failed Edge Cases ===\")\n+        for result in failed_tests:\n+            print(result)\n+        print(\"\\nSome edge cases failed!\")\n+        return False\n+    else:\n+        print(\"\\nAll edge cases passed successfully!\")\n+        return True\n+\n+if __name__ == \"__main__\":\n+    run_edge_case_tests()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..43dce479da\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,68 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.contrib.admin.utils import display_for_field\n+from django.db.models import JSONField\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.admin',\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+    )\n+    django.setup()\n+\n+def run_tests():\n+    # Create a JSONField instance\n+    json_field = JSONField()\n+    \n+    test_cases = [\n+        ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),  # Basic JSON object\n+        ([\"a\", \"b\", \"c\"], '[\"a\", \"b\", \"c\"]'),  # JSON array\n+        ({\"nested\": {\"key\": \"value\"}}, '{\"nested\": {\"key\": \"value\"}}'),  # Nested JSON\n+        (None, \"\"),  # None value\n+        ({}, \"{}\"),  # Empty object\n+        ([], \"[]\"),  # Empty array\n+        ({\"special\": \"quotes\\\"here\"}, '{\"special\": \"quotes\\\\\"here\"}'),  # Special characters\n+    ]\n+    \n+    failed_tests = []\n+    passed_tests = []\n+    \n+    for value, expected in test_cases:\n+        try:\n+            result = display_for_field(value, json_field, \"\")\n+            if result == expected:\n+                passed_tests.append(f\"[PASS] Test passed for value {value}\")\n+            else:\n+                failed_tests.append(f\"[FAIL] Test failed for value {value}. Expected: {expected}, Got: {result}\")\n+        except Exception as e:\n+            failed_tests.append(f\"[ERROR] Test error for value {value}: {str(e)}\")\n+    \n+    # Print results\n+    print(\"\\n=== Test Results ===\")\n+    for result in passed_tests:\n+        print(result)\n+    \n+    if failed_tests:\n+        print(\"\\n=== Failed Tests ===\")\n+        for result in failed_tests:\n+            print(result)\n+        print(\"\\nSome tests failed!\")\n+        return False\n+    else:\n+        print(\"\\nAll tests passed successfully!\")\n+        return True\n+\n+if __name__ == \"__main__\":\n+    run_tests()\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..3aec1fe0df\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,13 @@\n+SECRET_KEY = 'dummy-key-for-tests'\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'django.contrib.admin',\n+    'test_app',\n+]\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}