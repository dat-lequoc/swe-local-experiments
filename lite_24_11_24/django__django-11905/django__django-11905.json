{
  "instance_id": "django__django-11905",
  "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..3973a9e66b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,6 +462,14 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                'The __isnull lookup requires a boolean value. '\n+                'Got %r of type %s.' % (self.rhs, type(self.rhs).__name__)\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..41a617d653\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,77 @@\n+from django.db.models.lookups import IsNull\n+from django.db.models.fields.related_lookups import RelatedIsNull\n+from django.core.exceptions import ValidationError\n+\n+def test_edge_cases():\n+    print(\"Testing edge cases for IsNull lookup...\")\n+    \n+    # Test various non-boolean values\n+    test_values = [\n+        (1, \"integer 1\"),\n+        (0, \"integer 0\"),\n+        (\"true\", \"string 'true'\"),\n+        (\"false\", \"string 'false'\"),\n+        (\"\", \"empty string\"),\n+        (None, \"None\"),\n+        ([], \"empty list\"),\n+        ({}, \"empty dict\"),\n+        (1.0, \"float 1.0\"),\n+        (0.0, \"float 0.0\"),\n+    ]\n+\n+    success = True\n+    for value, desc in test_values:\n+        try:\n+            lookup = IsNull(None, value)\n+            print(f\"[FAIL] {desc} was incorrectly accepted\")\n+            success = False\n+        except ValidationError as e:\n+            if \"requires a boolean value\" in str(e):\n+                print(f\"[PASS] {desc} correctly rejected with proper error message\")\n+            else:\n+                print(f\"[FAIL] {desc} rejected with wrong error message: {e}\")\n+                success = False\n+        except Exception as e:\n+            print(f\"[FAIL] {desc} caused unexpected error: {e}\")\n+            success = False\n+\n+    # Test RelatedIsNull with non-boolean values\n+    print(\"\\nTesting RelatedIsNull edge cases...\")\n+    for value, desc in test_values:\n+        try:\n+            lookup = RelatedIsNull(None, value)\n+            print(f\"[FAIL] RelatedIsNull: {desc} was incorrectly accepted\")\n+            success = False\n+        except ValidationError as e:\n+            if \"requires a boolean value\" in str(e):\n+                print(f\"[PASS] RelatedIsNull: {desc} correctly rejected with proper error message\")\n+            else:\n+                print(f\"[FAIL] RelatedIsNull: {desc} rejected with wrong error message: {e}\")\n+                success = False\n+        except Exception as e:\n+            print(f\"[FAIL] RelatedIsNull: {desc} caused unexpected error: {e}\")\n+            success = False\n+\n+    # Test valid boolean values\n+    try:\n+        lookup = IsNull(None, True)\n+        print(\"[PASS] True value accepted\")\n+    except Exception as e:\n+        print(f\"[FAIL] True value caused error: {e}\")\n+        success = False\n+\n+    try:\n+        lookup = IsNull(None, False)\n+        print(\"[PASS] False value accepted\")\n+    except Exception as e:\n+        print(f\"[FAIL] False value caused error: {e}\")\n+        success = False\n+\n+    if success:\n+        print(\"\\nAll edge cases passed successfully!\")\n+    else:\n+        print(\"\\nSome edge cases failed!\")\n+        raise Exception(\"Edge cases test failed\")\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..84ead431e3\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,44 @@\n+from django.db.models.lookups import IsNull\n+from django.db.models.fields.related_lookups import RelatedIsNull\n+from django.core.exceptions import ValidationError\n+\n+def test_isnull_validation():\n+    print(\"Testing IsNull lookup validation...\")\n+    \n+    # Test cases with valid boolean values\n+    try:\n+        lookup = IsNull(None, True)\n+        assert lookup.rhs is True\n+        print(\"[PASS] True value accepted\")\n+    except Exception as e:\n+        print(\"[FAIL] True value test failed:\", str(e))\n+\n+    try:\n+        lookup = IsNull(None, False)\n+        assert lookup.rhs is False\n+        print(\"[PASS] False value accepted\")\n+    except Exception as e:\n+        print(\"[FAIL] False value test failed:\", str(e))\n+\n+    # Test cases with invalid values\n+    invalid_values = [1, 0, \"true\", \"false\", \"\", None, [], {}]\n+    for val in invalid_values:\n+        try:\n+            lookup = IsNull(None, val)\n+            print(f\"[FAIL] Invalid value {val} was incorrectly accepted\")\n+        except ValidationError:\n+            print(f\"[PASS] Invalid value {val} correctly rejected\")\n+        except Exception as e:\n+            print(f\"[FAIL] Unexpected error with {val}:\", str(e))\n+\n+    # Test RelatedIsNull\n+    print(\"\\nTesting RelatedIsNull lookup validation...\")\n+    try:\n+        lookup = RelatedIsNull(None, True)\n+        assert lookup.rhs is True\n+        print(\"[PASS] RelatedIsNull accepts True\")\n+    except Exception as e:\n+        print(\"[FAIL] RelatedIsNull True test failed:\", str(e))\n+\n+if __name__ == \"__main__\":\n+    test_isnull_validation()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}