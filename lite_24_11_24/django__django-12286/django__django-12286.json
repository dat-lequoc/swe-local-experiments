{
  "instance_id": "django__django-12286",
  "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..df65532c7d 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,12 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation.trans_real import get_supported_language_variant\n+    try:\n+        if settings.LANGUAGE_CODE:\n+            get_supported_language_variant(settings.LANGUAGE_CODE.lower())\n+        else:\n+            return [E004]\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..a3fe7e8ac2\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,50 @@\n+from django.conf import settings\n+from django.test import TestCase, override_settings\n+from django.core.checks.translation import check_language_settings_consistent\n+\n+class TranslationEdgeCasesTest(TestCase):\n+    def test_edge_cases(self):\n+        \"\"\"Test edge cases for language code validation.\"\"\"\n+        # Test empty language code\n+        with override_settings(LANGUAGE_CODE='', LANGUAGES=[('en', 'English')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(len(errors), 1, \"E004 should be raised for empty language code\")\n+\n+        # Test None language code\n+        with override_settings(LANGUAGE_CODE=None, LANGUAGES=[('en', 'English')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(len(errors), 1, \"E004 should be raised for None language code\")\n+\n+        # Test multiple-part language code with base available\n+        with override_settings(LANGUAGE_CODE='zh-hans-cn', LANGUAGES=[('zh-hans', 'Simplified Chinese')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(errors, [], \"E004 should not be raised when base language is available\")\n+\n+        # Test case sensitivity\n+        with override_settings(LANGUAGE_CODE='DE-AT', LANGUAGES=[('de', 'German')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(errors, [], \"E004 should not be raised when base language is available (case insensitive)\")\n+\n+if __name__ == '__main__':\n+    import django\n+    settings.configure(\n+        DATABASES={'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }},\n+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+        LANGUAGE_CODE='en-us',\n+        LANGUAGES=[('en', 'English'), ('de', 'German'), ('zh-hans', 'Simplified Chinese')],\n+        SECRET_KEY='dummy-key-for-tests',\n+    )\n+    django.setup()\n+    \n+    import unittest\n+    suite = unittest.TestLoader().loadTestsFromTestCase(TranslationEdgeCasesTest)\n+    result = unittest.TextTestRunner(verbosity=2).run(suite)\n+    if not result.wasSuccessful():\n+        print(\"Edge case tests failed!\")\n+        exit(1)\n+    else:\n+        print(\"All edge case tests passed!\")\n+        exit(0)\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..2c400479b9\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,50 @@\n+from django.conf import settings\n+from django.test import TestCase, override_settings\n+\n+class TranslationCheckTest(TestCase):\n+    def test_language_code_check(self):\n+        \"\"\"Test that sublanguages are accepted when base language is available.\"\"\"\n+        from django.core.checks import run_checks\n+        from django.core.checks.translation import check_language_settings_consistent\n+\n+        # Test with de-at when de is available\n+        with override_settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(errors, [], \"E004 should not be raised when base language is available\")\n+\n+        # Test with es-ar (which is available by default)\n+        with override_settings(LANGUAGE_CODE='es-ar', LANGUAGES=[('es-ar', 'Argentinian Spanish')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(errors, [], \"E004 should not be raised for available sublanguage\")\n+\n+        # Test with invalid language\n+        with override_settings(LANGUAGE_CODE='invalid-lang', LANGUAGES=[('en', 'English')]):\n+            errors = check_language_settings_consistent(None)\n+            self.assertEqual(len(errors), 1, \"E004 should be raised for invalid language\")\n+            self.assertEqual(errors[0].id, 'translation.E004')\n+\n+if __name__ == '__main__':\n+    import django\n+    from django.conf import settings\n+    settings.configure(\n+        DATABASES={'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }},\n+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+        LANGUAGE_CODE='en-us',\n+        LANGUAGES=[('en', 'English'), ('de', 'German'), ('es-ar', 'Argentinian Spanish')],\n+        SECRET_KEY='dummy-key-for-tests',\n+    )\n+    django.setup()\n+    \n+    from django.test.runner import DiscoverRunner\n+    import unittest\n+    suite = unittest.TestLoader().loadTestsFromTestCase(TranslationCheckTest)\n+    result = unittest.TextTestRunner(verbosity=2).run(suite)\n+    if not result.wasSuccessful():\n+        print(\"Tests failed!\")\n+        exit(1)\n+    else:\n+        print(\"All tests passed!\")\n+        exit(0)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}