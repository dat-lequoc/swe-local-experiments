{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1927,6 +1927,19 @@ def set_group_by(self, allow_aliases=True):\n         primary key, and the query would be equivalent, the optimization\n         will be made automatically.\n         \"\"\"\n+        # Column names from JOINs to check collisions with aliases.\n+        if allow_aliases:\n+            column_names = set()\n+            seen_models = set()\n+            for join in list(self.alias_map.values())[1:]:  # Skip base table.\n+                model = join.join_field.related_model\n+                if model not in seen_models:\n+                    column_names.update({\n+                        field.column\n+                        for field in model._meta.local_concrete_fields\n+                    })\n+                    seen_models.add(model)\n+\n         group_by = list(self.select)\n         if self.annotation_select:\n             for alias, annotation in self.annotation_select.items():\n@@ -1940,7 +1953,7 @@ def set_group_by(self, allow_aliases=True):\n                     warnings.warn(msg, category=RemovedInDjango40Warning)\n                     group_by_cols = annotation.get_group_by_cols()\n                 else:\n-                    if not allow_aliases:\n+                    if not allow_aliases or alias in column_names:\n                         alias = None\n                     group_by_cols = annotation.get_group_by_cols(alias=alias)\n                 group_by.extend(group_by_cols)\n",
  "test_patch": "diff --git a/tests/aggregation/models.py b/tests/aggregation/models.py\n--- a/tests/aggregation/models.py\n+++ b/tests/aggregation/models.py\n@@ -5,6 +5,7 @@ class Author(models.Model):\n     name = models.CharField(max_length=100)\n     age = models.IntegerField()\n     friends = models.ManyToManyField('self', blank=True)\n+    rating = models.FloatField(null=True)\n \n     def __str__(self):\n         return self.name\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1191,6 +1191,22 @@ def test_aggregation_subquery_annotation_values(self):\n             },\n         ])\n \n+    def test_aggregation_subquery_annotation_values_collision(self):\n+        books_rating_qs = Book.objects.filter(\n+            publisher=OuterRef('pk'),\n+            price=Decimal('29.69'),\n+        ).values('rating')\n+        publisher_qs = Publisher.objects.filter(\n+            book__contact__age__gt=20,\n+            name=self.p1.name,\n+        ).annotate(\n+            rating=Subquery(books_rating_qs),\n+            contacts_count=Count('book__contact'),\n+        ).values('rating').annotate(total_count=Count('rating'))\n+        self.assertEqual(list(publisher_qs), [\n+            {'rating': 4.0, 'total_count': 2},\n+        ])\n+\n     @skipUnlessDBFeature('supports_subqueries_in_group_by')\n     @skipIf(\n         connection.vendor == 'mysql' and 'ONLY_FULL_GROUP_BY' in connection.sql_mode,\n"
}