{
  "instance_id": "django__django-12589",
  "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 63ca817355..8e5a02dce1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -119,7 +119,12 @@ class SQLCompiler:\n                 continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n-                expressions.append(col)\n+                if hasattr(col, 'as_sql'):\n+                    # If it's a subquery or complex expression, use the full SQL\n+                    sql, params = self.compile(col)\n+                    expressions.append(RawSQL(sql, params))\n+                else:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..9d8fcd08dd\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,96 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'test_app',\n+        ],\n+        MIDDLEWARE=[],\n+        ROOT_URLCONF=[],\n+    )\n+    django.setup()\n+\n+from django.db.models import Q, OuterRef, Subquery, Count, F, Value\n+from django.test import TestCase\n+from test_app.models import A, B, AB, C\n+\n+class EdgeCaseTests(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        self.a1 = A.objects.create()\n+        self.a2 = A.objects.create()\n+        self.b1 = B.objects.create()\n+        self.b2 = B.objects.create()\n+        \n+        # Create AB relationships with different statuses\n+        self.ab1 = AB.objects.create(a=self.a1, b=self.b1, status=1)\n+        self.ab2 = AB.objects.create(a=self.a2, b=self.b2, status=2)\n+        \n+        # Create C objects with different statuses\n+        self.c1 = C.objects.create(a=self.a1, status=3)\n+        self.c2 = C.objects.create(a=self.a2, status=4)\n+\n+    def test_multiple_status_fields(self):\n+        print(\"Testing multiple status fields...\")\n+        ab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=self.b1.pk)\n+        filter_conditions = Q(pk=self.a1.pk) | Q(ab_a__b=self.b1.pk)\n+        \n+        try:\n+            query = A.objects.filter(filter_conditions).annotate(\n+                status=Subquery(ab_query.values(\"status\")),\n+                c_count=Count(\"c\"),\n+            )\n+            result = query.values(\"status\").annotate(total_count=Count(\"status\"))\n+            print(\"Result:\", list(result))\n+            print(\"Test passed\")\n+        except Exception as e:\n+            print(\"Test failed:\", str(e))\n+\n+    def test_complex_subquery(self):\n+        print(\"\\nTesting complex subquery...\")\n+        ab_query = AB.objects.filter(\n+            a=OuterRef(\"pk\"), \n+            b=self.b1.pk\n+        ).values(\"status\").annotate(\n+            doubled_status=F(\"status\") * 2\n+        )\n+        \n+        try:\n+            query = A.objects.filter(\n+                Q(pk=self.a1.pk) | Q(ab_a__b=self.b1.pk)\n+            ).annotate(\n+                status=Subquery(ab_query.values(\"doubled_status\")),\n+                c_count=Count(\"c\"),\n+            )\n+            result = query.values(\"status\").annotate(total_count=Count(\"status\"))\n+            print(\"Result:\", list(result))\n+            print(\"Test passed\")\n+        except Exception as e:\n+            print(\"Test failed:\", str(e))\n+\n+if __name__ == '__main__':\n+    # Create all tables\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        for Model in [A, B, AB, C]:\n+            try:\n+                schema_editor.create_model(Model)\n+            except Exception as e:\n+                print(f\"Error creating table for {Model.__name__}: {e}\")\n+    \n+    # Run the tests\n+    test = EdgeCaseTests()\n+    test.setUp()\n+    test.test_multiple_status_fields()\n+    test.test_complex_subquery()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..24cf1a76de\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,67 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings before importing models\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'test_app',\n+        ],\n+        MIDDLEWARE=[],\n+        ROOT_URLCONF=[],\n+    )\n+    django.setup()\n+\n+from django.db.models import Q, OuterRef, Subquery, Count\n+from django.test import TestCase\n+from test_app.models import A, B, AB, C\n+\n+class GroupByTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        self.a1 = A.objects.create()\n+        self.b1 = B.objects.create()\n+        self.ab1 = AB.objects.create(a=self.a1, b=self.b1, status=1)\n+        self.c1 = C.objects.create(a=self.a1, status=2)\n+\n+    def test_group_by_with_subquery(self):\n+        ab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=1)\n+        filter_conditions = Q(pk=1) | Q(ab_a__b=1)\n+        query = A.objects.filter(filter_conditions).annotate(\n+            status=Subquery(ab_query.values(\"status\")),\n+            c_count=Count(\"c\"),\n+        )\n+        try:\n+            result = query.values(\"status\").annotate(total_count=Count(\"status\"))\n+            print(\"Query executed successfully\")\n+            print(\"Result:\", list(result))\n+            print(\"Test passed\")\n+        except Exception as e:\n+            print(\"Test failed:\", str(e))\n+\n+if __name__ == '__main__':\n+    from django.core.management import call_command\n+    from django.db import connection\n+    \n+    # Create all tables\n+    with connection.schema_editor() as schema_editor:\n+        from test_app.models import A, B, AB, C\n+        for Model in [A, B, AB, C]:\n+            try:\n+                schema_editor.create_model(Model)\n+            except Exception as e:\n+                print(f\"Error creating table for {Model.__name__}: {e}\")\n+    \n+    # Run the test\n+    test = GroupByTest()\n+    test.setUp()\n+    test.test_group_by_with_subquery()\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..75a05bc7ea\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+\n+class A(models.Model):\n+    bs = models.ManyToManyField('B', related_name=\"a\", through=\"AB\")\n+\n+class B(models.Model):\n+    pass\n+\n+class AB(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n+    status = models.IntegerField()\n+\n+class C(models.Model):\n+    a = models.ForeignKey(A, null=True, blank=True, on_delete=models.SET_NULL, related_name=\"c\")\n+    status = models.IntegerField()\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..6e46e7fd1b\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}