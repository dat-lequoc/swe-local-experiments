diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..e8dcf70d82 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -144,7 +144,12 @@ class ModelBase(type):
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
                 if not hasattr(meta, 'ordering'):
-                    new_class._meta.ordering = base_meta.ordering
+                    if base_meta.ordering:
+                        # Create a deep copy to preserve all ordering attributes
+                        new_class._meta.ordering = [
+                            copy.deepcopy(expr) if not isinstance(expr, str) else expr
+                            for expr in base_meta.ordering
+                        ]
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
 
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..4a256a7f14
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,106 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+from django.test.utils import setup_test_environment, teardown_test_environment
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests',
+        ],
+    )
+
+django.setup()
+
+class ParentWithExpression(models.Model):
+    name = models.CharField(max_length=50, null=True)
+    
+    class Meta:
+        app_label = 'tests'
+        ordering = ['-pk', models.F('name').desc()]
+
+class ChildWithExpression(ParentWithExpression):
+    class Meta:
+        app_label = 'tests'
+
+class ParentWithMultipleFields(models.Model):
+    name = models.CharField(max_length=50, null=True)
+    date = models.DateTimeField(null=True)
+    
+    class Meta:
+        app_label = 'tests'
+        ordering = ['-pk', '-date', 'name']
+
+class ChildWithMultipleFields(ParentWithMultipleFields):
+    class Meta:
+        app_label = 'tests'
+
+class OrderingEdgeCasesTest(TestCase):
+    def test_expression_ordering_inheritance(self):
+        # Create test data
+        p1 = ParentWithExpression.objects.create(name='A')
+        p2 = ParentWithExpression.objects.create(name='B')
+        p3 = ParentWithExpression.objects.create(name='C')
+        
+        c1 = ChildWithExpression.objects.create(name='X')
+        c2 = ChildWithExpression.objects.create(name='Y')
+        c3 = ChildWithExpression.objects.create(name='Z')
+        
+        # Test Child ordering
+        child_pks = list(ChildWithExpression.objects.values_list('pk', flat=True))
+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))
+        
+        print("Expression ordering test passed")
+        
+    def test_multiple_fields_ordering_inheritance(self):
+        from datetime import datetime
+        
+        # Create test data
+        p1 = ParentWithMultipleFields.objects.create(name='A', date=datetime.now())
+        p2 = ParentWithMultipleFields.objects.create(name='B', date=datetime.now())
+        p3 = ParentWithMultipleFields.objects.create(name='C', date=datetime.now())
+        
+        c1 = ChildWithMultipleFields.objects.create(name='X', date=datetime.now())
+        c2 = ChildWithMultipleFields.objects.create(name='Y', date=datetime.now())
+        c3 = ChildWithMultipleFields.objects.create(name='Z', date=datetime.now())
+        
+        # Test Child ordering
+        child_pks = list(ChildWithMultipleFields.objects.values_list('pk', flat=True))
+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))
+        
+        print("Multiple fields ordering test passed")
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ParentWithExpression)
+    schema_editor.create_model(ChildWithExpression)
+    schema_editor.create_model(ParentWithMultipleFields)
+    schema_editor.create_model(ChildWithMultipleFields)
+
+if __name__ == '__main__':
+    setup_test_environment()
+    test = OrderingEdgeCasesTest('test_expression_ordering_inheritance')
+    test.setUp()
+    test.test_expression_ordering_inheritance()
+    test.tearDown()
+    
+    test = OrderingEdgeCasesTest('test_multiple_fields_ordering_inheritance')
+    test.setUp()
+    test.test_multiple_fields_ordering_inheritance()
+    test.tearDown()
+    
+    teardown_test_environment()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..393bfe44d3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,74 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+from django.test.utils import setup_test_environment, teardown_test_environment
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests',
+        ],
+    )
+
+django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=50, null=True)
+    
+    class Meta:
+        app_label = 'tests'
+        ordering = ['-pk']
+
+class Child(Parent):
+    class Meta:
+        app_label = 'tests'
+
+class OrderingInheritanceTest(TestCase):
+    def test_ordering_inheritance(self):
+        # Create some test data
+        p1 = Parent.objects.create()
+        p2 = Parent.objects.create()
+        p3 = Parent.objects.create()
+        
+        c1 = Child.objects.create()
+        c2 = Child.objects.create()
+        c3 = Child.objects.create()
+        
+        # Test Parent ordering
+        parent_pks = list(Parent.objects.values_list('pk', flat=True))
+        self.assertEqual(parent_pks, sorted(parent_pks, reverse=True))
+        
+        # Test Child ordering
+        child_pks = list(Child.objects.values_list('pk', flat=True))
+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))
+        
+        print("Parent ordering:", parent_pks)
+        print("Child ordering:", child_pks)
+        print("Test passed: Child model correctly inherits '-pk' ordering from Parent")
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Parent)
+    schema_editor.create_model(Child)
+
+if __name__ == '__main__':
+    setup_test_environment()
+    test = OrderingInheritanceTest('test_ordering_inheritance')
+    test.setUp()
+    test.test_ordering_inheritance()
+    test.tearDown()
+    teardown_test_environment()
\ No newline at end of file
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
