{
  "instance_id": "django__django-12470",
  "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex b2a60629c9..e8dcf70d82 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -144,7 +144,12 @@ class ModelBase(type):\n                 # non-abstract parent (unless an ABC comes before it in the\n                 # method resolution order).\n                 if not hasattr(meta, 'ordering'):\n-                    new_class._meta.ordering = base_meta.ordering\n+                    if base_meta.ordering:\n+                        # Create a deep copy to preserve all ordering attributes\n+                        new_class._meta.ordering = [\n+                            copy.deepcopy(expr) if not isinstance(expr, str) else expr\n+                            for expr in base_meta.ordering\n+                        ]\n                 if not hasattr(meta, 'get_latest_by'):\n                     new_class._meta.get_latest_by = base_meta.get_latest_by\n \ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..4a256a7f14\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,106 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.test import TestCase\n+from django.test.utils import setup_test_environment, teardown_test_environment\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-key',\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'tests',\n+        ],\n+    )\n+\n+django.setup()\n+\n+class ParentWithExpression(models.Model):\n+    name = models.CharField(max_length=50, null=True)\n+    \n+    class Meta:\n+        app_label = 'tests'\n+        ordering = ['-pk', models.F('name').desc()]\n+\n+class ChildWithExpression(ParentWithExpression):\n+    class Meta:\n+        app_label = 'tests'\n+\n+class ParentWithMultipleFields(models.Model):\n+    name = models.CharField(max_length=50, null=True)\n+    date = models.DateTimeField(null=True)\n+    \n+    class Meta:\n+        app_label = 'tests'\n+        ordering = ['-pk', '-date', 'name']\n+\n+class ChildWithMultipleFields(ParentWithMultipleFields):\n+    class Meta:\n+        app_label = 'tests'\n+\n+class OrderingEdgeCasesTest(TestCase):\n+    def test_expression_ordering_inheritance(self):\n+        # Create test data\n+        p1 = ParentWithExpression.objects.create(name='A')\n+        p2 = ParentWithExpression.objects.create(name='B')\n+        p3 = ParentWithExpression.objects.create(name='C')\n+        \n+        c1 = ChildWithExpression.objects.create(name='X')\n+        c2 = ChildWithExpression.objects.create(name='Y')\n+        c3 = ChildWithExpression.objects.create(name='Z')\n+        \n+        # Test Child ordering\n+        child_pks = list(ChildWithExpression.objects.values_list('pk', flat=True))\n+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))\n+        \n+        print(\"Expression ordering test passed\")\n+        \n+    def test_multiple_fields_ordering_inheritance(self):\n+        from datetime import datetime\n+        \n+        # Create test data\n+        p1 = ParentWithMultipleFields.objects.create(name='A', date=datetime.now())\n+        p2 = ParentWithMultipleFields.objects.create(name='B', date=datetime.now())\n+        p3 = ParentWithMultipleFields.objects.create(name='C', date=datetime.now())\n+        \n+        c1 = ChildWithMultipleFields.objects.create(name='X', date=datetime.now())\n+        c2 = ChildWithMultipleFields.objects.create(name='Y', date=datetime.now())\n+        c3 = ChildWithMultipleFields.objects.create(name='Z', date=datetime.now())\n+        \n+        # Test Child ordering\n+        child_pks = list(ChildWithMultipleFields.objects.values_list('pk', flat=True))\n+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))\n+        \n+        print(\"Multiple fields ordering test passed\")\n+\n+# Create database tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(ParentWithExpression)\n+    schema_editor.create_model(ChildWithExpression)\n+    schema_editor.create_model(ParentWithMultipleFields)\n+    schema_editor.create_model(ChildWithMultipleFields)\n+\n+if __name__ == '__main__':\n+    setup_test_environment()\n+    test = OrderingEdgeCasesTest('test_expression_ordering_inheritance')\n+    test.setUp()\n+    test.test_expression_ordering_inheritance()\n+    test.tearDown()\n+    \n+    test = OrderingEdgeCasesTest('test_multiple_fields_ordering_inheritance')\n+    test.setUp()\n+    test.test_multiple_fields_ordering_inheritance()\n+    test.tearDown()\n+    \n+    teardown_test_environment()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..393bfe44d3\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,74 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.test import TestCase\n+from django.test.utils import setup_test_environment, teardown_test_environment\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-key',\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'tests',\n+        ],\n+    )\n+\n+django.setup()\n+\n+class Parent(models.Model):\n+    name = models.CharField(max_length=50, null=True)\n+    \n+    class Meta:\n+        app_label = 'tests'\n+        ordering = ['-pk']\n+\n+class Child(Parent):\n+    class Meta:\n+        app_label = 'tests'\n+\n+class OrderingInheritanceTest(TestCase):\n+    def test_ordering_inheritance(self):\n+        # Create some test data\n+        p1 = Parent.objects.create()\n+        p2 = Parent.objects.create()\n+        p3 = Parent.objects.create()\n+        \n+        c1 = Child.objects.create()\n+        c2 = Child.objects.create()\n+        c3 = Child.objects.create()\n+        \n+        # Test Parent ordering\n+        parent_pks = list(Parent.objects.values_list('pk', flat=True))\n+        self.assertEqual(parent_pks, sorted(parent_pks, reverse=True))\n+        \n+        # Test Child ordering\n+        child_pks = list(Child.objects.values_list('pk', flat=True))\n+        self.assertEqual(child_pks, sorted(child_pks, reverse=True))\n+        \n+        print(\"Parent ordering:\", parent_pks)\n+        print(\"Child ordering:\", child_pks)\n+        print(\"Test passed: Child model correctly inherits '-pk' ordering from Parent\")\n+\n+# Create database tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Parent)\n+    schema_editor.create_model(Child)\n+\n+if __name__ == '__main__':\n+    setup_test_environment()\n+    test = OrderingInheritanceTest('test_ordering_inheritance')\n+    test.setUp()\n+    test.test_ordering_inheritance()\n+    test.tearDown()\n+    teardown_test_environment()\n\\ No newline at end of file\ndiff --git a/tests/__init__.py b/tests/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\n",
  "model_name_or_path": "KortixAI"
}