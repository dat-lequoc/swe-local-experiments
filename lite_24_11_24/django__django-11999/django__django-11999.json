{
  "instance_id": "django__django-11999",
  "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff673..32e7345382 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,9 +939,47 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n-        value = getattr(self, field.attname)\n-        # force_str() to coerce lazy strings.\n-        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n+        \"\"\"\n+        Get the display value for a field with choices.\n+        \"\"\"\n+        method_name = 'get_%s_display' % field.name\n+\n+        # Check if we're already in a display method call to prevent recursion\n+        if getattr(self, '_in_display_call', False):\n+            # Default implementation when in recursive call\n+            value = getattr(self, field.attname)\n+            if value is None:\n+                return str(None)\n+            choices_dict = dict(field.flatchoices)\n+            return force_str(choices_dict.get(value, value), strings_only=True)\n+\n+        try:\n+            # Set the flag to prevent recursion\n+            self._in_display_call = True\n+\n+            # Look for the method in the class hierarchy\n+            for cls in self.__class__.__mro__:\n+                method = cls.__dict__.get(method_name)\n+                if method is not None and not getattr(method, '_is_default', False):\n+                    # Found a non-default implementation\n+                    if isinstance(method, partialmethod):\n+                        return method.__get__(self, cls)()\n+                    else:\n+                        return method(self)\n+\n+            # If no custom implementation found, use default implementation\n+            value = getattr(self, field.attname)\n+            if value is None:\n+                return str(None)\n+            choices_dict = dict(field.flatchoices)\n+            return force_str(choices_dict.get(value, value), strings_only=True)\n+\n+        finally:\n+            # Always clean up the flag\n+            self._in_display_call = False\n+    \n+    # Mark this method as the default implementation\n+    _get_FIELD_display._is_default = True\n \n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n         if not self.pk:\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..b2f37719c5\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,86 @@\n+from django.db import models\n+from django.conf import settings\n+import os\n+\n+# Configure Django settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+)\n+\n+import django\n+django.setup()\n+\n+# Test models\n+class BaseModel(models.Model):\n+    status = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        abstract = True\n+    \n+    def get_status_display(self):\n+        return \"Custom Status\"\n+\n+class DerivedModel(BaseModel):\n+    pass\n+\n+class OverrideModel(models.Model):\n+    state = models.CharField(max_length=10, choices=[('1', 'One'), ('2', 'Two')])\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+    \n+    def get_state_display(self):\n+        return f\"State: {self.state}\"\n+\n+def test_edge_cases():\n+    success = True\n+    \n+    # Test 1: Inheritance\n+    try:\n+        derived = DerivedModel(status='A')\n+        if derived.get_status_display() == \"Custom Status\":\n+            print(\"SUCCESS: Inheritance test passed\")\n+        else:\n+            print(\"FAILURE: Inheritance test failed\")\n+            success = False\n+    except Exception as e:\n+        print(f\"ERROR: Inheritance test failed with exception: {str(e)}\")\n+        success = False\n+\n+    # Test 2: None value\n+    try:\n+        model = OverrideModel()\n+        display = model.get_state_display()\n+        if display == \"State: None\":\n+            print(\"SUCCESS: None value test passed\")\n+        else:\n+            print(\"FAILURE: None value test failed\")\n+            success = False\n+    except Exception as e:\n+        print(f\"ERROR: None value test failed with exception: {str(e)}\")\n+        success = False\n+\n+    # Test 3: Invalid choice\n+    try:\n+        model = OverrideModel(state='3')\n+        display = model.get_state_display()\n+        if display == \"State: 3\":\n+            print(\"SUCCESS: Invalid choice test passed\")\n+        else:\n+            print(\"FAILURE: Invalid choice test failed\")\n+            success = False\n+    except Exception as e:\n+        print(f\"ERROR: Invalid choice test failed with exception: {str(e)}\")\n+        success = False\n+\n+    return success\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..35beb3fe19\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,61 @@\n+from django.db import models\n+from django.conf import settings\n+import os\n+\n+# Configure Django settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+)\n+\n+import django\n+django.setup()\n+\n+# Test model\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(\"foo\", max_length=10, choices=[(1, 'foo'), (2, 'bar')])\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+    \n+    def __str__(self):\n+        return self._custom_display()\n+    \n+    def _custom_display(self):\n+        return \"something\"\n+    \n+    def get_foo_bar_display(self):\n+        return self._custom_display()\n+\n+# Run tests\n+def test_get_display_override():\n+    try:\n+        # Create an instance\n+        instance = FooBar(foo_bar=1)\n+        \n+        # Test the overridden method\n+        display_value = str(instance)\n+        expected = \"something\"\n+        \n+        if display_value == expected:\n+            print(\"SUCCESS: get_foo_bar_display() override works correctly\")\n+            print(f\"Expected: {expected}\")\n+            print(f\"Got: {display_value}\")\n+            return True\n+        else:\n+            print(\"FAILURE: get_foo_bar_display() override not working\")\n+            print(f\"Expected: {expected}\")\n+            print(f\"Got: {display_value}\")\n+            return False\n+            \n+    except Exception as e:\n+        print(f\"ERROR: Test failed with exception: {str(e)}\")\n+        return False\n+\n+if __name__ == '__main__':\n+    test_get_display_override()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}