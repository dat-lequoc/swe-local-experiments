{
  "instance_id": "django__django-12125",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..f28efd1c23 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,7 +90,13 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        module, *name_parts = path.rsplit(\".\", 1)\n+        name = name_parts[0]\n+        \n+        # Check if this is an inner class by looking for multiple dots after the module\n+        if '.' in module and not module.startswith('django.'):\n+            return path, {\"import %s\" % module.split('.')[0]}\n+        \n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..b7316461ae\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,48 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations import Migration\n+from django.db.migrations.operations.fields import AddField\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n+    )\n+    django.setup()\n+\n+# Import models from test_app\n+from test_app.models import Outer, A, Thing\n+\n+def test_inner_class_serialization():\n+    # Test case 1: Regular inner class\n+    operations = [\n+        AddField(\n+            model_name='A',\n+            name='field',\n+            field=Outer.Inner(max_length=20),\n+        ),\n+    ]\n+    \n+    migration = Migration('test_migration', 'test_app')\n+    migration.operations = operations\n+    \n+    # Write the migration\n+    writer = MigrationWriter(migration)\n+    migration_string = writer.as_string()\n+    \n+    print(\"=== Generated Migration ===\")\n+    print(migration_string)\n+    \n+    # Verify the output contains the correct path\n+    if 'test_app.models.Outer.Inner' in migration_string:\n+        print(\"\\nSUCCESS: Inner class path is correctly preserved\")\n+    else:\n+        print(\"\\nFAILURE: Inner class path is not correctly preserved\")\n+        print(\"Expected 'test_app.models.Outer.Inner' in the output\")\n+\n+if __name__ == '__main__':\n+    test_inner_class_serialization()\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..47e3d5eeff\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,24 @@\n+from django.db import models\n+\n+class Outer(object):\n+    class Inner(models.CharField):\n+        def __init__(self, *args, **kwargs):\n+            super().__init__(*args, **kwargs)\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+import enum\n+class Thing(models.Model):\n+    @enum.unique\n+    class State(enum.Enum):\n+        on = 'on'\n+        off = 'off'\n+    \n+    state = models.CharField(max_length=10, choices=[(s.value, s.name) for s in State])\n+    \n+    class Meta:\n+        app_label = 'test_app'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}