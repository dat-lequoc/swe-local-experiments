{
  "instance_id": "django__django-12184",
  "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2d4610aac4..3ad6c4ae5b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -160,6 +160,8 @@ class RegexPattern(CheckURLMixin):\n             # positional arguments.\n             kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n             args = () if kwargs else match.groups()\n+            # Filter out None values from kwargs to handle optional parameters\n+            kwargs = {k: v for k, v in kwargs.items() if v is not None}\n             return path[match.end():], args, kwargs\n         return None\n \ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..ddc5536c63\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,75 @@\n+import os\n+import sys\n+from django.conf import settings\n+from django.http import HttpResponse\n+from django.test import RequestFactory\n+from django.urls import re_path, get_resolver\n+from django.core.handlers.base import BaseHandler\n+\n+# Create a URLconf module with multiple optional parameters\n+class URLConf:\n+    def test_view(self, request, format='html', version=None, lang=None):\n+        return HttpResponse(f'Format: {format}, Version: {version}, Lang: {lang}')\n+\n+    @property\n+    def urlpatterns(self):\n+        return [\n+            re_path(\n+                r'^module/*(?:(?P<format>html|json|xml))?/*(?:(?P<version>\\d+\\.\\d+))?/*(?:(?P<lang>[a-z]{2}))?/?$',\n+                self.test_view,\n+                name='test_view'\n+            ),\n+        ]\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    ROOT_URLCONF=URLConf(),\n+    MIDDLEWARE=[],\n+)\n+\n+def test_edge_cases():\n+    print(\"Testing edge cases...\")\n+    \n+    # Create request factory\n+    factory = RequestFactory()\n+    \n+    # Test cases with multiple optional parameters\n+    test_cases = [\n+        '/module/',  # No parameters\n+        '/module/html/',  # One parameter\n+        '/module/json/1.0/',  # Two parameters\n+        '/module/xml/2.0/en/',  # All parameters\n+        '/module///',  # Empty parameters\n+        '/module/html//en/',  # Skip middle parameter\n+        '/module//1.0/',  # Skip first parameter\n+        '/module///fr/',  # Skip first two parameters\n+    ]\n+    \n+    success = True\n+    for url in test_cases:\n+        try:\n+            print(f\"\\nTesting URL: {url}\")\n+            request = factory.get(url)\n+            resolver = get_resolver()\n+            resolver_match = resolver.resolve(request.path_info)\n+            \n+            if resolver_match:\n+                response = resolver_match.func(request, **resolver_match.kwargs)\n+                print(f\"Response content: {response.content.decode()}\")\n+            else:\n+                print(f\"Failed to resolve URL: {url}\")\n+                success = False\n+                \n+        except Exception as e:\n+            print(f\"Error processing URL {url}: {str(e)}\")\n+            success = False\n+    \n+    if success:\n+        print(\"\\nAll edge cases passed successfully!\")\n+    else:\n+        print(\"\\nSome edge cases failed!\")\n+    return success\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..9e5bf7a605\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,69 @@\n+import os\n+import sys\n+from django.conf import settings\n+from django.http import HttpResponse\n+from django.test import RequestFactory\n+from django.urls import re_path, get_resolver\n+from django.core.handlers.base import BaseHandler\n+\n+# Create a URLconf module\n+class URLConf:\n+    def test_view(self, request, format='html'):\n+        return HttpResponse(f'Format: {format}')\n+\n+    @property\n+    def urlpatterns(self):\n+        return [\n+            re_path(r'^module/(?P<format>(html|json|xml))?/?$', self.test_view, name='test_view'),\n+        ]\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    ROOT_URLCONF=URLConf(),\n+    MIDDLEWARE=[],\n+)\n+\n+def test_url_resolution():\n+    print(\"Testing URL resolution...\")\n+    \n+    # Create request factory\n+    factory = RequestFactory()\n+    handler = BaseHandler()\n+    handler.load_middleware()\n+    \n+    # Test cases\n+    test_cases = [\n+        '/module/',  # No format specified\n+        '/module/html/',  # HTML format\n+        '/module/json/',  # JSON format\n+        '/module/xml/',   # XML format\n+    ]\n+    \n+    success = True\n+    for url in test_cases:\n+        try:\n+            print(f\"\\nTesting URL: {url}\")\n+            request = factory.get(url)\n+            resolver = get_resolver()  # Use the configured ROOT_URLCONF\n+            resolver_match = resolver.resolve(request.path_info)\n+            \n+            if resolver_match:\n+                response = resolver_match.func(request, **resolver_match.kwargs)\n+                print(f\"Response content: {response.content.decode()}\")\n+            else:\n+                print(f\"Failed to resolve URL: {url}\")\n+                success = False\n+                \n+        except Exception as e:\n+            print(f\"Error processing URL {url}: {str(e)}\")\n+            success = False\n+    \n+    if success:\n+        print(\"\\nAll tests passed successfully!\")\n+    else:\n+        print(\"\\nSome tests failed!\")\n+    return success\n+\n+if __name__ == '__main__':\n+    test_url_resolution()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}