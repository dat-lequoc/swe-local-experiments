diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2d4610aac4..3ad6c4ae5b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -160,6 +160,8 @@ class RegexPattern(CheckURLMixin):
             # positional arguments.
             kwargs = {k: v for k, v in match.groupdict().items() if v is not None}
             args = () if kwargs else match.groups()
+            # Filter out None values from kwargs to handle optional parameters
+            kwargs = {k: v for k, v in kwargs.items() if v is not None}
             return path[match.end():], args, kwargs
         return None
 
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..ddc5536c63
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,75 @@
+import os
+import sys
+from django.conf import settings
+from django.http import HttpResponse
+from django.test import RequestFactory
+from django.urls import re_path, get_resolver
+from django.core.handlers.base import BaseHandler
+
+# Create a URLconf module with multiple optional parameters
+class URLConf:
+    def test_view(self, request, format='html', version=None, lang=None):
+        return HttpResponse(f'Format: {format}, Version: {version}, Lang: {lang}')
+
+    @property
+    def urlpatterns(self):
+        return [
+            re_path(
+                r'^module/*(?:(?P<format>html|json|xml))?/*(?:(?P<version>\d+\.\d+))?/*(?:(?P<lang>[a-z]{2}))?/?$',
+                self.test_view,
+                name='test_view'
+            ),
+        ]
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF=URLConf(),
+    MIDDLEWARE=[],
+)
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Create request factory
+    factory = RequestFactory()
+    
+    # Test cases with multiple optional parameters
+    test_cases = [
+        '/module/',  # No parameters
+        '/module/html/',  # One parameter
+        '/module/json/1.0/',  # Two parameters
+        '/module/xml/2.0/en/',  # All parameters
+        '/module///',  # Empty parameters
+        '/module/html//en/',  # Skip middle parameter
+        '/module//1.0/',  # Skip first parameter
+        '/module///fr/',  # Skip first two parameters
+    ]
+    
+    success = True
+    for url in test_cases:
+        try:
+            print(f"\nTesting URL: {url}")
+            request = factory.get(url)
+            resolver = get_resolver()
+            resolver_match = resolver.resolve(request.path_info)
+            
+            if resolver_match:
+                response = resolver_match.func(request, **resolver_match.kwargs)
+                print(f"Response content: {response.content.decode()}")
+            else:
+                print(f"Failed to resolve URL: {url}")
+                success = False
+                
+        except Exception as e:
+            print(f"Error processing URL {url}: {str(e)}")
+            success = False
+    
+    if success:
+        print("\nAll edge cases passed successfully!")
+    else:
+        print("\nSome edge cases failed!")
+    return success
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9e5bf7a605
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,69 @@
+import os
+import sys
+from django.conf import settings
+from django.http import HttpResponse
+from django.test import RequestFactory
+from django.urls import re_path, get_resolver
+from django.core.handlers.base import BaseHandler
+
+# Create a URLconf module
+class URLConf:
+    def test_view(self, request, format='html'):
+        return HttpResponse(f'Format: {format}')
+
+    @property
+    def urlpatterns(self):
+        return [
+            re_path(r'^module/(?P<format>(html|json|xml))?/?$', self.test_view, name='test_view'),
+        ]
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF=URLConf(),
+    MIDDLEWARE=[],
+)
+
+def test_url_resolution():
+    print("Testing URL resolution...")
+    
+    # Create request factory
+    factory = RequestFactory()
+    handler = BaseHandler()
+    handler.load_middleware()
+    
+    # Test cases
+    test_cases = [
+        '/module/',  # No format specified
+        '/module/html/',  # HTML format
+        '/module/json/',  # JSON format
+        '/module/xml/',   # XML format
+    ]
+    
+    success = True
+    for url in test_cases:
+        try:
+            print(f"\nTesting URL: {url}")
+            request = factory.get(url)
+            resolver = get_resolver()  # Use the configured ROOT_URLCONF
+            resolver_match = resolver.resolve(request.path_info)
+            
+            if resolver_match:
+                response = resolver_match.func(request, **resolver_match.kwargs)
+                print(f"Response content: {response.content.decode()}")
+            else:
+                print(f"Failed to resolve URL: {url}")
+                success = False
+                
+        except Exception as e:
+            print(f"Error processing URL {url}: {str(e)}")
+            success = False
+    
+    if success:
+        print("\nAll tests passed successfully!")
+    else:
+        print("\nSome tests failed!")
+    return success
+
+if __name__ == '__main__':
+    test_url_resolution()
\ No newline at end of file
