diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..a74d2e62f9 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -441,9 +441,13 @@ def _prototype_arg(self, arg):
         np_types = {'double': 'np.double_t',
                     'int': 'np.int_t'}
         t = arg.get_datatype('c')
-        if arg.dimensions:
+        # Check for array types even if no dimensions specified
+        if arg.dimensions or isinstance(arg.name, (MatrixSymbol, MatrixBase)):
             self._need_numpy = True
-            ndim = len(arg.dimensions)
+            if arg.dimensions:
+                ndim = len(arg.dimensions)
+            else:
+                ndim = len(arg.name.shape)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
@@ -1118,4 +1122,4 @@ def ufuncify(args, expr, language=None, backend='numpy', tempdir=None,
         args = [y] + indexed_args + [m]
         args_with_indices = [a[i] for a in indexed_args]
         return autowrap(Eq(y[i], f(*args_with_indices)), language, backend,
-                        tempdir, args, flags, verbose, helpers, **kwargs)
+                        tempdir, args, flags, verbose, helpers, **kwargs)
\ No newline at end of file
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..7ca8c9f0f8 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -266,6 +266,11 @@ def get_default_datatype(expr, complex_allowed=None):
         final_dtype = "complex"
     else:
         final_dtype = "float"
+    
+    # Handle MatrixSymbol and array types explicitly
+    if isinstance(expr, (MatrixSymbol, MatrixBase)):
+        return default_datatypes["float"]  # Arrays are always treated as float
+    
     if expr.is_integer:
         return default_datatypes["int"]
     elif expr.is_real:
@@ -274,9 +279,9 @@ def get_default_datatype(expr, complex_allowed=None):
         #check all entries
         dt = "int"
         for element in expr:
-            if dt is "int" and not element.is_integer:
+            if not element.is_integer:
                 dt = "float"
-            if dt is "float" and not element.is_real:
+            if not element.is_real:
                 return default_datatypes[final_dtype]
         return default_datatypes[dt]
     else:
@@ -2229,4 +2234,4 @@ def make_routine(name, expr, argument_sequence=None,
     # initialize a new code generator
     code_gen = get_code_generator(language)
 
-    return code_gen.routine(name, expr, argument_sequence, global_vars)
+    return code_gen.routine(name, expr, argument_sequence, global_vars)
\ No newline at end of file
diff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py
index aa7db99d2f..c56f9adfef 100644
--- a/sympy/utilities/pytest.py
+++ b/sympy/utilities/pytest.py
@@ -197,7 +197,11 @@ def warns(warningcls, **kwargs):
 
 
 else:
-    XFAIL = py.test.mark.xfail
+    try:
+    import pytest
+    XFAIL = pytest.mark.xfail
+except ImportError:
+    XFAIL = lambda *args, **kwargs: lambda f: f
     slow = py.test.mark.slow
 
     def SKIP(reason):
@@ -281,4 +285,4 @@ def ignore_warnings(warningcls):
     # Reissue any warnings that we aren't testing for
     for w in warnrec:
         if not issubclass(w.category, warningcls):
-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)
\ No newline at end of file
diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py
index 47fe933dc1..837255fdf7 100644
--- a/sympy/utilities/tests/test_autowrap.py
+++ b/sympy/utilities/tests/test_autowrap.py
@@ -205,6 +205,13 @@ def test_cython_wrapper_unique_dummyvars():
     expected = expected_template.format(x_id=x_id, y_id=y_id, z_id=z_id)
     assert source == expected
 
+def test_autowrap_unused_matrix_arg():
+    x = MatrixSymbol('x', 2, 1)
+    expr = S(1.0)
+    f = autowrap(expr, args=(x,), backend='dummy')
+    assert f.args == "x"
+    assert f.returns == "nameless"
+
 def test_autowrap_dummy():
     x, y, z = symbols('x y z')
 
@@ -466,4 +473,4 @@ def test_ufuncify_source_multioutput():
     Py_DECREF(ufunc0);
 }
 #endif""" % {'num': CodeWrapper._module_counter}
-    assert source == expected
+    assert source == expected
\ No newline at end of file
