diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 737e16cc74..220763a06e 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1854,7 +1854,47 @@ def _print_PolynomialRingBase(self, expr):
 
     def _print_Poly(self, poly):
         cls = poly.__class__.__name__
-        expr = self._print(poly.as_expr())
+        terms = []
+        for monom, coeff in poly.terms():
+            if coeff == 1 and monom:
+                # Skip the coefficient if it's 1 and there are variables
+                s_monom = []
+                for i, exp in enumerate(monom):
+                    if exp > 0:
+                        if exp == 1:
+                            s_monom.append(self._print(poly.gens[i]))
+                        else:
+                            s_monom.append('%s^{%d}' % (self._print(poly.gens[i]), exp))
+                term = '*'.join(s_monom)
+            elif coeff == -1 and monom:
+                # Handle -1 coefficient specially
+                s_monom = []
+                for i, exp in enumerate(monom):
+                    if exp > 0:
+                        if exp == 1:
+                            s_monom.append(self._print(poly.gens[i]))
+                        else:
+                            s_monom.append('%s^{%d}' % (self._print(poly.gens[i]), exp))
+                term = '-' + '*'.join(s_monom)
+            else:
+                # Regular coefficient handling
+                s_monom = []
+                for i, exp in enumerate(monom):
+                    if exp > 0:
+                        if exp == 1:
+                            s_monom.append(self._print(poly.gens[i]))
+                        else:
+                            s_monom.append('%s^{%d}' % (self._print(poly.gens[i]), exp))
+                if not s_monom:
+                    term = self._print(coeff)
+                else:
+                    term = '*'.join([self._print(coeff)] + s_monom)
+            
+            if term.startswith('+'):
+                term = term[1:]
+            terms.append(term)
+
+        expr = ' + '.join(terms) if terms else '0'
         gens = list(map(self._print, poly.gens))
         domain = "domain=%s" % self._print(poly.get_domain())
 
@@ -2302,4 +2342,4 @@ def latex(expr, **settings):
 
 def print_latex(expr, **settings):
     """Prints LaTeX representation of the given expression."""
-    print(latex(expr, **settings))
+    print(latex(expr, **settings))
\ No newline at end of file
