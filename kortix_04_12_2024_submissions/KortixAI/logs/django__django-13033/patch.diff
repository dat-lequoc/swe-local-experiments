diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..9d411d3ba4 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -319,6 +319,79 @@ class SQLCompiler:
                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
                     True))
                 continue
+            
+            # Handle self-referential foreign key optimization
+            if '.' in col:
+                table, column = col.split('.', 1)
+                if column.endswith('_id'):
+                    field_name = column[:-3]
+                    try:
+                        field = self.query.model._meta.get_field(field_name)
+                        if (isinstance(field, ForeignKey) and 
+                            field.remote_field.model == field.model):
+                            # Use direct column reference for self-referential FK
+                            order_by.append((
+                                OrderBy(
+                                    RawSQL('%s.%s' % (
+                                        self.quote_name_unless_alias(table),
+                                        column
+                                    ), []),
+                                    descending=descending
+                                ),
+                                False
+                            ))
+                            continue
+                    except FieldDoesNotExist:
+                        pass
+            
+            # Handle self-referential foreign key optimization
+            if '.' in col:
+                table, column = col.split('.', 1)
+                if column.endswith('_id'):
+                    field_name = column[:-3]
+                    try:
+                        field = self.query.model._meta.get_field(field_name)
+                        if (isinstance(field, ForeignKey) and 
+                            field.remote_field.model == field.model):
+                            # Use direct column reference for self-referential FK
+                            order_by.append((
+                                OrderBy(
+                                    RawSQL('%s.%s' % (
+                                        self.quote_name_unless_alias(table),
+                                        column
+                                    ), []),
+                                    descending=descending
+                                ),
+                                False
+                            ))
+                            continue
+                    except FieldDoesNotExist:
+                        pass
+            
+            # Handle self-referential foreign key optimization
+            if '.' in col:
+                table, column = col.split('.', 1)
+                if column.endswith('_id'):
+                    field_name = column[:-3]
+                    try:
+                        field = self.query.model._meta.get_field(field_name)
+                        if (isinstance(field, ForeignKey) and 
+                            field.remote_field.model == field.model):
+                            # Use direct column reference for self-referential FK
+                            order_by.append((
+                                OrderBy(
+                                    RawSQL('%s.%s' % (
+                                        self.quote_name_unless_alias(table),
+                                        column
+                                    ), []),
+                                    descending=descending
+                                ),
+                                False
+                            ))
+                            continue
+                    except FieldDoesNotExist:
+                        pass
+            
             if col in self.query.annotations:
                 # References to an expression which is masked out of the SELECT
                 # clause.
@@ -1601,4 +1674,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
-        cursor.close()
+        cursor.close()
\ No newline at end of file
diff --git a/tests/queries/test_self_referential.py b/tests/queries/test_self_referential.py
new file mode 100644
index 0000000000..899a2c5fa7
--- /dev/null
+++ b/tests/queries/test_self_referential.py
@@ -0,0 +1,31 @@
+from django.test import TestCase
+from django.db import models
+
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("self", on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+class SelfReferentialTests(TestCase):
+    def test_self_referential_fk_ordering(self):
+        # Test ordering by self-referential foreign key
+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+        qs = qs.order_by("record__root_id")
+        sql = str(qs.query)
+        self.assertNotIn("LEFT OUTER JOIN", sql)
+        self.assertIn("ORDER BY", sql)
+        self.assertIn("root_id", sql)
+        
+        # Test reverse ordering
+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+        qs = qs.order_by("-record__root_id") 
+        sql = str(qs.query)
+        self.assertNotIn("LEFT OUTER JOIN", sql)
+        self.assertIn("DESC", sql)
