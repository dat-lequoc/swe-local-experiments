diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 6c6ee8cee7..8b4f395615 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -153,6 +153,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
 
         If kwargs are given, they're passed to the form Field's constructor.
         """
+        # For ArrayField, disable hidden initial to prevent validation bypass
+        if hasattr(db_field, 'base_field') and db_field.__class__.__name__ == 'ArrayField':
+            kwargs['show_hidden_initial'] = False
         # If the field specifies choices, we don't need to look for special
         # admin widgets - we just need to use a select widget of some kind.
         if db_field.choices:
@@ -2497,4 +2500,4 @@ class StackedInline(InlineModelAdmin):
 
 
 class TabularInline(InlineModelAdmin):
-    template = "admin/edit_inline/tabular.html"
+    template = "admin/edit_inline/tabular.html"
\ No newline at end of file
diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py
index 9e20ab3baf..8b46a2cffb 100644
--- a/tests/postgres_tests/test_array.py
+++ b/tests/postgres_tests/test_array.py
@@ -209,6 +209,27 @@ class TestSaveLoad(PostgreSQLTestCase):
         self.assertEqual(instance.field_nested, [[None, None], [None, None]])
 
 
+class TestArrayFormValidation(PostgreSQLTestCase):
+    def test_array_field_hidden_initial_validation(self):
+        """
+        Test that ArrayField validation is not bypassed when using hidden initial fields.
+        """
+        class RelatedForm(forms.ModelForm):
+            def clean(self):
+                raise ValidationError("Test validation error")
+            
+            class Meta:
+                model = IntegerArrayModel
+                fields = ['field']
+
+        form = RelatedForm(data={'field': [1, 2]}, initial={'field': [3, 4]})
+        form.show_hidden_initial = True
+        self.assertFalse(form.is_valid())
+        # Submit again with same data
+        form = RelatedForm(data={'field': [1, 2]}, initial={'field': [3, 4]})
+        form.show_hidden_initial = True
+        self.assertFalse(form.is_valid())
+
 class TestQuerying(PostgreSQLTestCase):
     @classmethod
     def setUpTestData(cls):
@@ -1473,4 +1494,4 @@ class TestAdminUtils(PostgreSQLTestCase):
             array_field,
             self.empty_value,
         )
-        self.assertEqual(display_value, self.empty_value)
+        self.assertEqual(display_value, self.empty_value)
\ No newline at end of file
