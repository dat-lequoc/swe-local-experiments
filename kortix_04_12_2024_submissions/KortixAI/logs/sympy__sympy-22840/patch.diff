diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index 78db834466..c275064ef0 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -691,6 +691,8 @@ def free_symbols(self):
         return {self}
 
     def _eval_simplify(self, **kwargs):
+        # Avoid circular import with simplify
+        from sympy.simplify.simplify import simplify as _simplify
         return self
 
     def _eval_derivative(self, x):
@@ -865,4 +867,4 @@ def _make_matrix(x):
 from .transpose import Transpose
 from .inverse import Inverse
 from .special import ZeroMatrix, Identity
-from .determinant import Determinant
+from .determinant import Determinant
\ No newline at end of file
diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py
index d649dd02a9..d2a9e1e9b8 100644
--- a/sympy/simplify/cse_main.py
+++ b/sympy/simplify/cse_main.py
@@ -1,6 +1,8 @@
 """ Tools for doing common subexpression elimination.
 """
 from sympy.core import Basic, Mul, Add, Pow, sympify
+from sympy.matrices.expressions.matexpr import MatrixElement
+from sympy.matrices.expressions.matexpr import MatrixElement
 from sympy.core.containers import Tuple, OrderedSet
 from sympy.core.exprtools import factor_terms
 from sympy.core.singleton import S
@@ -583,7 +585,7 @@ def _find_repeated(expr):
         if not isinstance(expr, (Basic, Unevaluated)):
             return
 
-        if isinstance(expr, RootOf):
+        if isinstance(expr, (RootOf, MatrixElement)):
             return
 
         if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):
@@ -913,4 +915,4 @@ def _cse_homogeneous(exprs, **kwargs):
     except TypeError: # For example 'mpf' objects
         return [], exprs
     else:
-        return replacements, reduced_exprs
+        return replacements, reduced_exprs
\ No newline at end of file
diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py
index eb9cc23131..de2078c64d 100644
--- a/sympy/simplify/tests/test_cse.py
+++ b/sympy/simplify/tests/test_cse.py
@@ -599,3 +599,21 @@ def test_issue_18991():
 def test_unevaluated_Mul():
     m = [Mul(1, 2, evaluate=False)]
     assert cse(m) == ([], m)
+
+def test_matrix_element_cse():
+    # Test that matrix element access isn't broken into subexpressions
+    A = MatrixSymbol('A', 4, 4)
+    B = MatrixSymbol('B', 4, 4)
+    expr = A[0,0]*B[0,0] + A[0,1]*B[1,0]
+    replacements, reduced = cse(expr)
+    # Should not create temporaries for simple indexing
+    assert len([x for x,y in replacements if isinstance(y, MatrixElement)]) == 0
+
+def test_matrix_element_cse():
+    # Test that matrix element access isn't broken into subexpressions
+    A = MatrixSymbol('A', 4, 4)
+    B = MatrixSymbol('B', 4, 4)
+    expr = A[0,0]*B[0,0] + A[0,1]*B[1,0]
+    replacements, reduced = cse(expr)
+    # Should not create temporaries for simple indexing
+    assert len([x for x,y in replacements if isinstance(y, MatrixElement)]) == 0
\ No newline at end of file
