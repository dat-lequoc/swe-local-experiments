diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..8d1b9f814 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -128,15 +128,21 @@ def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     during collection by using the ``allow_module_level`` flag.  This function can
     be called in doctests as well.
 
+    :param str msg: The message to show as the reason for skipping.
     :param bool allow_module_level:
         Allows this function to be called at module level, skipping the rest
-        of the module. Defaults to False.
+        of the module. This is particularly useful when you need to skip a module
+        that contains syntax only available in newer Python versions. Defaults to False.
 
     .. note::
-        It is better to use the :ref:`pytest.mark.skipif ref` marker when
-        possible to declare a test to be skipped under certain conditions
-        like mismatching platforms or dependencies.
-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
+        For conditional test skipping, it is better to use the :ref:`pytest.mark.skipif ref`
+        marker when possible. However, when you need to skip an entire module (especially
+        due to syntax compatibility), use either:
+        
+        - ``pytest.skip(msg, allow_module_level=True)`` at module level
+        - :func:`pytest.skip_module` which is a more explicit alternative
+        
+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
         to skip a doctest statically.
     """
@@ -177,6 +183,29 @@ def xfail(reason: str = "") -> "NoReturn":
     raise XFailed(reason)
 
 
+def skip_module(msg: str) -> "NoReturn":
+    """Skip the entire module with the given message.
+
+    This is a convenience function that calls :func:`pytest.skip` with ``allow_module_level=True``.
+    It is particularly useful when you need to skip a module that contains syntax only
+    available in newer Python versions.
+
+    :param str msg: The message to show as the reason for skipping.
+
+    Example::
+
+        import sys
+        if sys.version_info < (3, 8):
+            pytest.skip_module("Requires Python >= 3.8")
+
+        # Module contents using Python 3.8+ syntax
+        def foo(x, /, y):
+            return x + y
+    """
+    __tracebackhide__ = True
+    skip(msg, allow_module_level=True)
+
+
 def importorskip(
     modname: str, minversion: Optional[str] = None, reason: Optional[str] = None
 ) -> Any:
@@ -229,4 +258,4 @@ def importorskip(
                 % (modname, verattr, minversion),
                 allow_module_level=True,
             )
-    return mod
+    return mod
\ No newline at end of file
diff --git a/src/pytest/__init__.py b/src/pytest/__init__.py
index 3694f0fc4..3a87938f5 100644
--- a/src/pytest/__init__.py
+++ b/src/pytest/__init__.py
@@ -40,6 +40,7 @@ from _pytest.outcomes import exit
 from _pytest.outcomes import fail
 from _pytest.outcomes import importorskip
 from _pytest.outcomes import skip
+from _pytest.outcomes import skip_module
 from _pytest.outcomes import xfail
 from _pytest.pytester import Pytester
 from _pytest.pytester import Testdir
@@ -131,6 +132,7 @@ __all__ = [
     "Session",
     "set_trace",
     "skip",
+    "skip_module",
     "version_tuple",
     "TempPathFactory",
     "Testdir",
@@ -140,4 +142,4 @@ __all__ = [
     "warns",
     "xfail",
     "yield_fixture",
-]
+]
\ No newline at end of file
diff --git a/testing/test_skipping.py b/testing/test_skipping.py
index 53bf953a8..abf9087da 100644
--- a/testing/test_skipping.py
+++ b/testing/test_skipping.py
@@ -948,6 +948,33 @@ class TestSkipif:
         assert result.ret == 0
 
 
+def test_skip_module_function(pytester: Pytester) -> None:
+    p = pytester.makepyfile(
+        test_skip_module="""
+            import pytest
+            pytest.skip_module("module skipped")
+            raise Exception("should not be reached")
+        """
+    )
+    result = pytester.runpytest(p, "-rs")
+    result.stdout.fnmatch_lines(["*module skipped*", "*1 skipped*"])
+
+def test_skip_module_with_syntax_error(pytester: Pytester) -> None:
+    p = pytester.makepyfile(
+        test_skip_syntax="""
+            import pytest
+            import sys
+            if sys.version_info < (999, 0):  # Always true
+                pytest.skip_module("skip before syntax error")
+            
+            # Invalid syntax that would normally fail parsing
+            def f(x, /):  # Requires Python 3.8+
+                return x
+        """
+    )
+    result = pytester.runpytest(p, "-rs")
+    result.stdout.fnmatch_lines(["*skip before syntax error*", "*1 skipped*"])
+
 def test_skip_not_report_default(pytester: Pytester) -> None:
     p = pytester.makepyfile(
         test_one="""
@@ -1443,4 +1470,4 @@ def test_relpath_rootdir(pytester: Pytester) -> None:
     result = pytester.runpytest("-rs", "tests/test_1.py", "--rootdir=tests")
     result.stdout.fnmatch_lines(
         ["SKIPPED [[]1[]] tests/test_1.py:2: unconditional skip"]
-    )
+    )
\ No newline at end of file
