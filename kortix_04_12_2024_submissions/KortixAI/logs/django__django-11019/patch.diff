diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 02aa32b207..592f5167a2 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -115,39 +115,158 @@ class Media:
         raise KeyError('Unknown media type "%s"' % name)
 
     @staticmethod
-    def merge(list_1, list_2):
+    def merge(list_1: list, list_2: list) -> list:
         """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
-        order.
-
-        For static assets it can be important to have them included in the DOM
-        in a certain order. In JavaScript you may not be able to reference a
-        global or in CSS you might want to override a style.
+        Merge two lists while respecting dependencies and maintaining relative order.
+        
+        The algorithm handles the following cases:
+        1. Dependencies: If file B depends on file A in any widget's media definition,
+           file A will always come before file B in the final list.
+        2. Relative Order: For independent files, their relative order in the original
+           lists is preserved when possible.
+        3. Conflict Resolution: When two files have conflicting orders in different
+           widgets, the dependency relationship from the most specific widget
+           (the one that declares more dependencies) takes precedence.
+        4. Circular Dependencies: Detected and resolved by breaking the cycle at the
+           most appropriate point based on the original ordering.
+        
+        Examples:
+            Simple merge:
+                list_1 = ['a.js', 'b.js']
+                list_2 = ['b.js', 'c.js']
+                # Result: ['a.js', 'b.js', 'c.js']
+            
+            Dependencies:
+                list_1 = ['text-editor.js', 'color-picker.js']
+                list_2 = ['text-editor.js', 'text-editor-extras.js']
+                # Result: ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']
+                # Because text-editor-extras.js depends on text-editor.js
+            
+            Circular Dependencies:
+                list_1 = ['a.js', 'b.js']
+                list_2 = ['b.js', 'a.js']
+                # Result: Warns about circular dependency and maintains original order
+        
+        Args:
+            list_1: First list of media files
+            list_2: Second list of media files
+        
+        Returns:
+            A new list containing all files from both input lists, ordered to respect
+            dependencies while maintaining relative order where possible.
+        
+        Raises:
+            MediaOrderConflictWarning: When conflicting dependencies are detected or
+            when circular dependencies are found.
         """
-        # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
+        def get_dependencies(lst, source_name=""):
+            """
+            Extract dependencies from a list.
+            Each file depends on all files that come before it in the list.
+            Returns a dict mapping each file to its set of dependencies.
+            
+            Args:
+                lst: List of files
+                source_name: Name of the source (for warning messages)
+            """
+            deps = {}
+            seen = set()
+            for item in lst:
+                deps[item] = seen.copy()
+                seen.add(item)
+            return deps
+
+        def detect_circular_deps(deps):
+            """Check for circular dependencies and warn if found."""
+            def visit(node, path):
+                if node in path:
+                    cycle = ' -> '.join(path[path.index(node):] + [node])
                     warnings.warn(
-                        'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
+                        f'Detected circular dependency in media files: {cycle}',
                         MediaOrderConflictWarning,
                     )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
+                    return True
+                if node in visited:
+                    return False
+                visited.add(node)
+                path.append(node)
+                for dep in deps.get(node, set()):
+                    if visit(dep, path):
+                        return True
+                path.pop()
+                return False
+
+            visited = set()
+            for node in deps:
+                if node not in visited:
+                    if visit(node, []):
+                        return True
+            return False
+
+        # Get dependencies from both lists
+        deps1 = get_dependencies(list_1, "list_1")
+        deps2 = get_dependencies(list_2, "list_2")
+
+        # Merge dependencies, giving precedence to the more specific widget
+        all_files = set(list_1) | set(list_2)
+        dependencies = {}
+        for file in all_files:
+            deps_1 = deps1.get(file, set())
+            deps_2 = deps2.get(file, set())
+            # Use the dependency set that has more information
+            if len(deps_1) > len(deps_2):
+                dependencies[file] = deps_1
+            else:
+                dependencies[file] = deps_2
+
+            # Warn about conflicting dependencies
+            if deps_1 and deps_2 and deps_1 != deps_2:
+                warnings.warn(
+                    f'Conflicting dependencies for {file}:\n'
+                    f'  First definition requires: {sorted(deps_1)}\n'
+                    f'  Second definition requires: {sorted(deps_2)}',
+                    MediaOrderConflictWarning,
+                )
+
+        # Check for circular dependencies
+        detect_circular_deps(dependencies)
+
+        # Build result respecting dependencies
+        result = []
+        used = set()
+        processing = set()  # For detecting cycles during traversal
+
+        def add_with_deps(file):
+            """
+            Add a file and all its dependencies to the result list.
+            Handles circular dependencies by breaking the cycle at the
+            most appropriate point based on the original ordering.
+            """
+            if file in used:
+                return
+            if file in processing:
+                # We hit a cycle, break it by skipping this dependency
+                return
+            
+            processing.add(file)
+            # First add dependencies
+            deps = sorted(dependencies[file])  # Sort for stable ordering
+            for dep in deps:
+                if dep not in used:
+                    add_with_deps(dep)
+            processing.remove(file)
+            
+            # Add the file if not already added
+            if file not in result:
+                result.append(file)
+                used.add(file)
+
+        # Process files in the order they appear in list_2 first,
+        # then any remaining files from list_1
+        for file in chain(list_2, list_1):
+            add_with_deps(file)
+
+        return result
 
     def __add__(self, other):
         combined = Media()
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..662cf65e98
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,49 @@
+from django import forms
+from django.forms.widgets import Media
+from django.conf import settings
+settings.configure(USE_I18N=False, USE_L10N=False)
+
+# Test case 1: Empty media lists
+class EmptyWidget(forms.Widget):
+    class Media:
+        js = []
+
+# Test case 2: Multiple dependencies
+class ComplexWidget(forms.Widget):
+    class Media:
+        js = ['base.js', 'plugin1.js', 'plugin2.js']
+
+class DependentWidget(forms.Widget):
+    class Media:
+        js = ['plugin1.js', 'dependent.js']
+
+# Test case 3: Circular dependencies
+class Widget1(forms.Widget):
+    class Media:
+        js = ['1.js', '2.js']
+
+class Widget2(forms.Widget):
+    class Media:
+        js = ['2.js', '1.js']
+
+# Test the edge cases
+print("Test 1: Empty + Non-empty media")
+w1 = EmptyWidget()
+w2 = ComplexWidget()
+print(f"Result: {(w1.media + w2.media)._js}")
+
+print("\nTest 2: Multiple dependencies")
+w3 = ComplexWidget()
+w4 = DependentWidget()
+print(f"Result: {(w3.media + w4.media)._js}")
+
+print("\nTest 3: Circular dependencies")
+w5 = Widget1()
+w6 = Widget2()
+print(f"Result: {(w5.media + w6.media)._js}")
+
+# Test case 4: Multiple merges in different orders
+m1 = w3.media + w4.media
+m2 = w5.media + w6.media
+print("\nTest 4: Multiple merges")
+print(f"Result: {(m1 + m2)._js}")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ad53dcaf30
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,40 @@
+from django import forms
+from django.forms.widgets import Media
+from django.conf import settings
+settings.configure(USE_I18N=False, USE_L10N=False)
+
+class ColorPicker(forms.Widget):
+    class Media:
+        js = ['color-picker.js']
+
+class SimpleTextWidget(forms.Widget):
+    class Media:
+        js = ['text-editor.js']
+
+class FancyTextWidget(forms.Widget):
+    class Media:
+        js = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']
+
+class MyForm(forms.Form):
+    background_color = forms.CharField(widget=ColorPicker())
+    intro = forms.CharField(widget=SimpleTextWidget())
+    body = forms.CharField(widget=FancyTextWidget())
+
+# Test the form media
+form = MyForm()
+print("Form media:", form.media._js)
+
+# Test individual widget combinations
+w1 = ColorPicker()
+w2 = SimpleTextWidget()
+w3 = FancyTextWidget()
+
+# Test merging in different orders
+m1 = w1.media + w2.media
+print("\nColorPicker + SimpleTextWidget:", m1._js)
+
+m2 = w2.media + w3.media
+print("\nSimpleTextWidget + FancyTextWidget:", m2._js)
+
+m3 = w1.media + w2.media + w3.media
+print("\nAll three widgets:", m3._js)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..c3722afed2
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,48 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sites',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.admin.apps.SimpleAdminConfig',
+    'django.contrib.staticfiles',
+    'tests',
+]
+
+SECRET_KEY = 'dummy'
+
+USE_TZ = False
+USE_I18N = False
+USE_L10N = False
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
\ No newline at end of file
