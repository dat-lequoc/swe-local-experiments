diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py
index 574b4073b1..8890e158e2 100644
--- a/astropy/io/fits/fitsrec.py
+++ b/astropy/io/fits/fitsrec.py
@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):
 
         # Replace exponent separator in floating point numbers
         if 'D' in format:
-            output_field.replace(encode_ascii('E'), encode_ascii('D'))
+            output_field[:] = output_field.replace(encode_ascii('E'), encode_ascii('D'))
 
 
 def _get_recarray_field(array, key):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0177213f07
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,29 @@
+import numpy as np
+from astropy.io.fits import FITS_rec
+from astropy.io.fits.column import _AsciiColDefs, Column
+from astropy.io.fits.util import encode_ascii
+
+# Create a test column with D format
+coldefs = _AsciiColDefs([
+    Column(name='test', format='D15.7', array=np.array([1.23456789E-10]))
+])
+
+# Create a FITS_rec instance
+data = FITS_rec.from_columns(coldefs)
+
+# Get the raw field before scaling back
+raw_field = data.field(0)
+print("Original field:", raw_field)
+
+# Scale back to ASCII representation
+data._scale_back()
+
+# Get the raw field after scaling back
+raw_field = data.base.view(np.uint8).reshape(data.shape + (-1,))
+print("Converted field (raw bytes):", raw_field)
+print("Converted field (as string):", raw_field.tobytes().decode('ascii'))
+
+# Check if the field contains 'D' instead of 'E'
+field_str = raw_field.tobytes().decode('ascii')
+assert 'D' in field_str, "Field should contain 'D' as exponent separator"
+print("Test passed: Field contains 'D' as exponent separator")
\ No newline at end of file
