diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..32e7345382 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -939,9 +939,47 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True
 
     def _get_FIELD_display(self, field):
-        value = getattr(self, field.attname)
-        # force_str() to coerce lazy strings.
-        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
+        """
+        Get the display value for a field with choices.
+        """
+        method_name = 'get_%s_display' % field.name
+
+        # Check if we're already in a display method call to prevent recursion
+        if getattr(self, '_in_display_call', False):
+            # Default implementation when in recursive call
+            value = getattr(self, field.attname)
+            if value is None:
+                return str(None)
+            choices_dict = dict(field.flatchoices)
+            return force_str(choices_dict.get(value, value), strings_only=True)
+
+        try:
+            # Set the flag to prevent recursion
+            self._in_display_call = True
+
+            # Look for the method in the class hierarchy
+            for cls in self.__class__.__mro__:
+                method = cls.__dict__.get(method_name)
+                if method is not None and not getattr(method, '_is_default', False):
+                    # Found a non-default implementation
+                    if isinstance(method, partialmethod):
+                        return method.__get__(self, cls)()
+                    else:
+                        return method(self)
+
+            # If no custom implementation found, use default implementation
+            value = getattr(self, field.attname)
+            if value is None:
+                return str(None)
+            choices_dict = dict(field.flatchoices)
+            return force_str(choices_dict.get(value, value), strings_only=True)
+
+        finally:
+            # Always clean up the flag
+            self._in_display_call = False
+    
+    # Mark this method as the default implementation
+    _get_FIELD_display._is_default = True
 
     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
         if not self.pk:
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..b2f37719c5
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,86 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+# Test models
+class BaseModel(models.Model):
+    status = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])
+    
+    class Meta:
+        app_label = 'testapp'
+        abstract = True
+    
+    def get_status_display(self):
+        return "Custom Status"
+
+class DerivedModel(BaseModel):
+    pass
+
+class OverrideModel(models.Model):
+    state = models.CharField(max_length=10, choices=[('1', 'One'), ('2', 'Two')])
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def get_state_display(self):
+        return f"State: {self.state}"
+
+def test_edge_cases():
+    success = True
+    
+    # Test 1: Inheritance
+    try:
+        derived = DerivedModel(status='A')
+        if derived.get_status_display() == "Custom Status":
+            print("SUCCESS: Inheritance test passed")
+        else:
+            print("FAILURE: Inheritance test failed")
+            success = False
+    except Exception as e:
+        print(f"ERROR: Inheritance test failed with exception: {str(e)}")
+        success = False
+
+    # Test 2: None value
+    try:
+        model = OverrideModel()
+        display = model.get_state_display()
+        if display == "State: None":
+            print("SUCCESS: None value test passed")
+        else:
+            print("FAILURE: None value test failed")
+            success = False
+    except Exception as e:
+        print(f"ERROR: None value test failed with exception: {str(e)}")
+        success = False
+
+    # Test 3: Invalid choice
+    try:
+        model = OverrideModel(state='3')
+        display = model.get_state_display()
+        if display == "State: 3":
+            print("SUCCESS: Invalid choice test passed")
+        else:
+            print("FAILURE: Invalid choice test failed")
+            success = False
+    except Exception as e:
+        print(f"ERROR: Invalid choice test failed with exception: {str(e)}")
+        success = False
+
+    return success
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..35beb3fe19
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+# Test model
+class FooBar(models.Model):
+    foo_bar = models.CharField("foo", max_length=10, choices=[(1, 'foo'), (2, 'bar')])
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self._custom_display()
+    
+    def _custom_display(self):
+        return "something"
+    
+    def get_foo_bar_display(self):
+        return self._custom_display()
+
+# Run tests
+def test_get_display_override():
+    try:
+        # Create an instance
+        instance = FooBar(foo_bar=1)
+        
+        # Test the overridden method
+        display_value = str(instance)
+        expected = "something"
+        
+        if display_value == expected:
+            print("SUCCESS: get_foo_bar_display() override works correctly")
+            print(f"Expected: {expected}")
+            print(f"Got: {display_value}")
+            return True
+        else:
+            print("FAILURE: get_foo_bar_display() override not working")
+            print(f"Expected: {expected}")
+            print(f"Got: {display_value}")
+            return False
+            
+    except Exception as e:
+        print(f"ERROR: Test failed with exception: {str(e)}")
+        return False
+
+if __name__ == '__main__':
+    test_get_display_override()
\ No newline at end of file
