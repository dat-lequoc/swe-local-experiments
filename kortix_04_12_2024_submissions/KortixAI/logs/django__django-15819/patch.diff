diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f33bcbdccf..201464b63a 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -55,6 +55,7 @@ class Command(BaseCommand):
         connection = connections[options["database"]]
         # 'table_name_filter' is a stealth option
         table_name_filter = options.get("table_name_filter")
+        self.relation_counts = {}
 
         def table2model(table_name):
             return re.sub(r"[^a-zA-Z0-9]", "", table_name.title())
@@ -170,13 +171,22 @@ class Command(BaseCommand):
                             rel_type = "OneToOneField"
                         else:
                             rel_type = "ForeignKey"
-                            ref_pk_column = (
-                                connection.introspection.get_primary_key_column(
-                                    cursor, ref_db_table
-                                )
+                        
+                        # Track relations to handle related_name
+                        rel_key = (ref_db_table, table_name)
+                        self.relation_counts[rel_key] = self.relation_counts.get(rel_key, 0) + 1
+                        if self.relation_counts[rel_key] > 1:
+                            extra_params["related_name"] = "%s_%s_set" % (
+                                table2model(table_name).lower(),
+                                att_name,
                             )
-                            if ref_pk_column and ref_pk_column != ref_db_column:
-                                extra_params["to_field"] = ref_db_column
+                        ref_pk_column = (
+                            connection.introspection.get_primary_key_column(
+                                cursor, ref_db_table
+                            )
+                        )
+                        if ref_pk_column and ref_pk_column != ref_db_column:
+                            extra_params["to_field"] = ref_db_column
                         rel_to = (
                             "self"
                             if ref_db_table == table_name
@@ -383,4 +393,4 @@ class Command(BaseCommand):
         if unique_together:
             tup = "(" + ", ".join(unique_together) + ",)"
             meta += ["        unique_together = %s" % tup]
-        return meta
+        return meta
\ No newline at end of file
diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py
index 9bf3c432e5..ced82deb2e 100644
--- a/tests/inspectdb/tests.py
+++ b/tests/inspectdb/tests.py
@@ -71,6 +71,17 @@ class InspectDBTestCase(TestCase):
 
         return assertFieldType
 
+    def test_related_name_generation(self):
+        """
+        Test that inspectdb generates related_name for multiple foreign keys
+        to the same model.
+        """
+        out = StringIO()
+        call_command("inspectdb", "inspectdb_message", stdout=out)
+        output = out.getvalue()
+        # Check that related_name is added for the foreign key
+        self.assertIn("related_name='inspectdbmessage_from_field_set'", output)
+
     def test_field_types(self):
         """Test introspection of various Django field types"""
         assertFieldType = self.make_field_type_asserter()
@@ -614,4 +625,4 @@ class InspectDBTransactionalTests(TransactionTestCase):
             )
         finally:
             with connection.cursor() as cursor:
-                cursor.execute("DROP TABLE %s" % table_name)
+                cursor.execute("DROP TABLE %s" % table_name)
\ No newline at end of file
