diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py
index 8fe6e7a9c1..b6f0e8dad0 100644
--- a/lib/mpl_toolkits/mplot3d/art3d.py
+++ b/lib/mpl_toolkits/mplot3d/art3d.py
@@ -166,13 +166,35 @@ class Line3D(lines.Line2D):
         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.
         """
         super().__init__([], [], *args, **kwargs)
-        self._verts3d = xs, ys, zs
-
-    def set_3d_properties(self, zs=0, zdir='z'):
-        xs = self.get_xdata()
-        ys = self.get_ydata()
-        zs = np.broadcast_to(zs, len(xs))
-        self._verts3d = juggle_axes(xs, ys, zs, zdir)
+        self.set_3d_properties(xs, ys, zs)
+
+    def set_3d_properties(self, xs=None, ys=None, zs=None, zdir='z'):
+        if xs is None or ys is None:
+            xs = self.get_xdata()
+            ys = self.get_ydata()
+        if zs is None:
+            zs = 0
+            
+        def safe_convert(arr):
+            if isinstance(arr, (str, bytes)):
+                return 0
+            try:
+                return np.asarray(arr, dtype=float)
+            except (ValueError, TypeError):
+                if isinstance(arr, np.ndarray) and arr.dtype.kind in {'U', 'S'}:
+                    return np.zeros_like(arr, dtype=float)
+                return np.asarray(arr, dtype=float)
+                
+        xs = safe_convert(xs)
+        ys = safe_convert(ys)
+        zs = safe_convert(zs)
+        
+        zs = np.broadcast_to(zs, np.asarray(xs).shape)
+        
+        if zdir == 'z':
+            self._verts3d = xs, ys, zs
+        else:
+            self._verts3d = juggle_axes(xs, ys, zs, zdir)
         self.stale = True
 
     def set_data_3d(self, *args):
@@ -211,6 +233,10 @@ class Line3D(lines.Line2D):
 
     @artist.allow_rasterization
     def draw(self, renderer):
+        if not hasattr(self, '_verts3d') or self._verts3d is None:
+            # Reinitialize if state is lost
+            self.set_3d_properties()
+            
         xs3d, ys3d, zs3d = self._verts3d
         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)
         self.set_data(xs, ys)
@@ -929,4 +955,4 @@ def _zalpha(colors, zs):
     norm = Normalize(min(zs), max(zs))
     sats = 1 - norm(zs) * 0.7
     rgba = np.broadcast_to(mcolors.to_rgba_array(colors), (len(zs), 4))
-    return np.column_stack([rgba[:, :3], rgba[:, 3] * sats])
+    return np.column_stack([rgba[:, :3], rgba[:, 3] * sats])
\ No newline at end of file
