diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index 289e1afce..afd8585e8 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -24,14 +24,22 @@ def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> li
 
 
 def get_python_path(filepath: str) -> str:
-    """TODO This get the python path with the (bad) assumption that there is always
-    an __init__.py.
-
-    This is not true since python 3.3 and is causing problem.
+    """Get python path considering both file and directory cases.
+    
+    Handles cases where a directory contains a same-named .py file without requiring
+    an __init__.py file in such cases.
     """
     dirname = os.path.realpath(os.path.expanduser(filepath))
     if not os.path.isdir(dirname):
         dirname = os.path.dirname(dirname)
+    
+    # Check if the directory contains a same-named file
+    base = os.path.basename(dirname)
+    same_named_file = os.path.join(dirname, base + '.py')
+    
+    if os.path.isfile(same_named_file):
+        return os.path.dirname(dirname)
+        
     while True:
         if not os.path.exists(os.path.join(dirname, "__init__.py")):
             return dirname
@@ -159,4 +167,4 @@ def expand_modules(
                         "basename": modname,
                     }
                 )
-    return result, errors
+    return result, errors
\ No newline at end of file
diff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py
index 15f72d0c5..0d7beb10b 100644
--- a/tests/lint/unittest_expand_modules.py
+++ b/tests/lint/unittest_expand_modules.py
@@ -90,6 +90,28 @@ init_of_package = {
 class TestExpandModules(CheckerTestCase):
     """Test the expand_modules function while allowing options to be set."""
 
+    def create_file_structure(self, tmp_path):
+        """Create a temporary file structure for testing."""
+        module_dir = tmp_path / "a"
+        module_dir.mkdir()
+        (module_dir / "a.py").write_text("")
+        (module_dir / "b.py").write_text("")
+        return str(module_dir)
+
+    def test_same_named_module(self, tmp_path):
+        """Test that a directory with a same-named .py file works correctly."""
+        module_dir = self.create_file_structure(tmp_path)
+        ignore_list, ignore_list_re = [], []
+        modules, errors = expand_modules(
+            [module_dir],
+            ignore_list,
+            ignore_list_re,
+            self.linter.config.ignore_paths,
+        )
+        assert not errors
+        assert len(modules) > 0
+        assert any(m["name"].endswith(".a") for m in modules)
+
     class Checker(BaseChecker):
         """This dummy checker is needed to allow options to be set."""
 
@@ -154,4 +176,4 @@ class TestExpandModules(CheckerTestCase):
         )
         modules.sort(key=lambda d: d["name"])
         assert modules == expected
-        assert not errors
+        assert not errors
\ No newline at end of file
