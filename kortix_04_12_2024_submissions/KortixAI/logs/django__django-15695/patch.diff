diff --git a/django/db/migrations/operations/indexes.py b/django/db/migrations/operations/indexes.py
new file mode 100644
index 0000000000..a8d8570e49
--- /dev/null
+++ b/django/db/migrations/operations/indexes.py
@@ -0,0 +1,74 @@
+from django.db.migrations.operations.base import Operation
+from django.db.models import Index
+
+
+class RenameIndex(Operation):
+    reduces_to_sql = True
+    reversible = True
+
+    def __init__(self, model_name, old_name, new_name):
+        self.model_name = model_name
+        self.old_name = old_name
+        self.new_name = new_name
+
+    def state_forwards(self, app_label, state):
+        pass
+
+    def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if self.allow_migrate_model(schema_editor.connection.alias, model):
+            # Check if index exists before renaming
+            with schema_editor.connection.cursor() as cursor:
+                constraints = schema_editor.connection.introspection.get_constraints(
+                    cursor, model._meta.db_table
+                )
+                if self.old_name in constraints:
+                    old_constraint = constraints[self.old_name]
+                    # Only rename if target doesn't exist or is different
+                    if self.new_name not in constraints or constraints[self.new_name] != old_constraint:
+                        if self.new_name in constraints:
+                            schema_editor.execute(schema_editor._delete_index_sql(model, self.new_name))
+                        schema_editor.rename_index(model, self.old_name, self.new_name)
+                elif self.new_name in constraints:
+                    # If old name doesn't exist but new name does, we're likely re-running
+                    # a previously completed migration - no action needed
+                    pass
+
+    def database_backwards(self, app_label, schema_editor, from_state, to_state):
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if self.allow_migrate_model(schema_editor.connection.alias, model):
+            # Check if index exists before renaming
+            with schema_editor.connection.cursor() as cursor:
+                constraints = schema_editor.connection.introspection.get_constraints(
+                    cursor, model._meta.db_table
+                )
+                if self.new_name in constraints:
+                    new_constraint = constraints[self.new_name]
+                    # Only rename if target doesn't exist or is different
+                    if self.old_name not in constraints or constraints[self.old_name] != new_constraint:
+                        if self.old_name in constraints:
+                            schema_editor.execute(schema_editor._delete_index_sql(model, self.old_name))
+                        schema_editor.rename_index(model, self.new_name, self.old_name)
+                elif self.old_name in constraints:
+                    # If new name doesn't exist but old name does, we're likely re-running
+                    # a previously completed backward migration - no action needed
+                    pass
+
+    def describe(self):
+        return "Rename index %s on %s to %s" % (
+            self.old_name,
+            self.model_name,
+            self.new_name,
+        )
+
+    def deconstruct(self):
+        kwargs = {
+            "model_name": self.model_name,
+            "old_name": self.old_name,
+            "new_name": self.new_name,
+        }
+        return (self.__class__.__name__, [], kwargs)
+
+    @property
+    def migration_name_fragment(self):
+        return "%s_rename_%s" % (self.old_name, self.new_name)
\ No newline at end of file
