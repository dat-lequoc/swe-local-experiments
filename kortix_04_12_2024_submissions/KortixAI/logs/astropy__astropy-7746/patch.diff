diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index d3a06f2b31..44391b1c6e 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1212,6 +1212,11 @@ reduce these to 2 dimensions using the naxis kwarg.
         """
 
         def _return_list_of_arrays(axes, origin):
+            # Handle empty arrays
+            if any(x.size == 0 for x in axes):
+                # Return empty arrays with correct shape
+                return [np.array([], dtype=np.float64) for _ in range(self.naxis)]
+
             try:
                 axes = np.broadcast_arrays(*axes)
             except ValueError:
@@ -1222,7 +1227,7 @@ reduce these to 2 dimensions using the naxis kwarg.
 
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
-            output = func(xy, origin)
+            output = func(xy, origin) if xy.size > 0 else np.zeros((0, self.naxis), dtype=np.float64)
             if ra_dec_order and sky == 'output':
                 output = self._normalize_sky(output)
                 return (output[:, 0].reshape(axes[0].shape),
@@ -1231,13 +1236,17 @@ reduce these to 2 dimensions using the naxis kwarg.
                     for i in range(output.shape[1])]
 
         def _return_single_array(xy, origin):
+            # Handle empty arrays
+            if xy.size == 0:
+                return np.zeros((0, self.naxis), dtype=np.float64)
+
             if xy.shape[-1] != self.naxis:
                 raise ValueError(
                     "When providing two arguments, the array must be "
                     "of shape (N, {0})".format(self.naxis))
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
-            result = func(xy, origin)
+            result = func(xy, origin) if xy.size > 0 else np.zeros((0, self.naxis), dtype=np.float64)
             if ra_dec_order and sky == 'output':
                 result = self._normalize_sky(result)
             return result
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..4e63342f1c
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,52 @@
+from astropy.wcs import WCS
+import numpy as np
+
+def test_edge_cases():
+    wcs = WCS(naxis=2)
+    wcs.wcs.crpix = [1, 1]
+    wcs.wcs.cdelt = [1, 1]
+    wcs.wcs.crval = [1, 1]
+    wcs.wcs.ctype = ["RA---TAN", "DEC--TAN"]
+
+    # Test empty lists
+    result = wcs.wcs_pix2world([], [], 0)
+    print("Empty lists result:", result)
+    assert len(result) == 2
+    assert all(isinstance(x, np.ndarray) for x in result)
+    assert all(x.size == 0 for x in result)
+
+    # Test empty array
+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 0)
+    print("Empty array result:", result)
+    assert isinstance(result, np.ndarray)
+    assert result.shape == (0, 2)
+
+    # Test empty array with different origin
+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 1)
+    print("Empty array result with origin=1:", result)
+    assert isinstance(result, np.ndarray)
+    assert result.shape == (0, 2)
+
+    # Test empty lists with world2pix
+    result = wcs.wcs_world2pix([], [], 0)
+    print("Empty lists world2pix result:", result)
+    assert len(result) == 2
+    assert all(isinstance(x, np.ndarray) for x in result)
+    assert all(x.size == 0 for x in result)
+
+    # Test empty array with world2pix
+    result = wcs.wcs_world2pix(np.array([]).reshape(0, 2), 0)
+    print("Empty array world2pix result:", result)
+    assert isinstance(result, np.ndarray)
+    assert result.shape == (0, 2)
+
+    # Test empty array with all_pix2world
+    result = wcs.all_pix2world(np.array([]).reshape(0, 2), 0)
+    print("Empty array all_pix2world result:", result)
+    assert isinstance(result, np.ndarray)
+    assert result.shape == (0, 2)
+
+    print("All edge cases passed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8a29377fe5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,27 @@
+from astropy.wcs import WCS
+import numpy as np
+
+def test_empty_arrays():
+    wcs = WCS(naxis=2)
+    wcs.wcs.crpix = [1, 1]
+    wcs.wcs.cdelt = [1, 1]
+    wcs.wcs.crval = [1, 1]
+    wcs.wcs.ctype = ["RA---TAN", "DEC--TAN"]
+
+    # Test empty lists
+    result = wcs.wcs_pix2world([], [], 0)
+    print("Empty lists result:", result)
+    assert len(result) == 2
+    assert all(isinstance(x, np.ndarray) for x in result)
+    assert all(x.size == 0 for x in result)
+
+    # Test empty array
+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 0)
+    print("Empty array result:", result)
+    assert isinstance(result, np.ndarray)
+    assert result.shape == (0, 2)
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_empty_arrays()
\ No newline at end of file
