diff --git a/xarray/core/concat.py b/xarray/core/concat.py
index ecae2566..30f099e1 100644
--- a/xarray/core/concat.py
+++ b/xarray/core/concat.py
@@ -16,6 +16,7 @@ def concat(
     positions=None,
     fill_value=dtypes.NA,
     join="outer",
+    variables_join="strict",
 ):
     """Concatenate xarray objects along a new or existing dimension.
 
@@ -80,6 +81,11 @@ def concat(
     join : {'outer', 'inner', 'left', 'right', 'exact'}, optional
         String indicating how to combine differing indexes
         (excluding dim) in objects
+    variables_join : {'strict', 'outer', 'inner'}, optional
+        String indicating how to handle variables that are not present in all datasets:
+        - 'strict' : raise ValueError if variables are missing in any datasets (default)
+        - 'outer' : include all variables, filling in missing values with NaN
+        - 'inner' : only include variables present in all datasets
 
         - 'outer': use the union of object indexes
         - 'inner': use the intersection of object indexes
@@ -128,7 +134,7 @@ def concat(
             "can only concatenate xarray Dataset and DataArray "
             "objects, got %s" % type(first_obj)
         )
-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, variables_join)
 
 
 def _calc_concat_dim_coord(dim):
@@ -269,6 +275,7 @@ def _dataset_concat(
     positions,
     fill_value=dtypes.NA,
     join="outer",
+    variables_join="strict",
 ):
     """
     Concatenate a sequence of datasets along a new or existing dimension
@@ -313,11 +320,14 @@ def _dataset_concat(
 
         for ds in datasets:
             absent_merge_vars = variables_to_merge - set(ds.variables)
-            if absent_merge_vars:
+            if variables_join == "strict" and absent_merge_vars:
                 raise ValueError(
                     "variables %r are present in some datasets but not others. "
                     % absent_merge_vars
                 )
+            elif variables_join == "inner" and absent_merge_vars:
+                # Remove variables not present in all datasets
+                variables_to_merge = variables_to_merge - absent_merge_vars
 
             for var in variables_to_merge:
                 to_merge[var].append(ds.variables[var])
@@ -394,6 +404,7 @@ def _dataarray_concat(
     positions,
     fill_value=dtypes.NA,
     join="outer",
+    variables_join="strict",
 ):
     arrays = list(arrays)
 
@@ -422,5 +433,6 @@ def _dataarray_concat(
         positions,
         fill_value=fill_value,
         join=join,
+        variables_join=variables_join,
     )
-    return arrays[0]._from_temp_dataset(ds, name)
+    return arrays[0]._from_temp_dataset(ds, name)
\ No newline at end of file
diff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py
index c7af0fc9..e280aa7e 100644
--- a/xarray/tests/test_concat.py
+++ b/xarray/tests/test_concat.py
@@ -166,6 +166,48 @@ class TestConcatDataset:
         )
         assert_identical(expected, actual)
 
+    def test_concat_variables_join(self):
+        ds1 = Dataset(
+            {
+                "a": ("x", [1, 2]),
+                "b": ("x", [3, 4])
+            },
+            coords={"x": [0, 1]}
+        )
+        ds2 = Dataset(
+            {
+                "a": ("x", [5, 6]),
+                "c": ("x", [7, 8])
+            },
+            coords={"x": [2, 3]}
+        )
+        
+        # Test strict mode (default)
+        with pytest.raises(ValueError):
+            concat([ds1, ds2], dim="x")
+            
+        # Test outer join
+        expected_outer = Dataset(
+            {
+                "a": ("x", [1, 2, 5, 6]),
+                "b": ("x", [3, 4, np.nan, np.nan]),
+                "c": ("x", [np.nan, np.nan, 7, 8])
+            },
+            coords={"x": [0, 1, 2, 3]}
+        )
+        actual_outer = concat([ds1, ds2], dim="x", variables_join="outer")
+        assert_identical(expected_outer, actual_outer)
+        
+        # Test inner join
+        expected_inner = Dataset(
+            {
+                "a": ("x", [1, 2, 5, 6])
+            },
+            coords={"x": [0, 1, 2, 3]}
+        )
+        actual_inner = concat([ds1, ds2], dim="x", variables_join="inner")
+        assert_identical(expected_inner, actual_inner)
+
     def test_concat_errors(self):
         data = create_test_data()
         split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]
@@ -450,4 +492,4 @@ class TestConcatDataArray:
 
         for join in expected:
             actual = concat([ds1, ds2], join=join, dim="x")
-            assert_equal(actual, expected[join].to_array())
+            assert_equal(actual, expected[join].to_array())
\ No newline at end of file
