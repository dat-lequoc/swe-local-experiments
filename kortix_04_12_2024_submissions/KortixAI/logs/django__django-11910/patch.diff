diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index 402dae2829..64109434d6 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -343,15 +343,25 @@ class RenameField(FieldOperation):
                     remote_model_tuple = self._get_model_tuple(
                         remote_field.model, model_app_label, model_name
                     )
+                    # Update field_name and to_fields if this foreign key points to the renamed field
                     if remote_model_tuple == model_tuple:
+                        # Update field_name if it matches the old name
                         if getattr(remote_field, 'field_name', None) == self.old_name:
                             remote_field.field_name = self.new_name
-                        to_fields = getattr(field, 'to_fields', None)
-                        if to_fields:
-                            field.to_fields = tuple([
-                                self.new_name if to_field_name == self.old_name else to_field_name
-                                for to_field_name in to_fields
-                            ])
+                        # Update to_fields if they reference the old name
+                        if hasattr(field, 'to_fields'):
+                            if hasattr(field, 'to_fields') and field.to_fields is not None:
+                                # Always convert to tuple after updating field name
+                                if isinstance(field.to_fields, (list, tuple)):
+                                    field.to_fields = tuple(
+                                        self.new_name if f == self.old_name else f
+                                        for f in field.to_fields
+                                    )
+                                else:
+                                    field.to_fields = (self.new_name if field.to_fields == self.old_name else field.to_fields,)
+                                # Ensure it's always a tuple
+                                if not isinstance(field.to_fields, tuple):
+                                    field.to_fields = tuple(field.to_fields) if isinstance(field.to_fields, (list, set)) else (field.to_fields,)
         state.reload_model(app_label, self.model_name_lower, delay=delay)
 
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
diff --git a/pytest.ini b/pytest.ini
new file mode 100644
index 0000000000..433cc09f71
--- /dev/null
+++ b/pytest.ini
@@ -0,0 +1,3 @@
+[pytest]
+DJANGO_SETTINGS_MODULE = django.conf.global_settings
+python_files = test_*.py
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cc1ed87a99
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,78 @@
+import os
+import django
+from django.test import TestCase
+from django.db import migrations, models
+from django.apps import apps
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+def debug_field_types():
+    # Create initial state
+    project_state = migrations.state.ProjectState()
+    
+    # Add ModelA with a primary key field that will be renamed
+    project_state.add_model(migrations.state.ModelState(
+        "app1",
+        "ModelA",
+        [
+            ("field_wrong", models.CharField(max_length=50, primary_key=True)),
+        ],
+        options={},
+    ))
+    
+    # Add ModelB with a foreign key to ModelA's field_wrong
+    project_state.add_model(migrations.state.ModelState(
+        "app1",
+        "ModelB",
+        [
+            ("id", models.AutoField(primary_key=True)),
+            ("field_fk", models.ForeignKey("app1.ModelA", models.CASCADE, to_field="field_wrong")),
+        ],
+        options={},
+    ))
+    
+    # Create the rename operation
+    operation = migrations.RenameField("ModelA", "field_wrong", "field_fixed")
+    
+    # Apply the operation
+    new_state = project_state.clone()
+    
+    # Debug the model state cloning process
+    print("Initial state:")
+    ModelB = project_state.apps.get_model("app1", "ModelB")
+    field_fk = ModelB._meta.get_field("field_fk")
+    print(f"Original to_fields type: {type(field_fk.to_fields)}")
+    print(f"Original to_fields value: {field_fk.to_fields}")
+    
+    # Clone the state
+    new_state = project_state.clone()
+    print("\nAfter cloning:")
+    ModelB = new_state.apps.get_model("app1", "ModelB")
+    field_fk = ModelB._meta.get_field("field_fk")
+    print(f"Cloned to_fields type: {type(field_fk.to_fields)}")
+    print(f"Cloned to_fields value: {field_fk.to_fields}")
+    
+    # Apply the operation
+    operation.state_forwards("app1", new_state)
+    print("\nAfter state_forwards:")
+    ModelB = new_state.apps.get_model("app1", "ModelB")
+    field_fk = ModelB._meta.get_field("field_fk")
+    print(f"Updated to_fields type: {type(field_fk.to_fields)}")
+    print(f"Updated to_fields value: {field_fk.to_fields}")
+    
+    # Try to modify the field directly
+    field_fk.to_fields = tuple(field_fk.to_fields)
+    print("\nAfter direct modification:")
+    print(f"Modified to_fields type: {type(field_fk.to_fields)}")
+    print(f"Modified to_fields value: {field_fk.to_fields}")
+    
+    # Get a fresh instance of the model
+    ModelB = new_state.apps.get_model("app1", "ModelB")
+    field_fk = ModelB._meta.get_field("field_fk")
+    print("\nAfter getting fresh model:")
+    print(f"Fresh to_fields type: {type(field_fk.to_fields)}")
+    print(f"Fresh to_fields value: {field_fk.to_fields}")
+
+if __name__ == "__main__":
+    debug_field_types()
\ No newline at end of file
diff --git a/test_rename_pk.py b/test_rename_pk.py
new file mode 100644
index 0000000000..9bf3b6785a
--- /dev/null
+++ b/test_rename_pk.py
@@ -0,0 +1,51 @@
+from django.test import TestCase
+from django.db import migrations, models
+from django.apps import apps
+
+class TestRenamePKWithFK(TestCase):
+    def test_rename_pk_with_fk(self):
+        # Create initial state
+        project_state = migrations.state.ProjectState()
+        
+        # Add ModelA with a primary key field that will be renamed
+        project_state.add_model(migrations.state.ModelState(
+            "app1",
+            "ModelA",
+            [
+                ("field_wrong", models.CharField(max_length=50, primary_key=True)),
+            ],
+            options={},
+        ))
+        
+        # Add ModelB with a foreign key to ModelA's field_wrong
+        project_state.add_model(migrations.state.ModelState(
+            "app1",
+            "ModelB",
+            [
+                ("id", models.AutoField(primary_key=True)),
+                ("field_fk", models.ForeignKey("app1.ModelA", models.CASCADE, to_field="field_wrong")),
+            ],
+            options={},
+        ))
+        
+        # Create the rename operation
+        operation = migrations.RenameField("ModelA", "field_wrong", "field_fixed")
+        
+        # Apply the operation
+        new_state = project_state.clone()
+        operation.state_forwards("app1", new_state)
+        
+        # Get the models from the new state
+        ModelA = new_state.apps.get_model("app1", "ModelA")
+        ModelB = new_state.apps.get_model("app1", "ModelB")
+        
+        # Check if the field was renamed in ModelA
+        self.assertTrue(hasattr(ModelA._meta, "get_field"))
+        self.assertIsNotNone(ModelA._meta.get_field("field_fixed"))
+        with self.assertRaises(Exception):
+            ModelA._meta.get_field("field_wrong")
+        
+        # Check if the foreign key in ModelB points to the new field name
+        field_fk = ModelB._meta.get_field("field_fk")
+        self.assertEqual(field_fk.to_fields, ("field_fixed",), 
+                        f"Foreign key should point to field_fixed, got {field_fk.to_fields}")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..3ab380a727
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
