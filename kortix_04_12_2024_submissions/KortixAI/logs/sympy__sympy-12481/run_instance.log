2024-12-03 12:01:40,387 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-12481
Building instance image sweb.eval.x86_64.sympy__sympy-12481:latest for sympy__sympy-12481
2024-12-03 12:02:09,350 - INFO - Creating container for sympy__sympy-12481...
2024-12-03 12:02:09,554 - INFO - Container for sympy__sympy-12481 created: 71b384191bc931ceb16cadb850d7e8d880a37cbfb229f1f6129aa52edcb03631
2024-12-03 12:02:10,151 - INFO - Container for sympy__sympy-12481 started: 71b384191bc931ceb16cadb850d7e8d880a37cbfb229f1f6129aa52edcb03631
2024-12-03 12:02:10,151 - INFO - Intermediate patch for sympy__sympy-12481 written to logs/run_evaluation/KortixAI/KortixAI/sympy__sympy-12481/patch.diff, now applying to container...
2024-12-03 12:02:10,638 - INFO - Failed to apply patch to container, trying again...
2024-12-03 12:02:10,785 - INFO - >>>>> Applied Patch:
patching file sympy/combinatorics/permutations.py
patching file sympy/combinatorics/tests/test_permutations.py

2024-12-03 12:02:11,550 - INFO - Git diff before:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..865c738a66 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,13 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        if is_cycle:
+            # Check for duplicates within individual cycles
+            for cycle in args:
+                if has_dups(cycle):
+                    raise ValueError('Elements within a cycle must be unique.')
         temp = set(temp)
 
         if not is_cycle and \
@@ -2832,4 +2833,4 @@ def _merge(arr, temp, left, mid, right):
     return inv_count
 
 Perm = Permutation
-_af_new = Perm._af_new
+_af_new = Perm._af_new
\ No newline at end of file
diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py
index 7f8cd572e7..ddf0f4c71d 100644
--- a/sympy/combinatorics/tests/test_permutations.py
+++ b/sympy/combinatorics/tests/test_permutations.py
@@ -11,6 +11,11 @@
 
 
 def test_Permutation():
+    # Test non-disjoint cycles
+    assert Permutation([[0,1], [0,1]]).is_Identity
+    assert Permutation([[0,1], [1,2], [0,1]]) == Permutation([2,0,1])
+    assert Permutation([[0,1,2], [1,2]]) == Permutation([1,0,2])
+    
     # don't auto fill 0
     raises(ValueError, lambda: Permutation([1]))
     p = Permutation([0, 1, 2, 3])
@@ -418,4 +423,4 @@ def test_printing_non_cyclic():
     assert repr(p3) == 'Permutation([0, 2, 1])'
     assert str(p3) == 'Permutation([0, 2, 1])'
     p4 = Permutation([0, 1, 3, 2, 4, 5, 6, 7])
-    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'
+    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'
\ No newline at end of file
2024-12-03 12:02:11,550 - INFO - Eval script for sympy__sympy-12481 written to logs/run_evaluation/KortixAI/KortixAI/sympy__sympy-12481/eval.sh; copying to container...
2024-12-03 12:02:17,420 - INFO - Test runtime: 5.43 seconds
2024-12-03 12:02:17,420 - INFO - Test output for sympy__sympy-12481 written to logs/run_evaluation/KortixAI/KortixAI/sympy__sympy-12481/test_output.txt
2024-12-03 12:02:17,571 - INFO - Git diff after:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..865c738a66 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,13 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        if is_cycle:
+            # Check for duplicates within individual cycles
+            for cycle in args:
+                if has_dups(cycle):
+                    raise ValueError('Elements within a cycle must be unique.')
         temp = set(temp)
 
         if not is_cycle and \
@@ -2832,4 +2833,4 @@ def _merge(arr, temp, left, mid, right):
     return inv_count
 
 Perm = Permutation
-_af_new = Perm._af_new
+_af_new = Perm._af_new
\ No newline at end of file
2024-12-03 12:02:17,571 - INFO - Git diff changed after running eval script
2024-12-03 12:02:17,571 - INFO - Grading answer for sympy__sympy-12481...
2024-12-03 12:02:17,574 - INFO - report: {'sympy__sympy-12481': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_args'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_Permutation', 'test_josephus', 'test_ranking', 'test_mul', 'test_Cycle', 'test_from_sequence', 'test_printing_cyclic'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-12481: resolved: True
2024-12-03 12:02:17,576 - INFO - Attempting to stop container sweb.eval.sympy__sympy-12481.KortixAI...
2024-12-03 12:02:33,591 - INFO - Attempting to remove container sweb.eval.sympy__sympy-12481.KortixAI...
2024-12-03 12:02:33,732 - INFO - Container sweb.eval.sympy__sympy-12481.KortixAI removed.
