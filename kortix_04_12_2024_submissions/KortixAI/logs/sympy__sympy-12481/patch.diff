diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..865c738a66 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,13 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        if is_cycle:
+            # Check for duplicates within individual cycles
+            for cycle in args:
+                if has_dups(cycle):
+                    raise ValueError('Elements within a cycle must be unique.')
         temp = set(temp)
 
         if not is_cycle and \
@@ -2832,4 +2833,4 @@ def _merge(arr, temp, left, mid, right):
     return inv_count
 
 Perm = Permutation
-_af_new = Perm._af_new
+_af_new = Perm._af_new
\ No newline at end of file
diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py
index 7f8cd572e7..ddf0f4c71d 100644
--- a/sympy/combinatorics/tests/test_permutations.py
+++ b/sympy/combinatorics/tests/test_permutations.py
@@ -11,6 +11,11 @@
 
 
 def test_Permutation():
+    # Test non-disjoint cycles
+    assert Permutation([[0,1], [0,1]]).is_Identity
+    assert Permutation([[0,1], [1,2], [0,1]]) == Permutation([2,0,1])
+    assert Permutation([[0,1,2], [1,2]]) == Permutation([1,0,2])
+    
     # don't auto fill 0
     raises(ValueError, lambda: Permutation([1]))
     p = Permutation([0, 1, 2, 3])
@@ -418,4 +423,4 @@ def test_printing_non_cyclic():
     assert repr(p3) == 'Permutation([0, 2, 1])'
     assert str(p3) == 'Permutation([0, 2, 1])'
     p4 = Permutation([0, 1, 3, 2, 4, 5, 6, 7])
-    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'
+    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'
\ No newline at end of file
