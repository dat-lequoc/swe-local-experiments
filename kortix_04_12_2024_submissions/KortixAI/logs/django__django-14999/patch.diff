diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..e9c2c784ae 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -316,10 +316,33 @@ class RenameModel(ModelOperation):
     def state_forwards(self, app_label, state):
         state.rename_model(app_label, self.old_name, self.new_name)
 
+    def _get_effective_db_table(self, model):
+        """Get the actual db_table, accounting for inheritance."""
+        meta = model._meta
+        if meta.proxy:
+            return None
+        return meta.db_table
+
+    def _should_skip_rename(self, old_model, new_model):
+        """
+        Determine if the rename operation should be skipped.
+        """
+        old_table = self._get_effective_db_table(old_model)
+        new_table = self._get_effective_db_table(new_model)
+        
+        return (old_table and new_table and 
+                old_table == new_table and
+                not old_model._meta.proxy)
+
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            
+            # Skip if both models use the same explicit db_table
+            if self._should_skip_rename(old_model, new_model):
+                return
+                
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
@@ -881,4 +904,4 @@ class RemoveConstraint(IndexOperation):
 
     @property
     def migration_name_fragment(self):
-        return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())
+        return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())
\ No newline at end of file
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 11961a1f40..4773dabeff 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -597,6 +597,44 @@ class OperationTests(OperationTestBase):
         self.assertTableExists('test_dlmtimo_shetlandpony')
         self.assertColumnExists('test_dlmtimo_shetlandpony', 'pony_ptr_id')
 
+    def test_rename_model_with_db_table(self):
+        """
+        Tests the RenameModel operation with explicitly set db_table.
+        """
+        # Set up test model with explicit db_table
+        operation = migrations.CreateModel(
+            "Pony",
+            [
+                ("id", models.AutoField(primary_key=True)),
+                ("pink", models.IntegerField(default=1)),
+            ],
+            options={"db_table": "custom_table"},
+        )
+        project_state = ProjectState()
+        new_state = project_state.clone()
+        operation.state_forwards("test_rnmwdbt", new_state)
+        
+        # Create initial model
+        with connection.schema_editor() as editor:
+            operation.database_forwards("test_rnmwdbt", editor, project_state, new_state)
+        
+        # Test the rename operation
+        operation = migrations.RenameModel("Pony", "Horse")
+        newer_state = new_state.clone()
+        operation.state_forwards("test_rnmwdbt", newer_state)
+        
+        with connection.schema_editor() as editor:
+            # Track queries to verify no unnecessary operations
+            with CaptureQueriesContext(connection) as queries:
+                operation.database_forwards("test_rnmwdbt", editor, new_state, newer_state)
+                
+            # Should have no table modification queries
+            self.assertEqual(len(queries), 0)
+        
+        # Verify model state is updated correctly
+        self.assertNotIn(("test_rnmwdbt", "pony"), newer_state.models)
+        self.assertIn(("test_rnmwdbt", "horse"), newer_state.models)
+
     def test_rename_model(self):
         """
         Tests the RenameModel operation.
@@ -3820,4 +3858,4 @@ class FieldOperationTests(SimpleTestCase):
         self.assertIs(operation.references_field('Other', 'whatever', 'migrations'), True)
         self.assertIs(operation.references_field('Through', 'whatever', 'migrations'), False)
         self.assertIs(operation.references_field('Through', 'first', 'migrations'), True)
-        self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)
+        self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)
\ No newline at end of file
