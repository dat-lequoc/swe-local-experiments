+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/backends/backend_ps.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 269c0b94b4fcf8b1135011c1556eac29dc09de15
Merge: 0636b9eeec 23d9b03861
Author: Thomas A Caswell <tcaswell@gmail.com>
Date:   Fri Sep 23 02:45:08 2022 -0400

    Merge pull request #23978 from StefRe/DOC/no-capture
    
    DOC: Suppress IPython output in examples and tutorials where not needed

+ git diff 269c0b94b4fcf8b1135011c1556eac29dc09de15
diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py
index f209e811f1..90307f40fb 100644
--- a/lib/matplotlib/backends/backend_ps.py
+++ b/lib/matplotlib/backends/backend_ps.py
@@ -645,9 +645,10 @@ grestore
                 thisx += kern * scale
                 xs_names.append((thisx, name))
                 thisx += width * scale
-            ps_name = (font.postscript_name
-                       .encode("ascii", "replace").decode("ascii"))
-            stream.append((ps_name, xs_names))
+            if xs_names:  # Only append if there are characters to render
+                ps_name = (font.postscript_name
+                           .encode("ascii", "replace").decode("ascii"))
+                stream.append((ps_name, xs_names))
 
         else:
             font = self._get_font_ttf(prop)
@@ -665,8 +666,8 @@ grestore
                 curr_stream[1].append(
                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))
                 )
-            # append the last entry
-            stream.append(curr_stream)
+            # append the last entry only if it contains characters
+            if curr_stream and curr_stream[1]:
 
         self.set_color(*gc.get_rgb())
 
@@ -1363,4 +1364,4 @@ psDefs = [
 
 @_Backend.export
 class _BackendPS(_Backend):
-    FigureCanvas = FigureCanvasPS
+    FigureCanvas = FigureCanvasPS
\ No newline at end of file
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (10.0.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (2.8.2)
Requirement already satisfied: setuptools_scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=7->matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=7->matplotlib==3.7.0.dev235+g269c0b94b4.d20241203) (4.7.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.7.0.dev235+g269c0b94b4
    Uninstalling matplotlib-3.7.0.dev235+g269c0b94b4:
      Successfully uninstalled matplotlib-3.7.0.dev235+g269c0b94b4
  DEPRECATION: Legacy editable install of matplotlib==3.7.0.dev235+g269c0b94b4.d20241203 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for matplotlib
Successfully installed matplotlib-3.7.0.dev235+g269c0b94b4.d20241203
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 269c0b94b4fcf8b1135011c1556eac29dc09de15 lib/matplotlib/tests/test_backend_ps.py
Updated 0 paths from 248630441c
+ git apply -v -
Checking patch lib/matplotlib/tests/test_backend_ps.py...
Applied patch lib/matplotlib/tests/test_backend_ps.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_backend_ps.py
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: timeout-2.3.1, cov-6.0.0, xdist-3.6.1, rerunfailures-15.0
collected 36 items

lib/matplotlib/tests/test_backend_ps.py RRRFRRRFRRRFRRRFRRRFRRRFRRRFRRRF [ 22%]
RRRFRRRFRRRFRRRFRRRFRRRFFsssFssssssFssFFFFFsss                           [100%]

=================================== FAILURES ===================================
____________________ test_savefig_to_stringio[ps-portrait] _____________________

format = 'ps', use_log = False, rcParams = {}, orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
____________________ test_savefig_to_stringio[ps-landscape] ____________________

format = 'ps', use_log = False, rcParams = {}, orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_______ test_savefig_to_stringio[ps with distiller=ghostscript-portrait] _______

format = 'ps', use_log = False, rcParams = {'ps.usedistiller': 'ghostscript'}
orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
______ test_savefig_to_stringio[ps with distiller=ghostscript-landscape] _______

format = 'ps', use_log = False, rcParams = {'ps.usedistiller': 'ghostscript'}
orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
__________ test_savefig_to_stringio[ps with distiller=xpdf-portrait] ___________

format = 'ps', use_log = False, rcParams = {'ps.usedistiller': 'xpdf'}
orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
__________ test_savefig_to_stringio[ps with distiller=xpdf-landscape] __________

format = 'ps', use_log = False, rcParams = {'ps.usedistiller': 'xpdf'}
orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
______________ test_savefig_to_stringio[ps with usetex-portrait] _______________

format = 'ps', use_log = False, rcParams = {'text.usetex': True}
orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
______________ test_savefig_to_stringio[ps with usetex-landscape] ______________

format = 'ps', use_log = False, rcParams = {'text.usetex': True}
orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
____________________ test_savefig_to_stringio[eps-portrait] ____________________

format = 'eps', use_log = False, rcParams = {}, orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
___________________ test_savefig_to_stringio[eps-landscape] ____________________

format = 'eps', use_log = False, rcParams = {}, orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
__________________ test_savefig_to_stringio[eps afm-portrait] __________________

format = 'eps', use_log = True, rcParams = {'ps.useafm': True}
orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_________________ test_savefig_to_stringio[eps afm-landscape] __________________

format = 'eps', use_log = True, rcParams = {'ps.useafm': True}
orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
______________ test_savefig_to_stringio[eps with usetex-portrait] ______________

format = 'eps', use_log = False, rcParams = {'text.usetex': True}
orientation = 'portrait'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_____________ test_savefig_to_stringio[eps with usetex-landscape] ______________

format = 'eps', use_log = False, rcParams = {'text.usetex': True}
orientation = 'landscape'

    @pytest.mark.flaky(reruns=3)
    @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
    @pytest.mark.parametrize('format, use_log, rcParams', [
        ('ps', False, {}),
        ('ps', False, {'ps.usedistiller': 'ghostscript'}),
        ('ps', False, {'ps.usedistiller': 'xpdf'}),
        ('ps', False, {'text.usetex': True}),
        ('eps', False, {}),
        ('eps', True, {'ps.useafm': True}),
        ('eps', False, {'text.usetex': True}),
    ], ids=[
        'ps',
        'ps with distiller=ghostscript',
        'ps with distiller=xpdf',
        'ps with usetex',
        'eps',
        'eps afm',
        'eps with usetex'
    ])
    def test_savefig_to_stringio(format, use_log, rcParams, orientation):
        mpl.rcParams.update(rcParams)
    
        fig, ax = plt.subplots()
    
        with io.StringIO() as s_buf, io.BytesIO() as b_buf:
    
            if use_log:
                ax.set_yscale('log')
    
            ax.plot([1, 2], [1, 2])
            title = "Déjà vu"
            if not mpl.rcParams["text.usetex"]:
                title += " \N{MINUS SIGN}\N{EURO SIGN}"
            ax.set_title(title)
            allowable_exceptions = []
            if rcParams.get("ps.usedistiller"):
                allowable_exceptions.append(mpl.ExecutableNotFoundError)
            if rcParams.get("text.usetex"):
                allowable_exceptions.append(RuntimeError)
            if rcParams.get("ps.useafm"):
                allowable_exceptions.append(MatplotlibDeprecationWarning)
            try:
>               fig.savefig(s_buf, format=format, orientation=orientation)

lib/matplotlib/tests/test_backend_ps.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_______________________________ test_patheffects _______________________________

    def test_patheffects():
        mpl.rcParams['path.effects'] = [
            patheffects.withStroke(linewidth=4, foreground='w')]
        fig, ax = plt.subplots()
        ax.plot([1, 2, 3])
        with io.BytesIO() as ps:
>           fig.savefig(ps, format='ps')

lib/matplotlib/tests/test_backend_ps.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
__________________________________ test_bbox ___________________________________

    def test_bbox():
        fig, ax = plt.subplots()
        with io.BytesIO() as buf:
>           fig.savefig(buf, format='eps')

lib/matplotlib/tests/test_backend_ps.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_____________________________ test_text_clip[eps] ______________________________

ext = 'eps', request = <FixtureRequest for <Function test_text_clip[eps]>>
args = (), kwargs = {}, file_name = 'test_text_clip[eps]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_backend_ps/test_text_clip[eps].eps')
ref_image_path = PosixPath('/testbed/result_images/test_backend_ps/test_text_clip[eps]-expected.eps')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_______________________________ test_fonttype[3] _______________________________

fonttype = '3'

    @pytest.mark.parametrize('fonttype', ["3", "42"])
    def test_fonttype(fonttype):
        mpl.rcParams["ps.fonttype"] = fonttype
        fig, ax = plt.subplots()
    
        ax.text(0.25, 0.5, "Forty-two is the answer to everything!")
    
        buf = io.BytesIO()
>       fig.savefig(buf, format="ps")

lib/matplotlib/tests/test_backend_ps.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
______________________________ test_fonttype[42] _______________________________

fonttype = '42'

    @pytest.mark.parametrize('fonttype', ["3", "42"])
    def test_fonttype(fonttype):
        mpl.rcParams["ps.fonttype"] = fonttype
        fig, ax = plt.subplots()
    
        ax.text(0.25, 0.5, "Forty-two is the answer to everything!")
    
        buf = io.BytesIO()
>       fig.savefig(buf, format="ps")

lib/matplotlib/tests/test_backend_ps.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
________________________________ test_linedash _________________________________

    def test_linedash():
        """Test that dashed lines do not break PS output"""
        fig, ax = plt.subplots()
    
        ax.plot([0, 1], linestyle="--")
    
        buf = io.BytesIO()
>       fig.savefig(buf, format="ps")

lib/matplotlib/tests/test_backend_ps.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_______________________________ test_empty_line ________________________________

    def test_empty_line():
        # Smoke-test for gh#23954
        figure = Figure()
        figure.text(0.5, 0.5, "\nfoo\n\n")
        buf = io.BytesIO()
>       figure.savefig(buf, format='eps')

lib/matplotlib/tests/test_backend_ps.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
_________________________ test_no_duplicate_definition _________________________

    def test_no_duplicate_definition():
    
        fig = Figure()
        axs = fig.subplots(4, 4, subplot_kw=dict(projection="polar"))
        for ax in axs.flat:
            ax.set(xticks=[], yticks=[])
            ax.plot([1, 2])
        fig.suptitle("hello, world")
    
        buf = io.StringIO()
>       fig.savefig(buf, format='eps')

lib/matplotlib/tests/test_backend_ps.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3275: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2286: in print_figure
    with cbook._setattr_cm(self, manager=None), \
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/backend_bases.py:2189: in _switch_canvas_and_return_print_method
    canvas_class = get_registered_canvas_class(fmt)
lib/matplotlib/backend_bases.py:146: in get_registered_canvas_class
    backend_class = importlib.import_module(backend_class).FigureCanvas
/opt/miniconda3/envs/testbed/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:936: in exec_module
    ???
<frozen importlib._bootstrap_external>:1074: in get_code
    ???
<frozen importlib._bootstrap_external>:1004: in source_to_code
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <built-in function compile>
args = (b'"""\nA PostScript backend, which can produce both PostScript .ps and .eps.\n"""\n\nimport codecs\nimport datetime\n...ss _BackendPS(_Backend):\n    FigureCanvas = FigureCanvasPS', '/testbed/lib/matplotlib/backends/backend_ps.py', 'exec')
kwds = {'dont_inherit': True, 'optimize': -1}

>   ???
E     File "/testbed/lib/matplotlib/backends/backend_ps.py", line 672
E       self.set_color(*gc.get_rgb())
E   IndentationError: expected an indented block after 'if' statement on line 670

<frozen importlib._bootstrap>:241: IndentationError
=========================== short test summary info ============================
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:92: This test needs a ghostscript installation
SKIPPED [8] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare eps files because Ghostscript is not installed
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:119: This test needs a TeX installation
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:147: This test needs a TeX installation
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:157: This test needs a TeX installation
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:167: This test needs a TeX installation
SKIPPED [1] lib/matplotlib/tests/test_backend_ps.py:212: This test needs a ghostscript installation
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with distiller=ghostscript-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with distiller=ghostscript-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with distiller=xpdf-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with distiller=xpdf-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with usetex-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps with usetex-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps afm-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps afm-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps with usetex-portrait]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps with usetex-landscape]
FAILED lib/matplotlib/tests/test_backend_ps.py::test_patheffects -   File "/t...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_bbox -   File "/testbed/...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps] -   File ...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3] -   File "/t...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42] -   File "/...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_linedash -   File "/test...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_empty_line -   File "/te...
FAILED lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition
================== 22 failed, 14 skipped, 42 rerun in 15.66s ===================
+ git checkout 269c0b94b4fcf8b1135011c1556eac29dc09de15 lib/matplotlib/tests/test_backend_ps.py
Updated 1 path from 248630441c
