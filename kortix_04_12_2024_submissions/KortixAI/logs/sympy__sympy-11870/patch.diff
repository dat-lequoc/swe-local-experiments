diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py
index 67694b477b..5f4643f523 100644
--- a/sympy/simplify/tests/test_trigsimp.py
+++ b/sympy/simplify/tests/test_trigsimp.py
@@ -79,6 +79,15 @@ def test_issue_4373():
     x = Symbol("x")
     assert abs(trigsimp(2.0*sin(x)**2 + 2.0*cos(x)**2) - 2.0) < 1e-10
 
+def test_exp_trig_conversion():
+    k = Symbol('k')
+    # Test sin conversion
+    f = S.Half * (-I*exp(I*k) + I*exp(-I*k))
+    assert trigsimp(f) == sin(k)
+    # Test sinc conversion
+    f = S.Half/k * (-I*exp(I*k) + I*exp(-I*k))
+    assert trigsimp(f) == sinc(k)
+
 
 def test_trigsimp3():
     x, y = symbols('x,y')
@@ -425,4 +434,4 @@ def test_Piecewise():
 
     # trigsimp tries not to touch non-trig containing args
     assert trigsimp(Piecewise((e1, e3 < e2), (e3, True))) == \
-        Piecewise((e1, e3 < s2), (e3, True))
+        Piecewise((e1, e3 < s2), (e3, True))
\ No newline at end of file
diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 34a3bab3fc..e8a3199780 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -544,6 +544,48 @@ def exp_trig(e):
     def f(rv):
         if not rv.is_Mul:
             return rv
+            
+        # Check for sin pattern: 1/2 * (-I*exp(I*k) + I*exp(-I*k))
+        args = rv.args
+        if len(args) >= 2:
+            if S.Half in args:
+                rest = Mul(*[a for a in args if a != S.Half])
+                if rest.is_Add and len(rest.args) == 2:
+                    a1, a2 = rest.args
+                    if (a1.is_Mul and a2.is_Mul and 
+                        I in a1.args and -I in a2.args):
+                        exp1 = [a for a in a1.args if isinstance(a, exp)]
+                        exp2 = [a for a in a2.args if isinstance(a, exp)]
+                        if len(exp1) == len(exp2) == 1:
+                            arg1 = exp1[0].args[0]
+                            arg2 = exp2[0].args[0]
+                            if arg1 == -arg2 and I in arg1.args:
+                                k = arg1.args[1]  # Get k from I*k
+                                return sin(k)
+        
+        # Check for sinc pattern
+        if len(args) >= 3:
+            if S.Half in args:
+                k = None
+                for a in args:
+                    if a.is_Pow and a.exp == -1:
+                        k = a.base
+                if k is not None:
+                    rest = Mul(*[a for a in args if a != S.Half and a != 1/k])
+                    if rest.is_Add and len(rest.args) == 2:
+                        a1, a2 = rest.args
+                        if (a1.is_Mul and a2.is_Mul and 
+                            I in a1.args and -I in a2.args):
+                            exp1 = [a for a in a1.args if isinstance(a, exp)]
+                            exp2 = [a for a in a2.args if isinstance(a, exp)]
+                            if len(exp1) == len(exp2) == 1:
+                                arg1 = exp1[0].args[0]
+                                arg2 = exp2[0].args[0]
+                                if arg1 == -arg2 and I in arg1.args:
+                                    k2 = arg1.args[1]
+                                    if k == k2:
+                                        return sinc(k)
+        
         rvd = rv.as_powers_dict()
         newd = rvd.copy()
 
@@ -1185,4 +1227,4 @@ def _eapply(func, e, cond=None):
         return func(e)
     return e.func(*[
         _eapply(func, ei) if (cond is None or cond(ei)) else ei
-        for ei in e.args])
+        for ei in e.args])
\ No newline at end of file
