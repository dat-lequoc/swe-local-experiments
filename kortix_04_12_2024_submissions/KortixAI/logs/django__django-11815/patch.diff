diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..dbdd7f4726 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {'import %s' % module}
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..7501597ead
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,65 @@
+import os
+import django
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models, migrations
+from django.db.migrations.writer import MigrationWriter
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+django.setup()
+
+# Test various enum scenarios
+class EmptyEnum(Enum):
+    pass
+
+class ComplexEnum(Enum):
+    SPACE = _('With Space')
+    SPECIAL = _('With-Special-Chars!')
+    UNICODE = _('Unicode-âš¡')
+    
+    def __str__(self):
+        return self.name
+
+class NumericEnum(Enum):
+    ONE = 1
+    TWO = 2
+    
+    def __str__(self):
+        return self.name
+
+# Create test models
+class EdgeCaseModel(models.Model):
+    complex_status = models.CharField(default=ComplexEnum.SPACE, max_length=128)
+    numeric_status = models.IntegerField(default=NumericEnum.ONE)
+    
+    class Meta:
+        app_label = 'tests'
+
+# Generate migrations for each case
+def test_migration(model_class, field_name, enum_value):
+    migration = migrations.Migration('test_migration', 'tests')
+    migration.operations.append(
+        migrations.CreateModel(
+            name=model_class.__name__,
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                (field_name, getattr(model_class._meta.fields[1], '__class__')(
+                    default=enum_value,
+                    max_length=128 if isinstance(enum_value, ComplexEnum) else None
+                )),
+            ],
+        )
+    )
+    writer = MigrationWriter(migration)
+    return writer.as_string()
+
+# Test cases
+print("Testing ComplexEnum with spaces and special chars:")
+print(test_migration(EdgeCaseModel, 'complex_status', ComplexEnum.SPACE))
+
+print("\nTesting ComplexEnum with unicode:")
+print(test_migration(EdgeCaseModel, 'complex_status', ComplexEnum.UNICODE))
+
+print("\nTesting NumericEnum:")
+print(test_migration(EdgeCaseModel, 'numeric_status', NumericEnum.ONE))
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c4af019419
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+import os
+import django
+from django.db import models, migrations
+from django.db.migrations.writer import MigrationWriter
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+django.setup()
+
+# Import our test models
+from tests.models import Status, Item
+
+# Test the migration generation
+from django.db import migrations
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState
+
+# Create a simple migration
+migration = migrations.Migration('test_migration', 'tests')
+migration.operations.append(
+    migrations.CreateModel(
+        name='Item',
+        fields=[
+            ('id', models.AutoField(primary_key=True)),
+            ('status', models.CharField(default=Status.GOOD, max_length=128)),
+        ],
+    )
+)
+
+# Write the migration
+writer = MigrationWriter(migration)
+migration_string = writer.as_string()
+
+print("Generated migration:")
+print(migration_string)
\ No newline at end of file
diff --git a/tests/models.py b/tests/models.py
new file mode 100644
index 0000000000..18ae616f25
--- /dev/null
+++ b/tests/models.py
@@ -0,0 +1,16 @@
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+
+class Status(Enum):
+    GOOD = _('Good')  # 'Good' will be translated
+    BAD = _('Bad')    # 'Bad' will be translated
+    
+    def __str__(self):
+        return self.name
+
+class Item(models.Model):
+    status = models.CharField(default=Status.GOOD, max_length=128)
+    
+    class Meta:
+        app_label = 'tests'
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..cb3dbcbcba
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
