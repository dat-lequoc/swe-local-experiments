diff --git a/conftest.py b/conftest.py
new file mode 100644
index 0000000000..04647f4513
--- /dev/null
+++ b/conftest.py
@@ -0,0 +1,7 @@
+import os
+import django
+from django.conf import settings
+
+def pytest_configure():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+    django.setup()
\ No newline at end of file
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 9344979c56..790c684326 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -462,6 +462,14 @@ class IsNull(BuiltinLookup):
     lookup_name = 'isnull'
     prepare_rhs = False
 
+    def get_prep_lookup(self):
+        if not isinstance(self.rhs, bool):
+            raise ValueError(
+                'The __isnull lookup only accepts boolean values. '
+                'Got %r of type %s.' % (self.rhs, type(self.rhs).__name__)
+            )
+        return self.rhs
+
     def as_sql(self, compiler, connection):
         sql, params = compiler.compile(self.lhs)
         if self.rhs:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5c021a5cfa
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+import os
+import django
+from django.db import models
+from django.core.exceptions import FieldError
+from django.test import TestCase
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, null=True)
+    
+    class Meta:
+        app_label = 'test_lookup'
+
+def test_isnull_validation():
+    # Test valid boolean values
+    try:
+        TestModel.objects.filter(name__isnull=True)
+        print("✓ Test 1 passed: name__isnull=True accepted")
+    except Exception as e:
+        print(f"✗ Test 1 failed: {e}")
+
+    try:
+        TestModel.objects.filter(name__isnull=False)
+        print("✓ Test 2 passed: name__isnull=False accepted")
+    except Exception as e:
+        print(f"✗ Test 2 failed: {e}")
+
+    # Test invalid values
+    try:
+        TestModel.objects.filter(name__isnull=1)
+        print("✗ Test 3 failed: name__isnull=1 should raise ValueError")
+    except ValueError as e:
+        if "The __isnull lookup only accepts boolean values" in str(e):
+            print("✓ Test 3 passed: name__isnull=1 correctly rejected")
+        else:
+            print(f"✗ Test 3 failed: Unexpected error message: {e}")
+
+    try:
+        TestModel.objects.filter(name__isnull="true")
+        print("✗ Test 4 failed: name__isnull='true' should raise ValueError")
+    except ValueError as e:
+        if "The __isnull lookup only accepts boolean values" in str(e):
+            print("✓ Test 4 passed: name__isnull='true' correctly rejected")
+        else:
+            print(f"✗ Test 4 failed: Unexpected error message: {e}")
+
+if __name__ == '__main__':
+    test_isnull_validation()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..736358ffcf
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.lookup.apps.LookupConfig',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/tests/lookup/apps.py b/tests/lookup/apps.py
new file mode 100644
index 0000000000..9325c86129
--- /dev/null
+++ b/tests/lookup/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class LookupConfig(AppConfig):
+    name = 'tests.lookup'
+    label = 'test_lookup'
\ No newline at end of file
diff --git a/tests/lookup/models.py b/tests/lookup/models.py
index 8c8cb67827..aeea4b1910 100644
--- a/tests/lookup/models.py
+++ b/tests/lookup/models.py
@@ -12,6 +12,9 @@ class Alarm(models.Model):
     desc = models.CharField(max_length=100)
     time = models.TimeField()
 
+    class Meta:
+        app_label = 'lookup'
+
     def __str__(self):
         return '%s (%s)' % (self.time, self.desc)
 
@@ -21,6 +24,7 @@ class Author(models.Model):
     alias = models.CharField(max_length=50, null=True, blank=True)
 
     class Meta:
+        app_label = 'lookup'
         ordering = ('name',)
 
 
@@ -31,6 +35,7 @@ class Article(models.Model):
     slug = models.SlugField(unique=True, blank=True, null=True)
 
     class Meta:
+        app_label = 'lookup'
         ordering = ('-pub_date', 'headline')
 
     def __str__(self):
@@ -42,6 +47,7 @@ class Tag(models.Model):
     name = models.CharField(max_length=100)
 
     class Meta:
+        app_label = 'lookup'
         ordering = ('name',)
 
 
@@ -67,6 +73,9 @@ class Season(models.Model):
     gt = models.IntegerField(null=True, blank=True)
     nulled_text_field = NulledTextField(null=True)
 
+    class Meta:
+        app_label = 'lookup'
+
     def __str__(self):
         return str(self.year)
 
@@ -76,6 +85,9 @@ class Game(models.Model):
     home = models.CharField(max_length=100)
     away = models.CharField(max_length=100)
 
+    class Meta:
+        app_label = 'lookup'
+
     def __str__(self):
         return "%s at %s" % (self.away, self.home)
 
@@ -84,6 +96,9 @@ class Player(models.Model):
     name = models.CharField(max_length=100)
     games = models.ManyToManyField(Game, related_name='players')
 
+    class Meta:
+        app_label = 'lookup'
+
     def __str__(self):
         return self.name
 
@@ -92,7 +107,13 @@ class Product(models.Model):
     name = models.CharField(max_length=80)
     qty_target = models.DecimalField(max_digits=6, decimal_places=2)
 
+    class Meta:
+        app_label = 'lookup'
+
 
 class Stock(models.Model):
     product = models.ForeignKey(Product, models.CASCADE)
     qty_available = models.DecimalField(max_digits=6, decimal_places=2)
+
+    class Meta:
+        app_label = 'lookup'
\ No newline at end of file
diff --git a/tests/lookup/test_isnull.py b/tests/lookup/test_isnull.py
new file mode 100644
index 0000000000..a8e1250117
--- /dev/null
+++ b/tests/lookup/test_isnull.py
@@ -0,0 +1,40 @@
+from django.test import TestCase
+from django.core.exceptions import FieldError
+
+from .models import Article, Author
+
+class IsNullLookupTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.author = Author.objects.create(name='Test Author')
+        cls.article = Article.objects.create(
+            headline='Test Article',
+            pub_date='2023-01-01',
+            author=cls.author
+        )
+        cls.article_no_author = Article.objects.create(
+            headline='No Author Article',
+            pub_date='2023-01-02',
+            author=None
+        )
+
+    def test_isnull_boolean_validation(self):
+        """Test that __isnull only accepts boolean values."""
+        # Valid boolean values should work
+        list(Article.objects.filter(author__isnull=True))
+        list(Article.objects.filter(author__isnull=False))
+
+        # Non-boolean values should raise ValueError
+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):
+            list(Article.objects.filter(author__isnull=1))
+
+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):
+            list(Article.objects.filter(author__isnull="true"))
+
+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):
+            list(Article.objects.filter(author__isnull=0))
+
+    def test_isnull_results(self):
+        """Test that __isnull returns correct results."""
+        self.assertEqual(Article.objects.filter(author__isnull=True).count(), 1)
+        self.assertEqual(Article.objects.filter(author__isnull=False).count(), 1)
\ No newline at end of file
