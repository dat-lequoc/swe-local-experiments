diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 1a55d3d417..3a03983470 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,7 +763,11 @@ class Field(RegisterLookupMixin):
             # such fields can't be deferred (we don't have a check for this).
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
-        if self.choices is not None:
+        
+        # Get choices from the current class if available
+        field_choices = getattr(cls, name + '_choice', self.choices)
+        if field_choices is not None:
+            self.choices = field_choices
             if not hasattr(cls, 'get_%s_display' % self.name):
                 setattr(
                     cls,
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..4654e788ce
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,74 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'testapp',
+        ],
+    )
+    django.setup()
+
+from django.db import models
+
+class BaseModelA(models.Model):
+    foo_choice = [("A", "output1"), ("B", "output2")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        abstract = True
+
+class ChildModelA(BaseModelA):
+    # Override with completely different choices
+    foo_choice = [("X", "outputX"), ("Y", "outputY")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        app_label = 'testapp'
+
+class ChildModelB(BaseModelA):
+    # Extend parent choices
+    foo_choice = [("A", "output1"), ("B", "output2"), ("C", "output3")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        app_label = 'testapp'
+
+class ChildModelC(BaseModelA):
+    # Override with same keys but different values
+    foo_choice = [("A", "different1"), ("B", "different2")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        app_label = 'testapp'
+
+def test_edge_cases():
+    # Test complete override
+    instance_a = ChildModelA()
+    instance_a.field_foo = "X"
+    print(f"Complete override - X: {instance_a.get_field_foo_display()}")
+    assert instance_a.get_field_foo_display() == "outputX"
+    
+    # Test extension
+    instance_b = ChildModelB()
+    instance_b.field_foo = "C"
+    print(f"Extension - C: {instance_b.get_field_foo_display()}")
+    assert instance_b.get_field_foo_display() == "output3"
+    
+    # Test value override
+    instance_c = ChildModelC()
+    instance_c.field_foo = "A"
+    print(f"Value override - A: {instance_c.get_field_foo_display()}")
+    assert instance_c.get_field_foo_display() == "different1"
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/fix_fields.py b/fix_fields.py
new file mode 100644
index 0000000000..1b47435bf4
--- /dev/null
+++ b/fix_fields.py
@@ -0,0 +1,65 @@
+import codecs
+
+def fix_contribute_to_class():
+    with codecs.open('/testbed/django/db/models/fields/__init__.py', 'r', 'utf-8') as f:
+        content = f.read()
+    
+    old_method = '''    def contribute_to_class(self, cls, name, private_only=False):
+        """
+        Register the field with the model class it belongs to.
+
+        If private_only is True, create a separate instance of this field
+        for every subclass of cls, even if cls is not an abstract model.
+        """
+        self.set_attributes_from_name(name)
+        self.model = cls
+        cls._meta.add_field(self, private=private_only)
+        if self.column:
+            # Don't override classmethods with the descriptor. This means that
+            # if you have a classmethod and a field with the same name, then
+            # such fields can't be deferred (we don't have a check for this).
+            if not getattr(cls, self.attname, None):
+                setattr(cls, self.attname, self.descriptor_class(self))
+        if self.choices is not None:
+            if not hasattr(cls, 'get_%s_display' % self.name):
+                setattr(
+                    cls,
+                    'get_%s_display' % self.name,
+                    partialmethod(cls._get_FIELD_display, field=self),
+                )'''
+
+    new_method = '''    def contribute_to_class(self, cls, name, private_only=False):
+        """
+        Register the field with the model class it belongs to.
+
+        If private_only is True, create a separate instance of this field
+        for every subclass of cls, even if cls is not an abstract model.
+        """
+        self.set_attributes_from_name(name)
+        self.model = cls
+        cls._meta.add_field(self, private=private_only)
+        if self.column:
+            # Don't override classmethods with the descriptor. This means that
+            # if you have a classmethod and a field with the same name, then
+            # such fields can't be deferred (we don't have a check for this).
+            if not getattr(cls, self.attname, None):
+                setattr(cls, self.attname, self.descriptor_class(self))
+        
+        # Get choices from the current class if available
+        field_choices = getattr(cls, name + '_choice', self.choices)
+        if field_choices is not None:
+            self.choices = field_choices
+            if not hasattr(cls, 'get_%s_display' % self.name):
+                setattr(
+                    cls,
+                    'get_%s_display' % self.name,
+                    partialmethod(cls._get_FIELD_display, field=self),
+                )'''
+
+    new_content = content.replace(old_method, new_method)
+    
+    with codecs.open('/testbed/django/db/models/fields/__init__.py', 'w', 'utf-8') as f:
+        f.write(new_content)
+
+if __name__ == '__main__':
+    fix_contribute_to_class()
\ No newline at end of file
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..3bf8c7ed3f
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ddcdfe4410
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,56 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'testapp',
+        ],
+    )
+    django.setup()
+
+from django.db import models
+
+class TestBaseModel(models.Model):
+    foo_choice = [("A", "output1"), ("B", "output2")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        abstract = True
+
+class TestChildModel(TestBaseModel):
+    foo_choice = [("A", "output1"), ("B", "output2"), ("C", "output3")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        app_label = 'testapp'
+
+def test_choices():
+    # Create an instance with each choice value
+    instance = TestChildModel()
+    
+    # Test original choices
+    instance.field_foo = "A"
+    print(f"Value 'A' display: {instance.get_field_foo_display()}")
+    assert instance.get_field_foo_display() == "output1"
+    
+    instance.field_foo = "B"
+    print(f"Value 'B' display: {instance.get_field_foo_display()}")
+    assert instance.get_field_foo_display() == "output2"
+    
+    # Test new choice added in child class
+    instance.field_foo = "C"
+    print(f"Value 'C' display: {instance.get_field_foo_display()}")
+    assert instance.get_field_foo_display() == "output3"
+
+if __name__ == "__main__":
+    test_choices()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..bad9fe26ad
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'testapp',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..3491c2b50c
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,12 @@
+from django.db import models
+
+class BaseModel(models.Model):
+    foo_choice = [("A", "output1"), ("B", "output2")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
+
+    class Meta:
+        abstract = True
+
+class ChildModel(BaseModel):
+    foo_choice = [("A", "output1"), ("B", "output2"), ("C", "output3")]
+    field_foo = models.CharField(max_length=254, choices=foo_choice)
\ No newline at end of file
diff --git a/testapp/tests.py b/testapp/tests.py
new file mode 100644
index 0000000000..2153418b70
--- /dev/null
+++ b/testapp/tests.py
@@ -0,0 +1,15 @@
+from django.test import TestCase
+from testapp.models import ChildModel
+
+class InheritedChoicesTest(TestCase):
+    def test_get_foo_display(self):
+        # Test original choices
+        obj = ChildModel(field_foo="A")
+        self.assertEqual(obj.get_field_foo_display(), "output1")
+        
+        obj.field_foo = "B"
+        self.assertEqual(obj.get_field_foo_display(), "output2")
+        
+        # Test added choice in child class
+        obj.field_foo = "C"
+        self.assertEqual(obj.get_field_foo_display(), "output3")
\ No newline at end of file
