diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index b28dc925ba..b56d9af981 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -6,7 +6,7 @@ from itertools import chain
 
 from django.core.exceptions import EmptyResultSet, FieldError, FullResultSet
 from django.db import DatabaseError, NotSupportedError
-from django.db.models.constants import LOOKUP_SEP
+from django.db.models.constants import LOOKUP_SEP, OnConflict
 from django.db.models.expressions import F, OrderBy, RawSQL, Ref, Value
 from django.db.models.functions import Cast, Random
 from django.db.models.lookups import Lookup
@@ -1761,7 +1761,8 @@ class SQLInsertCompiler(SQLCompiler):
         # necessary and it should be possible to use placeholders and
         # expressions in bulk inserts too.
         can_bulk = (
-            not self.returning_fields and self.connection.features.has_bulk_insert
+            (not self.returning_fields or self.query.on_conflict == OnConflict.UPDATE) and
+            self.connection.features.has_bulk_insert
         )
 
         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)
@@ -2096,4 +2097,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
-        cursor.close()
+        cursor.close()
\ No newline at end of file
diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py
index aee0cd9996..97f71130cc 100644
--- a/tests/bulk_create/tests.py
+++ b/tests/bulk_create/tests.py
@@ -627,7 +627,7 @@ class BulkCreateTests(TestCase):
             TwoFields(pk=obj1.pk, f1=3, f2=3, name="c"),
             TwoFields(pk=obj2.pk, f1=4, f2=4, name="d"),
         ]
-        TwoFields.objects.bulk_create(
+        created = TwoFields.objects.bulk_create(
             conflicting_objects,
             update_conflicts=True,
             unique_fields=["pk"],
@@ -641,6 +641,24 @@ class BulkCreateTests(TestCase):
                 {"f1": 2, "f2": 2, "name": "d"},
             ],
         )
+        self.assertEqual(len(created), 2)
+        self.assertEqual(created[0].pk, obj1.pk)
+        self.assertEqual(created[1].pk, obj2.pk)
+
+    @skipUnlessDBFeature("supports_update_conflicts", "can_return_rows_from_bulk_insert")
+    def test_update_conflicts_returning_fields(self):
+        """Test that bulk_create returns PKs when using update_conflicts."""
+        initial = TwoFields.objects.create(f1=1, f2=1, name="initial")
+        obj = TwoFields(f1=1, f2=1, name="updated")  # Conflicts with initial
+        created = TwoFields.objects.bulk_create(
+            [obj],
+            update_conflicts=True,
+            update_fields=["name"],
+            unique_fields=["f1"],
+        )
+        self.assertEqual(len(created), 1)
+        self.assertEqual(created[0].pk, initial.pk)
+        self.assertEqual(created[0].name, "updated")
 
     @skipUnlessDBFeature(
         "supports_update_conflicts", "supports_update_conflicts_with_target"
@@ -816,4 +834,4 @@ class BulkCreateTests(TestCase):
                 {"rank": 1, "name": "c"},
                 {"rank": 2, "name": "d"},
             ],
-        )
+        )
\ No newline at end of file
