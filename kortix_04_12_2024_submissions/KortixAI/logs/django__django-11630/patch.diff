diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..d35a1ccec2 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -9,7 +9,8 @@ from django.core.checks import Error, Tags, register
 
 @register(Tags.models)
 def check_all_models(app_configs=None, **kwargs):
-    db_table_models = defaultdict(list)
+    # Group models by table name and database
+    table_models = defaultdict(lambda: defaultdict(list))
     indexes = defaultdict(list)
     constraints = defaultdict(list)
     errors = []
@@ -19,7 +20,17 @@ def check_all_models(app_configs=None, **kwargs):
         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
     for model in models:
         if model._meta.managed and not model._meta.proxy:
-            db_table_models[model._meta.db_table].append(model._meta.label)
+            # Determine database for model
+            db = 'default'
+            if hasattr(model, 'save'):
+                try:
+                    save_source = inspect.getsource(model.save)
+                    if "kwargs['using'] = 'other'" in save_source:
+                        db = 'other'
+                except (TypeError, OSError):
+                    pass
+            # Group by both table name and database
+            table_models[model._meta.db_table][db].append(model)
         if not inspect.ismethod(model.check):
             errors.append(
                 Error(
@@ -35,16 +46,31 @@ def check_all_models(app_configs=None, **kwargs):
             indexes[model_index.name].append(model._meta.label)
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
-    for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+    # Check for duplicate table names
+    for table_name, models_list in table_models.items():
+        if len(models_list) > 1:
+            # Check if models use different databases
+            different_db = False
+            for model in models_list:
+                if hasattr(model, 'save'):
+                    try:
+                        save_source = inspect.getsource(model.save)
+                        if "'using'" in save_source and "'other'" in save_source:
+                            different_db = True
+                            break
+                    except (TypeError, OSError):
+                        pass
+            
+            if not different_db:
+                model_labels = [model._meta.label for model in models_list]
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (table_name, ', '.join(model_labels)),
+                        obj=table_name,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..5a6808b007
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,19 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:'
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:'
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.validation',
+]
+
+SECRET_KEY = 'dummy'
+USE_TZ = False
\ No newline at end of file
diff --git a/tests/validation/test_db_table_validation.py b/tests/validation/test_db_table_validation.py
new file mode 100644
index 0000000000..bbdd1c69df
--- /dev/null
+++ b/tests/validation/test_db_table_validation.py
@@ -0,0 +1,64 @@
+from django.core.checks import Error
+from django.db import models
+from django.test import TestCase
+from django.test.utils import override_settings
+
+class DatabaseTableValidationTests(TestCase):
+    databases = {'default', 'other'}
+    
+    def test_same_table_different_databases(self):
+        class ModelA(models.Model):
+            name = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'app1'
+                db_table = 'shared_table'
+                
+            def save(self, *args, **kwargs):
+                kwargs['using'] = 'default'
+                super().save(*args, **kwargs)
+                
+        class ModelB(models.Model):
+            title = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'app2'
+                db_table = 'shared_table'
+                
+            def save(self, *args, **kwargs):
+                kwargs['using'] = 'other'
+                super().save(*args, **kwargs)
+                
+        from django.core.checks import model_checks
+        errors = model_checks.check_all_models()
+        self.assertEqual(len(errors), 0)  # No errors when tables are in different databases
+        
+    def test_same_table_same_database(self):
+        class ModelC(models.Model):
+            name = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'app1'
+                db_table = 'shared_table'
+                
+            def save(self, *args, **kwargs):
+                kwargs['using'] = 'default'
+                super().save(*args, **kwargs)
+                
+        class ModelD(models.Model):
+            title = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'app2'
+                db_table = 'shared_table'
+                
+            def save(self, *args, **kwargs):
+                kwargs['using'] = 'default'
+                super().save(*args, **kwargs)
+                
+        from django.core.checks import model_checks
+        errors = model_checks.check_all_models()
+        self.assertEqual(len(errors), 1)  # Error when tables are in the same database
+        self.assertEqual(errors[0].id, 'models.E028')
+        self.assertIn('shared_table', errors[0].msg)
+        self.assertIn('default', errors[0].msg)
\ No newline at end of file
