diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0c64748ccd..5601c901fe 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1663,11 +1663,18 @@ class FilePathField(Field):
 
     def __init__(self, verbose_name=None, name=None, path='', match=None,
                  recursive=False, allow_files=True, allow_folders=False, **kwargs):
-        self.path, self.match, self.recursive = path, match, recursive
+        self.path = path
+        self.match, self.recursive = match, recursive
         self.allow_files, self.allow_folders = allow_files, allow_folders
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)
 
+    def get_path(self):
+        """
+        Return the path value. If path is a callable, evaluate it and return the result.
+        """
+        return self.path() if callable(self.path) else self.path
+
     def check(self, **kwargs):
         return [
             *super().check(**kwargs),
@@ -1709,7 +1716,7 @@ class FilePathField(Field):
 
     def formfield(self, **kwargs):
         return super().formfield(**{
-            'path': self.path,
+            'path': self.get_path(),
             'match': self.match,
             'recursive': self.recursive,
             'form_class': forms.FilePathField,
diff --git a/tests/model_fields/test_filepath_callable.py b/tests/model_fields/test_filepath_callable.py
new file mode 100644
index 0000000000..59be2acb9b
--- /dev/null
+++ b/tests/model_fields/test_filepath_callable.py
@@ -0,0 +1,70 @@
+import os
+import tempfile
+import django
+from django.conf import settings
+
+# Configure test settings before importing models
+TEMP_DIR = tempfile.mkdtemp()
+TEST_SETTINGS = {
+    'MEDIA_ROOT': TEMP_DIR,
+    'INSTALLED_APPS': ['django.contrib.contenttypes', 'tests.model_fields'],
+    'DATABASES': {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    'USE_TZ': False,
+}
+
+if not settings.configured:
+    settings.configure(**TEST_SETTINGS)
+    django.setup()
+
+from django.test import TestCase
+from django.db import models
+from django.test.utils import override_settings
+
+class LocalFiles(models.Model):
+    name = models.CharField(max_length=255)
+    file = models.FilePathField(path=lambda: os.path.join(settings.MEDIA_ROOT, 'example_dir'))
+
+    class Meta:
+        app_label = 'model_fields'
+
+@override_settings(**TEST_SETTINGS)
+class FilePathFieldCallableTests(TestCase):
+    def setUp(self):
+        self.media_root = settings.MEDIA_ROOT
+        self.example_dir = os.path.join(self.media_root, 'example_dir')
+        os.makedirs(self.example_dir, exist_ok=True)
+        with open(os.path.join(self.example_dir, 'test.txt'), 'w') as f:
+            f.write('test content')
+
+    def test_callable_path(self):
+        # Create a model instance
+        local_file = LocalFiles(name='test')
+        
+        # Get the form field
+        form_field = local_file._meta.get_field('file').formfield()
+        
+        # Verify that the path is correctly resolved
+        self.assertEqual(form_field.path, os.path.join(settings.MEDIA_ROOT, 'example_dir'))
+
+    def test_path_resolution(self):
+        # Get the field instance
+        field = LocalFiles._meta.get_field('file')
+        
+        # Test get_path() method
+        resolved_path = field.get_path()
+        self.assertEqual(resolved_path, os.path.join(settings.MEDIA_ROOT, 'example_dir'))
+
+    def test_path_in_form(self):
+        # Create a model instance
+        local_file = LocalFiles(name='test')
+        
+        # Get the form field
+        form_field = local_file._meta.get_field('file').formfield()
+        
+        # Verify that the choices are generated from the correct path
+        self.assertTrue(any('test.txt' in str(choice) for choice in form_field.choices))
\ No newline at end of file
