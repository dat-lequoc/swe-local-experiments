diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..c1febc4889 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,19 +514,32 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)
 
     def __eq__(self, other):
-        # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            # Primary check: creation counter for backward compatibility
+            if self.creation_counter != other.creation_counter:
+                return False
+            # Secondary check: compare models if both have one
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                if self.model is not None and other.model is not None:
+                    return self.model == other.model
+            return True
         return NotImplemented
 
     def __lt__(self, other):
-        # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # Primary sort by creation counter for compatibility
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # Secondary sort by model name if available
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                if self.model is not None and other.model is not None:
+                    return self.model.__name__ < other.model.__name__
+            return False
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        model_hash = hash(self.model) if hasattr(self, 'model') and self.model is not None else 0
+        return hash((self.creation_counter, model_hash))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
@@ -2453,4 +2466,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
         return 'SmallAutoField'
 
     def rel_db_type(self, connection):
-        return SmallIntegerField().db_type(connection=connection)
+        return SmallIntegerField().db_type(connection=connection)
\ No newline at end of file
diff --git a/tests/model_fields/test_field_comparison.py b/tests/model_fields/test_field_comparison.py
new file mode 100644
index 0000000000..011d851ed2
--- /dev/null
+++ b/tests/model_fields/test_field_comparison.py
@@ -0,0 +1,45 @@
+from django.db import models
+from django.test import SimpleTestCase
+
+
+class AbstractModel(models.Model):
+    class Meta:
+        abstract = True
+
+    field = models.IntegerField()
+
+
+class ConcreteModelA(AbstractModel):
+    pass
+
+
+class ConcreteModelB(AbstractModel):
+    pass
+
+
+class FieldComparisonTests(SimpleTestCase):
+    def test_abstract_field_comparison(self):
+        """Fields inherited from abstract models should not be equal across different models."""
+        field_a = ConcreteModelA._meta.get_field('field')
+        field_b = ConcreteModelB._meta.get_field('field')
+
+        self.assertNotEqual(field_a, field_b)
+        self.assertEqual(len({field_a, field_b}), 2)
+
+    def test_field_ordering(self):
+        """Field ordering should primarily use creation_counter."""
+        field_a = ConcreteModelA._meta.get_field('field')
+        field_b = ConcreteModelB._meta.get_field('field')
+
+        # Fields should maintain consistent ordering
+        ordered = sorted([field_b, field_a])
+        self.assertEqual(ordered, sorted([field_a, field_b]))
+
+    def test_unbound_field_comparison(self):
+        """Unbound fields should maintain existing comparison behavior."""
+        field1 = models.IntegerField()
+        field2 = models.IntegerField()
+        
+        # Different creation counters should make them unequal
+        self.assertNotEqual(field1, field2)
+        self.assertEqual(len({field1, field2}), 2)
