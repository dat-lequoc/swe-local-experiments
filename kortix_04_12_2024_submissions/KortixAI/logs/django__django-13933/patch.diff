diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..bb40bffad7 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1131,7 +1131,11 @@ class InlineForeignKeyField(Field):
         else:
             orig = self.parent_instance.pk
         if str(value) != str(orig):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
         return self.parent_instance
 
     def has_changed(self, initial, data):
@@ -1188,8 +1192,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
-                            ' the available choices.'),
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.'),
     }
     iterator = ModelChoiceIterator
 
@@ -1284,7 +1287,11 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
         return value
 
     def validate(self, value):
@@ -1397,4 +1404,4 @@ def modelform_defines_fields(form_class):
     return hasattr(form_class, '_meta') and (
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
-    )
+    )
\ No newline at end of file
