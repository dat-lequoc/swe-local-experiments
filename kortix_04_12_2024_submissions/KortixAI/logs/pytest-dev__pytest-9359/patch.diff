diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py
index 6f54057c0..10a91f163 100644
--- a/src/_pytest/_code/source.py
+++ b/src/_pytest/_code/source.py
@@ -147,8 +147,25 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i
     # Flatten all statements and except handlers into one lineno-list.
     # AST's line numbers start indexing at 1.
     values: List[int] = []
+    decorator_after_target = None
+    
     for x in ast.walk(node):
         if isinstance(x, (ast.stmt, ast.ExceptHandler)):
+            if isinstance(x, ast.FunctionDef):
+                # Check for decorators after target line
+                if x.decorator_list:
+                    for dec in x.decorator_list:
+                        if dec.lineno - 1 > lineno:
+                            # Found decorator after target line
+                            decorator_after_target = dec.lineno - 1
+                            break
+                    if decorator_after_target is not None:
+                        continue
+                # Skip function if it starts after target line
+                if x.lineno - 1 > lineno:
+                    continue
+            
+            # For non-function statements or valid functions
             values.append(x.lineno - 1)
             for name in ("finalbody", "orelse"):
                 val: Optional[List[ast.stmt]] = getattr(x, name, None)
@@ -162,6 +179,9 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i
         end = None
     else:
         end = values[insert_index]
+        # If we found a decorator after target line, use it as the end
+        if decorator_after_target is not None and decorator_after_target < end:
+            end = decorator_after_target
     return start, end
 
 
@@ -209,4 +229,4 @@ def getstatementrange_ast(
             end -= 1
         else:
             break
-    return astnode, start, end
+    return astnode, start, end
\ No newline at end of file
diff --git a/testing/test_assertion.py b/testing/test_assertion.py
index e8717590d..987351b1f 100644
--- a/testing/test_assertion.py
+++ b/testing/test_assertion.py
@@ -332,6 +332,23 @@ def callequal(left: Any, right: Any, verbose: int = 0) -> Optional[List[str]]:
 
 
 class TestAssert_reprcompare:
+    def test_assert_with_decorator_after(self, pytester: Pytester) -> None:
+        pytester.makepyfile("""
+            def deco(f):
+                return f
+
+            def test_func():
+                assert 1 == 2
+
+                @deco
+                def inner():
+                    return True
+        """)
+        result = pytester.runpytest()
+        result.stdout.fnmatch_lines([
+            "*assert 1 == 2*",
+        ])
+        assert "@deco" not in result.stdout.str()
     def test_different_types(self) -> None:
         assert callequal([0, 1], "foo") is None
 
@@ -1676,4 +1693,4 @@ def test_assertion_location_with_coverage(pytester: Pytester) -> None:
             "E       assert False",
             "*= 1 failed in*",
         ]
-    )
+    )
\ No newline at end of file
