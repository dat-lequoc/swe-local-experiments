diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 335e10996..fb0a260bb 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -246,9 +246,8 @@ def pytest_runtest_setup(item: Item) -> None:
 
 @hookimpl(hookwrapper=True)
 def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
-    xfailed = item._store.get(xfailed_key, None)
-    if xfailed is None:
-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
+    # Always re-evaluate xfail marks to catch dynamically added ones
+    item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
 
     if not item.config.option.runxfail:
         if xfailed and not xfailed.run:
@@ -256,6 +255,11 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
 
     yield
 
+    # Re-evaluate after test execution for dynamically added markers
+    if not item.config.option.runxfail:
+        xfailed = evaluate_xfail_marks(item)
+        item._store[xfailed_key] = xfailed
+
 
 @hookimpl(hookwrapper=True)
 def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
@@ -312,4 +316,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str
             return "xfailed", "x", "XFAIL"
         elif report.passed:
             return "xpassed", "X", "XPASS"
-    return None
+    return None
\ No newline at end of file
diff --git a/testing/test_dynamic_xfail.py b/testing/test_dynamic_xfail.py
new file mode 100644
index 000000000..e742cf55f
--- /dev/null
+++ b/testing/test_dynamic_xfail.py
@@ -0,0 +1,19 @@
+import pytest
+
+def test_dynamic_xfail(request):
+    """Test that dynamically added xfail markers work properly"""
+    mark = pytest.mark.xfail(reason="dynamic xfail")
+    request.node.add_marker(mark)
+    assert False
+
+def test_dynamic_xfail_with_run_false(request):
+    """Test dynamic xfail with run=False"""
+    mark = pytest.mark.xfail(reason="dynamic xfail", run=False)
+    request.node.add_marker(mark)
+    assert False
+
+def test_dynamic_xfail_conditional(request):
+    """Test conditional dynamic xfail"""
+    mark = pytest.mark.xfail(condition=True, reason="conditional xfail")
+    request.node.add_marker(mark)
+    assert False
