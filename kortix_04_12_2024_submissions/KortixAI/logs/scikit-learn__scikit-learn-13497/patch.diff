diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..b31476841 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -247,7 +247,9 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)
     n_samples, n_features = X.shape
 
-    if discrete_features == 'auto':
+    if isinstance(discrete_features, str):
+        if discrete_features != 'auto':
+            raise ValueError("String value for discrete_features must be 'auto'")
         discrete_features = issparse(X)
 
     if isinstance(discrete_features, bool):
@@ -446,4 +448,4 @@ def mutual_info_classif(X, y, discrete_features='auto', n_neighbors=3,
     """
     check_classification_targets(y)
     return _estimate_mi(X, y, discrete_features, True, n_neighbors,
-                        copy, random_state)
+                        copy, random_state)
\ No newline at end of file
diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py
index 7ba7d37e8..dca2e5bfd 100644
--- a/sklearn/feature_selection/tests/test_mutual_info.py
+++ b/sklearn/feature_selection/tests/test_mutual_info.py
@@ -1,4 +1,3 @@
-
 import numpy as np
 from scipy.sparse import csr_matrix
 
@@ -182,6 +181,10 @@ def test_mutual_info_options():
     y = np.array([0, 1, 2, 2, 1], dtype=float)
     X_csr = csr_matrix(X)
 
+    # Test with invalid string value
+    assert_raises(ValueError, mutual_info_regression, X, y,
+                 discrete_features='invalid')
+
     for mutual_info in (mutual_info_regression, mutual_info_classif):
         assert_raises(ValueError, mutual_info_regression, X_csr, y,
                       discrete_features=False)
@@ -197,4 +200,4 @@ def test_mutual_info_options():
         assert_array_equal(mi_1, mi_2)
         assert_array_equal(mi_3, mi_4)
 
-    assert not np.allclose(mi_1, mi_3)
+    assert not np.allclose(mi_1, mi_3)
\ No newline at end of file
