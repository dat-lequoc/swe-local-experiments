diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py
index 644b06d464..ca013baa4f 100644
--- a/sympy/simplify/tests/test_trigsimp.py
+++ b/sympy/simplify/tests/test_trigsimp.py
@@ -12,6 +12,13 @@
 
 def test_trigsimp1():
     x, y = symbols('x,y')
+    
+    # Test rational arguments
+    r = sin(Rational(1,50))*sin(Rational(1,25)) + cos(Rational(1,50))*cos(Rational(1,25))
+    assert trigsimp(r) == cos(Rational(-1,50))
+    
+    # Original tests
+    x, y = symbols('x,y')
 
     assert trigsimp(1 - sin(x)**2) == cos(x)**2
     assert trigsimp(1 - cos(x)**2) == sin(x)**2
@@ -427,4 +434,4 @@ def test_Piecewise():
 
     # trigsimp tries not to touch non-trig containing args
     assert trigsimp(Piecewise((e1, e3 < e2), (e3, True))) == \
-        Piecewise((e1, e3 < s2), (e3, True))
+        Piecewise((e1, e3 < s2), (e3, True))
\ No newline at end of file
diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 8ba346adbe..ea3f1b2acd 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -6,7 +6,7 @@
 from sympy.core import (sympify, Basic, S, Expr, expand_mul, factor_terms,
     Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand)
 from sympy.core.compatibility import reduce, iterable, SYMPY_INTS
-from sympy.core.numbers import I, Integer
+from sympy.core.numbers import I, Integer, Rational, Number
 from sympy.core.function import count_ops, _mexpand
 from sympy.functions.elementary.trigonometric import TrigonometricFunction
 from sympy.functions.elementary.hyperbolic import HyperbolicFunction
@@ -928,6 +928,20 @@ def _trigsimp(expr, deep=False):
     # protect the cache from non-trig patterns; we only allow
     # trig patterns to enter the cache
     if expr.has(*_trigs):
+        # Pre-process rational arguments
+        if any(isinstance(arg, Rational) for arg in expr.atoms(Number)):
+            # First expand trig expressions
+            expr = expr.expand(trig=True)
+            # Try standard simplification first
+            result = __trigsimp(expr, deep)
+            # If no simplification occurred and we have rational args, try angle formula expansion
+            if result == expr and expr.is_Add:
+                # Look for sin/cos products that could be angle formulas
+                args = expr.args
+                rationals = [a for a in args if a.has(Rational)]
+                if len(rationals) >= 2:
+                    expr = expr.rewrite(cos)
+            return __trigsimp(expr, deep)
         return __trigsimp(expr, deep)
     return expr
 
@@ -1187,4 +1201,4 @@ def _eapply(func, e, cond=None):
         return func(e)
     return e.func(*[
         _eapply(func, ei) if (cond is None or cond(ei)) else ei
-        for ei in e.args])
+        for ei in e.args])
\ No newline at end of file
