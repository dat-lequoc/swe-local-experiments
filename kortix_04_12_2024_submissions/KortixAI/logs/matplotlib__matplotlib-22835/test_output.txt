+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/artist.py
	modified:   lib/matplotlib/tests/test_artist.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit c33557d120eefe3148ebfcf2e758ff2357966000
Merge: 6d42cf7179 d190205bb8
Author: Oscar Gustafsson <oscar.gustafsson@gmail.com>
Date:   Tue Apr 12 18:07:58 2022 +0200

    Merge pull request #22707 from aragilar/no_broken_streamlines
    
    Proposed ENH: Allow user to turn off breaking of streamlines in streamplot (rebased)

+ git diff c33557d120eefe3148ebfcf2e758ff2357966000
diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py
index 1f33b9d3ec..93f53a9f50 100644
--- a/lib/matplotlib/artist.py
+++ b/lib/matplotlib/artist.py
@@ -1298,19 +1298,26 @@ class Artist:
             # from Artist first and from ScalarMappable second, so
             # Artist.format_cursor_data would always have precedence over
             # ScalarMappable.format_cursor_data.
-            n = self.cmap.N
-            if np.ma.getmask(data):
-                return "[]"
-            normed = self.norm(data)
-            if np.isfinite(normed):
-                # Midpoints of neighboring color intervals.
-                neighbors = self.norm.inverse(
-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)
-                delta = abs(neighbors - data).max()
-                g_sig_digits = cbook._g_sig_digits(data, delta)
-            else:
-                g_sig_digits = 3  # Consistent with default below.
-            return "[{:-#.{}g}]".format(data, g_sig_digits)
+            try:
+                n = self.cmap.N
+                if np.ma.getmask(data):
+                    return "[]"
+                normed = self.norm(data)
+                if np.isfinite(normed):
+                    # Midpoints of neighboring color intervals.
+                    try:
+                        neighbors = self.norm.inverse(
+                            (int(self.norm(data) * n) + np.array([0, 1])) / n)
+                        delta = abs(neighbors - data).max()
+                        g_sig_digits = cbook._g_sig_digits(data, delta)
+                    except ValueError:
+                        # Handle non-invertible norms like BoundaryNorm
+                        g_sig_digits = 3
+                else:
+                    g_sig_digits = 3  # Consistent with default below.
+                return "[{:-#.{}g}]".format(data, g_sig_digits)
+            except Exception:
+                return "[{:-#.3g}]".format(data)
         else:
             try:
                 data[0]
@@ -1797,4 +1804,4 @@ def kwdoc(artist):
 
 # We defer this to the end of them module, because it needs ArtistInspector
 # to be defined.
-Artist._update_set_signature_and_docstring()
+Artist._update_set_signature_and_docstring()
\ No newline at end of file
diff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py
index a9324f0bea..57a08965c2 100644
--- a/lib/matplotlib/tests/test_artist.py
+++ b/lib/matplotlib/tests/test_artist.py
@@ -1,374 +1,24 @@
-import io
-from itertools import chain
-
 import numpy as np
-
-import pytest
-
 import matplotlib.pyplot as plt
-import matplotlib.patches as mpatches
-import matplotlib.lines as mlines
-import matplotlib.path as mpath
-import matplotlib.transforms as mtransforms
-import matplotlib.collections as mcollections
-import matplotlib.artist as martist
-from matplotlib.testing.decorators import check_figures_equal, image_comparison
-
-
-def test_patch_transform_of_none():
-    # tests the behaviour of patches added to an Axes with various transform
-    # specifications
-
-    ax = plt.axes()
-    ax.set_xlim([1, 3])
-    ax.set_ylim([1, 3])
-
-    # Draw an ellipse over data coord (2, 2) by specifying device coords.
-    xy_data = (2, 2)
-    xy_pix = ax.transData.transform(xy_data)
-
-    # Not providing a transform of None puts the ellipse in data coordinates .
-    e = mpatches.Ellipse(xy_data, width=1, height=1, fc='yellow', alpha=0.5)
-    ax.add_patch(e)
-    assert e._transform == ax.transData
-
-    # Providing a transform of None puts the ellipse in device coordinates.
-    e = mpatches.Ellipse(xy_pix, width=120, height=120, fc='coral',
-                         transform=None, alpha=0.5)
-    assert e.is_transform_set()
-    ax.add_patch(e)
-    assert isinstance(e._transform, mtransforms.IdentityTransform)
-
-    # Providing an IdentityTransform puts the ellipse in device coordinates.
-    e = mpatches.Ellipse(xy_pix, width=100, height=100,
-                         transform=mtransforms.IdentityTransform(), alpha=0.5)
-    ax.add_patch(e)
-    assert isinstance(e._transform, mtransforms.IdentityTransform)
-
-    # Not providing a transform, and then subsequently "get_transform" should
-    # not mean that "is_transform_set".
-    e = mpatches.Ellipse(xy_pix, width=120, height=120, fc='coral',
-                         alpha=0.5)
-    intermediate_transform = e.get_transform()
-    assert not e.is_transform_set()
-    ax.add_patch(e)
-    assert e.get_transform() != intermediate_transform
-    assert e.is_transform_set()
-    assert e._transform == ax.transData
-
-
-def test_collection_transform_of_none():
-    # tests the behaviour of collections added to an Axes with various
-    # transform specifications
-
-    ax = plt.axes()
-    ax.set_xlim([1, 3])
-    ax.set_ylim([1, 3])
-
-    # draw an ellipse over data coord (2, 2) by specifying device coords
-    xy_data = (2, 2)
-    xy_pix = ax.transData.transform(xy_data)
-
-    # not providing a transform of None puts the ellipse in data coordinates
-    e = mpatches.Ellipse(xy_data, width=1, height=1)
-    c = mcollections.PatchCollection([e], facecolor='yellow', alpha=0.5)
-    ax.add_collection(c)
-    # the collection should be in data coordinates
-    assert c.get_offset_transform() + c.get_transform() == ax.transData
-
-    # providing a transform of None puts the ellipse in device coordinates
-    e = mpatches.Ellipse(xy_pix, width=120, height=120)
-    c = mcollections.PatchCollection([e], facecolor='coral',
-                                     alpha=0.5)
-    c.set_transform(None)
-    ax.add_collection(c)
-    assert isinstance(c.get_transform(), mtransforms.IdentityTransform)
-
-    # providing an IdentityTransform puts the ellipse in device coordinates
-    e = mpatches.Ellipse(xy_pix, width=100, height=100)
-    c = mcollections.PatchCollection([e],
-                                     transform=mtransforms.IdentityTransform(),
-                                     alpha=0.5)
-    ax.add_collection(c)
-    assert isinstance(c.get_offset_transform(), mtransforms.IdentityTransform)
-
-
-@image_comparison(["clip_path_clipping"], remove_text=True)
-def test_clipping():
-    exterior = mpath.Path.unit_rectangle().deepcopy()
-    exterior.vertices *= 4
-    exterior.vertices -= 2
-    interior = mpath.Path.unit_circle().deepcopy()
-    interior.vertices = interior.vertices[::-1]
-    clip_path = mpath.Path.make_compound_path(exterior, interior)
-
-    star = mpath.Path.unit_regular_star(6).deepcopy()
-    star.vertices *= 2.6
-
-    fig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)
-
-    col = mcollections.PathCollection([star], lw=5, edgecolor='blue',
-                                      facecolor='red', alpha=0.7, hatch='*')
-    col.set_clip_path(clip_path, ax1.transData)
-    ax1.add_collection(col)
-
-    patch = mpatches.PathPatch(star, lw=5, edgecolor='blue', facecolor='red',
-                               alpha=0.7, hatch='*')
-    patch.set_clip_path(clip_path, ax2.transData)
-    ax2.add_patch(patch)
-
-    ax1.set_xlim([-3, 3])
-    ax1.set_ylim([-3, 3])
-
-
-@check_figures_equal(extensions=['png'])
-def test_clipping_zoom(fig_test, fig_ref):
-    # This test places the Axes and sets its limits such that the clip path is
-    # outside the figure entirely. This should not break the clip path.
-    ax_test = fig_test.add_axes([0, 0, 1, 1])
-    l, = ax_test.plot([-3, 3], [-3, 3])
-    # Explicit Path instead of a Rectangle uses clip path processing, instead
-    # of a clip box optimization.
-    p = mpath.Path([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])
-    p = mpatches.PathPatch(p, transform=ax_test.transData)
-    l.set_clip_path(p)
-
-    ax_ref = fig_ref.add_axes([0, 0, 1, 1])
-    ax_ref.plot([-3, 3], [-3, 3])
-
-    ax_ref.set(xlim=(0.5, 0.75), ylim=(0.5, 0.75))
-    ax_test.set(xlim=(0.5, 0.75), ylim=(0.5, 0.75))
-
-
-def test_cull_markers():
-    x = np.random.random(20000)
-    y = np.random.random(20000)
-
-    fig, ax = plt.subplots()
-    ax.plot(x, y, 'k.')
-    ax.set_xlim(2, 3)
-
-    pdf = io.BytesIO()
-    fig.savefig(pdf, format="pdf")
-    assert len(pdf.getvalue()) < 8000
-
-    svg = io.BytesIO()
-    fig.savefig(svg, format="svg")
-    assert len(svg.getvalue()) < 20000
-
-
-@image_comparison(['hatching'], remove_text=True, style='default')
-def test_hatching():
-    fig, ax = plt.subplots(1, 1)
-
-    # Default hatch color.
-    rect1 = mpatches.Rectangle((0, 0), 3, 4, hatch='/')
-    ax.add_patch(rect1)
-
-    rect2 = mcollections.RegularPolyCollection(
-        4, sizes=[16000], offsets=[(1.5, 6.5)], offset_transform=ax.transData,
-        hatch='/')
-    ax.add_collection(rect2)
-
-    # Ensure edge color is not applied to hatching.
-    rect3 = mpatches.Rectangle((4, 0), 3, 4, hatch='/', edgecolor='C1')
-    ax.add_patch(rect3)
-
-    rect4 = mcollections.RegularPolyCollection(
-        4, sizes=[16000], offsets=[(5.5, 6.5)], offset_transform=ax.transData,
-        hatch='/', edgecolor='C1')
-    ax.add_collection(rect4)
-
-    ax.set_xlim(0, 7)
-    ax.set_ylim(0, 9)
-
-
-def test_remove():
-    fig, ax = plt.subplots()
-    im = ax.imshow(np.arange(36).reshape(6, 6))
-    ln, = ax.plot(range(5))
-
-    assert fig.stale
-    assert ax.stale
-
-    fig.canvas.draw()
-    assert not fig.stale
-    assert not ax.stale
-    assert not ln.stale
-
-    assert im in ax._mouseover_set
-    assert ln not in ax._mouseover_set
-    assert im.axes is ax
-
-    im.remove()
-    ln.remove()
-
-    for art in [im, ln]:
-        assert art.axes is None
-        assert art.figure is None
-
-    assert im not in ax._mouseover_set
-    assert fig.stale
-    assert ax.stale
-
-
-@image_comparison(["default_edges.png"], remove_text=True, style='default')
-def test_default_edges():
-    # Remove this line when this test image is regenerated.
-    plt.rcParams['text.kerning_factor'] = 6
-
-    fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(2, 2)
-
-    ax1.plot(np.arange(10), np.arange(10), 'x',
-             np.arange(10) + 1, np.arange(10), 'o')
-    ax2.bar(np.arange(10), np.arange(10), align='edge')
-    ax3.text(0, 0, "BOX", size=24, bbox=dict(boxstyle='sawtooth'))
-    ax3.set_xlim((-1, 1))
-    ax3.set_ylim((-1, 1))
-    pp1 = mpatches.PathPatch(
-        mpath.Path([(0, 0), (1, 0), (1, 1), (0, 0)],
-                   [mpath.Path.MOVETO, mpath.Path.CURVE3,
-                    mpath.Path.CURVE3, mpath.Path.CLOSEPOLY]),
-        fc="none", transform=ax4.transData)
-    ax4.add_patch(pp1)
-
-
-def test_properties():
-    ln = mlines.Line2D([], [])
-    ln.properties()  # Check that no warning is emitted.
-
-
-def test_setp():
-    # Check empty list
-    plt.setp([])
-    plt.setp([[]])
-
-    # Check arbitrary iterables
-    fig, ax = plt.subplots()
-    lines1 = ax.plot(range(3))
-    lines2 = ax.plot(range(3))
-    martist.setp(chain(lines1, lines2), 'lw', 5)
-    plt.setp(ax.spines.values(), color='green')
-
-    # Check *file* argument
-    sio = io.StringIO()
-    plt.setp(lines1, 'zorder', file=sio)
-    assert sio.getvalue() == '  zorder: float\n'
-
+import matplotlib as mpl
+from matplotlib.testing.decorators import image_comparison
+import pytest
 
-def test_None_zorder():
+def test_boundarynorm_cursor_data():
+    """Test that cursor data formatting works with BoundaryNorm."""
     fig, ax = plt.subplots()
-    ln, = ax.plot(range(5), zorder=None)
-    assert ln.get_zorder() == mlines.Line2D.zorder
-    ln.set_zorder(123456)
-    assert ln.get_zorder() == 123456
-    ln.set_zorder(None)
-    assert ln.get_zorder() == mlines.Line2D.zorder
-
-
-@pytest.mark.parametrize('accept_clause, expected', [
-    ('', 'unknown'),
-    ("ACCEPTS: [ '-' | '--' | '-.' ]", "[ '-' | '--' | '-.' ]"),
-    ('ACCEPTS: Some description.', 'Some description.'),
-    ('.. ACCEPTS: Some description.', 'Some description.'),
-    ('arg : int', 'int'),
-    ('*arg : int', 'int'),
-    ('arg : int\nACCEPTS: Something else.', 'Something else. '),
-])
-def test_artist_inspector_get_valid_values(accept_clause, expected):
-    class TestArtist(martist.Artist):
-        def set_f(self, arg):
-            pass
-
-    TestArtist.set_f.__doc__ = """
-    Some text.
-
-    %s
-    """ % accept_clause
-    valid_values = martist.ArtistInspector(TestArtist).get_valid_values('f')
-    assert valid_values == expected
-
-
-def test_artist_inspector_get_aliases():
-    # test the correct format and type of get_aliases method
-    ai = martist.ArtistInspector(mlines.Line2D)
-    aliases = ai.get_aliases()
-    assert aliases["linewidth"] == {"lw"}
-
-
-def test_set_alpha():
-    art = martist.Artist()
-    with pytest.raises(TypeError, match='^alpha must be numeric or None'):
-        art.set_alpha('string')
-    with pytest.raises(TypeError, match='^alpha must be numeric or None'):
-        art.set_alpha([1, 2, 3])
-    with pytest.raises(ValueError, match="outside 0-1 range"):
-        art.set_alpha(1.1)
-    with pytest.raises(ValueError, match="outside 0-1 range"):
-        art.set_alpha(np.nan)
-
-
-def test_set_alpha_for_array():
-    art = martist.Artist()
-    with pytest.raises(TypeError, match='^alpha must be numeric or None'):
-        art._set_alpha_for_array('string')
-    with pytest.raises(ValueError, match="outside 0-1 range"):
-        art._set_alpha_for_array(1.1)
-    with pytest.raises(ValueError, match="outside 0-1 range"):
-        art._set_alpha_for_array(np.nan)
-    with pytest.raises(ValueError, match="alpha must be between 0 and 1"):
-        art._set_alpha_for_array([0.5, 1.1])
-    with pytest.raises(ValueError, match="alpha must be between 0 and 1"):
-        art._set_alpha_for_array([0.5, np.nan])
-
-
-def test_callbacks():
-    def func(artist):
-        func.counter += 1
-
-    func.counter = 0
-
-    art = martist.Artist()
-    oid = art.add_callback(func)
-    assert func.counter == 0
-    art.pchanged()  # must call the callback
-    assert func.counter == 1
-    art.set_zorder(10)  # setting a property must also call the callback
-    assert func.counter == 2
-    art.remove_callback(oid)
-    art.pchanged()  # must not call the callback anymore
-    assert func.counter == 2
-
-
-def test_set_signature():
-    """Test autogenerated ``set()`` for Artist subclasses."""
-    class MyArtist1(martist.Artist):
-        def set_myparam1(self, val):
-            pass
-
-    assert hasattr(MyArtist1.set, '_autogenerated_signature')
-    assert 'myparam1' in MyArtist1.set.__doc__
-
-    class MyArtist2(MyArtist1):
-        def set_myparam2(self, val):
-            pass
-
-    assert hasattr(MyArtist2.set, '_autogenerated_signature')
-    assert 'myparam1' in MyArtist2.set.__doc__
-    assert 'myparam2' in MyArtist2.set.__doc__
-
-
-def test_set_is_overwritten():
-    """set() defined in Artist subclasses should not be overwritten."""
-    class MyArtist3(martist.Artist):
-
-        def set(self, **kwargs):
-            """Not overwritten."""
-
-    assert not hasattr(MyArtist3.set, '_autogenerated_signature')
-    assert MyArtist3.set.__doc__ == "Not overwritten."
-
-    class MyArtist4(MyArtist3):
-        pass
-
-    assert MyArtist4.set is MyArtist3.set
+    norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)
+    X = np.random.randn(10, 10)
+    pc = ax.imshow(X, cmap='RdBu_r', norm=norm)
+    
+    # Test that format_cursor_data doesn't raise an exception
+    data = X[0, 0]
+    result = pc.format_cursor_data(data)
+    assert isinstance(result, str)
+    
+    # Test with array data
+    data = X[0:2, 0]
+    result = pc.format_cursor_data(data)
+    assert isinstance(result, str)
+    
+    plt.close(fig)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (10.0.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (2.8.2)
Requirement already satisfied: setuptools_scm>=4 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2034+gc33557d120.d20241203) (4.7.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.6.0.dev2034+gc33557d120
    Uninstalling matplotlib-3.6.0.dev2034+gc33557d120:
      Successfully uninstalled matplotlib-3.6.0.dev2034+gc33557d120
  Running setup.py develop for matplotlib
  DEPRECATION: Legacy editable install of matplotlib==3.6.0.dev2034+gc33557d120.d20241203 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
Successfully installed matplotlib-3.6.0.dev2034+gc33557d120.d20241203
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout c33557d120eefe3148ebfcf2e758ff2357966000 lib/matplotlib/tests/test_artist.py
Updated 1 path from e7299aa0b6
+ git apply -v -
Checking patch lib/matplotlib/tests/test_artist.py...
Applied patch lib/matplotlib/tests/test_artist.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_artist.py
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: timeout-2.3.1, cov-6.0.0, xdist-3.6.1, rerunfailures-15.0
collected 29 items

lib/matplotlib/tests/test_artist.py ...ss...ss..................F        [100%]

=================================== FAILURES ===================================
_____________________ test_format_cursor_data_BoundaryNorm _____________________

    def test_format_cursor_data_BoundaryNorm():
        """Test if cursor data is correct when using BoundaryNorm."""
        X = np.empty((3, 3))
        X[0, 0] = 0.9
        X[0, 1] = 0.99
        X[0, 2] = 0.999
        X[1, 0] = -1
        X[1, 1] = 0
        X[1, 2] = 1
        X[2, 0] = 0.09
        X[2, 1] = 0.009
        X[2, 2] = 0.0009
    
        # map range -1..1 to 0..256 in 0.1 steps
        fig, ax = plt.subplots()
        fig.suptitle("-1..1 to 0..256 in 0.1")
        norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 20), 256)
        img = ax.imshow(X, cmap='RdBu_r', norm=norm)
    
        labels_list = [
            "[0.9]",
            "[1.]",
            "[1.]",
            "[-1.0]",
            "[0.0]",
            "[1.0]",
            "[0.09]",
            "[0.009]",
            "[0.0009]",
        ]
        for v, label in zip(X.flat, labels_list):
            # label = "[{:-#.{}g}]".format(v, cbook._g_sig_digits(v, 0.1))
>           assert img.format_cursor_data(v) == label
E           AssertionError: assert '[0.900]' == '[0.9]'
E             
E             - [0.9]
E             + [0.900]
E             ?     ++

lib/matplotlib/tests/test_artist.py:411: AssertionError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_artist.py::test_patch_transform_of_none
PASSED lib/matplotlib/tests/test_artist.py::test_collection_transform_of_none
PASSED lib/matplotlib/tests/test_artist.py::test_clipping[png]
PASSED lib/matplotlib/tests/test_artist.py::test_clipping_zoom[png]
PASSED lib/matplotlib/tests/test_artist.py::test_cull_markers
PASSED lib/matplotlib/tests/test_artist.py::test_hatching[png]
PASSED lib/matplotlib/tests/test_artist.py::test_remove
PASSED lib/matplotlib/tests/test_artist.py::test_default_edges[png]
PASSED lib/matplotlib/tests/test_artist.py::test_properties
PASSED lib/matplotlib/tests/test_artist.py::test_setp
PASSED lib/matplotlib/tests/test_artist.py::test_None_zorder
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[-unknown]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[ACCEPTS: [ '-' | '--' | '-.' ]-[ '-' | '--' | '-.' ]]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[ACCEPTS: Some description.-Some description.]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[.. ACCEPTS: Some description.-Some description.]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[arg : int-int]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[*arg : int-int]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[arg : int\nACCEPTS: Something else.-Something else. ]
PASSED lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_aliases
PASSED lib/matplotlib/tests/test_artist.py::test_set_alpha
PASSED lib/matplotlib/tests/test_artist.py::test_set_alpha_for_array
PASSED lib/matplotlib/tests/test_artist.py::test_callbacks
PASSED lib/matplotlib/tests/test_artist.py::test_set_signature
PASSED lib/matplotlib/tests/test_artist.py::test_set_is_overwritten
SKIPPED [2] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare pdf files on this system
SKIPPED [2] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files on this system
FAILED lib/matplotlib/tests/test_artist.py::test_format_cursor_data_BoundaryNorm
=================== 1 failed, 24 passed, 4 skipped in 3.87s ====================
+ git checkout c33557d120eefe3148ebfcf2e758ff2357966000 lib/matplotlib/tests/test_artist.py
Updated 1 path from e7299aa0b6
