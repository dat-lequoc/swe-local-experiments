diff --git a/sklearn/base.py b/sklearn/base.py
index 167baaf2b..e46ba92c0 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -235,6 +235,7 @@ class BaseEstimator:
 
     def __repr__(self):
         from .utils._pprint import _EstimatorPrettyPrinter
+        import numpy as np
 
         N_CHAR_MAX = 700  # number of non-whitespace or newline chars
         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences
@@ -632,4 +633,4 @@ def is_outlier_detector(estimator):
     out : bool
         True if estimator is an outlier detector and False otherwise.
     """
-    return getattr(estimator, "_estimator_type", None) == "outlier_detector"
+    return getattr(estimator, "_estimator_type", None) == "outlier_detector"
\ No newline at end of file
diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py
index 316b01ff3..c5c66048c 100644
--- a/sklearn/tests/test_base.py
+++ b/sklearn/tests/test_base.py
@@ -137,6 +137,21 @@ def test_clone_2():
     assert not hasattr(new_selector, "own_attribute")
 
 
+def test_repr_numpy_array():
+    # Test that estimator repr works with numpy arrays
+    from sklearn.linear_model import LogisticRegressionCV
+    import numpy as np
+    from sklearn import set_config, get_config
+
+    old_config = get_config()
+    try:
+        set_config(print_changed_only=True)
+        est = LogisticRegressionCV(Cs=np.array([0.1, 1]))
+        repr_str = repr(est)
+        assert 'Cs=array' in repr_str
+    finally:
+        set_config(**old_config)
+
 def test_clone_buggy():
     # Check that clone raises an error on buggy estimators.
     buggy = Buggy()
@@ -508,4 +523,4 @@ def test_regressormixin_score_multioutput():
            "custom scorer with 'metrics.make_scorer' (the "
            "built-in scorer 'r2' uses "
            "multioutput='uniform_average').")
-    assert_warns_message(FutureWarning, msg, reg.score, X, y)
+    assert_warns_message(FutureWarning, msg, reg.score, X, y)
\ No newline at end of file
diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py
index b8686dba5..6d670f3ad 100644
--- a/sklearn/utils/_pprint.py
+++ b/sklearn/utils/_pprint.py
@@ -64,6 +64,7 @@ BaseEstimator.__repr__ for pretty-printing estimators"""
 #   shortened using ellipsis (', ...') at the end.
 
 from inspect import signature
+import numpy as np
 import pprint
 from collections import OrderedDict
 
@@ -95,7 +96,10 @@ def _changed_params(estimator):
     init_params = signature(init_func).parameters
     init_params = {name: param.default for name, param in init_params.items()}
     for k, v in params.items():
-        if (v != init_params[k] and
+        if isinstance(v, np.ndarray) or isinstance(init_params[k], np.ndarray):
+            if not np.array_equal(v, init_params[k]):
+                filtered_params[k] = v
+        elif (v != init_params[k] and
                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):
             filtered_params[k] = v
     return filtered_params
@@ -432,4 +436,4 @@ def _safe_repr(object, context, maxlevels, level, changed_only=False):
                 recursive)
 
     rep = repr(object)
-    return rep, (rep and not rep.startswith('<')), False
+    return rep, (rep and not rep.startswith('<')), False
\ No newline at end of file
