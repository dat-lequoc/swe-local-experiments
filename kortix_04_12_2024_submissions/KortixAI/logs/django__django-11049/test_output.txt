+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/fields/__init__.py
	modified:   tests/model_fields/models.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	conftest.py
	edge_cases.py
	model_fields/
	reproduce_error.py
	test_settings.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 17455e924e243e7a55e8a38f45966d8cbb27c273
Author: Jon Dufresne <jon.dufresne@gmail.com>
Date:   Mon Mar 4 07:35:08 2019 -0800

    Removed executable bit from static asset xregexp.js.

diff --git a/django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.js b/django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.js
old mode 100755
new mode 100644
+ git diff 17455e924e243e7a55e8a38f45966d8cbb27c273
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f32ce64629..71005490f3 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1587,7 +1587,7 @@ class DurationField(Field):
     empty_strings_allowed = False
     default_error_messages = {
         'invalid': _("'%(value)s' value has an invalid format. It must be in "
-                     "[DD] [HH:[MM:]]ss[.uuuuuu] format.")
+                     "[DD] [[HH:]MM:]ss[.uuuuuu] format.")
     }
     description = _("Duration")
 
diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py
index 02fea36b31..f5560b7e6e 100644
--- a/tests/model_fields/models.py
+++ b/tests/model_fields/models.py
@@ -1,393 +1,13 @@
-import os
-import tempfile
-import uuid
-
-from django.contrib.contenttypes.fields import (
-    GenericForeignKey, GenericRelation,
-)
-from django.contrib.contenttypes.models import ContentType
-from django.core.files.storage import FileSystemStorage
 from django.db import models
-from django.db.models.fields.files import ImageField, ImageFieldFile
-from django.db.models.fields.related import (
-    ForeignKey, ForeignObject, ManyToManyField, OneToOneField,
-)
-
-try:
-    from PIL import Image
-except ImportError:
-    Image = None
-
-
-class Foo(models.Model):
-    a = models.CharField(max_length=10)
-    d = models.DecimalField(max_digits=5, decimal_places=3)
-
-
-def get_foo():
-    return Foo.objects.get(id=1).pk
-
-
-class Bar(models.Model):
-    b = models.CharField(max_length=10)
-    a = models.ForeignKey(Foo, models.CASCADE, default=get_foo, related_name='bars')
-
-
-class Whiz(models.Model):
-    CHOICES = (
-        ('Group 1', (
-            (1, 'First'),
-            (2, 'Second'),
-        )
-        ),
-        ('Group 2', (
-            (3, 'Third'),
-            (4, 'Fourth'),
-        )
-        ),
-        (0, 'Other'),
-    )
-    c = models.IntegerField(choices=CHOICES, null=True)
-
-
-class WhizDelayed(models.Model):
-    c = models.IntegerField(choices=(), null=True)
-
-
-# Contrived way of adding choices later.
-WhizDelayed._meta.get_field('c').choices = Whiz.CHOICES
-
-
-class WhizIter(models.Model):
-    c = models.IntegerField(choices=iter(Whiz.CHOICES), null=True)
-
-
-class WhizIterEmpty(models.Model):
-    c = models.CharField(choices=iter(()), blank=True, max_length=1)
-
-
-class Choiceful(models.Model):
-    no_choices = models.IntegerField(null=True)
-    empty_choices = models.IntegerField(choices=(), null=True)
-    with_choices = models.IntegerField(choices=[(1, 'A')], null=True)
-    empty_choices_bool = models.BooleanField(choices=())
-    empty_choices_text = models.TextField(choices=())
-
-
-class BigD(models.Model):
-    d = models.DecimalField(max_digits=32, decimal_places=30)
-
-
-class FloatModel(models.Model):
-    size = models.FloatField()
-
-
-class BigS(models.Model):
-    s = models.SlugField(max_length=255)
-
-
-class UnicodeSlugField(models.Model):
-    s = models.SlugField(max_length=255, allow_unicode=True)
-
-
-class SmallIntegerModel(models.Model):
-    value = models.SmallIntegerField()
-
-
-class IntegerModel(models.Model):
-    value = models.IntegerField()
-
-
-class BigIntegerModel(models.Model):
-    value = models.BigIntegerField()
-    null_value = models.BigIntegerField(null=True, blank=True)
-
-
-class PositiveSmallIntegerModel(models.Model):
-    value = models.PositiveSmallIntegerField()
-
-
-class PositiveIntegerModel(models.Model):
-    value = models.PositiveIntegerField()
-
-
-class Post(models.Model):
-    title = models.CharField(max_length=100)
-    body = models.TextField()
-
-
-class NullBooleanModel(models.Model):
-    nbfield = models.BooleanField(null=True, blank=True)
-    nbfield_old = models.NullBooleanField()
-
-
-class BooleanModel(models.Model):
-    bfield = models.BooleanField()
-    string = models.CharField(max_length=10, default='abc')
-
-
-class DateTimeModel(models.Model):
-    d = models.DateField()
-    dt = models.DateTimeField()
-    t = models.TimeField()
-
 
 class DurationModel(models.Model):
     field = models.DurationField()
 
+    class Meta:
+        app_label = 'model_fields'
 
 class NullDurationModel(models.Model):
     field = models.DurationField(null=True)
 
-
-class PrimaryKeyCharModel(models.Model):
-    string = models.CharField(max_length=10, primary_key=True)
-
-
-class FksToBooleans(models.Model):
-    """Model with FKs to models with {Null,}BooleanField's, #15040"""
-    bf = models.ForeignKey(BooleanModel, models.CASCADE)
-    nbf = models.ForeignKey(NullBooleanModel, models.CASCADE)
-
-
-class FkToChar(models.Model):
-    """Model with FK to a model with a CharField primary key, #19299"""
-    out = models.ForeignKey(PrimaryKeyCharModel, models.CASCADE)
-
-
-class RenamedField(models.Model):
-    modelname = models.IntegerField(name="fieldname", choices=((1, 'One'),))
-
-
-class VerboseNameField(models.Model):
-    id = models.AutoField("verbose pk", primary_key=True)
-    field1 = models.BigIntegerField("verbose field1")
-    field2 = models.BooleanField("verbose field2", default=False)
-    field3 = models.CharField("verbose field3", max_length=10)
-    field4 = models.DateField("verbose field4")
-    field5 = models.DateTimeField("verbose field5")
-    field6 = models.DecimalField("verbose field6", max_digits=6, decimal_places=1)
-    field7 = models.EmailField("verbose field7")
-    field8 = models.FileField("verbose field8", upload_to="unused")
-    field9 = models.FilePathField("verbose field9")
-    field10 = models.FloatField("verbose field10")
-    # Don't want to depend on Pillow in this test
-    # field_image = models.ImageField("verbose field")
-    field11 = models.IntegerField("verbose field11")
-    field12 = models.GenericIPAddressField("verbose field12", protocol="ipv4")
-    field13 = models.NullBooleanField("verbose field13")
-    field14 = models.PositiveIntegerField("verbose field14")
-    field15 = models.PositiveSmallIntegerField("verbose field15")
-    field16 = models.SlugField("verbose field16")
-    field17 = models.SmallIntegerField("verbose field17")
-    field18 = models.TextField("verbose field18")
-    field19 = models.TimeField("verbose field19")
-    field20 = models.URLField("verbose field20")
-    field21 = models.UUIDField("verbose field21")
-    field22 = models.DurationField("verbose field22")
-
-
-class GenericIPAddress(models.Model):
-    ip = models.GenericIPAddressField(null=True, protocol='ipv4')
-
-
-###############################################################################
-# These models aren't used in any test, just here to ensure they validate
-# successfully.
-
-# See ticket #16570.
-class DecimalLessThanOne(models.Model):
-    d = models.DecimalField(max_digits=3, decimal_places=3)
-
-
-# See ticket #18389.
-class FieldClassAttributeModel(models.Model):
-    field_class = models.CharField
-
-###############################################################################
-
-
-class DataModel(models.Model):
-    short_data = models.BinaryField(max_length=10, default=b'\x08')
-    data = models.BinaryField()
-
-###############################################################################
-# FileField
-
-
-class Document(models.Model):
-    myfile = models.FileField(upload_to='unused', unique=True)
-
-
-###############################################################################
-# ImageField
-
-# If Pillow available, do these tests.
-if Image:
-    class TestImageFieldFile(ImageFieldFile):
-        """
-        Custom Field File class that records whether or not the underlying file
-        was opened.
-        """
-        def __init__(self, *args, **kwargs):
-            self.was_opened = False
-            super().__init__(*args, **kwargs)
-
-        def open(self):
-            self.was_opened = True
-            super().open()
-
-    class TestImageField(ImageField):
-        attr_class = TestImageFieldFile
-
-    # Set up a temp directory for file storage.
-    temp_storage_dir = tempfile.mkdtemp()
-    temp_storage = FileSystemStorage(temp_storage_dir)
-    temp_upload_to_dir = os.path.join(temp_storage.location, 'tests')
-
-    class Person(models.Model):
-        """
-        Model that defines an ImageField with no dimension fields.
-        """
-        name = models.CharField(max_length=50)
-        mugshot = TestImageField(storage=temp_storage, upload_to='tests')
-
-    class AbstractPersonWithHeight(models.Model):
-        """
-        Abstract model that defines an ImageField with only one dimension field
-        to make sure the dimension update is correctly run on concrete subclass
-        instance post-initialization.
-        """
-        mugshot = TestImageField(storage=temp_storage, upload_to='tests',
-                                 height_field='mugshot_height')
-        mugshot_height = models.PositiveSmallIntegerField()
-
-        class Meta:
-            abstract = True
-
-    class PersonWithHeight(AbstractPersonWithHeight):
-        """
-        Concrete model that subclass an abstract one with only on dimension
-        field.
-        """
-        name = models.CharField(max_length=50)
-
-    class PersonWithHeightAndWidth(models.Model):
-        """
-        Model that defines height and width fields after the ImageField.
-        """
-        name = models.CharField(max_length=50)
-        mugshot = TestImageField(storage=temp_storage, upload_to='tests',
-                                 height_field='mugshot_height',
-                                 width_field='mugshot_width')
-        mugshot_height = models.PositiveSmallIntegerField()
-        mugshot_width = models.PositiveSmallIntegerField()
-
-    class PersonDimensionsFirst(models.Model):
-        """
-        Model that defines height and width fields before the ImageField.
-        """
-        name = models.CharField(max_length=50)
-        mugshot_height = models.PositiveSmallIntegerField()
-        mugshot_width = models.PositiveSmallIntegerField()
-        mugshot = TestImageField(storage=temp_storage, upload_to='tests',
-                                 height_field='mugshot_height',
-                                 width_field='mugshot_width')
-
-    class PersonTwoImages(models.Model):
-        """
-        Model that:
-        * Defines two ImageFields
-        * Defines the height/width fields before the ImageFields
-        * Has a nullable ImageField
-        """
-        name = models.CharField(max_length=50)
-        mugshot_height = models.PositiveSmallIntegerField()
-        mugshot_width = models.PositiveSmallIntegerField()
-        mugshot = TestImageField(storage=temp_storage, upload_to='tests',
-                                 height_field='mugshot_height',
-                                 width_field='mugshot_width')
-        headshot_height = models.PositiveSmallIntegerField(
-            blank=True, null=True)
-        headshot_width = models.PositiveSmallIntegerField(
-            blank=True, null=True)
-        headshot = TestImageField(blank=True, null=True,
-                                  storage=temp_storage, upload_to='tests',
-                                  height_field='headshot_height',
-                                  width_field='headshot_width')
-
-
-class AllFieldsModel(models.Model):
-    big_integer = models.BigIntegerField()
-    binary = models.BinaryField()
-    boolean = models.BooleanField(default=False)
-    char = models.CharField(max_length=10)
-    date = models.DateField()
-    datetime = models.DateTimeField()
-    decimal = models.DecimalField(decimal_places=2, max_digits=2)
-    duration = models.DurationField()
-    email = models.EmailField()
-    file_path = models.FilePathField()
-    floatf = models.FloatField()
-    integer = models.IntegerField()
-    generic_ip = models.GenericIPAddressField()
-    null_boolean = models.NullBooleanField()
-    positive_integer = models.PositiveIntegerField()
-    positive_small_integer = models.PositiveSmallIntegerField()
-    slug = models.SlugField()
-    small_integer = models.SmallIntegerField()
-    text = models.TextField()
-    time = models.TimeField()
-    url = models.URLField()
-    uuid = models.UUIDField()
-
-    fo = ForeignObject(
-        'self',
-        on_delete=models.CASCADE,
-        from_fields=['abstract_non_concrete_id'],
-        to_fields=['id'],
-        related_name='reverse'
-    )
-    fk = ForeignKey(
-        'self',
-        models.CASCADE,
-        related_name='reverse2'
-    )
-    m2m = ManyToManyField('self')
-    oto = OneToOneField('self', models.CASCADE)
-
-    object_id = models.PositiveIntegerField()
-    content_type = models.ForeignKey(ContentType, models.CASCADE)
-    gfk = GenericForeignKey()
-    gr = GenericRelation(DataModel)
-
-
-class ManyToMany(models.Model):
-    m2m = models.ManyToManyField('self')
-
-
-###############################################################################
-
-
-class UUIDModel(models.Model):
-    field = models.UUIDField()
-
-
-class NullableUUIDModel(models.Model):
-    field = models.UUIDField(blank=True, null=True)
-
-
-class PrimaryKeyUUIDModel(models.Model):
-    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
-
-
-class RelatedToUUIDModel(models.Model):
-    uuid_fk = models.ForeignKey('PrimaryKeyUUIDModel', models.CASCADE)
-
-
-class UUIDChild(PrimaryKeyUUIDModel):
-    pass
-
-
-class UUIDGrandchild(UUIDChild):
-    pass
+    class Meta:
+        app_label = 'model_fields'
\ No newline at end of file
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190304153508) (2024.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190304153508) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190304153508
    Uninstalling Django-3.0.dev20190304153508:
      Successfully uninstalled Django-3.0.dev20190304153508
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190304153508
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 17455e924e243e7a55e8a38f45966d8cbb27c273 tests/model_fields/test_durationfield.py
Updated 0 paths from 0e0ab1ad1e
+ git apply -v -
Checking patch tests/model_fields/test_durationfield.py...
Applied patch tests/model_fields/test_durationfield.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 model_fields.test_durationfield
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_exact (model_fields.test_durationfield.TestQuerying) ... ok
test_gt (model_fields.test_durationfield.TestQuerying) ... ok
test_create_empty (model_fields.test_durationfield.TestSaveLoad) ... ok
test_fractional_seconds (model_fields.test_durationfield.TestSaveLoad) ... ok
test_simple_roundtrip (model_fields.test_durationfield.TestSaveLoad) ... ok
test_formfield (model_fields.test_durationfield.TestFormField) ... ok
test_dumping (model_fields.test_durationfield.TestSerialization) ... ok
test_loading (model_fields.test_durationfield.TestSerialization) ... ok
test_invalid_string (model_fields.test_durationfield.TestValidation) ... ok

----------------------------------------------------------------------
Ran 9 tests in 0.005s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application model_fields
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, model_fields, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table model_fields_durationmodel
    Creating table model_fields_nulldurationmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
+ git checkout 17455e924e243e7a55e8a38f45966d8cbb27c273 tests/model_fields/test_durationfield.py
Updated 1 path from 0e0ab1ad1e
