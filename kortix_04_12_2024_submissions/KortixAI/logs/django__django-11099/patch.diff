diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..15ecd64a27
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,41 @@
+from django.conf import settings
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=False,  # Disable internationalization for simplicity
+        DATABASES={},  # No database needed
+        INSTALLED_APPS=['django.contrib.auth']  # Required for auth validators
+    )
+
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validators():
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+
+    # Test valid usernames
+    print("Testing valid usernames:")
+    valid_usernames = ["user1", "user.name", "user@domain", "user+name", "user-name"]
+    for username in valid_usernames:
+        try:
+            ascii_validator(username)
+            unicode_validator(username)
+            print(f"[PASS] {username!r} is valid")
+        except ValidationError as e:
+            print(f"[FAIL] {username!r} failed validation: {e}")
+
+    # Test usernames with trailing newline (should be rejected now)
+    print("\nTesting usernames with trailing newline:")
+    newline_usernames = ["user1\n", "user.name\n", "user@domain\n"]
+    for username in newline_usernames:
+        try:
+            ascii_validator(username)
+            unicode_validator(username)
+            print(f"[FAIL] {username!r} is incorrectly accepted")
+        except ValidationError as e:
+            print(f"[PASS] {username!r} is correctly rejected")
+
+if __name__ == "__main__":
+    test_validators()
\ No newline at end of file
