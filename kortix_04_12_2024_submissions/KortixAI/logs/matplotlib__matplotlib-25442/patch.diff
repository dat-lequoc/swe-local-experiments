diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 77768e7383..e4a98d4e4a 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1507,8 +1507,14 @@ class DraggableBase:
                 'button_release_event', self.on_release),
         ]
 
-    # A property, not an attribute, to maintain picklability.
-    canvas = property(lambda self: self.ref_artist.figure.canvas)
+    @property
+    def canvas(self):
+        # Cache canvas reference and handle None case
+        if not hasattr(self, '_canvas'):
+            self._canvas = (self.ref_artist.figure.canvas 
+                          if self.ref_artist and self.ref_artist.figure 
+                          else None)
+        return self._canvas
 
     def on_motion(self, evt):
         if self._check_still_parented() and self.got_artist:
@@ -1558,14 +1564,16 @@ class DraggableBase:
 
     def disconnect(self):
         """Disconnect the callbacks."""
-        for cid in self.cids:
-            self.canvas.mpl_disconnect(cid)
-        try:
-            c1 = self._c1
-        except AttributeError:
-            pass
-        else:
-            self.canvas.mpl_disconnect(c1)
+        if hasattr(self, '_canvas') and self._canvas is not None:
+            for cid in self.cids:
+                self._canvas.mpl_disconnect(cid)
+            try:
+                c1 = self._c1
+            except AttributeError:
+                pass
+            else:
+                self._canvas.mpl_disconnect(c1)
+        self._canvas = None
 
     def save_offset(self):
         pass
@@ -1614,4 +1622,4 @@ class DraggableAnnotation(DraggableBase):
     def update_offset(self, dx, dy):
         ann = self.annotation
         ann.xyann = ann.get_transform().inverted().transform(
-            (self.ox + dx, self.oy + dy))
+            (self.ox + dx, self.oy + dy))
\ No newline at end of file
