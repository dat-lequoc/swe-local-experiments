diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..4ebec5c906 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -95,8 +95,20 @@ class DeconstructableSerializer(BaseSerializer):
             imports = {"from django.db import models"}
             name = "models.%s" % name
         else:
+            # Handle inner classes by cleaning up the path
+            parts = path.split('.')
+            # Remove <locals> and test method names from the path
+            cleaned_parts = []
+            for i, part in enumerate(parts):
+                if part == '<locals>' or (i > 0 and part.startswith('test_')):
+                    continue
+                if i == len(parts) - 1 or parts[i+1] not in ('test_', '<locals>'):
+                    cleaned_parts.append(part)
+            
+            # Get the module name (first part) and construct the cleaned path
+            module = cleaned_parts[0]
             imports = {"import %s" % module}
-            name = path
+            name = '.'.join(cleaned_parts)
         return name, imports
 
     def serialize(self):
diff --git a/tests/migrations/edge_cases.py b/tests/migrations/edge_cases.py
new file mode 100644
index 0000000000..46ce0466c9
--- /dev/null
+++ b/tests/migrations/edge_cases.py
@@ -0,0 +1,79 @@
+from django.db import migrations, models
+from django.test import SimpleTestCase
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import Migration
+from django.test.utils import override_settings
+from django.conf import settings
+import django
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={},
+        INSTALLED_APPS=[],
+        SECRET_KEY='dummy',
+    )
+    django.setup()
+
+class TestInnerClassEdgeCases(SimpleTestCase):
+    @override_settings(MIGRATION_MODULES={})
+    def test_nested_inner_classes(self):
+        class OuterMost:
+            class Middle:
+                class Inner(models.CharField):
+                    pass
+
+        class A(models.Model):
+            field = OuterMost.Middle.Inner(max_length=20)
+            
+            class Meta:
+                app_label = 'test_app'
+
+        migration = Migration('test_migration', 'test_app')
+        migration.operations = [
+            migrations.CreateModel(
+                name='A',
+                fields=[
+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                    ('field', OuterMost.Middle.Inner(max_length=20)),
+                ],
+            ),
+        ]
+
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        
+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.OuterMost.Middle.Inner', output)
+
+    @override_settings(MIGRATION_MODULES={})
+    def test_multiple_inner_fields(self):
+        class Container:
+            class Field1(models.CharField):
+                pass
+            class Field2(models.IntegerField):
+                pass
+
+        class B(models.Model):
+            field1 = Container.Field1(max_length=20)
+            field2 = Container.Field2()
+            
+            class Meta:
+                app_label = 'test_app'
+
+        migration = Migration('test_migration', 'test_app')
+        migration.operations = [
+            migrations.CreateModel(
+                name='B',
+                fields=[
+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                    ('field1', Container.Field1(max_length=20)),
+                    ('field2', Container.Field2()),
+                ],
+            ),
+        ]
+
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        
+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.Container.Field1', output)
+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.Container.Field2', output)
\ No newline at end of file
diff --git a/tests/migrations/test_inner_class.py b/tests/migrations/test_inner_class.py
new file mode 100644
index 0000000000..53864f0c89
--- /dev/null
+++ b/tests/migrations/test_inner_class.py
@@ -0,0 +1,42 @@
+from django.db import migrations, models
+from django.test import SimpleTestCase
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import Migration
+from django.test.utils import override_settings
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    SECRET_KEY='dummy',
+)
+
+class TestInnerClassMigrations(SimpleTestCase):
+    @override_settings(MIGRATION_MODULES={})
+    def test_inner_class_path(self):
+        class Outer:
+            class Inner(models.CharField):
+                pass
+
+        class A(models.Model):
+            field = Outer.Inner(max_length=20)
+
+        # Create a test migration
+        migration = Migration('test_migration', 'test_app')
+        migration.operations = [
+            migrations.CreateModel(
+                name='A',
+                fields=[
+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                    ('field', Outer.Inner(max_length=20)),
+                ],
+            ),
+        ]
+
+        # Write the migration
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        
+        # The output should contain the full path to the inner class
+        self.assertIn('test_inner_class.Outer.Inner', output)
\ No newline at end of file
diff --git a/tests/migrations/test_inner_class_new.py b/tests/migrations/test_inner_class_new.py
new file mode 100644
index 0000000000..5bca753d8d
--- /dev/null
+++ b/tests/migrations/test_inner_class_new.py
@@ -0,0 +1,48 @@
+from django.db import migrations, models
+from django.test import SimpleTestCase
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import Migration
+from django.test.utils import override_settings
+from django.conf import settings
+import django
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={},
+        INSTALLED_APPS=[],
+        SECRET_KEY='dummy',
+    )
+    django.setup()
+
+class TestInnerClassMigrations(SimpleTestCase):
+    @override_settings(MIGRATION_MODULES={})
+    def test_inner_class_path(self):
+        class Outer:
+            class Inner(models.CharField):
+                pass
+
+        class A(models.Model):
+            field = Outer.Inner(max_length=20)
+            
+            class Meta:
+                app_label = 'test_app'
+
+        # Create a test migration
+        migration = Migration('test_migration', 'test_app')
+        migration.operations = [
+            migrations.CreateModel(
+                name='A',
+                fields=[
+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                    ('field', Outer.Inner(max_length=20)),
+                ],
+            ),
+        ]
+
+        # Write the migration
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        
+        # The output should contain the full path to the inner class
+        self.assertIn('migrations.TestInnerClassMigrations.Outer.Inner', output)
\ No newline at end of file
