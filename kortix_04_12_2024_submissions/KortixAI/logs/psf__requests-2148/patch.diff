diff --git a/requests/adapters.py b/requests/adapters.py
index 1ce54470..afb0c5dd 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -191,32 +191,39 @@ class HTTPAdapter(BaseAdapter):
         :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
         :param resp: The urllib3 response object.
         """
-        response = Response()
+        try:
+            response = Response()
 
-        # Fallback to None if there's no status_code, for whatever reason.
-        response.status_code = getattr(resp, 'status', None)
+            # Fallback to None if there's no status_code, for whatever reason.
+            response.status_code = getattr(resp, 'status', None)
 
-        # Make headers case-insensitive.
-        response.headers = CaseInsensitiveDict(getattr(resp, 'headers', {}))
+            # Make headers case-insensitive.
+            response.headers = CaseInsensitiveDict(getattr(resp, 'headers', {}))
 
-        # Set encoding.
-        response.encoding = get_encoding_from_headers(response.headers)
-        response.raw = resp
-        response.reason = response.raw.reason
+            # Set encoding.
+            response.encoding = get_encoding_from_headers(response.headers)
+            response.raw = resp
+            response.reason = response.raw.reason
 
-        if isinstance(req.url, bytes):
-            response.url = req.url.decode('utf-8')
-        else:
-            response.url = req.url
+            if isinstance(req.url, bytes):
+                response.url = req.url.decode('utf-8')
+            else:
+                response.url = req.url
 
-        # Add new cookies from the server.
-        extract_cookies_to_jar(response.cookies, req, resp)
+            # Add new cookies from the server.
+            extract_cookies_to_jar(response.cookies, req, resp)
 
-        # Give the Response some context.
-        response.request = req
-        response.connection = self
+            # Give the Response some context.
+            response.request = req
+            response.connection = self
 
-        return response
+            return response
+        except socket.error as e:
+            raise ConnectionError(e, request=req)
+        except Exception as e:
+            if isinstance(e, socket.error):
+                raise ConnectionError(e, request=req)
+            raise
 
     def get_connection(self, url, proxies=None):
         """Returns a urllib3 connection for the given URL. This should not be
@@ -386,10 +393,7 @@ class HTTPAdapter(BaseAdapter):
                     # All is well, return the connection to the pool.
                     conn._put_conn(low_conn)
 
-        except socket.error as sockerr:
-            raise ConnectionError(sockerr, request=request)
-
-        except MaxRetryError as e:
+        except (socket.error, MaxRetryError) as e:
             raise ConnectionError(e, request=request)
 
         except _ProxyError as e:
@@ -400,7 +404,9 @@ class HTTPAdapter(BaseAdapter):
                 raise SSLError(e, request=request)
             elif isinstance(e, TimeoutError):
                 raise Timeout(e, request=request)
+            elif isinstance(e, socket.error):
+                raise ConnectionError(e, request=request)
             else:
                 raise
 
-        return self.build_response(request, resp)
+        return self.build_response(request, resp)
\ No newline at end of file
diff --git a/test_requests.py b/test_requests.py
index 283353b9..20209c32 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -417,7 +417,8 @@ class RequestsTestCase(unittest.TestCase):
     def test_conflicting_post_params(self):
         url = httpbin('post')
         with open('requirements.txt') as f:
-            pytest.raises(ValueError, "requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})")
+            with pytest.raises(ValueError):
+                requests.post(url, data='[{"some": "data"}]', files={'some': f})
             pytest.raises(ValueError, "requests.post(url, data=u('[{\"some\": \"data\"}]'), files={'some': f})")
 
     def test_request_ok_set(self):
@@ -1422,4 +1423,4 @@ def test_prepared_request_complete_copy():
     assert_copy(p, p.copy())
 
 if __name__ == '__main__':
-    unittest.main()
+    unittest.main()
\ No newline at end of file
