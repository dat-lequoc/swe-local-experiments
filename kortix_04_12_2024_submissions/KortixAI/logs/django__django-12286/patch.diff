diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py
index 138ed07ff8..82b22a657d 100644
--- a/django/core/checks/translation.py
+++ b/django/core/checks/translation.py
@@ -55,7 +55,9 @@ def check_setting_languages_bidi(app_configs, **kwargs):
 @register(Tags.translation)
 def check_language_settings_consistent(app_configs, **kwargs):
     """Error if language settings are not consistent with each other."""
-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}
-    if settings.LANGUAGE_CODE not in available_tags:
+    from django.utils.translation.trans_real import get_supported_language_variant
+    try:
+        get_supported_language_variant(settings.LANGUAGE_CODE)
+        return []
+    except LookupError:
         return [E004]
-    return []
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..74b773f528
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,71 @@
+import django
+from django.conf import settings
+from django.core.checks import run_checks, Tags
+from django.test.utils import override_settings
+
+# Configure minimal Django settings
+settings.configure(
+    INSTALLED_APPS=[],
+    DATABASES={},
+)
+
+# Initialize Django
+django.setup()
+
+def test_edge_cases():
+    """Test various edge cases for language code checking."""
+    
+    # Test case 1: Invalid language code format
+    with override_settings(
+        LANGUAGE_CODE='not-a-valid-code!',
+        LANGUAGES=[('en', 'English')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert any(e.id == 'translation.E001' for e in translation_errors), "Should raise E001 for invalid language code format"
+        print("Test case 1 passed: Invalid language code format")
+
+    # Test case 2: Multiple levels of language specificity
+    with override_settings(
+        LANGUAGE_CODE='zh-hans-cn',
+        LANGUAGES=[('zh-hans', 'Simplified Chinese')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert not translation_errors, f"Expected no translation errors for zh-hans-cn with zh-hans available, got: {translation_errors}"
+        print("Test case 2 passed: Multiple levels of language specificity")
+
+    # Test case 3: Base language available but in different case
+    with override_settings(
+        LANGUAGE_CODE='pt-BR',
+        LANGUAGES=[('pt', 'Portuguese'), ('en', 'English')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert not translation_errors, f"Expected no translation errors for pt-BR with pt available, got: {translation_errors}"
+        print("Test case 3 passed: Case-insensitive base language matching")
+
+    # Test case 4: No matching base language
+    with override_settings(
+        LANGUAGE_CODE='fr-ca',
+        LANGUAGES=[('es', 'Spanish'), ('en', 'English')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert any(e.id == 'translation.E004' for e in translation_errors), "Should raise E004 when no matching base language"
+        print("Test case 4 passed: No matching base language")
+
+    # Test case 5: Empty language code
+    with override_settings(
+        LANGUAGE_CODE='',
+        LANGUAGES=[('en', 'English')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert any(e.id == 'translation.E001' for e in translation_errors), "Should raise E001 for empty language code"
+        print("Test case 5 passed: Empty language code")
+
+    print("All edge cases passed successfully!")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..099319cceb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,41 @@
+import django
+from django.conf import settings
+from django.core.checks import run_checks, Tags
+from django.test.utils import override_settings
+
+# Configure minimal Django settings
+settings.configure(
+    INSTALLED_APPS=[],
+    DATABASES={},
+)
+
+# Initialize Django
+django.setup()
+
+def test_sublanguage_check():
+    """Test that translation.E004 is not raised when a base language is available."""
+    
+    # Test case 1: de-at with de available
+    with override_settings(
+        LANGUAGE_CODE='de-at',
+        LANGUAGES=[('de', 'German'), ('en', 'English')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert not translation_errors, f"Expected no translation errors, got: {translation_errors}"
+        print("Test case 1 passed: de-at with de available")
+
+    # Test case 2: es-ar which is supported out of the box
+    with override_settings(
+        LANGUAGE_CODE='es-ar',
+        LANGUAGES=[('es', 'Spanish'), ('es-ar', 'Argentinian Spanish')]
+    ):
+        errors = run_checks(tags=[Tags.translation])
+        translation_errors = [e for e in errors if e.id.startswith('translation.')]
+        assert not translation_errors, f"Expected no translation errors, got: {translation_errors}"
+        print("Test case 2 passed: es-ar supported language")
+
+    print("All tests passed successfully!")
+
+if __name__ == '__main__':
+    test_sublanguage_check()
\ No newline at end of file
