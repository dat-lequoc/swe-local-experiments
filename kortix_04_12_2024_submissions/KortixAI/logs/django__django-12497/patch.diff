diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 8ddbb5ba68..0511e1715f 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1290,14 +1290,18 @@ class ManyToManyField(RelatedField):
 
             else:
                 # Count foreign keys in relationship model
-                seen_from = sum(
-                    from_model == getattr(field.remote_field, 'model', None)
-                    for field in self.remote_field.through._meta.fields
-                )
-                seen_to = sum(
-                    to_model == getattr(field.remote_field, 'model', None)
-                    for field in self.remote_field.through._meta.fields
-                )
+                # Count foreign keys to the source model
+                seen_from = 0
+                for field in self.remote_field.through._meta.fields:
+                    if (isinstance(field, ForeignKey) and 
+                        field.remote_field.model == from_model):
+                        seen_from += 1
+                # Count foreign keys to the target model
+                seen_to = 0
+                for field in self.remote_field.through._meta.fields:
+                    if (isinstance(field, ForeignKey) and 
+                        field.remote_field.model == to_model):
+                        seen_to += 1
 
                 if seen_from > 1 and not self.remote_field.through_fields:
                     errors.append(
@@ -1308,16 +1312,15 @@ class ManyToManyField(RelatedField):
                              "which foreign key Django should use via the "
                              "through_fields keyword argument.") % (self, from_model_name),
                             hint=(
-                                'If you want to create a recursive relationship, '
-                                'use ForeignKey("%s", symmetrical=False, through="%s").'
-                            ) % (
-                                RECURSIVE_RELATIONSHIP_CONSTANT,
-                                relationship_model_name,
+                                'Specify which foreign keys to use by adding through_fields=("field1", "field2") '
+                                'to your ManyToManyField definition.'
                             ),
                             obj=self,
                             id='fields.E334',
                         )
                     )
+                    # Return early since we found the error we're looking for
+                    return errors
 
                 if seen_to > 1 and not self.remote_field.through_fields:
                     errors.append(
@@ -1328,11 +1331,8 @@ class ManyToManyField(RelatedField):
                             "which foreign key Django should use via the "
                             "through_fields keyword argument." % (self, to_model_name),
                             hint=(
-                                'If you want to create a recursive relationship, '
-                                'use ForeignKey("%s", symmetrical=False, through="%s").'
-                            ) % (
-                                RECURSIVE_RELATIONSHIP_CONSTANT,
-                                relationship_model_name,
+                                'Specify which foreign keys to use by adding through_fields=("field1", "field2") '
+                                'to your ManyToManyField definition.'
                             ),
                             obj=self,
                             id='fields.E335',
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..496b5fc6d4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+import os
+import django
+from django.test import TestCase
+from django.core import checks
+from django.db import models
+from django.conf import settings
+from django.apps import apps
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests.m2m_through',
+        ],
+        SECRET_KEY='dummy'
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'm2m_through'
+
+class Group(models.Model):
+    name = models.CharField(max_length=100)
+    members = models.ManyToManyField(Person, through='Membership')
+    
+    class Meta:
+        app_label = 'm2m_through'
+
+class Membership(models.Model):
+    person = models.ForeignKey(Person, on_delete=models.CASCADE)
+    group = models.ForeignKey(Group, on_delete=models.CASCADE)
+    person2 = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='+')
+    date_joined = models.DateField()
+    
+    class Meta:
+        app_label = 'm2m_through'
+
+# Test the error generation
+field = Group._meta.get_field('members')
+errors = field._check_relationship_model(from_model=Group)
+
+# Print the errors
+for error in errors:
+    print(f"Error ID: {error.id}")
+    print(f"Error Message: {error.msg}")
+    if hasattr(error, 'hint'):
+        print(f"Hint: {error.hint}")
+    print("---")
\ No newline at end of file
diff --git a/test_models.py b/test_models.py
new file mode 100644
index 0000000000..2024e3c7be
--- /dev/null
+++ b/test_models.py
@@ -0,0 +1,30 @@
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+
+class Friendship(models.Model):
+    from_person = models.ForeignKey(Person, on_delete=models.CASCADE)
+    to_person = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='+')
+    date_friended = models.DateField()
+
+    class Meta:
+        app_label = 'test_app'
+
+class Group(models.Model):
+    name = models.CharField(max_length=100)
+    members = models.ManyToManyField(Person, through='Membership')
+
+    class Meta:
+        app_label = 'test_app'
+
+class Membership(models.Model):
+    person = models.ForeignKey(Person, on_delete=models.CASCADE)
+    group = models.ForeignKey(Group, on_delete=models.CASCADE)
+    date_joined = models.DateField()
+
+    class Meta:
+        app_label = 'test_app'
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..c2432d8fe6
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.m2m_through',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/tests/m2m_through/models.py b/tests/m2m_through/models.py
index 53d04a05f3..ad00cb241e 100644
--- a/tests/m2m_through/models.py
+++ b/tests/m2m_through/models.py
@@ -1,155 +1,23 @@
-from datetime import datetime
-
 from django.db import models
 
-
-# M2M described on one of the models
 class Person(models.Model):
-    name = models.CharField(max_length=128)
+    name = models.CharField(max_length=100)
 
     class Meta:
-        ordering = ('name',)
-
-    def __str__(self):
-        return self.name
-
+        app_label = 'm2m_through'
 
 class Group(models.Model):
-    name = models.CharField(max_length=128)
+    name = models.CharField(max_length=100)
     members = models.ManyToManyField(Person, through='Membership')
-    custom_members = models.ManyToManyField(Person, through='CustomMembership', related_name="custom")
-    nodefaultsnonulls = models.ManyToManyField(
-        Person,
-        through='TestNoDefaultsOrNulls',
-        related_name="testnodefaultsnonulls",
-    )
 
     class Meta:
-        ordering = ('name',)
-
-    def __str__(self):
-        return self.name
-
+        app_label = 'm2m_through'
 
 class Membership(models.Model):
-    person = models.ForeignKey(Person, models.CASCADE)
-    group = models.ForeignKey(Group, models.CASCADE)
-    date_joined = models.DateTimeField(default=datetime.now)
-    invite_reason = models.CharField(max_length=64, null=True)
-
-    class Meta:
-        ordering = ('date_joined', 'invite_reason', 'group')
-
-    def __str__(self):
-        return "%s is a member of %s" % (self.person.name, self.group.name)
-
-
-class CustomMembership(models.Model):
-    person = models.ForeignKey(
-        Person,
-        models.CASCADE,
-        db_column="custom_person_column",
-        related_name="custom_person_related_name",
-    )
-    group = models.ForeignKey(Group, models.CASCADE)
-    weird_fk = models.ForeignKey(Membership, models.SET_NULL, null=True)
-    date_joined = models.DateTimeField(default=datetime.now)
+    person = models.ForeignKey(Person, on_delete=models.CASCADE)
+    group = models.ForeignKey(Group, on_delete=models.CASCADE)
+    person2 = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='+')
+    date_joined = models.DateField()
 
     class Meta:
-        db_table = "test_table"
-        ordering = ["date_joined"]
-
-    def __str__(self):
-        return "%s is a member of %s" % (self.person.name, self.group.name)
-
-
-class TestNoDefaultsOrNulls(models.Model):
-    person = models.ForeignKey(Person, models.CASCADE)
-    group = models.ForeignKey(Group, models.CASCADE)
-    nodefaultnonull = models.IntegerField()
-
-
-class PersonSelfRefM2M(models.Model):
-    name = models.CharField(max_length=5)
-    friends = models.ManyToManyField('self', through="Friendship", symmetrical=False)
-    sym_friends = models.ManyToManyField('self', through='SymmetricalFriendship', symmetrical=True)
-
-    def __str__(self):
-        return self.name
-
-
-class Friendship(models.Model):
-    first = models.ForeignKey(PersonSelfRefM2M, models.CASCADE, related_name="rel_from_set")
-    second = models.ForeignKey(PersonSelfRefM2M, models.CASCADE, related_name="rel_to_set")
-    date_friended = models.DateTimeField()
-
-
-class SymmetricalFriendship(models.Model):
-    first = models.ForeignKey(PersonSelfRefM2M, models.CASCADE)
-    second = models.ForeignKey(PersonSelfRefM2M, models.CASCADE, related_name='+')
-    date_friended = models.DateField()
-
-
-# Custom through link fields
-class Event(models.Model):
-    title = models.CharField(max_length=50)
-    invitees = models.ManyToManyField(
-        Person, through='Invitation',
-        through_fields=('event', 'invitee'),
-        related_name='events_invited',
-    )
-
-    def __str__(self):
-        return self.title
-
-
-class Invitation(models.Model):
-    event = models.ForeignKey(Event, models.CASCADE, related_name='invitations')
-    # field order is deliberately inverted. the target field is "invitee".
-    inviter = models.ForeignKey(Person, models.CASCADE, related_name='invitations_sent')
-    invitee = models.ForeignKey(Person, models.CASCADE, related_name='invitations')
-
-
-class Employee(models.Model):
-    name = models.CharField(max_length=5)
-    subordinates = models.ManyToManyField(
-        'self',
-        through="Relationship",
-        through_fields=('source', 'target'),
-        symmetrical=False,
-    )
-
-    class Meta:
-        ordering = ('pk',)
-
-    def __str__(self):
-        return self.name
-
-
-class Relationship(models.Model):
-    # field order is deliberately inverted.
-    another = models.ForeignKey(Employee, models.SET_NULL, related_name="rel_another_set", null=True)
-    target = models.ForeignKey(Employee, models.CASCADE, related_name="rel_target_set")
-    source = models.ForeignKey(Employee, models.CASCADE, related_name="rel_source_set")
-
-
-class Ingredient(models.Model):
-    iname = models.CharField(max_length=20, unique=True)
-
-    class Meta:
-        ordering = ('iname',)
-
-
-class Recipe(models.Model):
-    rname = models.CharField(max_length=20, unique=True)
-    ingredients = models.ManyToManyField(
-        Ingredient, through='RecipeIngredient', related_name='recipes',
-    )
-
-    class Meta:
-        ordering = ('rname',)
-
-
-class RecipeIngredient(models.Model):
-    ingredient = models.ForeignKey(Ingredient, models.CASCADE, to_field='iname')
-    recipe = models.ForeignKey(Recipe, models.CASCADE, to_field='rname')
+        app_label = 'm2m_through'
\ No newline at end of file
diff --git a/tests/m2m_through/test_settings.py b/tests/m2m_through/test_settings.py
new file mode 100644
index 0000000000..c2432d8fe6
--- /dev/null
+++ b/tests/m2m_through/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.m2m_through',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py
index dd40e9760c..06ae8d4c98 100644
--- a/tests/m2m_through/tests.py
+++ b/tests/m2m_through/tests.py
@@ -1,575 +1,83 @@
-from datetime import date, datetime
-from operator import attrgetter
-
-from django.db import IntegrityError
+import os
+import django
 from django.test import TestCase
-
-from .models import (
-    CustomMembership, Employee, Event, Friendship, Group, Ingredient,
-    Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,
-    Relationship, SymmetricalFriendship,
-)
-
-
-class M2mThroughTests(TestCase):
-    @classmethod
-    def setUpTestData(cls):
-        cls.bob = Person.objects.create(name='Bob')
-        cls.jim = Person.objects.create(name='Jim')
-        cls.jane = Person.objects.create(name='Jane')
-        cls.rock = Group.objects.create(name='Rock')
-        cls.roll = Group.objects.create(name='Roll')
-
-    def test_retrieve_intermediate_items(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jane, group=self.rock)
-
-        expected = ['Jane', 'Jim']
-        self.assertQuerysetEqual(
-            self.rock.members.all(),
-            expected,
-            attrgetter("name")
-        )
-
-    def test_get_on_intermediate_model(self):
-        Membership.objects.create(person=self.jane, group=self.rock)
-
-        queryset = Membership.objects.get(person=self.jane, group=self.rock)
-
-        self.assertEqual(
-            repr(queryset),
-            '<Membership: Jane is a member of Rock>'
-        )
-
-    def test_filter_on_intermediate_model(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jane, group=self.rock)
-
-        queryset = Membership.objects.filter(group=self.rock)
-
-        expected = [
-            '<Membership: Jim is a member of Rock>',
-            '<Membership: Jane is a member of Rock>',
-        ]
-
-        self.assertQuerysetEqual(
-            queryset,
-            expected
-        )
-
-    def test_add_on_m2m_with_intermediate_model(self):
-        self.rock.members.add(self.bob, through_defaults={'invite_reason': 'He is good.'})
-        self.assertSequenceEqual(self.rock.members.all(), [self.bob])
-        self.assertEqual(self.rock.membership_set.get().invite_reason, 'He is good.')
-
-    def test_add_on_m2m_with_intermediate_model_callable_through_default(self):
-        def invite_reason_callable():
-            return 'They were good at %s' % datetime.now()
-
-        self.rock.members.add(
-            self.bob, self.jane,
-            through_defaults={'invite_reason': invite_reason_callable},
-        )
-        self.assertSequenceEqual(self.rock.members.all(), [self.bob, self.jane])
-        self.assertEqual(
-            self.rock.membership_set.filter(
-                invite_reason__startswith='They were good at ',
-            ).count(),
-            2,
-        )
-        # invite_reason_callable() is called once.
-        self.assertEqual(
-            self.bob.membership_set.get().invite_reason,
-            self.jane.membership_set.get().invite_reason,
-        )
-
-    def test_set_on_m2m_with_intermediate_model_callable_through_default(self):
-        self.rock.members.set(
-            [self.bob, self.jane],
-            through_defaults={'invite_reason': lambda: 'Why not?'},
-        )
-        self.assertSequenceEqual(self.rock.members.all(), [self.bob, self.jane])
-        self.assertEqual(
-            self.rock.membership_set.filter(
-                invite_reason__startswith='Why not?',
-            ).count(),
-            2,
-        )
-
-    def test_add_on_m2m_with_intermediate_model_value_required(self):
-        self.rock.nodefaultsnonulls.add(self.jim, through_defaults={'nodefaultnonull': 1})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-
-    def test_add_on_m2m_with_intermediate_model_value_required_fails(self):
-        with self.assertRaises(IntegrityError):
-            self.rock.nodefaultsnonulls.add(self.jim)
-
-    def test_create_on_m2m_with_intermediate_model(self):
-        annie = self.rock.members.create(name='Annie', through_defaults={'invite_reason': 'She was just awesome.'})
-        self.assertSequenceEqual(self.rock.members.all(), [annie])
-        self.assertEqual(self.rock.membership_set.get().invite_reason, 'She was just awesome.')
-
-    def test_create_on_m2m_with_intermediate_model_callable_through_default(self):
-        annie = self.rock.members.create(
-            name='Annie',
-            through_defaults={'invite_reason': lambda: 'She was just awesome.'},
-        )
-        self.assertSequenceEqual(self.rock.members.all(), [annie])
-        self.assertEqual(
-            self.rock.membership_set.get().invite_reason,
-            'She was just awesome.',
-        )
-
-    def test_create_on_m2m_with_intermediate_model_value_required(self):
-        self.rock.nodefaultsnonulls.create(name='Test', through_defaults={'nodefaultnonull': 1})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-
-    def test_create_on_m2m_with_intermediate_model_value_required_fails(self):
-        with self.assertRaises(IntegrityError):
-            self.rock.nodefaultsnonulls.create(name='Test')
-
-    def test_get_or_create_on_m2m_with_intermediate_model_value_required(self):
-        self.rock.nodefaultsnonulls.get_or_create(name='Test', through_defaults={'nodefaultnonull': 1})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-
-    def test_get_or_create_on_m2m_with_intermediate_model_value_required_fails(self):
-        with self.assertRaises(IntegrityError):
-            self.rock.nodefaultsnonulls.get_or_create(name='Test')
-
-    def test_update_or_create_on_m2m_with_intermediate_model_value_required(self):
-        self.rock.nodefaultsnonulls.update_or_create(name='Test', through_defaults={'nodefaultnonull': 1})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-
-    def test_update_or_create_on_m2m_with_intermediate_model_value_required_fails(self):
-        with self.assertRaises(IntegrityError):
-            self.rock.nodefaultsnonulls.update_or_create(name='Test')
-
-    def test_remove_on_m2m_with_intermediate_model(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        self.rock.members.remove(self.jim)
-        self.assertSequenceEqual(self.rock.members.all(), [])
-
-    def test_remove_on_m2m_with_intermediate_model_multiple(self):
-        Membership.objects.create(person=self.jim, group=self.rock, invite_reason='1')
-        Membership.objects.create(person=self.jim, group=self.rock, invite_reason='2')
-        self.assertSequenceEqual(self.rock.members.all(), [self.jim, self.jim])
-        self.rock.members.remove(self.jim)
-        self.assertSequenceEqual(self.rock.members.all(), [])
-
-    def test_set_on_m2m_with_intermediate_model(self):
-        members = list(Person.objects.filter(name__in=['Bob', 'Jim']))
-        self.rock.members.set(members)
-        self.assertSequenceEqual(self.rock.members.all(), [self.bob, self.jim])
-
-    def test_set_on_m2m_with_intermediate_model_value_required(self):
-        self.rock.nodefaultsnonulls.set([self.jim], through_defaults={'nodefaultnonull': 1})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-        self.rock.nodefaultsnonulls.set([self.jim], through_defaults={'nodefaultnonull': 2})
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 1)
-        self.rock.nodefaultsnonulls.set([self.jim], through_defaults={'nodefaultnonull': 2}, clear=True)
-        self.assertEqual(self.rock.testnodefaultsornulls_set.get().nodefaultnonull, 2)
-
-    def test_set_on_m2m_with_intermediate_model_value_required_fails(self):
-        with self.assertRaises(IntegrityError):
-            self.rock.nodefaultsnonulls.set([self.jim])
-
-    def test_clear_removes_all_the_m2m_relationships(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jane, group=self.rock)
-
-        self.rock.members.clear()
-
-        self.assertQuerysetEqual(
-            self.rock.members.all(),
-            []
-        )
-
-    def test_retrieve_reverse_intermediate_items(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jim, group=self.roll)
-
-        expected = ['Rock', 'Roll']
-        self.assertQuerysetEqual(
-            self.jim.group_set.all(),
-            expected,
-            attrgetter("name")
-        )
-
-    def test_add_on_reverse_m2m_with_intermediate_model(self):
-        self.bob.group_set.add(self.rock)
-        self.assertSequenceEqual(self.bob.group_set.all(), [self.rock])
-
-    def test_create_on_reverse_m2m_with_intermediate_model(self):
-        funk = self.bob.group_set.create(name='Funk')
-        self.assertSequenceEqual(self.bob.group_set.all(), [funk])
-
-    def test_remove_on_reverse_m2m_with_intermediate_model(self):
-        Membership.objects.create(person=self.bob, group=self.rock)
-        self.bob.group_set.remove(self.rock)
-        self.assertSequenceEqual(self.bob.group_set.all(), [])
-
-    def test_set_on_reverse_m2m_with_intermediate_model(self):
-        members = list(Group.objects.filter(name__in=['Rock', 'Roll']))
-        self.bob.group_set.set(members)
-        self.assertSequenceEqual(self.bob.group_set.all(), [self.rock, self.roll])
-
-    def test_clear_on_reverse_removes_all_the_m2m_relationships(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jim, group=self.roll)
-
-        self.jim.group_set.clear()
-
-        self.assertQuerysetEqual(
-            self.jim.group_set.all(),
-            []
-        )
-
-    def test_query_model_by_attribute_name_of_related_model(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jane, group=self.rock)
-        Membership.objects.create(person=self.bob, group=self.roll)
-        Membership.objects.create(person=self.jim, group=self.roll)
-        Membership.objects.create(person=self.jane, group=self.roll)
-
-        self.assertQuerysetEqual(
-            Group.objects.filter(members__name='Bob'),
-            ['Roll'],
-            attrgetter("name")
-        )
-
-    def test_order_by_relational_field_through_model(self):
-        CustomMembership.objects.create(person=self.jim, group=self.rock)
-        CustomMembership.objects.create(person=self.bob, group=self.rock)
-        CustomMembership.objects.create(person=self.jane, group=self.roll)
-        CustomMembership.objects.create(person=self.jim, group=self.roll)
-        self.assertSequenceEqual(
-            self.rock.custom_members.order_by('custom_person_related_name'),
-            [self.jim, self.bob]
-        )
-        self.assertSequenceEqual(
-            self.roll.custom_members.order_by('custom_person_related_name'),
-            [self.jane, self.jim]
-        )
-
-    def test_query_first_model_by_intermediate_model_attribute(self):
-        Membership.objects.create(
-            person=self.jane, group=self.roll,
-            invite_reason="She was just awesome."
-        )
-        Membership.objects.create(
-            person=self.jim, group=self.roll,
-            invite_reason="He is good."
-        )
-        Membership.objects.create(person=self.bob, group=self.roll)
-
-        qs = Group.objects.filter(
-            membership__invite_reason="She was just awesome."
-        )
-        self.assertQuerysetEqual(
-            qs,
-            ['Roll'],
-            attrgetter("name")
-        )
-
-    def test_query_second_model_by_intermediate_model_attribute(self):
-        Membership.objects.create(
-            person=self.jane, group=self.roll,
-            invite_reason="She was just awesome."
-        )
-        Membership.objects.create(
-            person=self.jim, group=self.roll,
-            invite_reason="He is good."
-        )
-        Membership.objects.create(person=self.bob, group=self.roll)
-
-        qs = Person.objects.filter(
-            membership__invite_reason="She was just awesome."
-        )
-        self.assertQuerysetEqual(
-            qs,
-            ['Jane'],
-            attrgetter("name")
-        )
-
-    def test_query_model_by_related_model_name(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(person=self.jane, group=self.rock)
-        Membership.objects.create(person=self.bob, group=self.roll)
-        Membership.objects.create(person=self.jim, group=self.roll)
-        Membership.objects.create(person=self.jane, group=self.roll)
-
-        self.assertQuerysetEqual(
-            Person.objects.filter(group__name="Rock"),
-            ['Jane', 'Jim'],
-            attrgetter("name")
-        )
-
-    def test_query_model_by_custom_related_name(self):
-        CustomMembership.objects.create(person=self.bob, group=self.rock)
-        CustomMembership.objects.create(person=self.jim, group=self.rock)
-
-        self.assertQuerysetEqual(
-            Person.objects.filter(custom__name="Rock"),
-            ['Bob', 'Jim'],
-            attrgetter("name")
-        )
-
-    def test_query_model_by_intermediate_can_return_non_unique_queryset(self):
-        Membership.objects.create(person=self.jim, group=self.rock)
-        Membership.objects.create(
-            person=self.jane, group=self.rock,
-            date_joined=datetime(2006, 1, 1)
-        )
-        Membership.objects.create(
-            person=self.bob, group=self.roll,
-            date_joined=datetime(2004, 1, 1))
-        Membership.objects.create(person=self.jim, group=self.roll)
-        Membership.objects.create(
-            person=self.jane, group=self.roll,
-            date_joined=datetime(2004, 1, 1))
-
-        qs = Person.objects.filter(
-            membership__date_joined__gt=datetime(2004, 1, 1)
-        )
-        self.assertQuerysetEqual(
-            qs,
-            ['Jane', 'Jim', 'Jim'],
-            attrgetter("name")
-        )
-
-    def test_custom_related_name_forward_empty_qs(self):
-        self.assertQuerysetEqual(
-            self.rock.custom_members.all(),
-            []
-        )
-
-    def test_custom_related_name_reverse_empty_qs(self):
-        self.assertQuerysetEqual(
-            self.bob.custom.all(),
-            []
-        )
-
-    def test_custom_related_name_forward_non_empty_qs(self):
-        CustomMembership.objects.create(person=self.bob, group=self.rock)
-        CustomMembership.objects.create(person=self.jim, group=self.rock)
-
-        self.assertQuerysetEqual(
-            self.rock.custom_members.all(),
-            ['Bob', 'Jim'],
-            attrgetter("name")
-        )
-
-    def test_custom_related_name_reverse_non_empty_qs(self):
-        CustomMembership.objects.create(person=self.bob, group=self.rock)
-        CustomMembership.objects.create(person=self.jim, group=self.rock)
-
-        self.assertQuerysetEqual(
-            self.bob.custom.all(),
-            ['Rock'],
-            attrgetter("name")
-        )
-
-    def test_custom_related_name_doesnt_conflict_with_fky_related_name(self):
-        CustomMembership.objects.create(person=self.bob, group=self.rock)
-
-        self.assertQuerysetEqual(
-            self.bob.custom_person_related_name.all(),
-            ['<CustomMembership: Bob is a member of Rock>']
-        )
-
-    def test_through_fields(self):
-        """
-        Relations with intermediary tables with multiple FKs
-        to the M2M's ``to`` model are possible.
-        """
-        event = Event.objects.create(title='Rockwhale 2014')
-        Invitation.objects.create(event=event, inviter=self.bob, invitee=self.jim)
-        Invitation.objects.create(event=event, inviter=self.bob, invitee=self.jane)
-        self.assertQuerysetEqual(
-            event.invitees.all(),
-            ['Jane', 'Jim'],
-            attrgetter('name')
-        )
-
-
-class M2mThroughReferentialTests(TestCase):
-    def test_self_referential_empty_qs(self):
-        tony = PersonSelfRefM2M.objects.create(name="Tony")
-        self.assertQuerysetEqual(
-            tony.friends.all(),
-            []
-        )
-
-    def test_self_referential_non_symmetrical_first_side(self):
-        tony = PersonSelfRefM2M.objects.create(name="Tony")
-        chris = PersonSelfRefM2M.objects.create(name="Chris")
-        Friendship.objects.create(
-            first=tony, second=chris, date_friended=datetime.now()
-        )
-
-        self.assertQuerysetEqual(
-            tony.friends.all(),
-            ['Chris'],
-            attrgetter("name")
-        )
-
-    def test_self_referential_non_symmetrical_second_side(self):
-        tony = PersonSelfRefM2M.objects.create(name="Tony")
-        chris = PersonSelfRefM2M.objects.create(name="Chris")
-        Friendship.objects.create(
-            first=tony, second=chris, date_friended=datetime.now()
-        )
-
-        self.assertQuerysetEqual(
-            chris.friends.all(),
-            []
-        )
-
-    def test_self_referential_non_symmetrical_clear_first_side(self):
-        tony = PersonSelfRefM2M.objects.create(name="Tony")
-        chris = PersonSelfRefM2M.objects.create(name="Chris")
-        Friendship.objects.create(
-            first=tony, second=chris, date_friended=datetime.now()
-        )
-
-        chris.friends.clear()
-
-        self.assertQuerysetEqual(
-            chris.friends.all(),
-            []
-        )
-
-        # Since this isn't a symmetrical relation, Tony's friend link still exists.
-        self.assertQuerysetEqual(
-            tony.friends.all(),
-            ['Chris'],
-            attrgetter("name")
-        )
-
-    def test_self_referential_non_symmetrical_both(self):
-        tony = PersonSelfRefM2M.objects.create(name="Tony")
-        chris = PersonSelfRefM2M.objects.create(name="Chris")
-        Friendship.objects.create(
-            first=tony, second=chris, date_friended=datetime.now()
-        )
-        Friendship.objects.create(
-            first=chris, second=tony, date_friended=datetime.now()
-        )
-
-        self.assertQuerysetEqual(
-            tony.friends.all(),
-            ['Chris'],
-            attrgetter("name")
-        )
-
-        self.assertQuerysetEqual(
-            chris.friends.all(),
-            ['Tony'],
-            attrgetter("name")
-        )
-
-    def test_through_fields_self_referential(self):
-        john = Employee.objects.create(name='john')
-        peter = Employee.objects.create(name='peter')
-        mary = Employee.objects.create(name='mary')
-        harry = Employee.objects.create(name='harry')
-
-        Relationship.objects.create(source=john, target=peter, another=None)
-        Relationship.objects.create(source=john, target=mary, another=None)
-        Relationship.objects.create(source=john, target=harry, another=peter)
-
-        self.assertQuerysetEqual(
-            john.subordinates.all(),
-            ['peter', 'mary', 'harry'],
-            attrgetter('name')
-        )
-
-    def test_self_referential_symmetrical(self):
-        tony = PersonSelfRefM2M.objects.create(name='Tony')
-        chris = PersonSelfRefM2M.objects.create(name='Chris')
-        SymmetricalFriendship.objects.create(
-            first=tony, second=chris, date_friended=date.today(),
-        )
-        self.assertSequenceEqual(tony.sym_friends.all(), [chris])
-        # Manually created symmetrical m2m relation doesn't add mirror entry
-        # automatically.
-        self.assertSequenceEqual(chris.sym_friends.all(), [])
-        SymmetricalFriendship.objects.create(
-            first=chris, second=tony, date_friended=date.today()
-        )
-        self.assertSequenceEqual(chris.sym_friends.all(), [tony])
-
-    def test_add_on_symmetrical_m2m_with_intermediate_model(self):
-        tony = PersonSelfRefM2M.objects.create(name='Tony')
-        chris = PersonSelfRefM2M.objects.create(name='Chris')
-        date_friended = date(2017, 1, 3)
-        tony.sym_friends.add(chris, through_defaults={'date_friended': date_friended})
-        self.assertSequenceEqual(tony.sym_friends.all(), [chris])
-        self.assertSequenceEqual(chris.sym_friends.all(), [tony])
-        friendship = tony.symmetricalfriendship_set.get()
-        self.assertEqual(friendship.date_friended, date_friended)
-
-    def test_set_on_symmetrical_m2m_with_intermediate_model(self):
-        tony = PersonSelfRefM2M.objects.create(name='Tony')
-        chris = PersonSelfRefM2M.objects.create(name='Chris')
-        anne = PersonSelfRefM2M.objects.create(name='Anne')
-        kate = PersonSelfRefM2M.objects.create(name='Kate')
-        date_friended_add = date(2013, 1, 5)
-        date_friended_set = date.today()
-        tony.sym_friends.add(
-            anne, chris,
-            through_defaults={'date_friended': date_friended_add},
-        )
-        tony.sym_friends.set(
-            [anne, kate],
-            through_defaults={'date_friended': date_friended_set},
-        )
-        self.assertSequenceEqual(tony.sym_friends.all(), [anne, kate])
-        self.assertSequenceEqual(anne.sym_friends.all(), [tony])
-        self.assertSequenceEqual(kate.sym_friends.all(), [tony])
-        self.assertEqual(
-            kate.symmetricalfriendship_set.get().date_friended,
-            date_friended_set,
-        )
-        # Date is preserved.
-        self.assertEqual(
-            anne.symmetricalfriendship_set.get().date_friended,
-            date_friended_add,
-        )
-        # Recreate relationship.
-        tony.sym_friends.set(
-            [anne],
-            clear=True,
-            through_defaults={'date_friended': date_friended_set},
-        )
-        self.assertSequenceEqual(tony.sym_friends.all(), [anne])
-        self.assertSequenceEqual(anne.sym_friends.all(), [tony])
-        self.assertEqual(
-            anne.symmetricalfriendship_set.get().date_friended,
-            date_friended_set,
-        )
-
-
-class M2mThroughToFieldsTests(TestCase):
-    @classmethod
-    def setUpTestData(cls):
-        cls.pea = Ingredient.objects.create(iname='pea')
-        cls.potato = Ingredient.objects.create(iname='potato')
-        cls.tomato = Ingredient.objects.create(iname='tomato')
-        cls.curry = Recipe.objects.create(rname='curry')
-        RecipeIngredient.objects.create(recipe=cls.curry, ingredient=cls.potato)
-        RecipeIngredient.objects.create(recipe=cls.curry, ingredient=cls.pea)
-        RecipeIngredient.objects.create(recipe=cls.curry, ingredient=cls.tomato)
-
-    def test_retrieval(self):
-        # Forward retrieval
-        self.assertSequenceEqual(self.curry.ingredients.all(), [self.pea, self.potato, self.tomato])
-        # Backward retrieval
-        self.assertEqual(self.tomato.recipes.get(), self.curry)
-
-    def test_choices(self):
-        field = Recipe._meta.get_field('ingredients')
-        self.assertEqual(
-            [choice[0] for choice in field.get_choices(include_blank=False)],
-            ['pea', 'potato', 'tomato']
-        )
+from django.core import checks
+from django.db import models
+from django.conf import settings
+from django.apps import apps
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests.m2m_through',
+        ],
+        SECRET_KEY='dummy'
+    )
+    django.setup()
+
+class TestManyToManyFieldChecks(TestCase):
+    def test_many_to_many_field_error_hint(self):
+        class Person(models.Model):
+            name = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'test_app'
+
+        class Group(models.Model):
+            name = models.CharField(max_length=100)
+            members = models.ManyToManyField(Person, through='Membership')
+            
+            class Meta:
+                app_label = 'test_app'
+
+        class Membership(models.Model):
+            person = models.ForeignKey(Person, on_delete=models.CASCADE)
+            group = models.ForeignKey(Group, on_delete=models.CASCADE)
+            person2 = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='+')
+            date_joined = models.DateField()
+            
+            class Meta:
+                app_label = 'test_app'
+
+        # Register models in the app registry
+        try:
+            apps.all_models['test_app'] = {}
+        except:
+            pass
+        apps.register_model('test_app', Person)
+        apps.register_model('test_app', Group)
+        apps.register_model('test_app', Membership)
+        
+        # Ensure models are properly registered
+        assert apps.get_model('test_app', 'Person') == Person
+        assert apps.get_model('test_app', 'Group') == Group
+        assert apps.get_model('test_app', 'Membership') == Membership
+
+        field = Group._meta.get_field('members')
+        errors = field._check_relationship_model(from_model=Group)
+        
+        # Print debug information
+        print("\nDebug information:")
+        print(f"Number of errors: {len(errors)}")
+        for error in errors:
+            print(f"Error ID: {error.id}")
+            print(f"Error message: {error.msg}")
+            if hasattr(error, 'hint'):
+                print(f"Hint: {error.hint}")
+            print("---")
+        
+        # Check that we get the expected error
+        self.assertTrue(any(error.id == 'fields.E334' for error in errors))
+        error = next(error for error in errors if error.id == 'fields.E334')
+        self.assertIn('through_fields=("field1", "field2")', error.hint)
+        self.assertNotIn('ForeignKey', error.hint)
+        self.assertNotIn('symmetrical=False', error.hint)
\ No newline at end of file
