[34mInitial prompt:
<uploaded_files>
/repo
</uploaded_files>
I've uploaded a python code repository in the directory /repo (not in /tmp/inputs). Consider the following PR description:

<pr_description>
JSONField are not properly displayed in admin when they are readonly.
Description
	
JSONField values are displayed as dict when readonly in the admin.
For example, {"foo": "bar"} would be displayed as {'foo': 'bar'}, which is not valid JSON.
I believe the fix would be to add a special case in django.contrib.admin.utils.display_for_field to call the prepare_value of the JSONField (not calling json.dumps directly to take care of the InvalidJSONInput case).

</pr_description>

Can you help me implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met?
I've already taken care of all changes to any of the test files described in the <pr_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!

Your task is to make the minimal changes to non-tests files in the /repo directory to ensure the <pr_description> is satisfied.

Follow these steps to resolve the issue:
1. As a first step, it might be a good idea to explore the repo to familiarize yourself with its structure.
2. Create a script to reproduce the error and execute it with `python <filename.py>` using the BashTool, to confirm the error
3. Edit the sourcecode of the repo to resolve the issue
4. Rerun your reproduce script and confirm that the error is fixed!
5. Think about edgecases and make sure your fix handles them as well

Your thinking should be thorough and so it's fine if it's very long.[0m
[32mTHOUGHT:
I'll help you implement the necessary changes to fix the JSONField display issue in the admin interface. Let's follow the steps you outlined.

1. First, let's explore the repository structure to understand where the relevant files are located:[0m
[32mACTION (str_replace_editor):
command:
view

path:
/repo
[0m
[34mOBSERVATION:
Here's the files and directories up to 2 levels deep in /repo, excluding hidden items:
/repo
/repo/INSTALL
/repo/package.json
/repo/scripts
/repo/scripts/rpm-install.sh
/repo/scripts/manage_translations.py
/repo/django
/repo/django/shortcuts.py
/repo/django/contrib
/repo/django/http
/repo/django/views
/repo/django/core
/repo/django/utils
/repo/django/__main__.py
/repo/django/__init__.py
/repo/django/conf
/repo/django/bin
/repo/django/forms
/repo/django/db
/repo/django/dispatch
/repo/django/middleware
/repo/django/templatetags
/repo/django/__pycache__
/repo/django/template
/repo/django/apps
/repo/django/urls
/repo/django/test
/repo/docs
/repo/docs/misc
/repo/docs/spelling_wordlist
/repo/docs/topics
/repo/docs/man
/repo/docs/conf.py
/repo/docs/howto
/repo/docs/releases
/repo/docs/intro
/repo/docs/ref
/repo/docs/internals
/repo/docs/_theme
/repo/docs/Makefile
/repo/docs/README.rst
/repo/docs/faq
/repo/docs/glossary.txt
/repo/docs/contents.txt
/repo/docs/_ext
/repo/docs/index.txt
/repo/docs/make.bat
/repo/js_tests
/repo/js_tests/gis
/repo/js_tests/admin
/repo/js_tests/tests.html
/repo/AUTHORS
/repo/extras
/repo/extras/django_bash_completion
/repo/extras/README.TXT
/repo/extras/Makefile
/repo/Django.egg-info
/repo/Django.egg-info/not-zip-safe
/repo/Django.egg-info/entry_points.txt
/repo/Django.egg-info/PKG-INFO
/repo/Django.egg-info/top_level.txt
/repo/Django.egg-info/SOURCES.txt
/repo/Django.egg-info/requires.txt
/repo/Django.egg-info/dependency_links.txt
/repo/README.rst
/repo/setup.py
/repo/MANIFEST.in
/repo/setup.cfg
/repo/LICENSE
/repo/CONTRIBUTING.rst
/repo/tox.ini
/repo/tests
/repo/tests/dbshell
/repo/tests/model_fields
/repo/tests/model_regress
/repo/tests/empty
/repo/tests/asgi
/repo/tests/test_exceptions
/repo/tests/csrf_tests
/repo/tests/db_functions
/repo/tests/force_insert_update
/repo/tests/max_lengths
/repo/tests/select_related_onetoone
/repo/tests/inspectdb
/repo/tests/m2m_through
/repo/tests/multiple_database
/repo/tests/model_meta
/repo/tests/custom_migration_operations
/repo/tests/serializers
/repo/tests/transactions
/repo/tests/middleware_exceptions
/repo/tests/distinct_on_fields
/repo/tests/m2m_signals
/repo/tests/custom_lookups
/repo/tests/files
/repo/tests/delete_regress
/repo/tests/admin_scripts
/repo/tests/get_or_create
/repo/tests/generic_relations_regress
/repo/tests/custom_managers
/repo/tests/backends
/repo/tests/check_framework
/repo/tests/version
/repo/tests/settings_tests
/repo/tests/sites_tests
/repo/tests/handlers
/repo/tests/postgres_tests
/repo/tests/dates
/repo/tests/base
/repo/tests/absolute_url_overrides
/repo/tests/transaction_hooks
/repo/tests/properties
/repo/tests/user_commands
/repo/tests/file_uploads
/repo/tests/proxy_models
/repo/tests/generic_inline_admin
/repo/tests/datatypes
/repo/tests/defer
/repo/tests/many_to_one
/repo/tests/reverse_lookup
/repo/tests/constraints
/repo/tests/mutually_referential
/repo/tests/flatpages_tests
/repo/tests/defer_regress
/repo/tests/migrations2
/repo/tests/admin_changelist
/repo/tests/logging_tests
/repo/tests/app_loading
/repo/tests/model_formsets
/repo/tests/view_tests
/repo/tests/urls.py
/repo/tests/redirects_tests
/repo/tests/foreign_object
/repo/tests/field_subclassing
/repo/tests/generic_relations
/repo/tests/introspection
/repo/tests/servers
/repo/tests/bulk_create
/repo/tests/pagination
/repo/tests/proxy_model_inheritance
/repo/tests/decorators
/repo/tests/many_to_one_null
/repo/tests/queryset_pickle
/repo/tests/inline_formsets
/repo/tests/deprecation
/repo/tests/timezones
/repo/tests/m2m_intermediary
/repo/tests/get_object_or_404
/repo/tests/migration_test_data_persistence
/repo/tests/prefetch_related
/repo/tests/validation
/repo/tests/template_loader
/repo/tests/managers_regress
/repo/tests/model_options
/repo/tests/str
/repo/tests/builtin_server
/repo/tests/staticfiles_tests
/repo/tests/syndication_tests
/repo/tests/model_formsets_regress
/repo/tests/admin_checks
/repo/tests/extra_regress
/repo/tests/custom_pk
/repo/tests/messages_tests
/repo/tests/basic
/repo/tests/generic_views
/repo/tests/admin_inlines
/repo/tests/select_for_update
/repo/tests/unmanaged_models
/repo/tests/admin_views
/repo/tests/fixtures_regress
/repo/tests/wsgi
/repo/tests/httpwrappers
/repo/tests/aggregation
/repo/tests/templates
/repo/tests/admin_docs
/repo/tests/resolve_url
/repo/tests/dispatch
/repo/tests/nested_foreign_keys
/repo/tests/test_runner
/repo/tests/no_models
/repo/tests/test_runner_apps
/repo/tests/m2m_regress
/repo/tests/signing
/repo/tests/gis_tests
/repo/tests/null_fk
/repo/tests/contenttypes_tests
/repo/tests/test_client
/repo/tests/project_template
/repo/tests/README.rst
/repo/tests/reserved_names
/repo/tests/from_db_value
/repo/tests/many_to_many
/repo/tests/requirements
/repo/tests/model_package
/repo/tests/test_client_regress
/repo/tests/m2m_through_regress
/repo/tests/aggregation_regress
/repo/tests/signed_cookies_tests
/repo/tests/update_only_fields
/repo/tests/empty_models
/repo/tests/urlpatterns
/repo/tests/filtered_relation
/repo/tests/expressions_window
/repo/tests/middleware
/repo/tests/test_utils
/repo/tests/sitemaps_tests
/repo/tests/model_enums
/repo/tests/custom_columns
/repo/tests/db_typecasts
/repo/tests/raw_query
/repo/tests/save_delete_hooks
/repo/tests/update
/repo/tests/indexes
/repo/tests/migrations
/repo/tests/select_related_regress
/repo/tests/or_lookups
/repo/tests/admin_utils
/repo/tests/test_sqlite.py
/repo/tests/model_indexes
/repo/tests/admin_autodiscover
/repo/tests/model_inheritance_regress
/repo/tests/known_related_objects
/repo/tests/runtests.py
/repo/tests/shortcuts
/repo/tests/template_tests
/repo/tests/expressions
/repo/tests/admin_custom_urls
/repo/tests/sessions_tests
/repo/tests/m2m_and_m2o
/repo/tests/file_storage
/repo/tests/m2m_recursive
/repo/tests/null_fk_ordering
/repo/tests/schema
/repo/tests/swappable_models
/repo/tests/mail
/repo/tests/urlpatterns_reverse
/repo/tests/auth_tests
/repo/tests/queries
/repo/tests/bash_completion
/repo/tests/expressions_case
/repo/tests/i18n
/repo/tests/m2o_recursive
/repo/tests/admin_registration
/repo/tests/custom_methods
/repo/tests/select_related
/repo/tests/async
/repo/tests/admin_filters
/repo/tests/field_defaults
/repo/tests/ordering
/repo/tests/fixtures
/repo/tests/null_queries
/repo/tests/fixtures_model_package
/repo/tests/shell
/repo/tests/admin_ordering
/repo/tests/responses
/repo/tests/sites_framework
/repo/tests/requests
/repo/tests/utils_tests
/repo/tests/model_forms
/repo/tests/field_deconstruction
/repo/tests/order_with_respect_to
/repo/tests/humanize_tests
/repo/tests/string_lookup
/repo/tests/validators
/repo/tests/db_utils
/repo/tests/migrate_signals
/repo/tests/admin_widgets
/repo/tests/one_to_one
/repo/tests/get_earliest_or_latest
/repo/tests/admin_default_site
/repo/tests/conditional_processing
/repo/tests/annotations
/repo/tests/invalid_models_tests
/repo/tests/lookup
/repo/tests/datetimes
/repo/tests/delete
/repo/tests/context_processors
/repo/tests/forms_tests
/repo/tests/apps
/repo/tests/signals
/repo/tests/cache
/repo/tests/m2m_multiple
/repo/tests/template_backends
/repo/tests/model_inheritance
/repo/tests/modeladmin
/repo/tests/import_error_package
/repo/LICENSE.python
/repo/Gruntfile.js
[0m
[32mTHOUGHT:
Based on the repository structure and the PR description, we need to focus on the admin-related code, specifically in the `django/contrib/admin` directory. The issue is with the display of JSONField values in the admin interface when they are readonly.

Let's first check the relevant files:[0m
[32mACTION (str_replace_editor):
command:
view

path:
/repo/django/contrib/admin/utils.py
[0m
[34mOBSERVATION:
Here's the result of running `cat -n` on /repo/django/contrib/admin/utils.py:
     1	import datetime
     2	import decimal
     3	from collections import defaultdict
     4	
     5	from django.core.exceptions import FieldDoesNotExist
     6	from django.db import models, router
     7	from django.db.models.constants import LOOKUP_SEP
     8	from django.db.models.deletion import Collector
     9	from django.forms.utils import pretty_name
    10	from django.urls import NoReverseMatch, reverse
    11	from django.utils import formats, timezone
    12	from django.utils.html import format_html
    13	from django.utils.regex_helper import _lazy_re_compile
    14	from django.utils.text import capfirst
    15	from django.utils.translation import ngettext, override as translation_override
    16	
    17	QUOTE_MAP = {i: '_%02X' % i for i in b'":/_#?;@&=+$,"[]<>%\n\\'}
    18	UNQUOTE_MAP = {v: chr(k) for k, v in QUOTE_MAP.items()}
    19	UNQUOTE_RE = _lazy_re_compile('_(?:%s)' % '|'.join([x[1:] for x in UNQUOTE_MAP]))
    20	
    21	
    22	class FieldIsAForeignKeyColumnName(Exception):
    23	    """A field is a foreign key attname, i.e. <FK>_id."""
    24	    pass
    25	
    26	
    27	def lookup_needs_distinct(opts, lookup_path):
    28	    """
    29	    Return True if 'distinct()' should be used to query the given lookup path.
    30	    """
    31	    lookup_fields = lookup_path.split(LOOKUP_SEP)
    32	    # Go through the fields (following all relations) and look for an m2m.
    33	    for field_name in lookup_fields:
    34	        if field_name == 'pk':
    35	            field_name = opts.pk.name
    36	        try:
    37	            field = opts.get_field(field_name)
    38	        except FieldDoesNotExist:
    39	            # Ignore query lookups.
    40	            continue
    41	        else:
    42	            if hasattr(field, 'get_path_info'):
    43	                # This field is a relation; update opts to follow the relation.
    44	                path_info = field.get_path_info()
    45	                opts = path_info[-1].to_opts
    46	                if any(path.m2m for path in path_info):
    47	                    # This field is a m2m relation so distinct must be called.
    48	                    return True
    49	    return False
    50	
    51	
    52	def prepare_lookup_value(key, value):
    53	    """
    54	    Return a lookup value prepared to be used in queryset filtering.
    55	    """
    56	    # if key ends with __in, split parameter into separate values
    57	    if key.endswith('__in'):
    58	        value = value.split(',')
    59	    # if key ends with __isnull, special case '' and the string literals 'false' and '0'
    60	    elif key.endswith('__isnull'):
    61	        value = value.lower() not in ('', 'false', '0')
    62	    return value
    63	
    64	
    65	def quote(s):
    66	    """
    67	    Ensure that primary key values do not confuse the admin URLs by escaping
    68	    any '/', '_' and ':' and similarly problematic characters.
    69	    Similar to urllib.parse.quote(), except that the quoting is slightly
    70	    different so that it doesn't get automatically unquoted by the Web browser.
    71	    """
    72	    return s.translate(QUOTE_MAP) if isinstance(s, str) else s
    73	
    74	
    75	def unquote(s):
    76	    """Undo the effects of quote()."""
    77	    return UNQUOTE_RE.sub(lambda m: UNQUOTE_MAP[m.group(0)], s)
    78	
    79	
    80	def flatten(fields):
    81	    """
    82	    Return a list which is a single level of flattening of the original list.
    83	    """
    84	    flat = []
    85	    for field in fields:
    86	        if isinstance(field, (list, tuple)):
    87	            flat.extend(field)
    88	        else:
    89	            flat.append(field)
    90	    return flat
    91	
    92	
    93	def flatten_fieldsets(fieldsets):
    94	    """Return a list of field names from an admin fieldsets structure."""
    95	    field_names = []
    96	    for name, opts in fieldsets:
    97	        field_names.extend(
    98	            flatten(opts['fields'])
    99	        )
   100	    return field_names
   101	
   102	
   103	def get_deleted_objects(objs, request, admin_site):
   104	    """
   105	    Find all objects related to ``objs`` that should also be deleted. ``objs``
   106	    must be a homogeneous iterable of objects (e.g. a QuerySet).
   107	
   108	    Return a nested list of strings suitable for display in the
   109	    template with the ``unordered_list`` filter.
   110	    """
   111	    try:
   112	        obj = objs[0]
   113	    except IndexError:
   114	        return [], {}, set(), []
   115	    else:
   116	        using = router.db_for_write(obj._meta.model)
   117	    collector = NestedObjects(using=using)
   118	    collector.collect(objs)
   119	    perms_needed = set()
   120	
   121	    def format_callback(obj):
   122	        model = obj.__class__
   123	        has_admin = model in admin_site._registry
   124	        opts = obj._meta
   125	
   126	        no_edit_link = '%s: %s' % (capfirst(opts.verbose_name), obj)
   127	
   128	        if has_admin:
   129	            if not admin_site._registry[model].has_delete_permission(request, obj):
   130	                perms_needed.add(opts.verbose_name)
   131	            try:
   132	                admin_url = reverse('%s:%s_%s_change'
   133	                                    % (admin_site.name,
   134	                                       opts.app_label,
   135	                                       opts.model_name),
   136	                                    None, (quote(obj.pk),))
   137	            except NoReverseMatch:
   138	                # Change url doesn't exist -- don't display link to edit
   139	                return no_edit_link
   140	
   141	            # Display a link to the admin page.
   142	            return format_html('{}: <a href="{}">{}</a>',
   143	                               capfirst(opts.verbose_name),
   144	                               admin_url,
   145	                               obj)
   146	        else:
   147	            # Don't display link to edit, because it either has no
   148	            # admin or is edited inline.
   149	            return no_edit_link
   150	
   151	    to_delete = collector.nested(format_callback)
   152	
   153	    protected = [format_callback(obj) for obj in collector.protected]
   154	    model_count = {model._meta.verbose_name_plural: len(objs) for model, objs in collector.model_objs.items()}
   155	
   156	    return to_delete, model_count, perms_needed, protected
   157	
   158	
   159	class NestedObjects(Collector):
   160	    def __init__(self, *args, **kwargs):
   161	        super().__init__(*args, **kwargs)
   162	        self.edges = {}  # {from_instance: [to_instances]}
   163	        self.protected = set()
   164	        self.model_objs = defaultdict(set)
   165	
   166	    def add_edge(self, source, target):
   167	        self.edges.setdefault(source, []).append(target)
   168	
   169	    def collect(self, objs, source=None, source_attr=None, **kwargs):
   170	        for obj in objs:
   171	            if source_attr and not source_attr.endswith('+'):
   172	                related_name = source_attr % {
   173	                    'class': source._meta.model_name,
   174	                    'app_label': source._meta.app_label,
   175	                }
   176	                self.add_edge(getattr(obj, related_name), obj)
   177	            else:
   178	                self.add_edge(None, obj)
   179	            self.model_objs[obj._meta.model].add(obj)
   180	        try:
   181	            return super().collect(objs, source_attr=source_attr, **kwargs)
   182	        except models.ProtectedError as e:
   183	            self.protected.update(e.protected_objects)
   184	        except models.RestrictedError as e:
   185	            self.protected.update(e.restricted_objects)
   186	
   187	    def related_objects(self, related_model, related_fields, objs):
   188	        qs = super().related_objects(related_model, related_fields, objs)
   189	        return qs.select_related(*[related_field.name for related_field in related_fields])
   190	
   191	    def _nested(self, obj, seen, format_callback):
   192	        if obj in seen:
   193	            return []
   194	        seen.add(obj)
   195	        children = []
   196	        for child in self.edges.get(obj, ()):
   197	            children.extend(self._nested(child, seen, format_callback))
   198	        if format_callback:
   199	            ret = [format_callback(obj)]
   200	        else:
   201	            ret = [obj]
   202	        if children:
   203	            ret.append(children)
   204	        return ret
   205	
   206	    def nested(self, format_callback=None):
   207	        """
   208	        Return the graph as a nested list.
   209	        """
   210	        seen = set()
   211	        roots = []
   212	        for root in self.edges.get(None, ()):
   213	            roots.extend(self._nested(root, seen, format_callback))
   214	        return roots
   215	
   216	    def can_fast_delete(self, *args, **kwargs):
   217	        """
   218	        We always want to load the objects into memory so that we can display
   219	        them to the user in confirm page.
   220	        """
   221	        return False
   222	
   223	
   224	def model_format_dict(obj):
   225	    """
   226	    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
   227	    typically for use with string formatting.
   228	
   229	    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
   230	    """
   231	    if isinstance(obj, (models.Model, models.base.ModelBase)):
   232	        opts = obj._meta
   233	    elif isinstance(obj, models.query.QuerySet):
   234	        opts = obj.model._meta
   235	    else:
   236	        opts = obj
   237	    return {
   238	        'verbose_name': opts.verbose_name,
   239	        'verbose_name_plural': opts.verbose_name_plural,
   240	    }
   241	
   242	
   243	def model_ngettext(obj, n=None):
   244	    """
   245	    Return the appropriate `verbose_name` or `verbose_name_plural` value for
   246	    `obj` depending on the count `n`.
   247	
   248	    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
   249	    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
   250	    `QuerySet` is used.
   251	    """
   252	    if isinstance(obj, models.query.QuerySet):
   253	        if n is None:
   254	            n = obj.count()
   255	        obj = obj.model
   256	    d = model_format_dict(obj)
   257	    singular, plural = d["verbose_name"], d["verbose_name_plural"]
   258	    return ngettext(singular, plural, n or 0)
   259	
   260	
   261	def lookup_field(name, obj, model_admin=None):
   262	    opts = obj._meta
   263	    try:
   264	        f = _get_non_gfk_field(opts, name)
   265	    except (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
   266	        # For non-field values, the value is either a method, property or
   267	        # returned via a callable.
   268	        if callable(name):
   269	            attr = name
   270	            value = attr(obj)
   271	        elif hasattr(model_admin, name) and name != '__str__':
   272	            attr = getattr(model_admin, name)
   273	            value = attr(obj)
   274	        else:
   275	            attr = getattr(obj, name)
   276	            if callable(attr):
   277	                value = attr()
   278	            else:
   279	                value = attr
   280	        f = None
   281	    else:
   282	        attr = None
   283	        value = getattr(obj, name)
   284	    return f, attr, value
   285	
   286	
   287	def _get_non_gfk_field(opts, name):
   288	    """
   289	    For historical reasons, the admin app relies on GenericForeignKeys as being
   290	    "not found" by get_field(). This could likely be cleaned up.
   291	
   292	    Reverse relations should also be excluded as these aren't attributes of the
   293	    model (rather something like `foo_set`).
   294	    """
   295	    field = opts.get_field(name)
   296	    if (field.is_relation and
   297	            # Generic foreign keys OR reverse relations
   298	            ((field.many_to_one and not field.related_model) or field.one_to_many)):
   299	        raise FieldDoesNotExist()
   300	
   301	    # Avoid coercing <FK>_id fields to FK
   302	    if field.is_relation and not field.many_to_many and hasattr(field, 'attname') and field.attname == name:
   303	        raise FieldIsAForeignKeyColumnName()
   304	
   305	    return field
   306	
   307	
   308	def label_for_field(name, model, model_admin=None, return_attr=False, form=None):
   309	    """
   310	    Return a sensible label for a field name. The name can be a callable,
   311	    property (but not created with @property decorator), or the name of an
   312	    object's attribute, as well as a model field. If return_attr is True, also
   313	    return the resolved attribute (which could be a callable). This will be
   314	    None if (and only if) the name refers to a field.
   315	    """
   316	    attr = None
   317	    try:
   318	        field = _get_non_gfk_field(model._meta, name)
   319	        try:
   320	            label = field.verbose_name
   321	        except AttributeError:
   322	            # field is likely a ForeignObjectRel
   323	            label = field.related_model._meta.verbose_name
   324	    except FieldDoesNotExist:
   325	        if name == "__str__":
   326	            label = str(model._meta.verbose_name)
   327	            attr = str
   328	        else:
   329	            if callable(name):
   330	                attr = name
   331	            elif hasattr(model_admin, name):
   332	                attr = getattr(model_admin, name)
   333	            elif hasattr(model, name):
   334	                attr = getattr(model, name)
   335	            elif form and name in form.fields:
   336	                attr = form.fields[name]
   337	            else:
   338	                message = "Unable to lookup '%s' on %s" % (name, model._meta.object_name)
   339	                if model_admin:
   340	                    message += " or %s" % model_admin.__class__.__name__
   341	                if form:
   342	                    message += " or %s" % form.__class__.__name__
   343	                raise AttributeError(message)
   344	
   345	            if hasattr(attr, "short_description"):
   346	                label = attr.short_description
   347	            elif (isinstance(attr, property) and
   348	                  hasattr(attr, "fget") and
   349	                  hasattr(attr.fget, "short_description")):
   350	                label = attr.fget.short_description
   351	            elif callable(attr):
   352	                if attr.__name__ == "<lambda>":
   353	                    label = "--"
   354	                else:
   355	                    label = pretty_name(attr.__name__)
   356	            else:
   357	                label = pretty_name(name)
   358	    except FieldIsAForeignKeyColumnName:
   359	        label = pretty_name(name)
   360	        attr = name
   361	
   362	    if return_attr:
   363	        return (label, attr)
   364	    else:
   365	        return label
   366	
   367	
   368	def help_text_for_field(name, model):
   369	    help_text = ""
   370	    try:
   371	        field = _get_non_gfk_field(model._meta, name)
   372	    except (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
   373	        pass
   374	    else:
   375	        if hasattr(field, 'help_text'):
   376	            help_text = field.help_text
   377	    return help_text
   378	
   379	
   380	def display_for_field(value, field, empty_value_display):
   381	    from django.contrib.admin.templatetags.admin_list import _boolean_icon
   382	
   383	    if getattr(field, 'flatchoices', None):
   384	        return dict(field.flatchoices).get(value, empty_value_display)
   385	    # BooleanField needs special-case null-handling, so it comes before the
   386	    # general null test.
   387	    elif isinstance(field, models.BooleanField):
   388	        return _boolean_icon(value)
   389	    elif value is None:
   390	        return empty_value_display
   391	    elif isinstance(field, models.DateTimeField):
   392	        return formats.localize(timezone.template_localtime(value))
   393	    elif isinstance(field, (models.DateField, models.TimeField)):
   394	        return formats.localize(value)
   395	    elif isinstance(field, models.DecimalField):
   396	        return formats.number_format(value, field.decimal_places)
   397	    elif isinstance(field, (models.IntegerField, models.FloatField)):
   398	        return formats.number_format(value)
   399	    elif isinstance(field, models.FileField) and value:
   400	        return format_html('<a href="{}">{}</a>', value.url, value)
   401	    else:
   402	        return display_for_value(value, empty_value_display)
   403	
   404	
   405	def display_for_value(value, empty_value_display, boolean=False):
   406	    from django.contrib.admin.templatetags.admin_list import _boolean_icon
   407	
   408	    if boolean:
   409	        return _boolean_icon(value)
   410	    elif value is None:
   411	        return empty_value_display
   412	    elif isinstance(value, bool):
   413	        return str(value)
   414	    elif isinstance(value, datetime.datetime):
   415	        return formats.localize(timezone.template_localtime(value))
   416	    elif isinstance(value, (datetime.date, datetime.time)):
   417	        return formats.localize(value)
   418	    elif isinstance(value, (int, decimal.Decimal, float)):
   419	        return formats.number_format(value)
   420	    elif isinstance(value, (list, tuple)):
   421	        return ', '.join(str(v) for v in value)
   422	    else:
   423	        return str(value)
   424	
   425	
   426	class NotRelationField(Exception):
   427	    pass
   428	
   429	
   430	def get_model_from_relation(field):
   431	    if hasattr(field, 'get_path_info'):
   432	        return field.get_path_info()[-1].to_opts.model
   433	    else:
   434	        raise NotRelationField
   435	
   436	
   437	def reverse_field_path(model, path):
   438	    """ Create a reversed field path.
   439	
   440	    E.g. Given (Order, "user__groups"),
   441	    return (Group, "user__order").
   442	
   443	    Final field must be a related model, not a data field.
   444	    """
   445	    reversed_path = []
   446	    parent = model
   447	    pieces = path.split(LOOKUP_SEP)
   448	    for piece in pieces:
   449	        field = parent._meta.get_field(piece)
   450	        # skip trailing data field if extant:
   451	        if len(reversed_path) == len(pieces) - 1:  # final iteration
   452	            try:
   453	                get_model_from_relation(field)
   454	            except NotRelationField:
   455	                break
   456	
   457	        # Field should point to another model
   458	        if field.is_relation and not (field.auto_created and not field.concrete):
   459	            related_name = field.related_query_name()
   460	            parent = field.remote_field.model
   461	        else:
   462	            related_name = field.field.name
   463	            parent = field.related_model
   464	        reversed_path.insert(0, related_name)
   465	    return (parent, LOOKUP_SEP.join(reversed_path))
   466	
   467	
   468	def get_fields_from_path(model, path):
   469	    """ Return list of Fields given path relative to model.
   470	
   471	    e.g. (ModelX, "user__groups__name") -> [
   472	        <django.db.models.fields.related.ForeignKey object at 0x...>,
   473	        <django.db.models.fields.related.ManyToManyField object at 0x...>,
   474	        <django.db.models.fields.CharField object at 0x...>,
   475	    ]
   476	    """
   477	    pieces = path.split(LOOKUP_SEP)
   478	    fields = []
   479	    for piece in pieces:
   480	        if fields:
   481	            parent = get_model_from_relation(fields[-1])
   482	        else:
   483	            parent = model
   484	        fields.append(parent._meta.get_field(piece))
   485	    return fields
   486	
   487	
   488	def construct_change_message(form, formsets, add):
   489	    """
   490	    Construct a JSON structure describing changes from a changed object.
   491	    Translations are deactivated so that strings are stored untranslated.
   492	    Translation happens later on LogEntry access.
   493	    """
   494	    # Evaluating `form.changed_data` prior to disabling translations is required
   495	    # to avoid fields affected by localization from being included incorrectly,
   496	    # e.g. where date formats differ such as MM/DD/YYYY vs DD/MM/YYYY.
   497	    changed_data = form.changed_data
   498	    with translation_override(None):
   499	        # Deactivate translations while fetching verbose_name for form
   500	        # field labels and using `field_name`, if verbose_name is not provided.
   501	        # Translations will happen later on LogEntry access.
   502	        changed_field_labels = _get_changed_field_labels_from_form(form, changed_data)
   503	
   504	    change_message = []
   505	    if add:
   506	        change_message.append({'added': {}})
   507	    elif form.changed_data:
   508	        change_message.append({'changed': {'fields': changed_field_labels}})
   509	    if formsets:
   510	        with translation_override(None):
   511	            for formset in formsets:
   512	                for added_object in formset.new_objects:
   513	                    change_message.append({
   514	                        'added': {
   515	                            'name': str(added_object._meta.verbose_name),
   516	                            'object': str(added_object),
   517	                        }
   518	                    })
   519	                for changed_object, changed_fields in formset.changed_objects:
   520	                    change_message.append({
   521	                        'changed': {
   522	                            'name': str(changed_object._meta.verbose_name),
   523	                            'object': str(changed_object),
   524	                            'fields': _get_changed_field_labels_from_form(formset.forms[0], changed_fields),
   525	                        }
   526	                    })
   527	                for deleted_object in formset.deleted_objects:
   528	                    change_message.append({
   529	                        'deleted': {
   530	                            'name': str(deleted_object._meta.verbose_name),
   531	                            'object': str(deleted_object),
   532	                        }
   533	                    })
   534	    return change_message
   535	
   536	
   537	def _get_changed_field_labels_from_form(form, changed_data):
   538	    changed_field_labels = []
   539	    for field_name in changed_data:
   540	        try:
   541	            verbose_field_name = form.fields[field_name].label or field_name
   542	        except KeyError:
   543	            verbose_field_name = field_name
   544	        changed_field_labels.append(str(verbose_field_name))
   545	    return changed_field_labels
[0m
[32mTHOUGHT:
Let's also check the JSONField implementation:[0m
[32mACTION (str_replace_editor):
command:
view

path:
/repo/django/db/models/fields/json.py
[0m
[34mOBSERVATION:
Here's the result of running `cat -n` on /repo/django/db/models/fields/json.py:
     1	import json
     2	
     3	from django import forms
     4	from django.core import checks, exceptions
     5	from django.db import NotSupportedError, connections, router
     6	from django.db.models import lookups
     7	from django.db.models.lookups import PostgresOperatorLookup, Transform
     8	from django.utils.translation import gettext_lazy as _
     9	
    10	from . import Field
    11	from .mixins import CheckFieldDefaultMixin
    12	
    13	__all__ = ['JSONField']
    14	
    15	
    16	class JSONField(CheckFieldDefaultMixin, Field):
    17	    empty_strings_allowed = False
    18	    description = _('A JSON object')
    19	    default_error_messages = {
    20	        'invalid': _('Value must be valid JSON.'),
    21	    }
    22	    _default_hint = ('dict', '{}')
    23	
    24	    def __init__(
    25	        self, verbose_name=None, name=None, encoder=None, decoder=None,
    26	        **kwargs,
    27	    ):
    28	        if encoder and not callable(encoder):
    29	            raise ValueError('The encoder parameter must be a callable object.')
    30	        if decoder and not callable(decoder):
    31	            raise ValueError('The decoder parameter must be a callable object.')
    32	        self.encoder = encoder
    33	        self.decoder = decoder
    34	        super().__init__(verbose_name, name, **kwargs)
    35	
    36	    def check(self, **kwargs):
    37	        errors = super().check(**kwargs)
    38	        databases = kwargs.get('databases') or []
    39	        errors.extend(self._check_supported(databases))
    40	        return errors
    41	
    42	    def _check_supported(self, databases):
    43	        errors = []
    44	        for db in databases:
    45	            if not router.allow_migrate_model(db, self.model):
    46	                continue
    47	            connection = connections[db]
    48	            if not (
    49	                'supports_json_field' in self.model._meta.required_db_features or
    50	                connection.features.supports_json_field
    51	            ):
    52	                errors.append(
    53	                    checks.Error(
    54	                        '%s does not support JSONFields.'
    55	                        % connection.display_name,
    56	                        obj=self.model,
    57	                        id='fields.E180',
    58	                    )
    59	                )
    60	        return errors
    61	
    62	    def deconstruct(self):
    63	        name, path, args, kwargs = super().deconstruct()
    64	        if self.encoder is not None:
    65	            kwargs['encoder'] = self.encoder
    66	        if self.decoder is not None:
    67	            kwargs['decoder'] = self.decoder
    68	        return name, path, args, kwargs
    69	
    70	    def from_db_value(self, value, expression, connection):
    71	        if value is None:
    72	            return value
    73	        if connection.features.has_native_json_field and self.decoder is None:
    74	            return value
    75	        try:
    76	            return json.loads(value, cls=self.decoder)
    77	        except json.JSONDecodeError:
    78	            return value
    79	
    80	    def get_internal_type(self):
    81	        return 'JSONField'
    82	
    83	    def get_prep_value(self, value):
    84	        if value is None:
    85	            return value
    86	        return json.dumps(value, cls=self.encoder)
    87	
    88	    def get_transform(self, name):
    89	        transform = super().get_transform(name)
    90	        if transform:
    91	            return transform
    92	        return KeyTransformFactory(name)
    93	
    94	    def select_format(self, compiler, sql, params):
    95	        if (
    96	            compiler.connection.features.has_native_json_field and
    97	            self.decoder is not None
    98	        ):
    99	            return compiler.connection.ops.json_cast_text_sql(sql), params
   100	        return super().select_format(compiler, sql, params)
   101	
   102	    def validate(self, value, model_instance):
   103	        super().validate(value, model_instance)
   104	        try:
   105	            json.dumps(value, cls=self.encoder)
   106	        except TypeError:
   107	            raise exceptions.ValidationError(
   108	                self.error_messages['invalid'],
   109	                code='invalid',
   110	                params={'value': value},
   111	            )
   112	
   113	    def value_to_string(self, obj):
   114	        return self.value_from_object(obj)
   115	
   116	    def formfield(self, **kwargs):
   117	        return super().formfield(**{
   118	            'form_class': forms.JSONField,
   119	            'encoder': self.encoder,
   120	            'decoder': self.decoder,
   121	            **kwargs,
   122	        })
   123	
   124	
   125	def compile_json_path(key_transforms, include_root=True):
   126	    path = ['$'] if include_root else []
   127	    for key_transform in key_transforms:
   128	        try:
   129	            num = int(key_transform)
   130	        except ValueError:  # non-integer
   131	            path.append('.')
   132	            path.append(json.dumps(key_transform))
   133	        else:
   134	            path.append('[%s]' % num)
   135	    return ''.join(path)
   136	
   137	
   138	class DataContains(PostgresOperatorLookup):
   139	    lookup_name = 'contains'
   140	    postgres_operator = '@>'
   141	
   142	    def as_sql(self, compiler, connection):
   143	        lhs, lhs_params = self.process_lhs(compiler, connection)
   144	        rhs, rhs_params = self.process_rhs(compiler, connection)
   145	        params = tuple(lhs_params) + tuple(rhs_params)
   146	        return 'JSON_CONTAINS(%s, %s)' % (lhs, rhs), params
   147	
   148	    def as_oracle(self, compiler, connection):
   149	        if isinstance(self.rhs, KeyTransform):
   150	            return HasKey(self.lhs, self.rhs).as_oracle(compiler, connection)
   151	        lhs, lhs_params = self.process_lhs(compiler, connection)
   152	        params = tuple(lhs_params)
   153	        sql = (
   154	            "JSON_QUERY(%s, '$%s' WITH WRAPPER) = "
   155	            "JSON_QUERY('%s', '$.value' WITH WRAPPER)"
   156	        )
   157	        rhs = json.loads(self.rhs)
   158	        if isinstance(rhs, dict):
   159	            if not rhs:
   160	                return "DBMS_LOB.SUBSTR(%s) LIKE '{%%%%}'" % lhs, params
   161	            return ' AND '.join([
   162	                sql % (
   163	                    lhs, '.%s' % json.dumps(key), json.dumps({'value': value}),
   164	                ) for key, value in rhs.items()
   165	            ]), params
   166	        return sql % (lhs, '', json.dumps({'value': rhs})), params
   167	
   168	
   169	class ContainedBy(PostgresOperatorLookup):
   170	    lookup_name = 'contained_by'
   171	    postgres_operator = '<@'
   172	
   173	    def as_sql(self, compiler, connection):
   174	        lhs, lhs_params = self.process_lhs(compiler, connection)
   175	        rhs, rhs_params = self.process_rhs(compiler, connection)
   176	        params = tuple(rhs_params) + tuple(lhs_params)
   177	        return 'JSON_CONTAINS(%s, %s)' % (rhs, lhs), params
   178	
   179	    def as_oracle(self, compiler, connection):
   180	        raise NotSupportedError('contained_by lookup is not supported on Oracle.')
   181	
   182	
   183	class HasKeyLookup(PostgresOperatorLookup):
   184	    logical_operator = None
   185	
   186	    def as_sql(self, compiler, connection, template=None):
   187	        # Process JSON path from the left-hand side.
   188	        if isinstance(self.lhs, KeyTransform):
   189	            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
   190	            lhs_json_path = compile_json_path(lhs_key_transforms)
   191	        else:
   192	            lhs, lhs_params = self.process_lhs(compiler, connection)
   193	            lhs_json_path = '$'
   194	        sql = template % lhs
   195	        # Process JSON path from the right-hand side.
   196	        rhs = self.rhs
   197	        rhs_params = []
   198	        if not isinstance(rhs, (list, tuple)):
   199	            rhs = [rhs]
   200	        for key in rhs:
   201	            if isinstance(key, KeyTransform):
   202	                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
   203	            else:
   204	                rhs_key_transforms = [key]
   205	            rhs_params.append('%s%s' % (
   206	                lhs_json_path,
   207	                compile_json_path(rhs_key_transforms, include_root=False),
   208	            ))
   209	        # Add condition for each key.
   210	        if self.logical_operator:
   211	            sql = '(%s)' % self.logical_operator.join([sql] * len(rhs_params))
   212	        return sql, tuple(lhs_params) + tuple(rhs_params)
   213	
   214	    def as_mysql(self, compiler, connection):
   215	        return self.as_sql(compiler, connection, template="JSON_CONTAINS_PATH(%s, 'one', %%s)")
   216	
   217	    def as_oracle(self, compiler, connection):
   218	        sql, params = self.as_sql(compiler, connection, template="JSON_EXISTS(%s, '%%s')")
   219	        # Add paths directly into SQL because path expressions cannot be passed
   220	        # as bind variables on Oracle.
   221	        return sql % tuple(params), []
   222	
   223	    def as_postgresql(self, compiler, connection):
   224	        if isinstance(self.rhs, KeyTransform):
   225	            *_, rhs_key_transforms = self.rhs.preprocess_lhs(compiler, connection)
   226	            for key in rhs_key_transforms[:-1]:
   227	                self.lhs = KeyTransform(key, self.lhs)
   228	            self.rhs = rhs_key_transforms[-1]
   229	        return super().as_postgresql(compiler, connection)
   230	
   231	    def as_sqlite(self, compiler, connection):
   232	        return self.as_sql(compiler, connection, template='JSON_TYPE(%s, %%s) IS NOT NULL')
   233	
   234	
   235	class HasKey(HasKeyLookup):
   236	    lookup_name = 'has_key'
   237	    postgres_operator = '?'
   238	    prepare_rhs = False
   239	
   240	
   241	class HasKeys(HasKeyLookup):
   242	    lookup_name = 'has_keys'
   243	    postgres_operator = '?&'
   244	    logical_operator = ' AND '
   245	
   246	    def get_prep_lookup(self):
   247	        return [str(item) for item in self.rhs]
   248	
   249	
   250	class HasAnyKeys(HasKeys):
   251	    lookup_name = 'has_any_keys'
   252	    postgres_operator = '?|'
   253	    logical_operator = ' OR '
   254	
   255	
   256	class JSONExact(lookups.Exact):
   257	    can_use_none_as_rhs = True
   258	
   259	    def process_lhs(self, compiler, connection):
   260	        lhs, lhs_params = super().process_lhs(compiler, connection)
   261	        if connection.vendor == 'sqlite':
   262	            rhs, rhs_params = super().process_rhs(compiler, connection)
   263	            if rhs == '%s' and rhs_params == [None]:
   264	                # Use JSON_TYPE instead of JSON_EXTRACT for NULLs.
   265	                lhs = "JSON_TYPE(%s, '$')" % lhs
   266	        return lhs, lhs_params
   267	
   268	    def process_rhs(self, compiler, connection):
   269	        rhs, rhs_params = super().process_rhs(compiler, connection)
   270	        # Treat None lookup values as null.
   271	        if rhs == '%s' and rhs_params == [None]:
   272	            rhs_params = ['null']
   273	        if connection.vendor == 'mysql':
   274	            func = ["JSON_EXTRACT(%s, '$')"] * len(rhs_params)
   275	            rhs = rhs % tuple(func)
   276	        return rhs, rhs_params
   277	
   278	
   279	JSONField.register_lookup(DataContains)
   280	JSONField.register_lookup(ContainedBy)
   281	JSONField.register_lookup(HasKey)
   282	JSONField.register_lookup(HasKeys)
   283	JSONField.register_lookup(HasAnyKeys)
   284	JSONField.register_lookup(JSONExact)
   285	
   286	
   287	class KeyTransform(Transform):
   288	    postgres_operator = '->'
   289	    postgres_nested_operator = '#>'
   290	
   291	    def __init__(self, key_name, *args, **kwargs):
   292	        super().__init__(*args, **kwargs)
   293	        self.key_name = str(key_name)
   294	
   295	    def preprocess_lhs(self, compiler, connection, lhs_only=False):
   296	        if not lhs_only:
   297	            key_transforms = [self.key_name]
   298	        previous = self.lhs
   299	        while isinstance(previous, KeyTransform):
   300	            if not lhs_only:
   301	                key_transforms.insert(0, previous.key_name)
   302	            previous = previous.lhs
   303	        lhs, params = compiler.compile(previous)
   304	        if connection.vendor == 'oracle':
   305	            # Escape string-formatting.
   306	            key_transforms = [key.replace('%', '%%') for key in key_transforms]
   307	        return (lhs, params, key_transforms) if not lhs_only else (lhs, params)
   308	
   309	    def as_mysql(self, compiler, connection):
   310	        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
   311	        json_path = compile_json_path(key_transforms)
   312	        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)
   313	
   314	    def as_oracle(self, compiler, connection):
   315	        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
   316	        json_path = compile_json_path(key_transforms)
   317	        return (
   318	            "COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))" %
   319	            ((lhs, json_path) * 2)
   320	        ), tuple(params) * 2
   321	
   322	    def as_postgresql(self, compiler, connection):
   323	        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
   324	        if len(key_transforms) > 1:
   325	            return '(%s %s %%s)' % (lhs, self.postgres_nested_operator), params + [key_transforms]
   326	        try:
   327	            lookup = int(self.key_name)
   328	        except ValueError:
   329	            lookup = self.key_name
   330	        return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)
   331	
   332	    def as_sqlite(self, compiler, connection):
   333	        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
   334	        json_path = compile_json_path(key_transforms)
   335	        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)
   336	
   337	
   338	class KeyTextTransform(KeyTransform):
   339	    postgres_operator = '->>'
   340	    postgres_nested_operator = '#>>'
   341	
   342	
   343	class KeyTransformTextLookupMixin:
   344	    """
   345	    Mixin for combining with a lookup expecting a text lhs from a JSONField
   346	    key lookup. On PostgreSQL, make use of the ->> operator instead of casting
   347	    key values to text and performing the lookup on the resulting
   348	    representation.
   349	    """
   350	    def __init__(self, key_transform, *args, **kwargs):
   351	        if not isinstance(key_transform, KeyTransform):
   352	            raise TypeError(
   353	                'Transform should be an instance of KeyTransform in order to '
   354	                'use this lookup.'
   355	            )
   356	        key_text_transform = KeyTextTransform(
   357	            key_transform.key_name, *key_transform.source_expressions,
   358	            **key_transform.extra,
   359	        )
   360	        super().__init__(key_text_transform, *args, **kwargs)
   361	
   362	
   363	class CaseInsensitiveMixin:
   364	    """
   365	    Mixin to allow case-insensitive comparison of JSON values on MySQL.
   366	    MySQL handles strings used in JSON context using the utf8mb4_bin collation.
   367	    Because utf8mb4_bin is a binary collation, comparison of JSON values is
   368	    case-sensitive.
   369	    """
   370	    def process_lhs(self, compiler, connection):
   371	        lhs, lhs_params = super().process_lhs(compiler, connection)
   372	        if connection.vendor == 'mysql':
   373	            return 'LOWER(%s)' % lhs, lhs_params
   374	        return lhs, lhs_params
   375	
   376	    def process_rhs(self, compiler, connection):
   377	        rhs, rhs_params = super().process_rhs(compiler, connection)
   378	        if connection.vendor == 'mysql':
   379	            return 'LOWER(%s)' % rhs, rhs_params
   380	        return rhs, rhs_params
   381	
   382	
   383	class KeyTransformIsNull(lookups.IsNull):
   384	    # key__isnull=False is the same as has_key='key'
   385	    def as_oracle(self, compiler, connection):
   386	        if not self.rhs:
   387	            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
   388	        return super().as_sql(compiler, connection)
   389	
   390	    def as_sqlite(self, compiler, connection):
   391	        if not self.rhs:
   392	            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)
   393	        return super().as_sql(compiler, connection)
   394	
   395	
   396	class KeyTransformExact(JSONExact):
   397	    def process_lhs(self, compiler, connection):
   398	        lhs, lhs_params = super().process_lhs(compiler, connection)
   399	        if connection.vendor == 'sqlite':
   400	            rhs, rhs_params = super().process_rhs(compiler, connection)
   401	            if rhs == '%s' and rhs_params == ['null']:
   402	                lhs, _ = self.lhs.preprocess_lhs(compiler, connection, lhs_only=True)
   403	                lhs = 'JSON_TYPE(%s, %%s)' % lhs
   404	        return lhs, lhs_params
   405	
   406	    def process_rhs(self, compiler, connection):
   407	        if isinstance(self.rhs, KeyTransform):
   408	            return super(lookups.Exact, self).process_rhs(compiler, connection)
   409	        rhs, rhs_params = super().process_rhs(compiler, connection)
   410	        if connection.vendor == 'oracle':
   411	            func = []
   412	            for value in rhs_params:
   413	                value = json.loads(value)
   414	                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'
   415	                func.append("%s('%s', '$.value')" % (
   416	                    function,
   417	                    json.dumps({'value': value}),
   418	                ))
   419	            rhs = rhs % tuple(func)
   420	            rhs_params = []
   421	        elif connection.vendor == 'sqlite':
   422	            func = ["JSON_EXTRACT(%s, '$')" if value != 'null' else '%s' for value in rhs_params]
   423	            rhs = rhs % tuple(func)
   424	        return rhs, rhs_params
   425	
   426	    def as_oracle(self, compiler, connection):
   427	        rhs, rhs_params = super().process_rhs(compiler, connection)
   428	        if rhs_params == ['null']:
   429	            # Field has key and it's NULL.
   430	            has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)
   431	            has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)
   432	            is_null_expr = self.lhs.get_lookup('isnull')(self.lhs, True)
   433	            is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)
   434	            return (
   435	                '%s AND %s' % (has_key_sql, is_null_sql),
   436	                tuple(has_key_params) + tuple(is_null_params),
   437	            )
   438	        return super().as_sql(compiler, connection)
   439	
   440	
   441	class KeyTransformIExact(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact):
   442	    pass
   443	
   444	
   445	class KeyTransformIContains(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains):
   446	    pass
   447	
   448	
   449	class KeyTransformContains(KeyTransformTextLookupMixin, lookups.Contains):
   450	    pass
   451	
   452	
   453	class KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
   454	    pass
   455	
   456	
   457	class KeyTransformIStartsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IStartsWith):
   458	    pass
   459	
   460	
   461	class KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
   462	    pass
   463	
   464	
   465	class KeyTransformIEndsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IEndsWith):
   466	    pass
   467	
   468	
   469	class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
   470	    pass
   471	
   472	
   473	class KeyTransformIRegex(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex):
   474	    pass
   475	
   476	
   477	class KeyTransformNumericLookupMixin:
   478	    def process_rhs(self, compiler, connection):
   479	        rhs, rhs_params = super().process_rhs(compiler, connection)
   480	        if not connection.features.has_native_json_field:
   481	            rhs_params = [json.loads(value) for value in rhs_params]
   482	        return rhs, rhs_params
   483	
   484	
   485	class KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
   486	    pass
   487	
   488	
   489	class KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
   490	    pass
   491	
   492	
   493	class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
   494	    pass
   495	
   496	
   497	class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
   498	    pass
   499	
   500	
   501	KeyTransform.register_lookup(KeyTransformExact)
   502	KeyTransform.register_lookup(KeyTransformIExact)
   503	KeyTransform.register_lookup(KeyTransformIsNull)
   504	KeyTransform.register_lookup(KeyTransformContains)
   505	KeyTransform.register_lookup(KeyTransformIContains)
   506	KeyTransform.register_lookup(KeyTransformStartsWith)
   507	KeyTransform.register_lookup(KeyTransformIStartsWith)
   508	KeyTransform.register_lookup(KeyTransformEndsWith)
   509	KeyTransform.register_lookup(KeyTransformIEndsWith)
   510	KeyTransform.register_lookup(KeyTransformRegex)
   511	KeyTransform.register_lookup(KeyTransformIRegex)
   512	
   513	KeyTransform.register_lookup(KeyTransformLt)
   514	KeyTransform.register_lookup(KeyTransformLte)
   515	KeyTransform.register_lookup(KeyTransformGt)
   516	KeyTransform.register_lookup(KeyTransformGte)
   517	
   518	
   519	class KeyTransformFactory:
   520	
   521	    def __init__(self, key_name):
   522	        self.key_name = key_name
   523	
   524	    def __call__(self, *args, **kwargs):
   525	        return KeyTransform(self.key_name, *args, **kwargs)
[0m
[32mTHOUGHT:
Let's also check the forms implementation of JSONField:[0m
[32mACTION (str_replace_editor):
command:
view

path:
/repo/django/forms/fields.py
[0m
[34mOBSERVATION:
Here's the result of running `cat -n` on /repo/django/forms/fields.py:
     1	"""
     2	Field classes.
     3	"""
     4	
     5	import copy
     6	import datetime
     7	import json
     8	import math
     9	import operator
    10	import os
    11	import re
    12	import uuid
    13	from decimal import Decimal, DecimalException
    14	from io import BytesIO
    15	from urllib.parse import urlsplit, urlunsplit
    16	
    17	from django.core import validators
    18	from django.core.exceptions import ValidationError
    19	from django.forms.boundfield import BoundField
    20	from django.forms.utils import from_current_timezone, to_current_timezone
    21	from django.forms.widgets import (
    22	    FILE_INPUT_CONTRADICTION, CheckboxInput, ClearableFileInput, DateInput,
    23	    DateTimeInput, EmailInput, FileInput, HiddenInput, MultipleHiddenInput,
    24	    NullBooleanSelect, NumberInput, Select, SelectMultiple,
    25	    SplitDateTimeWidget, SplitHiddenDateTimeWidget, Textarea, TextInput,
    26	    TimeInput, URLInput,
    27	)
    28	from django.utils import formats
    29	from django.utils.dateparse import parse_datetime, parse_duration
    30	from django.utils.duration import duration_string
    31	from django.utils.ipv6 import clean_ipv6_address
    32	from django.utils.regex_helper import _lazy_re_compile
    33	from django.utils.translation import gettext_lazy as _, ngettext_lazy
    34	
    35	__all__ = (
    36	    'Field', 'CharField', 'IntegerField',
    37	    'DateField', 'TimeField', 'DateTimeField', 'DurationField',
    38	    'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField',
    39	    'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',
    40	    'ComboField', 'MultiValueField', 'FloatField', 'DecimalField',
    41	    'SplitDateTimeField', 'GenericIPAddressField', 'FilePathField',
    42	    'JSONField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField',
    43	    'UUIDField',
    44	)
    45	
    46	
    47	class Field:
    48	    widget = TextInput  # Default widget to use when rendering this type of Field.
    49	    hidden_widget = HiddenInput  # Default widget to use when rendering this as "hidden".
    50	    default_validators = []  # Default set of validators
    51	    # Add an 'invalid' entry to default_error_message if you want a specific
    52	    # field error message not raised by the field validators.
    53	    default_error_messages = {
    54	        'required': _('This field is required.'),
    55	    }
    56	    empty_values = list(validators.EMPTY_VALUES)
    57	
    58	    def __init__(self, *, required=True, widget=None, label=None, initial=None,
    59	                 help_text='', error_messages=None, show_hidden_initial=False,
    60	                 validators=(), localize=False, disabled=False, label_suffix=None):
    61	        # required -- Boolean that specifies whether the field is required.
    62	        #             True by default.
    63	        # widget -- A Widget class, or instance of a Widget class, that should
    64	        #           be used for this Field when displaying it. Each Field has a
    65	        #           default Widget that it'll use if you don't specify this. In
    66	        #           most cases, the default widget is TextInput.
    67	        # label -- A verbose name for this field, for use in displaying this
    68	        #          field in a form. By default, Django will use a "pretty"
    69	        #          version of the form field name, if the Field is part of a
    70	        #          Form.
    71	        # initial -- A value to use in this Field's initial display. This value
    72	        #            is *not* used as a fallback if data isn't given.
    73	        # help_text -- An optional string to use as "help text" for this Field.
    74	        # error_messages -- An optional dictionary to override the default
    75	        #                   messages that the field will raise.
    76	        # show_hidden_initial -- Boolean that specifies if it is needed to render a
    77	        #                        hidden widget with initial value after widget.
    78	        # validators -- List of additional validators to use
    79	        # localize -- Boolean that specifies if the field should be localized.
    80	        # disabled -- Boolean that specifies whether the field is disabled, that
    81	        #             is its widget is shown in the form but not editable.
    82	        # label_suffix -- Suffix to be added to the label. Overrides
    83	        #                 form's label_suffix.
    84	        self.required, self.label, self.initial = required, label, initial
    85	        self.show_hidden_initial = show_hidden_initial
    86	        self.help_text = help_text
    87	        self.disabled = disabled
    88	        self.label_suffix = label_suffix
    89	        widget = widget or self.widget
    90	        if isinstance(widget, type):
    91	            widget = widget()
    92	        else:
    93	            widget = copy.deepcopy(widget)
    94	
    95	        # Trigger the localization machinery if needed.
    96	        self.localize = localize
    97	        if self.localize:
    98	            widget.is_localized = True
    99	
   100	        # Let the widget know whether it should display as required.
   101	        widget.is_required = self.required
   102	
   103	        # Hook into self.widget_attrs() for any Field-specific HTML attributes.
   104	        extra_attrs = self.widget_attrs(widget)
   105	        if extra_attrs:
   106	            widget.attrs.update(extra_attrs)
   107	
   108	        self.widget = widget
   109	
   110	        messages = {}
   111	        for c in reversed(self.__class__.__mro__):
   112	            messages.update(getattr(c, 'default_error_messages', {}))
   113	        messages.update(error_messages or {})
   114	        self.error_messages = messages
   115	
   116	        self.validators = [*self.default_validators, *validators]
   117	
   118	        super().__init__()
   119	
   120	    def prepare_value(self, value):
   121	        return value
   122	
   123	    def to_python(self, value):
   124	        return value
   125	
   126	    def validate(self, value):
   127	        if value in self.empty_values and self.required:
   128	            raise ValidationError(self.error_messages['required'], code='required')
   129	
   130	    def run_validators(self, value):
   131	        if value in self.empty_values:
   132	            return
   133	        errors = []
   134	        for v in self.validators:
   135	            try:
   136	                v(value)
   137	            except ValidationError as e:
   138	                if hasattr(e, 'code') and e.code in self.error_messages:
   139	                    e.message = self.error_messages[e.code]
   140	                errors.extend(e.error_list)
   141	        if errors:
   142	            raise ValidationError(errors)
   143	
   144	    def clean(self, value):
   145	        """
   146	        Validate the given value and return its "cleaned" value as an
   147	        appropriate Python object. Raise ValidationError for any errors.
   148	        """
   149	        value = self.to_python(value)
   150	        self.validate(value)
   151	        self.run_validators(value)
   152	        return value
   153	
   154	    def bound_data(self, data, initial):
   155	        """
   156	        Return the value that should be shown for this field on render of a
   157	        bound form, given the submitted POST data for the field and the initial
   158	        data, if any.
   159	
   160	        For most fields, this will simply be data; FileFields need to handle it
   161	        a bit differently.
   162	        """
   163	        if self.disabled:
   164	            return initial
   165	        return data
   166	
   167	    def widget_attrs(self, widget):
   168	        """
   169	        Given a Widget instance (*not* a Widget class), return a dictionary of
   170	        any HTML attributes that should be added to the Widget, based on this
   171	        Field.
   172	        """
   173	        return {}
   174	
   175	    def has_changed(self, initial, data):
   176	        """Return True if data differs from initial."""
   177	        # Always return False if the field is disabled since self.bound_data
   178	        # always uses the initial value in this case.
   179	        if self.disabled:
   180	            return False
   181	        try:
   182	            data = self.to_python(data)
   183	            if hasattr(self, '_coerce'):
   184	                return self._coerce(data) != self._coerce(initial)
   185	        except ValidationError:
   186	            return True
   187	        # For purposes of seeing whether something has changed, None is
   188	        # the same as an empty string, if the data or initial value we get
   189	        # is None, replace it with ''.
   190	        initial_value = initial if initial is not None else ''
   191	        data_value = data if data is not None else ''
   192	        return initial_value != data_value
   193	
   194	    def get_bound_field(self, form, field_name):
   195	        """
   196	        Return a BoundField instance that will be used when accessing the form
   197	        field in a template.
   198	        """
   199	        return BoundField(form, self, field_name)
   200	
   201	    def __deepcopy__(self, memo):
   202	        result = copy.copy(self)
   203	        memo[id(self)] = result
   204	        result.widget = copy.deepcopy(self.widget, memo)
   205	        result.error_messages = self.error_messages.copy()
   206	        result.validators = self.validators[:]
   207	        return result
   208	
   209	
   210	class CharField(Field):
   211	    def __init__(self, *, max_length=None, min_length=None, strip=True, empty_value='', **kwargs):
   212	        self.max_length = max_length
   213	        self.min_length = min_length
   214	        self.strip = strip
   215	        self.empty_value = empty_value
   216	        super().__init__(**kwargs)
   217	        if min_length is not None:
   218	            self.validators.append(validators.MinLengthValidator(int(min_length)))
   219	        if max_length is not None:
   220	            self.validators.append(validators.MaxLengthValidator(int(max_length)))
   221	        self.validators.append(validators.ProhibitNullCharactersValidator())
   222	
   223	    def to_python(self, value):
   224	        """Return a string."""
   225	        if value not in self.empty_values:
   226	            value = str(value)
   227	            if self.strip:
   228	                value = value.strip()
   229	        if value in self.empty_values:
   230	            return self.empty_value
   231	        return value
   232	
   233	    def widget_attrs(self, widget):
   234	        attrs = super().widget_attrs(widget)
   235	        if self.max_length is not None and not widget.is_hidden:
   236	            # The HTML attribute is maxlength, not max_length.
   237	            attrs['maxlength'] = str(self.max_length)
   238	        if self.min_length is not None and not widget.is_hidden:
   239	            # The HTML attribute is minlength, not min_length.
   240	            attrs['minlength'] = str(self.min_length)
   241	        return attrs
   242	
   243	
   244	class IntegerField(Field):
   245	    widget = NumberInput
   246	    default_error_messages = {
   247	        'invalid': _('Enter a whole number.'),
   248	    }
   249	    re_decimal = _lazy_re_compile(r'\.0*\s*$')
   250	
   251	    def __init__(self, *, max_value=None, min_value=None, **kwargs):
   252	        self.max_value, self.min_value = max_value, min_value
   253	        if kwargs.get('localize') and self.widget == NumberInput:
   254	            # Localized number input is not well supported on most browsers
   255	            kwargs.setdefault('widget', super().widget)
   256	        super().__init__(**kwargs)
   257	
   258	        if max_value is not None:
   259	            self.validators.append(validators.MaxValueValidator(max_value))
   260	        if min_value is not None:
   261	            self.validators.append(validators.MinValueValidator(min_value))
   262	
   263	    def to_python(self, value):
   264	        """
   265	        Validate that int() can be called on the input. Return the result
   266	        of int() or None for empty values.
   267	        """
   268	        value = super().to_python(value)
   269	        if value in self.empty_values:
   270	            return None
   271	        if self.localize:
   272	            value = formats.sanitize_separators(value)
   273	        # Strip trailing decimal and zeros.
   274	        try:
   275	            value = int(self.re_decimal.sub('', str(value)))
   276	        except (ValueError, TypeError):
   277	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   278	        return value
   279	
   280	    def widget_attrs(self, widget):
   281	        attrs = super().widget_attrs(widget)
   282	        if isinstance(widget, NumberInput):
   283	            if self.min_value is not None:
   284	                attrs['min'] = self.min_value
   285	            if self.max_value is not None:
   286	                attrs['max'] = self.max_value
   287	        return attrs
   288	
   289	
   290	class FloatField(IntegerField):
   291	    default_error_messages = {
   292	        'invalid': _('Enter a number.'),
   293	    }
   294	
   295	    def to_python(self, value):
   296	        """
   297	        Validate that float() can be called on the input. Return the result
   298	        of float() or None for empty values.
   299	        """
   300	        value = super(IntegerField, self).to_python(value)
   301	        if value in self.empty_values:
   302	            return None
   303	        if self.localize:
   304	            value = formats.sanitize_separators(value)
   305	        try:
   306	            value = float(value)
   307	        except (ValueError, TypeError):
   308	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   309	        return value
   310	
   311	    def validate(self, value):
   312	        super().validate(value)
   313	        if value in self.empty_values:
   314	            return
   315	        if not math.isfinite(value):
   316	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   317	
   318	    def widget_attrs(self, widget):
   319	        attrs = super().widget_attrs(widget)
   320	        if isinstance(widget, NumberInput) and 'step' not in widget.attrs:
   321	            attrs.setdefault('step', 'any')
   322	        return attrs
   323	
   324	
   325	class DecimalField(IntegerField):
   326	    default_error_messages = {
   327	        'invalid': _('Enter a number.'),
   328	    }
   329	
   330	    def __init__(self, *, max_value=None, min_value=None, max_digits=None, decimal_places=None, **kwargs):
   331	        self.max_digits, self.decimal_places = max_digits, decimal_places
   332	        super().__init__(max_value=max_value, min_value=min_value, **kwargs)
   333	        self.validators.append(validators.DecimalValidator(max_digits, decimal_places))
   334	
   335	    def to_python(self, value):
   336	        """
   337	        Validate that the input is a decimal number. Return a Decimal
   338	        instance or None for empty values. Ensure that there are no more
   339	        than max_digits in the number and no more than decimal_places digits
   340	        after the decimal point.
   341	        """
   342	        if value in self.empty_values:
   343	            return None
   344	        if self.localize:
   345	            value = formats.sanitize_separators(value)
   346	        value = str(value).strip()
   347	        try:
   348	            value = Decimal(value)
   349	        except DecimalException:
   350	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   351	        return value
   352	
   353	    def validate(self, value):
   354	        super().validate(value)
   355	        if value in self.empty_values:
   356	            return
   357	        if not value.is_finite():
   358	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   359	
   360	    def widget_attrs(self, widget):
   361	        attrs = super().widget_attrs(widget)
   362	        if isinstance(widget, NumberInput) and 'step' not in widget.attrs:
   363	            if self.decimal_places is not None:
   364	                # Use exponential notation for small values since they might
   365	                # be parsed as 0 otherwise. ref #20765
   366	                step = str(Decimal(1).scaleb(-self.decimal_places)).lower()
   367	            else:
   368	                step = 'any'
   369	            attrs.setdefault('step', step)
   370	        return attrs
   371	
   372	
   373	class BaseTemporalField(Field):
   374	
   375	    def __init__(self, *, input_formats=None, **kwargs):
   376	        super().__init__(**kwargs)
   377	        if input_formats is not None:
   378	            self.input_formats = input_formats
   379	
   380	    def to_python(self, value):
   381	        value = value.strip()
   382	        # Try to strptime against each input format.
   383	        for format in self.input_formats:
   384	            try:
   385	                return self.strptime(value, format)
   386	            except (ValueError, TypeError):
   387	                continue
   388	        raise ValidationError(self.error_messages['invalid'], code='invalid')
   389	
   390	    def strptime(self, value, format):
   391	        raise NotImplementedError('Subclasses must define this method.')
   392	
   393	
   394	class DateField(BaseTemporalField):
   395	    widget = DateInput
   396	    input_formats = formats.get_format_lazy('DATE_INPUT_FORMATS')
   397	    default_error_messages = {
   398	        'invalid': _('Enter a valid date.'),
   399	    }
   400	
   401	    def to_python(self, value):
   402	        """
   403	        Validate that the input can be converted to a date. Return a Python
   404	        datetime.date object.
   405	        """
   406	        if value in self.empty_values:
   407	            return None
   408	        if isinstance(value, datetime.datetime):
   409	            return value.date()
   410	        if isinstance(value, datetime.date):
   411	            return value
   412	        return super().to_python(value)
   413	
   414	    def strptime(self, value, format):
   415	        return datetime.datetime.strptime(value, format).date()
   416	
   417	
   418	class TimeField(BaseTemporalField):
   419	    widget = TimeInput
   420	    input_formats = formats.get_format_lazy('TIME_INPUT_FORMATS')
   421	    default_error_messages = {
   422	        'invalid': _('Enter a valid time.')
   423	    }
   424	
   425	    def to_python(self, value):
   426	        """
   427	        Validate that the input can be converted to a time. Return a Python
   428	        datetime.time object.
   429	        """
   430	        if value in self.empty_values:
   431	            return None
   432	        if isinstance(value, datetime.time):
   433	            return value
   434	        return super().to_python(value)
   435	
   436	    def strptime(self, value, format):
   437	        return datetime.datetime.strptime(value, format).time()
   438	
   439	
   440	class DateTimeFormatsIterator:
   441	    def __iter__(self):
   442	        yield from formats.get_format('DATETIME_INPUT_FORMATS')
   443	        yield from formats.get_format('DATE_INPUT_FORMATS')
   444	
   445	
   446	class DateTimeField(BaseTemporalField):
   447	    widget = DateTimeInput
   448	    input_formats = DateTimeFormatsIterator()
   449	    default_error_messages = {
   450	        'invalid': _('Enter a valid date/time.'),
   451	    }
   452	
   453	    def prepare_value(self, value):
   454	        if isinstance(value, datetime.datetime):
   455	            value = to_current_timezone(value)
   456	        return value
   457	
   458	    def to_python(self, value):
   459	        """
   460	        Validate that the input can be converted to a datetime. Return a
   461	        Python datetime.datetime object.
   462	        """
   463	        if value in self.empty_values:
   464	            return None
   465	        if isinstance(value, datetime.datetime):
   466	            return from_current_timezone(value)
   467	        if isinstance(value, datetime.date):
   468	            result = datetime.datetime(value.year, value.month, value.day)
   469	            return from_current_timezone(result)
   470	        try:
   471	            result = parse_datetime(value.strip())
   472	        except ValueError:
   473	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   474	        if not result:
   475	            result = super().to_python(value)
   476	        return from_current_timezone(result)
   477	
   478	    def strptime(self, value, format):
   479	        return datetime.datetime.strptime(value, format)
   480	
   481	
   482	class DurationField(Field):
   483	    default_error_messages = {
   484	        'invalid': _('Enter a valid duration.'),
   485	        'overflow': _('The number of days must be between {min_days} and {max_days}.')
   486	    }
   487	
   488	    def prepare_value(self, value):
   489	        if isinstance(value, datetime.timedelta):
   490	            return duration_string(value)
   491	        return value
   492	
   493	    def to_python(self, value):
   494	        if value in self.empty_values:
   495	            return None
   496	        if isinstance(value, datetime.timedelta):
   497	            return value
   498	        try:
   499	            value = parse_duration(str(value))
   500	        except OverflowError:
   501	            raise ValidationError(self.error_messages['overflow'].format(
   502	                min_days=datetime.timedelta.min.days,
   503	                max_days=datetime.timedelta.max.days,
   504	            ), code='overflow')
   505	        if value is None:
   506	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   507	        return value
   508	
   509	
   510	class RegexField(CharField):
   511	    def __init__(self, regex, **kwargs):
   512	        """
   513	        regex can be either a string or a compiled regular expression object.
   514	        """
   515	        kwargs.setdefault('strip', False)
   516	        super().__init__(**kwargs)
   517	        self._set_regex(regex)
   518	
   519	    def _get_regex(self):
   520	        return self._regex
   521	
   522	    def _set_regex(self, regex):
   523	        if isinstance(regex, str):
   524	            regex = re.compile(regex)
   525	        self._regex = regex
   526	        if hasattr(self, '_regex_validator') and self._regex_validator in self.validators:
   527	            self.validators.remove(self._regex_validator)
   528	        self._regex_validator = validators.RegexValidator(regex=regex)
   529	        self.validators.append(self._regex_validator)
   530	
   531	    regex = property(_get_regex, _set_regex)
   532	
   533	
   534	class EmailField(CharField):
   535	    widget = EmailInput
   536	    default_validators = [validators.validate_email]
   537	
   538	    def __init__(self, **kwargs):
   539	        super().__init__(strip=True, **kwargs)
   540	
   541	
   542	class FileField(Field):
   543	    widget = ClearableFileInput
   544	    default_error_messages = {
   545	        'invalid': _("No file was submitted. Check the encoding type on the form."),
   546	        'missing': _("No file was submitted."),
   547	        'empty': _("The submitted file is empty."),
   548	        'max_length': ngettext_lazy(
   549	            'Ensure this filename has at most %(max)d character (it has %(length)d).',
   550	            'Ensure this filename has at most %(max)d characters (it has %(length)d).',
   551	            'max'),
   552	        'contradiction': _('Please either submit a file or check the clear checkbox, not both.')
   553	    }
   554	
   555	    def __init__(self, *, max_length=None, allow_empty_file=False, **kwargs):
   556	        self.max_length = max_length
   557	        self.allow_empty_file = allow_empty_file
   558	        super().__init__(**kwargs)
   559	
   560	    def to_python(self, data):
   561	        if data in self.empty_values:
   562	            return None
   563	
   564	        # UploadedFile objects should have name and size attributes.
   565	        try:
   566	            file_name = data.name
   567	            file_size = data.size
   568	        except AttributeError:
   569	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   570	
   571	        if self.max_length is not None and len(file_name) > self.max_length:
   572	            params = {'max': self.max_length, 'length': len(file_name)}
   573	            raise ValidationError(self.error_messages['max_length'], code='max_length', params=params)
   574	        if not file_name:
   575	            raise ValidationError(self.error_messages['invalid'], code='invalid')
   576	        if not self.allow_empty_file and not file_size:
   577	            raise ValidationError(self.error_messages['empty'], code='empty')
   578	
   579	        return data
   580	
   581	    def clean(self, data, initial=None):
   582	        # If the widget got contradictory inputs, we raise a validation error
   583	        if data is FILE_INPUT_CONTRADICTION:
   584	            raise ValidationError(self.error_messages['contradiction'], code='contradiction')
   585	        # False means the field value should be cleared; further validation is
   586	        # not needed.
   587	        if data is False:
   588	            if not self.required:
   589	                return False
   590	            # If the field is required, clearing is not possible (the widget
   591	            # shouldn't return False data in that case anyway). False is not
   592	            # in self.empty_value; if a False value makes it this far
   593	            # it should be validated from here on out as None (so it will be
   594	            # caught by the required check).
   595	            data = None
   596	        if not data and initial:
   597	            return initial
   598	        return super().clean(data)
   599	
   600	    def bound_data(self, data, initial):
   601	        if data in (None, FILE_INPUT_CONTRADICTION):
   602	            return initial
   603	        return data
   604	
   605	    def has_changed(self, initial, data):
   606	        return not self.disabled and data is not None
   607	
   608	
   609	class ImageField(FileField):
   610	    default_validators = [validators.validate_image_file_extension]
   611	    default_error_messages = {
   612	        'invalid_image': _(
   613	            "Upload a valid image. The file you uploaded was either not an "
   614	            "image or a corrupted image."
   615	        ),
   616	    }
   617	
   618	    def to_python(self, data):
   619	        """
   620	        Check that the file-upload field data contains a valid image (GIF, JPG,
   621	        PNG, etc. -- whatever Pillow supports).
   622	        """
   623	        f = super().to_python(data)
   624	        if f is None:
   625	            return None
   626	
   627	        from PIL import Image
   628	
   629	        # We need to get a file object for Pillow. We might have a path or we might
   630	        # have to read the data into memory.
   631	        if hasattr(data, 'temporary_file_path'):
   632	            file = data.temporary_file_path()
   633	        else:
   634	            if hasattr(data, 'read'):
   635	                file = BytesIO(data.read())
   636	            else:
   637	                file = BytesIO(data['content'])
   638	
   639	        try:
   640	            # load() could spot a truncated JPEG, but it loads the entire
   641	            # image in memory, which is a DoS vector. See #3848 and #18520.
   642	            image = Image.open(file)
   643	            # verify() must be called immediately after the constructor.
   644	            image.verify()
   645	
   646	            # Annotating so subclasses can reuse it for their own validation
   647	            f.image = image
   648	            # Pillow doesn't detect the MIME type of all formats. In those
   649	            # cases, content_type will be None.
   650	            f.content_type = Image.MIME.get(image.format)
   651	        except Exception as exc:
   652	            # Pillow doesn't recognize it as an image.
   653	            raise ValidationError(
   654	                self.error_messages['invalid_image'],
   655	                code='invalid_image',
   656	            ) from exc
   657	        if hasattr(f, 'seek') and callable(f.seek):
   658	            f.seek(0)
   659	        return f
   660	
   661	    def widget_attrs(self, widget):
   662	        attrs = super().widget_attrs(widget)
   663	        if isinstance(widget, FileInput) and 'accept' not in widget.attrs:
   664	            attrs.setdefault('accept', 'image/*')
   665	        return attrs
   666	
   667	
   668	class URLField(CharField):
   669	    widget = URLInput
   670	    default_error_messages = {
   671	        'invalid': _('Enter a valid URL.'),
   672	    }
   673	    default_validators = [validators.URLValidator()]
   674	
   675	    def __init__(self, **kwargs):
   676	        super().__init__(strip=True, **kwargs)
   677	
   678	    def to_python(self, value):
   679	
   680	        def split_url(url):
   681	            """
   682	            Return a list of url parts via urlparse.urlsplit(), or raise
   683	            ValidationError for some malformed URLs.
   684	            """
   685	            try:
   686	                return list(urlsplit(url))
   687	            except ValueError:
   688	                # urlparse.urlsplit can raise a ValueError with some
   689	                # misformatted URLs.
   690	                raise ValidationError(self.error_messages['invalid'], code='invalid')
   691	
   692	        value = super().to_python(value)
   693	        if value:
   694	            url_fields = split_url(value)
   695	            if not url_fields[0]:
   696	                # If no URL scheme given, assume http://
   697	                url_fields[0] = 'http'
   698	            if not url_fields[1]:
   699	                # Assume that if no domain is provided, that the path segment
   700	                # contains the domain.
   701	                url_fields[1] = url_fields[2]
   702	                url_fields[2] = ''
   703	                # Rebuild the url_fields list, since the domain segment may now
   704	                # contain the path too.
   705	                url_fields = split_url(urlunsplit(url_fields))
   706	            value = urlunsplit(url_fields)
   707	        return value
   708	
   709	
   710	class BooleanField(Field):
   711	    widget = CheckboxInput
   712	
   713	    def to_python(self, value):
   714	        """Return a Python boolean object."""
   715	        # Explicitly check for the string 'False', which is what a hidden field
   716	        # will submit for False. Also check for '0', since this is what
   717	        # RadioSelect will provide. Because bool("True") == bool('1') == True,
   718	        # we don't need to handle that explicitly.
   719	        if isinstance(value, str) and value.lower() in ('false', '0'):
   720	            value = False
   721	        else:
   722	            value = bool(value)
   723	        return super().to_python(value)
   724	
   725	    def validate(self, value):
   726	        if not value and self.required:
   727	            raise ValidationError(self.error_messages['required'], code='required')
   728	
   729	    def has_changed(self, initial, data):
   730	        if self.disabled:
   731	            return False
   732	        # Sometimes data or initial may be a string equivalent of a boolean
   733	        # so we should run it through to_python first to get a boolean value
   734	        return self.to_python(initial) != self.to_python(data)
   735	
   736	
   737	class NullBooleanField(BooleanField):
   738	    """
   739	    A field whose valid values are None, True, and False. Clean invalid values
   740	    to None.
   741	    """
   742	    widget = NullBooleanSelect
   743	
   744	    def to_python(self, value):
   745	        """
   746	        Explicitly check for the string 'True' and 'False', which is what a
   747	        hidden field will submit for True and False, for 'true' and 'false',
   748	        which are likely to be returned by JavaScript serializations of forms,
   749	        and for '1' and '0', which is what a RadioField will submit. Unlike
   750	        the Booleanfield, this field must check for True because it doesn't
   751	        use the bool() function.
   752	        """
   753	        if value in (True, 'True', 'true', '1'):
   754	            return True
   755	        elif value in (False, 'False', 'false', '0'):
   756	            return False
   757	        else:
   758	            return None
   759	
   760	    def validate(self, value):
   761	        pass
   762	
   763	
   764	class CallableChoiceIterator:
   765	    def __init__(self, choices_func):
   766	        self.choices_func = choices_func
   767	
   768	    def __iter__(self):
   769	        yield from self.choices_func()
   770	
   771	
   772	class ChoiceField(Field):
   773	    widget = Select
   774	    default_error_messages = {
   775	        'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.'),
   776	    }
   777	
   778	    def __init__(self, *, choices=(), **kwargs):
   779	        super().__init__(**kwargs)
   780	        self.choices = choices
   781	
   782	    def __deepcopy__(self, memo):
   783	        result = super().__deepcopy__(memo)
   784	        result._choices = copy.deepcopy(self._choices, memo)
   785	        return result
   786	
   787	    def _get_choices(self):
   788	        return self._choices
   789	
   790	    def _set_choices(self, value):
   791	        # Setting choices also sets the choices on the widget.
   792	        # choices can be any iterable, but we call list() on it because
   793	        # it will be consumed more than once.
   794	        if callable(value):
   795	            value = CallableChoiceIterator(value)
   796	        else:
   797	            value = list(value)
   798	
   799	        self._choices = self.widget.choices = value
   800	
   801	    choices = property(_get_choices, _set_choices)
   802	
   803	    def to_python(self, value):
   804	        """Return a string."""
   805	        if value in self.empty_values:
   806	            return ''
   807	        return str(value)
   808	
   809	    def validate(self, value):
   810	        """Validate that the input is in self.choices."""
   811	        super().validate(value)
   812	        if value and not self.valid_value(value):
   813	            raise ValidationError(
   814	                self.error_messages['invalid_choice'],
   815	                code='invalid_choice',
   816	                params={'value': value},
   817	            )
   818	
   819	    def valid_value(self, value):
   820	        """Check to see if the provided value is a valid choice."""
   821	        text_value = str(value)
   822	        for k, v in self.choices:
   823	            if isinstance(v, (list, tuple)):
   824	                # This is an optgroup, so look inside the group for options
   825	                for k2, v2 in v:
   826	                    if value == k2 or text_value == str(k2):
   827	                        return True
   828	            else:
   829	                if value == k or text_value == str(k):
   830	                    return True
   831	        return False
   832	
   833	
   834	class TypedChoiceField(ChoiceField):
   835	    def __init__(self, *, coerce=lambda val: val, empty_value='', **kwargs):
   836	        self.coerce = coerce
   837	        self.empty_value = empty_value
   838	        super().__init__(**kwargs)
   839	
   840	    def _coerce(self, value):
   841	        """
   842	        Validate that the value can be coerced to the right type (if not empty).
   843	        """
   844	        if value == self.empty_value or value in self.empty_values:
   845	            return self.empty_value
   846	        try:
   847	            value = self.coerce(value)
   848	        except (ValueError, TypeError, ValidationError):
   849	            raise ValidationError(
   850	                self.error_messages['invalid_choice'],
   851	                code='invalid_choice',
   852	                params={'value': value},
   853	            )
   854	        return value
   855	
   856	    def clean(self, value):
   857	        value = super().clean(value)
   858	        return self._coerce(value)
   859	
   860	
   861	class MultipleChoiceField(ChoiceField):
   862	    hidden_widget = MultipleHiddenInput
   863	    widget = SelectMultiple
   864	    default_error_messages = {
   865	        'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.'),
   866	        'invalid_list': _('Enter a list of values.'),
   867	    }
   868	
   869	    def to_python(self, value):
   870	        if not value:
   871	            return []
   872	        elif not isinstance(value, (list, tuple)):
   873	            raise ValidationError(self.error_messages['invalid_list'], code='invalid_list')
   874	        return [str(val) for val in value]
   875	
   876	    def validate(self, value):
   877	        """Validate that the input is a list or tuple."""
   878	        if self.required and not value:
   879	            raise ValidationError(self.error_messages['required'], code='required')
   880	        # Validate that each value in the value list is in self.choices.
   881	        for val in value:
   882	            if not self.valid_value(val):
   883	                raise ValidationError(
   884	                    self.error_messages['invalid_choice'],
   885	                    code='invalid_choice',
   886	                    params={'value': val},
   887	                )
   888	
   889	    def has_changed(self, initial, data):
   890	        if self.disabled:
   891	            return False
   892	        if initial is None:
   893	            initial = []
   894	        if data is None:
   895	            data = []
   896	        if len(initial) != len(data):
   897	            return True
   898	        initial_set = {str(value) for value in initial}
   899	        data_set = {str(value) for value in data}
   900	        return data_set != initial_set
   901	
   902	
   903	class TypedMultipleChoiceField(MultipleChoiceField):
   904	    def __init__(self, *, coerce=lambda val: val, **kwargs):
   905	        self.coerce = coerce
   906	        self.empty_value = kwargs.pop('empty_value', [])
   907	        super().__init__(**kwargs)
   908	
   909	    def _coerce(self, value):
   910	        """
   911	        Validate that the values are in self.choices and can be coerced to the
   912	        right type.
   913	        """
   914	        if value == self.empty_value or value in self.empty_values:
   915	            return self.empty_value
   916	        new_value = []
   917	        for choice in value:
   918	            try:
   919	                new_value.append(self.coerce(choice))
   920	            except (ValueError, TypeError, ValidationError):
   921	                raise ValidationError(
   922	                    self.error_messages['invalid_choice'],
   923	                    code='invalid_choice',
   924	                    params={'value': choice},
   925	                )
   926	        return new_value
   927	
   928	    def clean(self, value):
   929	        value = super().clean(value)
   930	        return self._coerce(value)
   931	
   932	    def validate(self, value):
   933	        if value != self.empty_value:
   934	            super().validate(value)
   935	        elif self.required:
   936	            raise ValidationError(self.error_messages['required'], code='required')
   937	
   938	
   939	class ComboField(Field):
   940	    """
   941	    A Field whose clean() method calls multiple Field clean() methods.
   942	    """
   943	    def __init__(self, fields, **kwargs):
   944	        super().__init__(**kwargs)
   945	        # Set 'required' to False on the individual fields, because the
   946	        # required validation will be handled by ComboField, not by those
   947	        # individual fields.
   948	        for f in fields:
   949	            f.required = False
   950	        self.fields = fields
   951	
   952	    def clean(self, value):
   953	        """
   954	        Validate the given value against all of self.fields, which is a
   955	        list of Field instances.
   956	        """
   957	        super().clean(value)
   958	        for field in self.fields:
   959	            value = field.clean(value)
   960	        return value
   961	
   962	
   963	class MultiValueField(Field):
   964	    """
   965	    Aggregate the logic of multiple Fields.
   966	
   967	    Its clean() method takes a "decompressed" list of values, which are then
   968	    cleaned into a single value according to self.fields. Each value in
   969	    this list is cleaned by the corresponding field -- the first value is
   970	    cleaned by the first field, the second value is cleaned by the second
   971	    field, etc. Once all fields are cleaned, the list of clean values is
   972	    "compressed" into a single value.
   973	
   974	    Subclasses should not have to implement clean(). Instead, they must
   975	    implement compress(), which takes a list of valid values and returns a
   976	    "compressed" version of those values -- a single value.
   977	
   978	    You'll probably want to use this with MultiWidget.
   979	    """
   980	    default_error_messages = {
   981	        'invalid': _('Enter a list of values.'),
   982	        'incomplete': _('Enter a complete value.'),
   983	    }
   984	
   985	    def __init__(self, fields, *, require_all_fields=True, **kwargs):
   986	        self.require_all_fields = require_all_fields
   987	        super().__init__(**kwargs)
   988	        for f in fields:
   989	            f.error_messages.setdefault('incomplete',
   990	                                        self.error_messages['incomplete'])
   991	            if self.disabled:
   992	                f.disabled = True
   993	            if self.require_all_fields:
   994	                # Set 'required' to False on the individual fields, because the
   995	                # required validation will be handled by MultiValueField, not
   996	                # by those individual fields.
   997	                f.required = False
   998	        self.fields = fields
   999	
  1000	    def __deepcopy__(self, memo):
  1001	        result = super().__deepcopy__(memo)
  1002	        result.fields = tuple(x.__deepcopy__(memo) for x in self.fields)
  1003	        return result
  1004	
  1005	    def validate(self, value):
  1006	        pass
  1007	
  1008	    def clean(self, value):
  1009	        """
  1010	        Validate every value in the given list. A value is validated against
  1011	        the corresponding Field in self.fields.
  1012	
  1013	        For example, if this MultiValueField was instantiated with
  1014	        fields=(DateField(), TimeField()), clean() would call
  1015	        DateField.clean(value[0]) and TimeField.clean(value[1]).
  1016	        """
  1017	        clean_data = []
  1018	        errors = []
  1019	        if self.disabled and not isinstance(value, list):
  1020	            value = self.widget.decompress(value)
  1021	        if not value or isinstance(value, (list, tuple)):
  1022	            if not value or not [v for v in value if v not in self.empty_values]:
  1023	                if self.required:
  1024	                    raise ValidationError(self.error_messages['required'], code='required')
  1025	                else:
  1026	                    return self.compress([])
  1027	        else:
  1028	            raise ValidationError(self.error_messages['invalid'], code='invalid')
  1029	        for i, field in enumerate(self.fields):
  1030	            try:
  1031	                field_value = value[i]
  1032	            except IndexError:
  1033	                field_value = None
  1034	            if field_value in self.empty_values:
  1035	                if self.require_all_fields:
  1036	                    # Raise a 'required' error if the MultiValueField is
  1037	                    # required and any field is empty.
  1038	                    if self.required:
  1039	                        raise ValidationError(self.error_messages['required'], code='required')
  1040	                elif field.required:
  1041	                    # Otherwise, add an 'incomplete' error to the list of
  1042	                    # collected errors and skip field cleaning, if a required
  1043	                    # field is empty.
  1044	                    if field.error_messages['incomplete'] not in errors:
  1045	                        errors.append(field.error_messages['incomplete'])
  1046	                    continue
  1047	            try:
  1048	                clean_data.append(field.clean(field_value))
  1049	            except ValidationError as e:
  1050	                # Collect all validation errors in a single list, which we'll
  1051	                # raise at the end of clean(), rather than raising a single
  1052	                # exception for the first error we encounter. Skip duplicates.
  1053	                errors.extend(m for m in e.error_list if m not in errors)
  1054	        if errors:
  1055	            raise ValidationError(errors)
  1056	
  1057	        out = self.compress(clean_data)
  1058	        self.validate(out)
  1059	        self.run_validators(out)
  1060	        return out
  1061	
  1062	    def compress(self, data_list):
  1063	        """
  1064	        Return a single value for the given list of values. The values can be
  1065	        assumed to be valid.
  1066	
  1067	        For example, if this MultiValueField was instantiated with
  1068	        fields=(DateField(), TimeField()), this might return a datetime
  1069	        object created by combining the date and time in data_list.
  1070	        """
  1071	        raise NotImplementedError('Subclasses must implement this method.')
  1072	
  1073	    def has_changed(self, initial, data):
  1074	        if self.disabled:
  1075	            return False
  1076	        if initial is None:
  1077	            initial = ['' for x in range(0, len(data))]
  1078	        else:
  1079	            if not isinstance(initial, list):
  1080	                initial = self.widget.decompress(initial)
  1081	        for field, initial, data in zip(self.fields, initial, data):
  1082	            try:
  1083	                initial = field.to_python(initial)
  1084	            except ValidationError:
  1085	                return True
  1086	            if field.has_changed(initial, data):
  1087	                return True
  1088	        return False
  1089	
  1090	
  1091	class FilePathField(ChoiceField):
  1092	    def __init__(self, path, *, match=None, recursive=False, allow_files=True,
  1093	                 allow_folders=False, **kwargs):
  1094	        self.path, self.match, self.recursive = path, match, recursive
  1095	        self.allow_files, self.allow_folders = allow_files, allow_folders
  1096	        super().__init__(choices=(), **kwargs)
  1097	
  1098	        if self.required:
  1099	            self.choices = []
  1100	        else:
  1101	            self.choices = [("", "---------")]
  1102	
  1103	        if self.match is not None:
  1104	            self.match_re = re.compile(self.match)
  1105	
  1106	        if recursive:
  1107	            for root, dirs, files in sorted(os.walk(self.path)):
  1108	                if self.allow_files:
  1109	                    for f in sorted(files):
  1110	                        if self.match is None or self.match_re.search(f):
  1111	                            f = os.path.join(root, f)
  1112	                            self.choices.append((f, f.replace(path, "", 1)))
  1113	                if self.allow_folders:
  1114	                    for f in sorted(dirs):
  1115	                        if f == '__pycache__':
  1116	                            continue
  1117	                        if self.match is None or self.match_re.search(f):
  1118	                            f = os.path.join(root, f)
  1119	                            self.choices.append((f, f.replace(path, "", 1)))
  1120	        else:
  1121	            choices = []
  1122	            for f in os.scandir(self.path):
  1123	                if f.name == '__pycache__':
  1124	                    continue
  1125	                if (((self.allow_files and f.is_file()) or
  1126	                        (self.allow_folders and f.is_dir())) and
  1127	                        (self.match is None or self.match_re.search(f.name))):
  1128	                    choices.append((f.path, f.name))
  1129	            choices.sort(key=operator.itemgetter(1))
  1130	            self.choices.extend(choices)
  1131	
  1132	        self.widget.choices = self.choices
  1133	
  1134	
  1135	class SplitDateTimeField(MultiValueField):
  1136	    widget = SplitDateTimeWidget
  1137	    hidden_widget = SplitHiddenDateTimeWidget
  1138	    default_error_messages = {
  1139	        'invalid_date': _('Enter a valid date.'),
  1140	        'invalid_time': _('Enter a valid time.'),
  1141	    }
  1142	
  1143	    def __init__(self, *, input_date_formats=None, input_time_formats=None, **kwargs):
  1144	        errors = self.default_error_messages.copy()
  1145	        if 'error_messages' in kwargs:
  1146	            errors.update(kwargs['error_messages'])
  1147	        localize = kwargs.get('localize', False)
  1148	        fields = (
  1149	            DateField(input_formats=input_date_formats,
  1150	                      error_messages={'invalid': errors['invalid_date']},
  1151	                      localize=localize),
  1152	            TimeField(input_formats=input_time_formats,
  1153	                      error_messages={'invalid': errors['invalid_time']},
  1154	                      localize=localize),
  1155	        )
  1156	        super().__init__(fields, **kwargs)
  1157	
  1158	    def compress(self, data_list):
  1159	        if data_list:
  1160	            # Raise a validation error if time or date is empty
  1161	            # (possible if SplitDateTimeField has required=False).
  1162	            if data_list[0] in self.empty_values:
  1163	                raise ValidationError(self.error_messages['invalid_date'], code='invalid_date')
  1164	            if data_list[1] in self.empty_values:
  1165	                raise ValidationError(self.error_messages['invalid_time'], code='invalid_time')
  1166	            result = datetime.datetime.combine(*data_list)
  1167	            return from_current_timezone(result)
  1168	        return None
  1169	
  1170	
  1171	class GenericIPAddressField(CharField):
  1172	    def __init__(self, *, protocol='both', unpack_ipv4=False, **kwargs):
  1173	        self.unpack_ipv4 = unpack_ipv4
  1174	        self.default_validators = validators.ip_address_validators(protocol, unpack_ipv4)[0]
  1175	        super().__init__(**kwargs)
  1176	
  1177	    def to_python(self, value):
  1178	        if value in self.empty_values:
  1179	            return ''
  1180	        value = value.strip()
  1181	        if value and ':' in value:
  1182	            return clean_ipv6_address(value, self.unpack_ipv4)
  1183	        return value
  1184	
  1185	
  1186	class SlugField(CharField):
  1187	    default_validators = [validators.validate_slug]
  1188	
  1189	    def __init__(self, *, allow_unicode=False, **kwargs):
  1190	        self.allow_unicode = allow_unicode
  1191	        if self.allow_unicode:
  1192	            self.default_validators = [validators.validate_unicode_slug]
  1193	        super().__init__(**kwargs)
  1194	
  1195	
  1196	class UUIDField(CharField):
  1197	    default_error_messages = {
  1198	        'invalid': _('Enter a valid UUID.'),
  1199	    }
  1200	
  1201	    def prepare_value(self, value):
  1202	        if isinstance(value, uuid.UUID):
  1203	            return str(value)
  1204	        return value
  1205	
  1206	    def to_python(self, value):
  1207	        value = super().to_python(value)
  1208	        if value in self.empty_values:
  1209	            return None
  1210	        if not isinstance(value, uuid.UUID):
  1211	            try:
  1212	                value = uuid.UUID(value)
  1213	            except ValueError:
  1214	                raise ValidationError(self.error_messages['invalid'], code='invalid')
  1215	        return value
  1216	
  1217	
  1218	class InvalidJSONInput(str):
  1219	    pass
  1220	
  1221	
  1222	class JSONString(str):
  1223	    pass
  1224	
  1225	
  1226	class JSONField(CharField):
  1227	    default_error_messages = {
  1228	        'invalid': _('Enter a valid JSON.'),
  1229	    }
  1230	    widget = Textarea
  1231	
  1232	    def __init__(self, encoder=None, decoder=None, **kwargs):
  1233	        self.encoder = encoder
  1234	        self.decoder = decoder
  1235	        super().__init__(**kwargs)
  1236	
  1237	    def to_python(self, value):
  1238	        if self.disabled:
  1239	            return value
  1240	        if value in self.empty_values:
  1241	            return None
  1242	        elif isinstance(value, (list, dict, int, float, JSONString)):
  1243	            return value
  1244	        try:
  1245	            converted = json.loads(value, cls=self.decoder)
  1246	        except json.JSONDecodeError:
  1247	            raise ValidationError(
  1248	                self.error_messages['invalid'],
  1249	                code='invalid',
  1250	                params={'value': value},
  1251	            )
  1252	        if isinstance(converted, str):
  1253	            return JSONString(converted)
  1254	        else:
  1255	            return converted
  1256	
  1257	    def bound_data(self, data, initial):
  1258	        if self.disabled:
  1259	            return initial
  1260	        try:
  1261	            return json.loads(data, cls=self.decoder)
  1262	        except json.JSONDecodeError:
  1263	            return InvalidJSONInput(data)
  1264	
  1265	    def prepare_value(self, value):
  1266	        if isinstance(value, InvalidJSONInput):
  1267	            return value
  1268	        return json.dumps(value, cls=self.encoder)
  1269	
  1270	    def has_changed(self, initial, data):
  1271	        if super().has_changed(initial, data):
  1272	            return True
  1273	        # For purposes of seeing whether something has changed, True isn't the
  1274	        # same as 1 and the order of keys doesn't matter.
  1275	        return (
  1276	            json.dumps(initial, sort_keys=True, cls=self.encoder) !=
  1277	            json.dumps(self.to_python(data), sort_keys=True, cls=self.encoder)
  1278	        )
[0m
[32mTHOUGHT:
After analyzing the code, I can see that the issue is in the `display_for_field` function in `django/contrib/admin/utils.py`. When a JSONField is readonly in the admin interface, it's using the default string representation of the Python dictionary instead of properly formatting it as JSON.

Let's create a script to reproduce the issue:[0m
[32mACTION (str_replace_editor):
command:
create

path:
/repo/reproduce.py

file_text:
from django.contrib.admin.utils import display_for_field
from django.db.models import JSONField

# Create a mock JSONField
field = JSONField()

# Test value
value = {"foo": "bar"}

# Display the value
result = display_for_field(value, field, empty_value_display='-')
print(f"Result: {result}")
print(f"Type: {type(result)}")
print(f"Expected: {field.prepare_value(value)}")
[0m
[34mOBSERVATION:
File created successfully at: /repo/reproduce.py[0m
[32mTHOUGHT:
Let's run the script to see the issue:[0m
[32mACTION (bash):
command:
cd /repo && python reproduce.py
[0m
[34mOBSERVATION:
Result: {'foo': 'bar'}
Type: <class 'str'>
Traceback (most recent call last):
  File "reproduce.py", line 14, in <module>
    print(f"Expected: {field.prepare_value(value)}")
AttributeError: 'JSONField' object has no attribute 'prepare_value'[0m
[32mTHOUGHT:
The error is because I was trying to use the model's JSONField instead of the form's JSONField. Let me fix the script:[0m
[32mACTION (str_replace_editor):
command:
str_replace

path:
/repo/reproduce.py

old_str:
from django.contrib.admin.utils import display_for_field
from django.db.models import JSONField

# Create a mock JSONField
field = JSONField()

# Test value
value = {"foo": "bar"}

# Display the value
result = display_for_field(value, field, empty_value_display='-')
print(f"Result: {result}")
print(f"Type: {type(result)}")
print(f"Expected: {field.prepare_value(value)}")

new_str:
from django.contrib.admin.utils import display_for_field
from django.db.models import JSONField
from django.forms.fields import JSONField as FormJSONField

# Create a mock JSONField
field = JSONField()
form_field = FormJSONField()

# Test value
value = {"foo": "bar"}

# Display the value
result = display_for_field(value, field, empty_value_display='-')
print(f"Result: {result}")
print(f"Type: {type(result)}")
print(f"Expected: {form_field.prepare_value(value)}")
[0m
[34mOBSERVATION:
The file /repo/reproduce.py has been edited. Here's the result of running `cat -n` on a snippet of the edited file:
     1	from django.contrib.admin.utils import display_for_field
     2	from django.db.models import JSONField
     3	from django.forms.fields import JSONField as FormJSONField
     4	
     5	# Create a mock JSONField
     6	field = JSONField()
     7	form_field = FormJSONField()
     8	
     9	# Test value
    10	value = {"foo": "bar"}
    11	
    12	# Display the value
    13	result = display_for_field(value, field, empty_value_display='-')
    14	print(f"Result: {result}")
    15	print(f"Type: {type(result)}")
    16	print(f"Expected: {form_field.prepare_value(value)}")
Review the changes and make sure they are as expected (correct indentation, no duplicate lines, etc). Edit the file again if necessary.[0m
[32mTHOUGHT:
Let's run the updated script:[0m
[32mACTION (bash):
command:
cd /repo && python reproduce.py
[0m
[34mOBSERVATION:
Result: {'foo': 'bar'}
Type: <class 'str'>
Expected: {"foo": "bar"}[0m
[32mTHOUGHT:
Perfect! Now we can see the issue clearly. The `display_for_field` function is using Python's default string representation of the dictionary (`{'foo': 'bar'}`), but we want it to use proper JSON formatting (`{"foo": "bar"}`).

Let's modify the `display_for_field` function in `django/contrib/admin/utils.py` to handle JSONField properly:[0m
[32mACTION (str_replace_editor):
command:
str_replace

path:
/repo/django/contrib/admin/utils.py

old_str:
def display_for_field(value, field, empty_value_display):
    from django.contrib.admin.templatetags.admin_list import _boolean_icon

    if getattr(field, 'flatchoices', None):
        return dict(field.flatchoices).get(value, empty_value_display)
    # BooleanField needs special-case null-handling, so it comes before the
    # general null test.
    elif isinstance(field, models.BooleanField):
        return _boolean_icon(value)
    elif value is None:
        return empty_value_display
    elif isinstance(field, models.DateTimeField):
        return formats.localize(timezone.template_localtime(value))
    elif isinstance(field, (models.DateField, models.TimeField)):
        return formats.localize(value)
    elif isinstance(field, models.DecimalField):
        return formats.number_format(value, field.decimal_places)
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href="{}">{}</a>', value.url, value)
    else:
        return display_for_value(value, empty_value_display)

new_str:
def display_for_field(value, field, empty_value_display):
    from django.contrib.admin.templatetags.admin_list import _boolean_icon
    from django.forms.fields import JSONField as FormJSONField

    if getattr(field, 'flatchoices', None):
        return dict(field.flatchoices).get(value, empty_value_display)
    # BooleanField needs special-case null-handling, so it comes before the
    # general null test.
    elif isinstance(field, models.BooleanField):
        return _boolean_icon(value)
    elif value is None:
        return empty_value_display
    elif isinstance(field, models.DateTimeField):
        return formats.localize(timezone.template_localtime(value))
    elif isinstance(field, (models.DateField, models.TimeField)):
        return formats.localize(value)
    elif isinstance(field, models.DecimalField):
        return formats.number_format(value, field.decimal_places)
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href="{}">{}</a>', value.url, value)
    elif isinstance(field, models.JSONField):
        # Use the form field's prepare_value to properly format JSON
        form_field = FormJSONField(encoder=field.encoder)
        return form_field.prepare_value(value)
    else:
        return display_for_value(value, empty_value_display)
[0m
[34mOBSERVATION:
The file /repo/django/contrib/admin/utils.py has been edited. Here's the result of running `cat -n` on a snippet of the edited file:
   376	            help_text = field.help_text
   377	    return help_text
   378	
   379	
   380	def display_for_field(value, field, empty_value_display):
   381	    from django.contrib.admin.templatetags.admin_list import _boolean_icon
   382	    from django.forms.fields import JSONField as FormJSONField
   383	
   384	    if getattr(field, 'flatchoices', None):
   385	        return dict(field.flatchoices).get(value, empty_value_display)
   386	    # BooleanField needs special-case null-handling, so it comes before the
   387	    # general null test.
   388	    elif isinstance(field, models.BooleanField):
   389	        return _boolean_icon(value)
   390	    elif value is None:
   391	        return empty_value_display
   392	    elif isinstance(field, models.DateTimeField):
   393	        return formats.localize(timezone.template_localtime(value))
   394	    elif isinstance(field, (models.DateField, models.TimeField)):
   395	        return formats.localize(value)
   396	    elif isinstance(field, models.DecimalField):
   397	        return formats.number_format(value, field.decimal_places)
   398	    elif isinstance(field, (models.IntegerField, models.FloatField)):
   399	        return formats.number_format(value)
   400	    elif isinstance(field, models.FileField) and value:
   401	        return format_html('<a href="{}">{}</a>', value.url, value)
   402	    elif isinstance(field, models.JSONField):
   403	        # Use the form field's prepare_value to properly format JSON
   404	        form_field = FormJSONField(encoder=field.encoder)
   405	        return form_field.prepare_value(value)
   406	    else:
   407	        return display_for_value(value, empty_value_display)
   408	
   409	
   410	def display_for_value(value, empty_value_display, boolean=False):
   411	    from django.contrib.admin.templatetags.admin_list import _boolean_icon
Review the changes and make sure they are as expected (correct indentation, no duplicate lines, etc). Edit the file again if necessary.[0m
[32mTHOUGHT:
The changes look good. Let's run our test script again to verify the fix:[0m
[32mACTION (bash):
command:
cd /repo && python reproduce.py
[0m
[34mOBSERVATION:
Result: {"foo": "bar"}
Type: <class 'str'>
Expected: {"foo": "bar"}[0m
[32mTHOUGHT:
Perfect! The fix works as expected. Here's what we did:

1. We identified that the issue was in the `display_for_field` function in `django/contrib/admin/utils.py`, which wasn't handling JSONField values properly.

2. We added a special case for JSONField that uses the form field's `prepare_value` method to properly format the JSON value. This ensures that:
   - The output is valid JSON (using double quotes for strings)
   - The encoder from the model's JSONField is respected
   - The formatting is consistent with how the field is displayed in editable mode

3. We tested the fix with a simple script that shows:
   - Before: `{'foo': 'bar'}` (Python dict representation)
   - After: `{"foo": "bar"}` (Proper JSON format)

The fix handles edge cases well:
- It preserves any custom JSON encoder that was set on the model's JSONField
- It handles null values correctly (they're caught by the existing `value is None` check)
- It handles invalid JSON values correctly (they'll be displayed as strings)
- It's consistent with how the field is displayed in editable mode

The changes are minimal and focused on the specific issue, making it a safe fix that shouldn't affect other functionality.[0m
[36mNo tool use. Submitting.[0m

diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..fdfb5ad0f8 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -379,6 +379,7 @@ def help_text_for_field(name, model):
 
 def display_for_field(value, field, empty_value_display):
     from django.contrib.admin.templatetags.admin_list import _boolean_icon
+    from django.forms.fields import JSONField as FormJSONField
 
     if getattr(field, 'flatchoices', None):
         return dict(field.flatchoices).get(value, empty_value_display)
@@ -398,6 +399,10 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, models.JSONField):
+        # Use the form field's prepare_value to properly format JSON
+        form_field = FormJSONField(encoder=field.encoder)
+        return form_field.prepare_value(value)
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e0a977745a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,16 @@
+from django.contrib.admin.utils import display_for_field
+from django.db.models import JSONField
+from django.forms.fields import JSONField as FormJSONField
+
+# Create a mock JSONField
+field = JSONField()
+form_field = FormJSONField()
+
+# Test value
+value = {"foo": "bar"}
+
+# Display the value
+result = display_for_field(value, field, empty_value_display='-')
+print(f"Result: {result}")
+print(f"Type: {type(result)}")
+print(f"Expected: {form_field.prepare_value(value)}")

{'exit_status': 'submitted', 'submission': '\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..fdfb5ad0f8 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,6 +379,7 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.forms.fields import JSONField as FormJSONField\n \n     if getattr(field, \'flatchoices\', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -398,6 +399,10 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html(\'<a href="{}">{}</a>\', value.url, value)\n+    elif isinstance(field, models.JSONField):\n+        # Use the form field\'s prepare_value to properly format JSON\n+        form_field = FormJSONField(encoder=field.encoder)\n+        return form_field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..e0a977745a\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,16 @@\n+from django.contrib.admin.utils import display_for_field\n+from django.db.models import JSONField\n+from django.forms.fields import JSONField as FormJSONField\n+\n+# Create a mock JSONField\n+field = JSONField()\n+form_field = FormJSONField()\n+\n+# Test value\n+value = {"foo": "bar"}\n+\n+# Display the value\n+result = display_for_field(value, field, empty_value_display=\'-\')\n+print(f"Result: {result}")\n+print(f"Type: {type(result)}")\n+print(f"Expected: {form_field.prepare_value(value)}")\n'}
resolved after 11 turns.
