{
  "instance_id": "astropy__astropy-7746",
  "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..53aac3e244 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,13 +1212,19 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            # Convert inputs to arrays and check for empty inputs\n+            arrays = [np.asarray(x) for x in axes]\n+            if any(x.size == 0 for x in arrays):\n+                # Return empty arrays of correct shape\n+                return [np.array([], dtype=float) for _ in range(self.naxis)]\n+            \n             try:\n-                axes = np.broadcast_arrays(*axes)\n+                arrays = np.broadcast_arrays(*arrays)\n             except ValueError:\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+            xy = np.hstack([x.reshape((x.size, 1)) for x in arrays])\n \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n@@ -1231,6 +1237,11 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n+            # Convert input to array and handle empty input\n+            xy = np.asarray(xy)\n+            if xy.size == 0:\n+                return np.array([]).reshape(0, self.naxis)\n+                \n             if xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n@@ -3296,4 +3307,4 @@ def validate(source):\n \n                 wcs_results.extend([str(x.message) for x in warning_lines])\n \n-    return results\n+    return results\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}