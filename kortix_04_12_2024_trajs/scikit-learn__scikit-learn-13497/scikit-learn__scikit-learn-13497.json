{
  "instance_id": "scikit-learn__scikit-learn-13497",
  "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..b31476841 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,7 +247,9 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n+    if isinstance(discrete_features, str):\n+        if discrete_features != 'auto':\n+            raise ValueError(\"String value for discrete_features must be 'auto'\")\n         discrete_features = issparse(X)\n \n     if isinstance(discrete_features, bool):\n@@ -446,4 +448,4 @@ def mutual_info_classif(X, y, discrete_features='auto', n_neighbors=3,\n     \"\"\"\n     check_classification_targets(y)\n     return _estimate_mi(X, y, discrete_features, True, n_neighbors,\n-                        copy, random_state)\n+                        copy, random_state)\n\\ No newline at end of file\ndiff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex 7ba7d37e8..dca2e5bfd 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -1,4 +1,3 @@\n-\n import numpy as np\n from scipy.sparse import csr_matrix\n \n@@ -182,6 +181,10 @@ def test_mutual_info_options():\n     y = np.array([0, 1, 2, 2, 1], dtype=float)\n     X_csr = csr_matrix(X)\n \n+    # Test with invalid string value\n+    assert_raises(ValueError, mutual_info_regression, X, y,\n+                 discrete_features='invalid')\n+\n     for mutual_info in (mutual_info_regression, mutual_info_classif):\n         assert_raises(ValueError, mutual_info_regression, X_csr, y,\n                       discrete_features=False)\n@@ -197,4 +200,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}