{
  "instance_id": "sympy__sympy-15678",
  "model_patch": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex a6ded44062..6ebe80aed7 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -9,6 +9,7 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n+    f = Function('f')\n     # the use of idiff in ellipse also provides coverage\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n@@ -19,6 +20,15 @@ def test_idiff():\n     assert ans.subs(y, solve(circ, y)[0]).equals(explicit)\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n+    \n+    # Test Eq support\n+    from sympy import Eq, exp\n+    eq1 = Eq(y*exp(y), x*exp(x))\n+    assert idiff(eq1, y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    \n+    # Test function expression support\n+    eq2 = f(x)*exp(f(x)) - x*exp(x)\n+    assert idiff(eq2, f(x), x) == (x + 1)*exp(x - f(x))/(f(x) + 1)\n \n \n def test_intersection():\n@@ -123,4 +133,4 @@ def test_farthest_points_closest_points():\n         [(Point2D(-5, -2), Point2D(15, -4))])\n     assert farthest_points((1, 1), (0, 0)) == set(\n         [(Point2D(0, 0), Point2D(1, 1))])\n-    raises(ValueError, lambda: farthest_points((1, 1)))\n+    raises(ValueError, lambda: farthest_points((1, 1)))\n\\ No newline at end of file\ndiff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..1504efb4aa 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -532,6 +532,7 @@ def idiff(eq, y, x, n=1):\n     ==========\n \n     y : the dependent variable or a list of dependent variables (with y first)\n+       Can be a Symbol, Function, or a list of them\n     x : the variable that the derivative is being taken with respect to\n     n : the order of the derivative (default is 1)\n \n@@ -540,6 +541,7 @@ def idiff(eq, y, x, n=1):\n \n     >>> from sympy.abc import x, y, a\n     >>> from sympy.geometry.util import idiff\n+    >>> from sympy import Eq, Function\n \n     >>> circ = x**2 + y**2 - 4\n     >>> idiff(circ, y, x)\n@@ -547,6 +549,17 @@ def idiff(eq, y, x, n=1):\n     >>> idiff(circ, y, x, 2).simplify()\n     -(x**2 + y**2)/y**3\n \n+    The equation can be specified using Eq:\n+\n+    >>> idiff(Eq(y*exp(y), x*exp(x)), y, x)\n+    (x + 1)*exp(x - y)/(y + 1)\n+\n+    The dependent variable can be a function:\n+\n+    >>> f = Function('f')\n+    >>> idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x)\n+    (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n     Here, ``a`` is assumed to be independent of ``x``:\n \n     >>> idiff(x + a + y, y, x)\n@@ -565,13 +578,21 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    from sympy import Eq, Function\n+    \n+    # Handle Eq objects by converting to standard form\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+        \n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n+        dep = {y}\n+    elif hasattr(y, 'free_symbols'):  # Handle function expressions like f(x)\n         dep = {y}\n     else:\n-        raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n+        raise ValueError(\"expecting x-dependent symbol(s) or function(s) but got: %s\" % y)\n \n     f = dict([(s, Function(\n         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n@@ -677,4 +698,4 @@ def intersection(*entities, **kwargs):\n     for j in range(0, len(entities)):\n         for k in range(j + 1, len(entities)):\n             ans.extend(intersection(entities[j], entities[k]))\n-    return list(ordered(set(ans)))\n+    return list(ordered(set(ans)))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}