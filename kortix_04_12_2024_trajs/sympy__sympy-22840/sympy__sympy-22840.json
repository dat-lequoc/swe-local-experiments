{
  "instance_id": "sympy__sympy-22840",
  "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 78db834466..c275064ef0 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -691,6 +691,8 @@ def free_symbols(self):\n         return {self}\n \n     def _eval_simplify(self, **kwargs):\n+        # Avoid circular import with simplify\n+        from sympy.simplify.simplify import simplify as _simplify\n         return self\n \n     def _eval_derivative(self, x):\n@@ -865,4 +867,4 @@ def _make_matrix(x):\n from .transpose import Transpose\n from .inverse import Inverse\n from .special import ZeroMatrix, Identity\n-from .determinant import Determinant\n+from .determinant import Determinant\n\\ No newline at end of file\ndiff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d649dd02a9..d2a9e1e9b8 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -1,6 +1,8 @@\n \"\"\" Tools for doing common subexpression elimination.\n \"\"\"\n from sympy.core import Basic, Mul, Add, Pow, sympify\n+from sympy.matrices.expressions.matexpr import MatrixElement\n+from sympy.matrices.expressions.matexpr import MatrixElement\n from sympy.core.containers import Tuple, OrderedSet\n from sympy.core.exprtools import factor_terms\n from sympy.core.singleton import S\n@@ -583,7 +585,7 @@ def _find_repeated(expr):\n         if not isinstance(expr, (Basic, Unevaluated)):\n             return\n \n-        if isinstance(expr, RootOf):\n+        if isinstance(expr, (RootOf, MatrixElement)):\n             return\n \n         if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):\n@@ -913,4 +915,4 @@ def _cse_homogeneous(exprs, **kwargs):\n     except TypeError: # For example 'mpf' objects\n         return [], exprs\n     else:\n-        return replacements, reduced_exprs\n+        return replacements, reduced_exprs\n\\ No newline at end of file\ndiff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex eb9cc23131..de2078c64d 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -599,3 +599,21 @@ def test_issue_18991():\n def test_unevaluated_Mul():\n     m = [Mul(1, 2, evaluate=False)]\n     assert cse(m) == ([], m)\n+\n+def test_matrix_element_cse():\n+    # Test that matrix element access isn't broken into subexpressions\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A[0,0]*B[0,0] + A[0,1]*B[1,0]\n+    replacements, reduced = cse(expr)\n+    # Should not create temporaries for simple indexing\n+    assert len([x for x,y in replacements if isinstance(y, MatrixElement)]) == 0\n+\n+def test_matrix_element_cse():\n+    # Test that matrix element access isn't broken into subexpressions\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A[0,0]*B[0,0] + A[0,1]*B[1,0]\n+    replacements, reduced = cse(expr)\n+    # Should not create temporaries for simple indexing\n+    assert len([x for x,y in replacements if isinstance(y, MatrixElement)]) == 0\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}