diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py
index b7d9d26389..a7a14c5f42 100644
--- a/django/dispatch/dispatcher.py
+++ b/django/dispatch/dispatcher.py
@@ -1,7 +1,10 @@
+import logging
 import threading
 import warnings
 import weakref
 
+logger = logging.getLogger('django.dispatch')
+
 from django.utils.deprecation import RemovedInDjango40Warning
 from django.utils.inspect import func_accepts_kwargs
 
@@ -208,6 +211,7 @@ class Signal:
             try:
                 response = receiver(signal=self, sender=sender, **named)
             except Exception as err:
+                logger.exception("Error calling receiver %r for signal %r", receiver, self)
                 responses.append((receiver, err))
             else:
                 responses.append((receiver, response))
@@ -291,4 +295,4 @@ def receiver(signal, **kwargs):
         else:
             signal.connect(func, **kwargs)
         return func
-    return _decorator
+    return _decorator
\ No newline at end of file
diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py
index 9b5482ed58..f199e9c851 100644
--- a/tests/dispatch/tests.py
+++ b/tests/dispatch/tests.py
@@ -1,7 +1,9 @@
 import gc
 import sys
 import weakref
+import logging
 from types import TracebackType
+from unittest.mock import patch
 
 from django.dispatch import Signal, receiver
 from django.test import SimpleTestCase
@@ -174,6 +176,20 @@ class DispatcherTests(SimpleTestCase):
         a_signal.disconnect(fails)
         self.assertTestIsClean(a_signal)
 
+    @patch('django.dispatch.dispatcher.logger')
+    def test_send_robust_fail_logging(self, mock_logger):
+        """
+        Test that send_robust logs exceptions from receivers.
+        """
+        def fails(val, **kwargs):
+            raise ValueError('this')
+        a_signal.connect(fails)
+        a_signal.send_robust(sender=self, val="test")
+        mock_logger.exception.assert_called_once()
+        self.assertIn('Error calling receiver', mock_logger.exception.call_args[0][0])
+        a_signal.disconnect(fails)
+        self.assertTestIsClean(a_signal)
+
     def test_disconnection(self):
         receiver_1 = Callable()
         receiver_2 = Callable()
@@ -229,4 +245,4 @@ class ReceiverTestCase(SimpleTestCase):
         b_signal.send(sender=self, val='b')
         self.assertIn('a', self.state)
         self.assertIn('b', self.state)
-        self.assertIn('c', self.state)
+        self.assertIn('c', self.state)
\ No newline at end of file
