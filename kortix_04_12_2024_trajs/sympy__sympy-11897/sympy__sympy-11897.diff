diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 1edc712358..52f958296a 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -357,6 +357,20 @@ def _print_Mul(self, expr):
             tex = ""
 
         from sympy.simplify import fraction
+        from sympy import exp
+        
+        # Special handling for exp(-x) cases
+        if len(expr.args) == 2 and expr.args[0].func == exp and expr.args[0].args[0].is_Mul and _coeff_isneg(expr.args[0].args[0]):
+            base = expr.args[0]
+            rest = expr.args[1]
+            exp_arg = -base.args[0]
+            tex += r"e^{-%s}" % self._print(exp_arg)
+            if rest != 1:
+                tex += self._settings['mul_symbol_latex'] + self._print(rest)
+            if include_parens:
+                tex += ")"
+            return tex
+
         numer, denom = fraction(expr, exact=True)
         separator = self._settings['mul_symbol_latex']
         numbersep = self._settings['mul_symbol_latex_numbers']
@@ -399,7 +413,19 @@ def convert(expr):
             sdenom = convert(denom)
             ldenom = len(sdenom.split())
             ratio = self._settings['long_frac_ratio']
-            if self._settings['fold_short_frac'] \
+            
+            # Preserve structure for simple denominators
+            if '/' in str(expr) and '+' not in sdenom and '*' not in sdenom:
+                parts = str(expr).split('/')
+                if len(parts) == 2:
+                    tex += r"\frac{%s}{%s}" % (self._print(numer), self._print(denom))
+                else:
+                    # Handle nested fractions
+                    current = parts[0]
+                    for part in parts[1:]:
+                        current = r"\frac{%s}{%s}" % (current, part)
+                    tex += current
+            elif self._settings['fold_short_frac'] \
                     and ldenom <= 2 and not "^" in sdenom:
                 # handle short fractions
                 if self._needs_mul_brackets(numer, last=False):
@@ -2153,4 +2179,4 @@ def latex(expr, **settings):
 
 def print_latex(expr, **settings):
     """Prints LaTeX representation of the given expression."""
-    print(latex(expr, **settings))
+    print(latex(expr, **settings))
\ No newline at end of file
diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py
index 8a70549050..2ff76fb672 100644
--- a/sympy/printing/tests/test_latex.py
+++ b/sympy/printing/tests/test_latex.py
@@ -57,6 +57,30 @@ def test_latex_basic():
     assert latex(x**2) == "x^{2}"
     assert latex(x**(1 + x)) == "x^{x + 1}"
     assert latex(x**3 + x + 1 + x**2) == "x^{3} + x^{2} + x + 1"
+    
+    # Test exp(-x) handling
+    assert latex(exp(-x)*log(x)) == r"e^{-x} \log{\left (x \right )}"
+    
+    # Test fraction handling
+    assert latex(1/(x + y)/2) == r"\frac{1}{2 \left(x + y\right)}"
+    
+    # Test exp(-x) handling
+    assert latex(exp(-x)*log(x)) == r"e^{-x} \log{\left (x \right )}"
+    
+    # Test fraction handling
+    assert latex(1/(x + y)/2) == r"\frac{1}{2 \left(x + y\right)}"
+    
+    # Test exp(-x) handling
+    assert latex(exp(-x)*log(x)) == r"e^{-x} \log{\left (x \right )}"
+    
+    # Test fraction handling
+    assert latex(1/(x + y)/2) == r"\frac{1}{2 \left(x + y\right)}"
+    
+    # Test exp(-x) handling
+    assert latex(exp(-x)*log(x)) == r"e^{-x} \log{\left (x \right )}"
+    
+    # Test fraction handling
+    assert latex(1/(x + y)/2) == r"\frac{1}{2 \left(x + y\right)}"
 
     assert latex(2*x*y) == "2 x y"
     assert latex(2*x*y, mul_symbol='dot') == r"2 \cdot x \cdot y"
@@ -1593,4 +1617,4 @@ def test_latex_UnevaluatedExpr():
     assert latex(he) == latex(1/x) == r"\frac{1}{x}"
     assert latex(he**2) == r"\left(\frac{1}{x}\right)^{2}"
     assert latex(he + 1) == r"1 + \frac{1}{x}"
-    assert latex(x*he) == r"x \frac{1}{x}"
+    assert latex(x*he) == r"x \frac{1}{x}"
\ No newline at end of file
