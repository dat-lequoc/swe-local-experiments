diff --git a/django/template/engine.py b/django/template/engine.py
index 91e503f709..b58e5106e2 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -146,7 +146,22 @@ class Engine:
                 return template, template.origin
             except TemplateDoesNotExist as e:
                 tried.extend(e.tried)
-        raise TemplateDoesNotExist(name, tried=tried)
+            except PermissionError as e:
+                # Preserve the original error with context
+                raise PermissionError(
+                    f"Permission denied while accessing template '{name}': {e}"
+                ) from e
+            except OSError as e:
+                # Handle other OS-related errors similarly
+                if e.errno == errno.EACCES:  # Permission denied
+                    raise PermissionError(
+                        f"Permission denied while accessing template '{name}': {e}"
+                    ) from e
+                raise
+        if tried:
+            raise TemplateDoesNotExist(name, tried=tried)
+        else:
+            raise TemplateDoesNotExist(name)
 
     def from_string(self, template_code):
         """
@@ -197,4 +212,4 @@ class Engine:
                     not_found.append(exc.args[0])
                 continue
         # If we get here, none of the templates could be loaded
-        raise TemplateDoesNotExist(', '.join(not_found))
+        raise TemplateDoesNotExist(', '.join(not_found))
\ No newline at end of file
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 583c2be647..974627d9c0 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -170,27 +170,36 @@ def common_roots(paths):
     Try to find the minimum set of directories to watch that encompass all of
     the files that need to be watched.
     """
-    # Inspired from Werkzeug:
-    # https://github.com/pallets/werkzeug/blob/7477be2853df70a022d9613e765581b9411c3c39/werkzeug/_reloader.py
-    # Create a sorted list of the path components, longest first.
-    path_parts = sorted([x.parts for x in paths], key=len, reverse=True)
-    tree = {}
-    for chunks in path_parts:
-        node = tree
-        # Add each part of the path to the tree.
-        for chunk in chunks:
-            node = node.setdefault(chunk, {})
-        # Clear the last leaf in the tree.
-        node.clear()
-
-    # Turn the tree into a list of Path instances.
-    def _walk(node, path):
-        for prefix, child in node.items():
-            yield from _walk(child, path + (prefix,))
-        if not node:
-            yield Path(*path)
-
-    return tuple(_walk(tree, ()))
+    if not paths:
+        return tuple()
+
+    # Normalize and resolve all paths first
+    resolved_paths = []
+    for path in paths:
+        try:
+            resolved = path.resolve()
+            resolved_paths.append(resolved)
+        except (OSError, RuntimeError):
+            # Skip invalid paths or symlink loops
+            continue
+
+    if not resolved_paths:
+        return tuple()
+
+    # Find common prefixes while avoiding redundant paths
+    result = set()
+    sorted_paths = sorted(resolved_paths, key=lambda p: len(p.parts))
+    
+    for path in sorted_paths:
+        # Check if this path is already covered by an existing root
+        if not any(path.is_relative_to(existing) for existing in result):
+            # Check if this path could be a new root
+            redundant = {existing for existing in result 
+                        if existing.is_relative_to(path)}
+            result -= redundant
+            result.add(path)
+
+    return tuple(sorted(result))
 
 
 def sys_path_directories():
@@ -292,12 +301,25 @@ class BaseReloader:
         Yield all files that need to be watched, including module files and
         files within globs.
         """
-        yield from iter_all_python_module_files()
-        yield from self.extra_files
+        seen_paths = set()
+        
+        def yield_unique_paths(paths):
+            for path in paths:
+                try:
+                    resolved = path.resolve()
+                    if resolved not in seen_paths:
+                        seen_paths.add(resolved)
+                        yield path
+                except (OSError, RuntimeError):
+                    # Handle symlink loops or invalid paths gracefully
+                    continue
+        
+        yield from yield_unique_paths(iter_all_python_module_files())
+        yield from yield_unique_paths(self.extra_files)
         if include_globs:
             for directory, patterns in self.directory_globs.items():
                 for pattern in patterns:
-                    yield from directory.glob(pattern)
+                    yield from yield_unique_paths(directory.glob(pattern))
 
     def wait_for_apps_ready(self, app_reg, django_main_thread):
         """
@@ -646,4 +668,4 @@ def run_with_reloader(main_func, *args, **kwargs):
             exit_code = restart_with_reloader()
             sys.exit(exit_code)
     except KeyboardInterrupt:
-        pass
+        pass
\ No newline at end of file
