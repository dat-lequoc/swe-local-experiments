diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 78accaf295..7b1953c017 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):
             if isinstance(args[i], Add):
                 for aa in args[i].args:
                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
-                    if isinstance(tp, TensorProduct):
-                        tp = tp._eval_expand_tensorproduct()
-                    add_args.append(tp)
+                    c_part, nc_part = tp.args_cnc()
+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):
+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(),)
+                    add_args.append(Mul(*c_part)*Mul(*nc_part))
                 break
 
         if add_args:
@@ -417,4 +418,4 @@ def tensor_product_simp(e, **hints):
     elif isinstance(e, AntiCommutator):
         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])
     else:
-        return e
+        return e
\ No newline at end of file
diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py
index f1765640ea..644c7b3789 100644
--- a/sympy/physics/quantum/tests/test_tensorproduct.py
+++ b/sympy/physics/quantum/tests/test_tensorproduct.py
@@ -44,6 +44,10 @@ def test_tensor_product_abstract():
 def test_tensor_product_expand():
     assert TP(A + B, B + C).expand(tensorproduct=True) == \
         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)
+    
+    # Test expansion with scalar factors
+    assert TP(2*A - B, C + D).expand(tensorproduct=True) == \
+        2*TP(A, C) + 2*TP(A, D) - TP(B, C) - TP(B, D)
 
 
 def test_tensor_product_commutator():
@@ -117,4 +121,4 @@ def test_eval_trace():
     assert t.doit() == ( 1.0*A*Dagger(A)*Tr(B*Dagger(B)) +
                         1.0*A*Dagger(C)*Tr(B*Dagger(D)) +
                         1.0*C*Dagger(A)*Tr(D*Dagger(B)) +
-                        1.0*C*Dagger(C)*Tr(D*Dagger(D)))
+                        1.0*C*Dagger(C)*Tr(D*Dagger(D)))
\ No newline at end of file
