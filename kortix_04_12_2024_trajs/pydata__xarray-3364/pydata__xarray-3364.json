{
  "instance_id": "pydata__xarray-3364",
  "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..30f099e1 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -16,6 +16,7 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    variables_join=\"strict\",\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -80,6 +81,11 @@ def concat(\n     join : {'outer', 'inner', 'left', 'right', 'exact'}, optional\n         String indicating how to combine differing indexes\n         (excluding dim) in objects\n+    variables_join : {'strict', 'outer', 'inner'}, optional\n+        String indicating how to handle variables that are not present in all datasets:\n+        - 'strict' : raise ValueError if variables are missing in any datasets (default)\n+        - 'outer' : include all variables, filling in missing values with NaN\n+        - 'inner' : only include variables present in all datasets\n \n         - 'outer': use the union of object indexes\n         - 'inner': use the intersection of object indexes\n@@ -128,7 +134,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, variables_join)\n \n \n def _calc_concat_dim_coord(dim):\n@@ -269,6 +275,7 @@ def _dataset_concat(\n     positions,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    variables_join=\"strict\",\n ):\n     \"\"\"\n     Concatenate a sequence of datasets along a new or existing dimension\n@@ -313,11 +320,14 @@ def _dataset_concat(\n \n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n+            if variables_join == \"strict\" and absent_merge_vars:\n                 raise ValueError(\n                     \"variables %r are present in some datasets but not others. \"\n                     % absent_merge_vars\n                 )\n+            elif variables_join == \"inner\" and absent_merge_vars:\n+                # Remove variables not present in all datasets\n+                variables_to_merge = variables_to_merge - absent_merge_vars\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n@@ -394,6 +404,7 @@ def _dataarray_concat(\n     positions,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    variables_join=\"strict\",\n ):\n     arrays = list(arrays)\n \n@@ -422,5 +433,6 @@ def _dataarray_concat(\n         positions,\n         fill_value=fill_value,\n         join=join,\n+        variables_join=variables_join,\n     )\n-    return arrays[0]._from_temp_dataset(ds, name)\n+    return arrays[0]._from_temp_dataset(ds, name)\n\\ No newline at end of file\ndiff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\nindex c7af0fc9..e280aa7e 100644\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -166,6 +166,48 @@ class TestConcatDataset:\n         )\n         assert_identical(expected, actual)\n \n+    def test_concat_variables_join(self):\n+        ds1 = Dataset(\n+            {\n+                \"a\": (\"x\", [1, 2]),\n+                \"b\": (\"x\", [3, 4])\n+            },\n+            coords={\"x\": [0, 1]}\n+        )\n+        ds2 = Dataset(\n+            {\n+                \"a\": (\"x\", [5, 6]),\n+                \"c\": (\"x\", [7, 8])\n+            },\n+            coords={\"x\": [2, 3]}\n+        )\n+        \n+        # Test strict mode (default)\n+        with pytest.raises(ValueError):\n+            concat([ds1, ds2], dim=\"x\")\n+            \n+        # Test outer join\n+        expected_outer = Dataset(\n+            {\n+                \"a\": (\"x\", [1, 2, 5, 6]),\n+                \"b\": (\"x\", [3, 4, np.nan, np.nan]),\n+                \"c\": (\"x\", [np.nan, np.nan, 7, 8])\n+            },\n+            coords={\"x\": [0, 1, 2, 3]}\n+        )\n+        actual_outer = concat([ds1, ds2], dim=\"x\", variables_join=\"outer\")\n+        assert_identical(expected_outer, actual_outer)\n+        \n+        # Test inner join\n+        expected_inner = Dataset(\n+            {\n+                \"a\": (\"x\", [1, 2, 5, 6])\n+            },\n+            coords={\"x\": [0, 1, 2, 3]}\n+        )\n+        actual_inner = concat([ds1, ds2], dim=\"x\", variables_join=\"inner\")\n+        assert_identical(expected_inner, actual_inner)\n+\n     def test_concat_errors(self):\n         data = create_test_data()\n         split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]\n@@ -450,4 +492,4 @@ class TestConcatDataArray:\n \n         for join in expected:\n             actual = concat([ds1, ds2], join=join, dim=\"x\")\n-            assert_equal(actual, expected[join].to_array())\n+            assert_equal(actual, expected[join].to_array())\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}