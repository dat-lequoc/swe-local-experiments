diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py
index 612b8f4607..8aa7517336 100644
--- a/sympy/polys/partfrac.py
+++ b/sympy/polys/partfrac.py
@@ -76,6 +76,28 @@ def apart(f, x=None, full=False, **options):
         return f
     else:
         P, Q = f.as_numer_denom()
+        # Enhanced normalization for symbolic coefficients
+        if x is not None:
+            P = P.expand()
+            P = P.collect(x)
+            if not P.is_polynomial(x):
+                P = Add(*[t.collect(x) for t in P.as_ordered_terms()])
+            P = P.expand()
+            # Additional normalization for symbolic coefficients
+            P = P.collect(x, evaluate=False)
+            P = Add(*[coeff*monom for monom, coeff in P.items()])
+            
+            # Track symbolic coefficients
+            if any(t.free_symbols for t in P.as_ordered_terms()):
+                P = P.as_ordered_terms()
+                P = Add(*[t.collect(x, evaluate=False) for t in P])
+            
+            # Normalize denominator similarly
+            Q = Q.expand()
+            Q = Q.collect(x)
+            Q = Q.expand()
+            Q = Q.collect(x, evaluate=False)
+            Q = Add(*[coeff*monom for monom, coeff in Q.items()])
 
     _options = options.copy()
     options = set_defaults(options, extension=True)
@@ -323,6 +345,28 @@ def apart_list(f, x=None, dummies=None, **options):
         return f
     else:
         P, Q = f.as_numer_denom()
+        # Enhanced normalization for symbolic coefficients
+        if x is not None:
+            P = P.expand()
+            P = P.collect(x)
+            if not P.is_polynomial(x):
+                P = Add(*[t.collect(x) for t in P.as_ordered_terms()])
+            P = P.expand()
+            # Additional normalization for symbolic coefficients
+            P = P.collect(x, evaluate=False)
+            P = Add(*[coeff*monom for monom, coeff in P.items()])
+            
+            # Track symbolic coefficients
+            if any(t.free_symbols for t in P.as_ordered_terms()):
+                P = P.as_ordered_terms()
+                P = Add(*[t.collect(x, evaluate=False) for t in P])
+            
+            # Normalize denominator similarly
+            Q = Q.expand()
+            Q = Q.collect(x)
+            Q = Q.expand()
+            Q = Q.collect(x, evaluate=False)
+            Q = Add(*[coeff*monom for monom, coeff in Q.items()])
 
     options = set_defaults(options, extension=True)
     (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)
@@ -495,4 +539,4 @@ def assemble_partfrac_list(partial_list):
             for root in r:
                 pfd += nf(root)/df(root)**ex
 
-    return common*pfd
+    return common*pfd
\ No newline at end of file
diff --git a/sympy/polys/tests/test_partfrac.py b/sympy/polys/tests/test_partfrac.py
index 707fb45871..d8cf47cae5 100644
--- a/sympy/polys/tests/test_partfrac.py
+++ b/sympy/polys/tests/test_partfrac.py
@@ -164,7 +164,14 @@ class foo(Expr):
     c = 1/(1 + y)
     assert apart(e + foo()) == c + foo()
 
+def test_symbolic_apart():
+    from sympy import symbols
+    a, t = symbols('a t', real=True)
+    bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)
+    assert apart(bug, t) == -a*t + a/2 - a/(2*(2*t - 1))
+    assert apart(bug.subs(a, 1), t) == -t + S(1)/2 - 1/(2*(2*t - 1))
+
 def test_issue_5798():
     assert apart(
         2*x/(x**2 + 1) - (x - 1)/(2*(x**2 + 1)) + 1/(2*(x + 1)) - 2/x) == \
-        (3*x + 1)/(x**2 + 1)/2 + 1/(x + 1)/2 - 2/x
+        (3*x + 1)/(x**2 + 1)/2 + 1/(x + 1)/2 - 2/x
\ No newline at end of file
