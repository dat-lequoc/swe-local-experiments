{
  "instance_id": "pytest-dev__pytest-7490",
  "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..fb0a260bb 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -246,9 +246,8 @@ def pytest_runtest_setup(item: Item) -> None:\n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    # Always re-evaluate xfail marks to catch dynamically added ones\n+    item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n@@ -256,6 +255,11 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n \n     yield\n \n+    # Re-evaluate after test execution for dynamically added markers\n+    if not item.config.option.runxfail:\n+        xfailed = evaluate_xfail_marks(item)\n+        item._store[xfailed_key] = xfailed\n+\n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n@@ -312,4 +316,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n\\ No newline at end of file\ndiff --git a/testing/test_dynamic_xfail.py b/testing/test_dynamic_xfail.py\nnew file mode 100644\nindex 000000000..e742cf55f\n--- /dev/null\n+++ b/testing/test_dynamic_xfail.py\n@@ -0,0 +1,19 @@\n+import pytest\n+\n+def test_dynamic_xfail(request):\n+    \"\"\"Test that dynamically added xfail markers work properly\"\"\"\n+    mark = pytest.mark.xfail(reason=\"dynamic xfail\")\n+    request.node.add_marker(mark)\n+    assert False\n+\n+def test_dynamic_xfail_with_run_false(request):\n+    \"\"\"Test dynamic xfail with run=False\"\"\"\n+    mark = pytest.mark.xfail(reason=\"dynamic xfail\", run=False)\n+    request.node.add_marker(mark)\n+    assert False\n+\n+def test_dynamic_xfail_conditional(request):\n+    \"\"\"Test conditional dynamic xfail\"\"\"\n+    mark = pytest.mark.xfail(condition=True, reason=\"conditional xfail\")\n+    request.node.add_marker(mark)\n+    assert False\n",
  "model_name_or_path": "KortixAI"
}