{
  "instance_id": "django__django-14999",
  "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..e9c2c784ae 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,33 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+    def _get_effective_db_table(self, model):\n+        \"\"\"Get the actual db_table, accounting for inheritance.\"\"\"\n+        meta = model._meta\n+        if meta.proxy:\n+            return None\n+        return meta.db_table\n+\n+    def _should_skip_rename(self, old_model, new_model):\n+        \"\"\"\n+        Determine if the rename operation should be skipped.\n+        \"\"\"\n+        old_table = self._get_effective_db_table(old_model)\n+        new_table = self._get_effective_db_table(new_model)\n+        \n+        return (old_table and new_table and \n+                old_table == new_table and\n+                not old_model._meta.proxy)\n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # Skip if both models use the same explicit db_table\n+            if self._should_skip_rename(old_model, new_model):\n+                return\n+                \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -881,4 +904,4 @@ class RemoveConstraint(IndexOperation):\n \n     @property\n     def migration_name_fragment(self):\n-        return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())\n+        return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 11961a1f40..4773dabeff 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -597,6 +597,44 @@ class OperationTests(OperationTestBase):\n         self.assertTableExists('test_dlmtimo_shetlandpony')\n         self.assertColumnExists('test_dlmtimo_shetlandpony', 'pony_ptr_id')\n \n+    def test_rename_model_with_db_table(self):\n+        \"\"\"\n+        Tests the RenameModel operation with explicitly set db_table.\n+        \"\"\"\n+        # Set up test model with explicit db_table\n+        operation = migrations.CreateModel(\n+            \"Pony\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"pink\", models.IntegerField(default=1)),\n+            ],\n+            options={\"db_table\": \"custom_table\"},\n+        )\n+        project_state = ProjectState()\n+        new_state = project_state.clone()\n+        operation.state_forwards(\"test_rnmwdbt\", new_state)\n+        \n+        # Create initial model\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(\"test_rnmwdbt\", editor, project_state, new_state)\n+        \n+        # Test the rename operation\n+        operation = migrations.RenameModel(\"Pony\", \"Horse\")\n+        newer_state = new_state.clone()\n+        operation.state_forwards(\"test_rnmwdbt\", newer_state)\n+        \n+        with connection.schema_editor() as editor:\n+            # Track queries to verify no unnecessary operations\n+            with CaptureQueriesContext(connection) as queries:\n+                operation.database_forwards(\"test_rnmwdbt\", editor, new_state, newer_state)\n+                \n+            # Should have no table modification queries\n+            self.assertEqual(len(queries), 0)\n+        \n+        # Verify model state is updated correctly\n+        self.assertNotIn((\"test_rnmwdbt\", \"pony\"), newer_state.models)\n+        self.assertIn((\"test_rnmwdbt\", \"horse\"), newer_state.models)\n+\n     def test_rename_model(self):\n         \"\"\"\n         Tests the RenameModel operation.\n@@ -3820,4 +3858,4 @@ class FieldOperationTests(SimpleTestCase):\n         self.assertIs(operation.references_field('Other', 'whatever', 'migrations'), True)\n         self.assertIs(operation.references_field('Through', 'whatever', 'migrations'), False)\n         self.assertIs(operation.references_field('Through', 'first', 'migrations'), True)\n-        self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)\n+        self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}