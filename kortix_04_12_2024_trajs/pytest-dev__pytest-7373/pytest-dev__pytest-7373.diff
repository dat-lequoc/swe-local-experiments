diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py
index 759191668..695ab9951 100644
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -15,20 +15,13 @@ from _pytest.nodes import Item
 from _pytest.store import StoreKey
 
 
-evalcache_key = StoreKey[Dict[str, Any]]()
+# Removed cache key as caching is no longer used
 
 
-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:
-    default = {}  # type: Dict[str, object]
-    evalcache = config._store.setdefault(evalcache_key, default)
-    try:
-        return evalcache[expr]
-    except KeyError:
-        import _pytest._code
-
-        exprcode = _pytest._code.compile(expr, mode="eval")
-        evalcache[expr] = x = eval(exprcode, d)
-        return x
+def _eval_expr(expr: str, d: Dict[str, object]) -> Any:
+    import _pytest._code
+    exprcode = _pytest._code.compile(expr, mode="eval")
+    return eval(exprcode, d)
 
 
 class MarkEvaluator:
@@ -98,7 +91,7 @@ class MarkEvaluator:
                     self.expr = expr
                     if isinstance(expr, str):
                         d = self._getglobals()
-                        result = cached_eval(self.item.config, expr, d)
+                        result = _eval_expr(expr, d)
                     else:
                         if "reason" not in mark.kwargs:
                             # XXX better be checked at collection time
@@ -132,4 +125,4 @@ class MarkEvaluator:
                 return ""
             else:
                 return "condition: " + str(self.expr)
-        return expl
+        return expl
\ No newline at end of file
diff --git a/testing/test_mark.py b/testing/test_mark.py
index cdd4df9dd..547c3a253 100644
--- a/testing/test_mark.py
+++ b/testing/test_mark.py
@@ -1008,6 +1008,28 @@ def test_addmarker_order():
 
 
 @pytest.mark.filterwarnings("ignore")
+def test_skipif_with_globals(testdir):
+    """Verify that skipif conditions are correctly evaluated with module globals."""
+    testdir.makepyfile(test_module1="""
+        import pytest
+        skip = True
+        @pytest.mark.skipif("skip")
+        def test_should_skip():
+            assert False
+    """)
+    testdir.makepyfile(test_module2="""
+        import pytest
+        skip = False
+        @pytest.mark.skipif("skip")
+        def test_should_not_skip():
+            assert False
+    """)
+    result = testdir.runpytest("test_module1.py", "test_module2.py")
+    result.stdout.fnmatch_lines([
+        "collected 2 items",
+        "*= 1 failed, 1 skipped in*",
+    ])
+
 def test_markers_from_parametrize(testdir):
     """#3605"""
     testdir.makepyfile(
@@ -1071,4 +1093,4 @@ def test_marker_expr_eval_failure_handling(testdir, expr):
     expected = "ERROR: Wrong expression passed to '-m': {}: *".format(expr)
     result = testdir.runpytest(foo, "-m", expr)
     result.stderr.fnmatch_lines([expected])
-    assert result.ret == ExitCode.USAGE_ERROR
+    assert result.ret == ExitCode.USAGE_ERROR
\ No newline at end of file
