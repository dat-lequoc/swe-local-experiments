{
  "instance_id": "django__django-15347",
  "model_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..2fb3d6a636 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n@@ -166,4 +166,4 @@ class CookieStorage(BaseStorage):\n         # Mark the data as used (so it gets removed) since something was wrong\n         # with the data.\n         self.used = True\n-        return None\n+        return None\n\\ No newline at end of file\ndiff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex 53cf693f61..99b87331e0 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -163,6 +163,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n+    def test_empty_extra_tags_serialization(self):\n+        \"\"\"\n+        A message with empty string extra_tags maintains the empty string after\n+        serialization/deserialization rather than becoming None.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, \"Test\", extra_tags=\"\")\n+        encoded = storage._encode([message])\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded[0].extra_tags, \"\")\n+        self.assertIsNotNone(decoded[0].extra_tags)\n+\n     def test_safedata(self):\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n@@ -176,4 +188,4 @@ class CookieTests(BaseTests, SimpleTestCase):\n \n         storage = self.get_storage()\n         self.assertIsInstance(encode_decode(mark_safe(\"<b>Hello Django!</b>\")), SafeData)\n-        self.assertNotIsInstance(encode_decode(\"<b>Hello Django!</b>\"), SafeData)\n+        self.assertNotIsInstance(encode_decode(\"<b>Hello Django!</b>\"), SafeData)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}