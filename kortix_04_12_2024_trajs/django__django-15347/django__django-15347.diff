diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py
index 1d390c71dd..2fb3d6a636 100644
--- a/django/contrib/messages/storage/cookie.py
+++ b/django/contrib/messages/storage/cookie.py
@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):
             # Using 0/1 here instead of False/True to produce more compact json
             is_safedata = 1 if isinstance(obj.message, SafeData) else 0
             message = [self.message_key, is_safedata, obj.level, obj.message]
-            if obj.extra_tags:
+            if obj.extra_tags is not None:
                 message.append(obj.extra_tags)
             return message
         return super().default(obj)
@@ -166,4 +166,4 @@ class CookieStorage(BaseStorage):
         # Mark the data as used (so it gets removed) since something was wrong
         # with the data.
         self.used = True
-        return None
+        return None
\ No newline at end of file
diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py
index 53cf693f61..99b87331e0 100644
--- a/tests/messages_tests/test_cookie.py
+++ b/tests/messages_tests/test_cookie.py
@@ -163,6 +163,18 @@ class CookieTests(BaseTests, SimpleTestCase):
         decoded_messages = json.loads(value, cls=MessageDecoder)
         self.assertEqual(messages, decoded_messages)
 
+    def test_empty_extra_tags_serialization(self):
+        """
+        A message with empty string extra_tags maintains the empty string after
+        serialization/deserialization rather than becoming None.
+        """
+        storage = self.get_storage()
+        message = Message(constants.INFO, "Test", extra_tags="")
+        encoded = storage._encode([message])
+        decoded = storage._decode(encoded)
+        self.assertEqual(decoded[0].extra_tags, "")
+        self.assertIsNotNone(decoded[0].extra_tags)
+
     def test_safedata(self):
         """
         A message containing SafeData is keeping its safe status when
@@ -176,4 +188,4 @@ class CookieTests(BaseTests, SimpleTestCase):
 
         storage = self.get_storage()
         self.assertIsInstance(encode_decode(mark_safe("<b>Hello Django!</b>")), SafeData)
-        self.assertNotIsInstance(encode_decode("<b>Hello Django!</b>"), SafeData)
+        self.assertNotIsInstance(encode_decode("<b>Hello Django!</b>"), SafeData)
\ No newline at end of file
