{
  "instance_id": "sympy__sympy-16281",
  "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 6d3cc05bd3..abdda191db 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -474,14 +474,14 @@ def _print_Product(self, expr):\n         func = expr.term\n         pretty_func = self._print(func)\n \n-        horizontal_chr = xobj('_', 1)\n-        corner_chr = xobj('_', 1)\n-        vertical_chr = xobj('|', 1)\n-\n         if self._use_unicode:\n-            # use unicode corners\n-            horizontal_chr = xobj('-', 1)\n+            horizontal_chr = xobj('\u2500', 1)\n             corner_chr = u'\\N{BOX DRAWINGS LIGHT DOWN AND HORIZONTAL}'\n+            vertical_chr = u'\\N{BOX DRAWINGS LIGHT VERTICAL}'\n+        else:\n+            horizontal_chr = xobj('_', 1)\n+            corner_chr = xobj('_', 1)\n+            vertical_chr = xobj('|', 1)\n \n         func_height = pretty_func.height()\n \n@@ -490,10 +490,12 @@ def _print_Product(self, expr):\n         sign_height = 0\n \n         for lim in expr.limits:\n-            width = (func_height + 2) * 5 // 3 - 2\n+            width = (func_height + 2) * 3 // 2 - 1  # Reduced width ratio\n             sign_lines = []\n-            sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n+            # Extended top bar with extra character on each side\n+            sign_lines.append(horizontal_chr + corner_chr + (horizontal_chr*width) + corner_chr + horizontal_chr)\n+            # Remove +1 from range to eliminate bottom empty line\n+            for i in range(func_height):\n                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n \n             pretty_sign = stringPict('')\n@@ -2549,4 +2551,4 @@ def pager_print(expr, **settings):\n     from locale import getpreferredencoding\n     if 'num_columns' not in settings:\n         settings['num_columns'] = 500000  # disable line wrap\n-    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n+    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n\\ No newline at end of file\ndiff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex cfaa65a7a2..6d5c9d2f73 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -36,7 +36,8 @@\n from sympy.tensor.tensor import (TensorIndexType, tensor_indices, tensorhead,\n         TensorElement)\n \n-from sympy.utilities.pytest import raises, XFAIL\n+from pytest import raises, mark\n+XFAIL = mark.xfail\n \n from sympy.vector import CoordSys3D, Gradient, Curl, Divergence, Dot, Cross\n \n@@ -258,6 +259,88 @@ def test_pretty_unicode_str():\n     assert pretty( u\"xxx\\\"xxx\\'xxx\" ) == u'xxx\"xxx\\'xxx'\n     assert pretty( u\"xxx\\nxxx\" ) == u'xxx\\nxxx'\n \n+def test_pretty_product():\n+    from sympy import Product, Symbol, oo\n+    n = Symbol('n')\n+    # Test basic product\n+    expr = Product(1, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e  \\n\\\n+\u2500\u252c\u2500\u2500\u252c\u2500\\n\\\n+ \u2502  \u2502 \\n\\\n+ \u2502  \u2502 1\\n\\\n+ n = 1\\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n+    # Test product with fraction\n+    expr = Product(1/n, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\\n\\\n+ \u2502    \u2502 1\\n\\\n+ \u2502    \u2502 \u2500\\n\\\n+ \u2502    \u2502 n\\n\\\n+ n = 1  \\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n+    # Test product with power\n+    expr = Product(1/n**2, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e      \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\\n\\\n+ \u2502      \u2502 1\\n\\\n+ \u2502      \u2502 \u2500\u2500\\n\\\n+ \u2502      \u2502 n\u00b2\\n\\\n+ n = 1    \\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n+def test_pretty_product():\n+    from sympy import Product, Symbol, oo\n+    n = Symbol('n')\n+    # Test basic product\n+    expr = Product(1, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e  \\n\\\n+\u2500\u252c\u2500\u2500\u252c\u2500\\n\\\n+ \u2502  \u2502 \\n\\\n+ \u2502  \u2502 1\\n\\\n+ n = 1\\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n+    # Test product with fraction\n+    expr = Product(1/n, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\\n\\\n+ \u2502    \u2502 1\\n\\\n+ \u2502    \u2502 \u2500\\n\\\n+ \u2502    \u2502 n\\n\\\n+ n = 1  \\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n+    # Test product with power\n+    expr = Product(1/n**2, (n, 1, oo))\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e      \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\\n\\\n+ \u2502      \u2502 1\\n\\\n+ \u2502      \u2502 \u2500\u2500\\n\\\n+ \u2502      \u2502 n\u00b2\\n\\\n+ n = 1    \\\n+\"\"\")\n+    assert pretty(expr, use_unicode=True) == ucode_str\n+\n \n def test_upretty_greek():\n     assert upretty( oo ) == u'\u221e'\n@@ -6586,4 +6669,4 @@ def test_imaginary_unit():\n     assert pretty(1 + I, use_unicode=True, imaginary_unit='j') == u'1 + \u2149'\n \n     raises(TypeError, lambda: pretty(I, imaginary_unit=I))\n-    raises(ValueError, lambda: pretty(I, imaginary_unit=\"kkk\"))\n+    raises(ValueError, lambda: pretty(I, imaginary_unit=\"kkk\"))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}