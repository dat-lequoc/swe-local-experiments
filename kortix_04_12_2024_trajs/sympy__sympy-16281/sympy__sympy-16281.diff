diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 6d3cc05bd3..abdda191db 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -474,14 +474,14 @@ def _print_Product(self, expr):
         func = expr.term
         pretty_func = self._print(func)
 
-        horizontal_chr = xobj('_', 1)
-        corner_chr = xobj('_', 1)
-        vertical_chr = xobj('|', 1)
-
         if self._use_unicode:
-            # use unicode corners
-            horizontal_chr = xobj('-', 1)
+            horizontal_chr = xobj('─', 1)
             corner_chr = u'\N{BOX DRAWINGS LIGHT DOWN AND HORIZONTAL}'
+            vertical_chr = u'\N{BOX DRAWINGS LIGHT VERTICAL}'
+        else:
+            horizontal_chr = xobj('_', 1)
+            corner_chr = xobj('_', 1)
+            vertical_chr = xobj('|', 1)
 
         func_height = pretty_func.height()
 
@@ -490,10 +490,12 @@ def _print_Product(self, expr):
         sign_height = 0
 
         for lim in expr.limits:
-            width = (func_height + 2) * 5 // 3 - 2
+            width = (func_height + 2) * 3 // 2 - 1  # Reduced width ratio
             sign_lines = []
-            sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)
-            for i in range(func_height + 1):
+            # Extended top bar with extra character on each side
+            sign_lines.append(horizontal_chr + corner_chr + (horizontal_chr*width) + corner_chr + horizontal_chr)
+            # Remove +1 from range to eliminate bottom empty line
+            for i in range(func_height):
                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)
 
             pretty_sign = stringPict('')
@@ -2549,4 +2551,4 @@ def pager_print(expr, **settings):
     from locale import getpreferredencoding
     if 'num_columns' not in settings:
         settings['num_columns'] = 500000  # disable line wrap
-    pager(pretty(expr, **settings).encode(getpreferredencoding()))
+    pager(pretty(expr, **settings).encode(getpreferredencoding()))
\ No newline at end of file
diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py
index cfaa65a7a2..6d5c9d2f73 100644
--- a/sympy/printing/pretty/tests/test_pretty.py
+++ b/sympy/printing/pretty/tests/test_pretty.py
@@ -36,7 +36,8 @@
 from sympy.tensor.tensor import (TensorIndexType, tensor_indices, tensorhead,
         TensorElement)
 
-from sympy.utilities.pytest import raises, XFAIL
+from pytest import raises, mark
+XFAIL = mark.xfail
 
 from sympy.vector import CoordSys3D, Gradient, Curl, Divergence, Dot, Cross
 
@@ -258,6 +259,88 @@ def test_pretty_unicode_str():
     assert pretty( u"xxx\"xxx\'xxx" ) == u'xxx"xxx\'xxx'
     assert pretty( u"xxx\nxxx" ) == u'xxx\nxxx'
 
+def test_pretty_product():
+    from sympy import Product, Symbol, oo
+    n = Symbol('n')
+    # Test basic product
+    expr = Product(1, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞  \n\
+─┬──┬─\n\
+ │  │ \n\
+ │  │ 1\n\
+ n = 1\
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
+    # Test product with fraction
+    expr = Product(1/n, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞    \n\
+─┬────┬─\n\
+ │    │ 1\n\
+ │    │ ─\n\
+ │    │ n\n\
+ n = 1  \
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
+    # Test product with power
+    expr = Product(1/n**2, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞      \n\
+─┬──────┬─\n\
+ │      │ 1\n\
+ │      │ ──\n\
+ │      │ n²\n\
+ n = 1    \
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
+def test_pretty_product():
+    from sympy import Product, Symbol, oo
+    n = Symbol('n')
+    # Test basic product
+    expr = Product(1, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞  \n\
+─┬──┬─\n\
+ │  │ \n\
+ │  │ 1\n\
+ n = 1\
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
+    # Test product with fraction
+    expr = Product(1/n, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞    \n\
+─┬────┬─\n\
+ │    │ 1\n\
+ │    │ ─\n\
+ │    │ n\n\
+ n = 1  \
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
+    # Test product with power
+    expr = Product(1/n**2, (n, 1, oo))
+    ucode_str = \
+u("""\
+  ∞      \n\
+─┬──────┬─\n\
+ │      │ 1\n\
+ │      │ ──\n\
+ │      │ n²\n\
+ n = 1    \
+""")
+    assert pretty(expr, use_unicode=True) == ucode_str
+
 
 def test_upretty_greek():
     assert upretty( oo ) == u'∞'
@@ -6586,4 +6669,4 @@ def test_imaginary_unit():
     assert pretty(1 + I, use_unicode=True, imaginary_unit='j') == u'1 + ⅉ'
 
     raises(TypeError, lambda: pretty(I, imaginary_unit=I))
-    raises(ValueError, lambda: pretty(I, imaginary_unit="kkk"))
+    raises(ValueError, lambda: pretty(I, imaginary_unit="kkk"))
\ No newline at end of file
