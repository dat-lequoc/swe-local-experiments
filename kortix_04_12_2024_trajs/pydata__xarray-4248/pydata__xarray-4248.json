{
  "instance_id": "pydata__xarray-4248",
  "model_patch": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 9037013c..f35e247a 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -189,6 +189,30 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_repr_with_units(self):\n+        ds = Dataset(\n+            {\n+                \"temperature\": ((\"x\", \"y\"), [[20, 21], [22, 23]], {\"units\": \"\u00b0C\"}),\n+                \"precipitation\": ((\"x\", \"y\"), [[1, 2], [3, 4]], {\"units\": \"mm\"}),\n+            },\n+            coords={\n+                \"x\": (\"x\", [1, 2], {\"units\": \"degrees_north\"}),\n+                \"y\": (\"y\", [1, 2], {\"units\": \"degrees_east\"}),\n+            },\n+        )\n+        expected = dedent(\n+            \"\"\"\\\n+            <xarray.Dataset>\n+            Dimensions:        (x: 2, y: 2)\n+            Coordinates:\n+              * x, in degrees_north  (x) int64 1 2\n+              * y, in degrees_east   (y) int64 1 2\n+            Data variables:\n+                temperature, in \u00b0C     (x, y) int64 20 21 22 23\n+                precipitation, in mm   (x, y) int64 1 2 3 4\"\"\"\n+        )\n+        assert expected in repr(ds)\n+\n     def test_repr(self):\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n@@ -6275,4 +6299,4 @@ def test_weakref():\n \n     ds = Dataset()\n     r = ref(ds)\n-    assert r() is ds\n+    assert r() is ds\n\\ No newline at end of file\ndiff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\nindex 82de8080..bfde5727 100644\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -377,6 +377,20 @@ class TestFormatting:\n         actual = formatting.diff_dataset_repr(ds_a, ds_b, \"identical\")\n         assert actual == expected\n \n+    def test_format_unit_string(self):\n+        from xarray.core.variable import Variable\n+        var_no_attrs = Variable('x', [1, 2, 3])\n+        assert format_unit_string(var_no_attrs) == \"\"\n+        \n+        var_no_units = Variable('x', [1, 2, 3], attrs={'other': 'attr'})\n+        assert format_unit_string(var_no_units) == \"\"\n+        \n+        var_empty_units = Variable('x', [1, 2, 3], attrs={'units': ''})\n+        assert format_unit_string(var_empty_units) == \"\"\n+        \n+        var_with_units = Variable('x', [1, 2, 3], attrs={'units': 'meters'})\n+        assert format_unit_string(var_with_units) == \", in meters\"\n+\n     def test_array_repr(self):\n         ds = xr.Dataset(coords={\"foo\": [1, 2, 3], \"bar\": [1, 2, 3]})\n         ds[(1, 2)] = xr.DataArray([0], dims=\"test\")\n@@ -420,4 +434,4 @@ def test_large_array_repr_length():\n     da = xr.DataArray(np.random.randn(100, 5, 1))\n \n     result = repr(da).splitlines()\n-    assert len(result) < 50\n+    assert len(result) < 50\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}