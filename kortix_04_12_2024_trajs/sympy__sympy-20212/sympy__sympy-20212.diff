diff --git a/sympy/core/power.py b/sympy/core/power.py
index 984398c760..38a1965c73 100644
--- a/sympy/core/power.py
+++ b/sympy/core/power.py
@@ -297,6 +297,8 @@ def __new__(cls, b, e, evaluate=None):
                 return S.One
             elif e is S.One:
                 return b
+            elif e is S.NegativeInfinity and b.is_zero:
+                return S.ComplexInfinity
             elif e == -1 and not b:
                 return S.ComplexInfinity
             # Only perform autosimplification if exponent or base is a Symbol or number
@@ -1742,4 +1744,4 @@ def _eval_difference_delta(self, n, step):
 from .add import Add
 from .numbers import Integer
 from .mul import Mul, _keep_coeff
-from .symbol import Symbol, Dummy, symbols
+from .symbol import Symbol, Dummy, symbols
\ No newline at end of file
diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py
index 413fbd4532..ea07279265 100644
--- a/sympy/core/tests/test_power.py
+++ b/sympy/core/tests/test_power.py
@@ -321,6 +321,9 @@ def test_issue_6208():
     assert root(exp(5*I), 3).exp == Rational(1, 3)
 
 
+def test_zero_neg_infinity():
+    assert (S.Zero**S.NegativeInfinity) == S.ComplexInfinity
+
 def test_issue_6990():
     x = Symbol('x')
     a = Symbol('a')
@@ -578,4 +581,4 @@ def _(a, b):
     # NewPow called by dispatch
     assert power(a, b) == NewPow(a, b)
     assert power(b, a) == NewPow(b, a)
-    assert power(b, b) == NewPow(b, b)
+    assert power(b, b) == NewPow(b, b)
\ No newline at end of file
