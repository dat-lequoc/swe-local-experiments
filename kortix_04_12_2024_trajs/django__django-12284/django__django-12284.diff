diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..a3dc0ad2f4 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -945,7 +945,9 @@ class Model(metaclass=ModelBase):
 
     def _get_FIELD_display(self, field):
         value = getattr(self, field.attname)
-        choices_dict = dict(make_hashable(field.flatchoices))
+        # Get the field from the actual class to handle inheritance
+        model_field = self.__class__._meta.get_field(field.name)
+        choices_dict = dict(make_hashable(model_field.flatchoices))
         # force_str() to coerce lazy strings.
         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)
 
@@ -1912,4 +1914,4 @@ def model_unpickle(model_id):
     return model.__new__(model)
 
 
-model_unpickle.__safe_for_unpickle__ = True
+model_unpickle.__safe_for_unpickle__ = True
\ No newline at end of file
diff --git a/tests/model_inheritance/test_inheritance_choices.py b/tests/model_inheritance/test_inheritance_choices.py
new file mode 100644
index 0000000000..bcc8b9479c
--- /dev/null
+++ b/tests/model_inheritance/test_inheritance_choices.py
@@ -0,0 +1,34 @@
+from django.test import TestCase
+from django.db import models
+
+class ChoicesBaseModel(models.Model):
+    CHOICES = [
+        ('A', 'Choice A'),
+        ('B', 'Choice B'),
+    ]
+    field = models.CharField(max_length=1, choices=CHOICES)
+
+    class Meta:
+        abstract = True
+
+class ChoicesChildModel(ChoicesBaseModel):
+    CHOICES = [
+        ('A', 'Choice A'),
+        ('B', 'Choice B'),
+        ('C', 'Choice C'),
+    ]
+    field = models.CharField(max_length=1, choices=CHOICES)
+
+class InheritedChoicesTest(TestCase):
+    def test_inherited_choices_display(self):
+        obj = ChoicesChildModel(field='C')
+        obj.save()
+        self.assertEqual(obj.get_field_display(), 'Choice C')
+        
+        obj.field = 'A'
+        obj.save()
+        self.assertEqual(obj.get_field_display(), 'Choice A')
+        
+        obj.field = 'B'
+        obj.save()
+        self.assertEqual(obj.get_field_display(), 'Choice B')
