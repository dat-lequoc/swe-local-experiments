{
  "instance_id": "django__django-12284",
  "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..a3dc0ad2f4 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,7 +945,9 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        # Get the field from the actual class to handle inheritance\n+        model_field = self.__class__._meta.get_field(field.name)\n+        choices_dict = dict(make_hashable(model_field.flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n@@ -1912,4 +1914,4 @@ def model_unpickle(model_id):\n     return model.__new__(model)\n \n \n-model_unpickle.__safe_for_unpickle__ = True\n+model_unpickle.__safe_for_unpickle__ = True\n\\ No newline at end of file\ndiff --git a/tests/model_inheritance/test_inheritance_choices.py b/tests/model_inheritance/test_inheritance_choices.py\nnew file mode 100644\nindex 0000000000..bcc8b9479c\n--- /dev/null\n+++ b/tests/model_inheritance/test_inheritance_choices.py\n@@ -0,0 +1,34 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class ChoicesBaseModel(models.Model):\n+    CHOICES = [\n+        ('A', 'Choice A'),\n+        ('B', 'Choice B'),\n+    ]\n+    field = models.CharField(max_length=1, choices=CHOICES)\n+\n+    class Meta:\n+        abstract = True\n+\n+class ChoicesChildModel(ChoicesBaseModel):\n+    CHOICES = [\n+        ('A', 'Choice A'),\n+        ('B', 'Choice B'),\n+        ('C', 'Choice C'),\n+    ]\n+    field = models.CharField(max_length=1, choices=CHOICES)\n+\n+class InheritedChoicesTest(TestCase):\n+    def test_inherited_choices_display(self):\n+        obj = ChoicesChildModel(field='C')\n+        obj.save()\n+        self.assertEqual(obj.get_field_display(), 'Choice C')\n+        \n+        obj.field = 'A'\n+        obj.save()\n+        self.assertEqual(obj.get_field_display(), 'Choice A')\n+        \n+        obj.field = 'B'\n+        obj.save()\n+        self.assertEqual(obj.get_field_display(), 'Choice B')\n",
  "model_name_or_path": "KortixAI"
}