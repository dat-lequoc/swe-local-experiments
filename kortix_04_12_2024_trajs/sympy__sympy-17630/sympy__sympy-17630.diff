diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..712866a265 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,16 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Ensure multiplication preserves ZeroMatrix type
+            result = self.blocks*other.blocks
+            # Convert any Zero objects back to ZeroMatrix with proper dimensions
+            for i in range(result.shape[0]):
+                for j in range(result.shape[1]):
+                    if result[i,j].is_zero:
+                        rows = self.rowblocksizes[i]
+                        cols = other.colblocksizes[j]
+                        result[i,j] = ZeroMatrix(rows, cols)
+            return BlockMatrix(result)
 
         return self * other
 
@@ -569,4 +578,4 @@ def blockcut(expr, rowsizes, colsizes):
     colbounds = bounds(colsizes)
     return BlockMatrix([[MatrixSlice(expr, rowbound, colbound)
                          for colbound in colbounds]
-                         for rowbound in rowbounds])
+                         for rowbound in rowbounds])
\ No newline at end of file
diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py
index 1e1033affc..a0b7b19207 100644
--- a/sympy/matrices/expressions/tests/test_blockmatrix.py
+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py
@@ -58,6 +58,17 @@ def test_BlockMatrix():
     X = BlockMatrix(Matrix([[A, B], [C, D]]))
 
     assert X.__class__(*X.args) == X
+    
+    # Test multiplication with zero blocks
+    a = MatrixSymbol("a", 2, 2)
+    z = ZeroMatrix(2, 2)
+    b = BlockMatrix([[a, z], [z, z]])
+    b2 = b._blockmul(b)
+    b3 = b2._blockmul(b)
+    assert isinstance(b2.blocks[0, 1], MatrixExpr)
+    assert isinstance(b3.blocks[0, 1], MatrixExpr)
+    assert b2.blocks[0, 1].is_ZeroMatrix
+    assert b3.blocks[0, 1].is_ZeroMatrix
 
     # block_collapse does nothing on normal inputs
     E = MatrixSymbol('E', n, m)
@@ -221,4 +232,4 @@ def test_block_collapse_type():
     assert block_collapse(Inverse(bm1)).__class__ == BlockDiagMatrix
     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix
-    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
+    assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
\ No newline at end of file
