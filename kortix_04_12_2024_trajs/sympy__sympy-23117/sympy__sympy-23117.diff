diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py
index 6490a655a4..ccd3e6a62d 100644
--- a/sympy/tensor/array/ndim_array.py
+++ b/sympy/tensor/array/ndim_array.py
@@ -193,14 +193,21 @@ def _scan_iterable_shape(cls, iterable):
         def f(pointer):
             if not isinstance(pointer, Iterable):
                 return [pointer], ()
-
-            result = []
-            elems, shapes = zip(*[f(i) for i in pointer])
-            if len(set(shapes)) != 1:
-                raise ValueError("could not determine shape unambiguously")
-            for i in elems:
-                result.extend(i)
-            return result, (len(shapes),)+shapes[0]
+            
+            if isinstance(pointer, (list, tuple)):
+                if len(pointer) == 0:
+                    # Empty list -> 1D empty array, Empty tuple -> zero-dimensional array
+                    return [], (0,) if isinstance(pointer, list) else ()
+                
+                result = []
+                elems, shapes = zip(*[f(i) for i in pointer])
+                if len(set(shapes)) != 1:
+                    raise ValueError("could not determine shape unambiguously")
+                for i in elems:
+                    result.extend(i)
+                return result, (len(shapes),)+shapes[0]
+            
+            return [pointer], ()
 
         return f(iterable)
 
@@ -560,8 +567,8 @@ def _get_slice_data_for_array_assignment(self, index, value):
 
     @classmethod
     def _check_special_bounds(cls, flat_list, shape):
-        if shape == () and len(flat_list) != 1:
-            raise ValueError("arrays without shape need one scalar value")
+        if shape == ():  # Zero-dimensional array
+            return  # Allow empty tuple for zero-dimensional array
         if shape == (0,) and len(flat_list) > 0:
             raise ValueError("if array shape is (0,) there cannot be elements")
 
@@ -589,4 +596,4 @@ def as_immutable(self):
         return self
 
     def as_mutable(self):
-        raise NotImplementedError("abstract method")
+        raise NotImplementedError("abstract method")
\ No newline at end of file
diff --git a/sympy/tensor/array/tests/test_empty_array.py b/sympy/tensor/array/tests/test_empty_array.py
new file mode 100644
index 0000000000..229f891d7b
--- /dev/null
+++ b/sympy/tensor/array/tests/test_empty_array.py
@@ -0,0 +1,34 @@
+from sympy.testing.pytest import raises
+from sympy.tensor.array import Array, ImmutableDenseNDimArray
+from sympy.matrices import Matrix
+
+def test_empty_array_creation():
+    # Test empty 1D array
+    a = Array([])
+    assert a.shape == (0,)
+    assert list(a) == []
+
+    # Test empty array matches matrix behavior
+    m = Matrix([])
+    assert len(Array(m)) == len(m)
+
+    # Test nested empty array
+    b = Array([[]])
+    assert b.shape == (1, 0)
+
+    # Test zero-dimensional array
+    c = Array(())
+    assert c.shape == ()
+
+def test_empty_array_operations():
+    a = Array([])
+    # Test shape handling
+    assert a.rank() == 1
+    assert len(a) == 0
+
+    # Test iteration
+    assert list(a) == []
+
+    # Test array creation with explicit shape
+    b = ImmutableDenseNDimArray([], (0,))
+    assert b.shape == (0,)
