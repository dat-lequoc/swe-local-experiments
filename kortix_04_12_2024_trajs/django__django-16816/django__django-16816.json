{
  "instance_id": "django__django-16816",
  "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..00992aa899 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -895,39 +895,47 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n+        elif item == \"pk\":\n+            return []  # Special case for pk\n+\n         try:\n             field = obj.model._meta.get_field(item)\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        f\"The value of '{label}' must not be a many-to-many field.\",\n+                        obj=obj.__class__,\n+                        id=\"admin.E109\",\n+                    )\n+                ]\n+            return []\n         except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n+            # Check if it's a reverse relation\n+            related_objects = [\n+                f.name for f in obj.model._meta.get_fields()\n+                if (f.one_to_many or f.one_to_one) \n+                and f.auto_created and not f.concrete\n+            ]\n+            \n+            if item in related_objects:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n+                        f\"The value of '{label}' refers to '{item}', which is a reverse \"\n+                        f\"relation and cannot be used in list_display.\",\n                         obj=obj.__class__,\n                         id=\"admin.E108\",\n                     )\n                 ]\n-        if isinstance(field, models.ManyToManyField) or (\n-            getattr(field, \"rel\", None) and field.rel.field.many_to_one\n-        ):\n+            \n             return [\n                 checks.Error(\n-                    f\"The value of '{label}' must not be a many-to-many field or a \"\n-                    f\"reverse foreign key.\",\n+                    \"The value of '%s' refers to '%s', which is not a callable, \"\n+                    \"an attribute of '%s', or a valid field of '%s'.\"\n+                    % (label, item, obj.__class__.__name__, obj.model._meta.label),\n                     obj=obj.__class__,\n-                    id=\"admin.E109\",\n+                    id=\"admin.E108\",\n                 )\n             ]\n-        return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\"Check that list_display_links is a unique subset of list_display.\"\"\"\n@@ -1349,4 +1357,4 @@ def refer_to_missing_field(field, option, obj, id):\n             obj=obj.__class__,\n             id=id,\n         ),\n-    ]\n+    ]\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}