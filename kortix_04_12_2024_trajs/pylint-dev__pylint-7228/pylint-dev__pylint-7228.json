{
  "instance_id": "pylint-dev__pylint-7228",
  "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..64091042c 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -21,9 +21,24 @@ def _csv_validator(_, name, value):\n \n # pylint: disable=unused-argument\n def _regexp_validator(_, name, value):\n+    \"\"\"Validate a regexp pattern, with support for Unicode properties via the regex module.\"\"\"\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    \n+    if r\"\\p{\" in value:\n+        try:\n+            import regex\n+            return regex.compile(value)\n+        except ImportError:\n+            raise optparse.OptionValueError(\n+                \"Unicode properties require the 'regex' module\"\n+            )\n+        except regex.error as exc:\n+            raise sre_constants.error(str(exc), exc.pos) from exc\n+    try:\n+        return re.compile(value)\n+    except re.error as exc:\n+        raise\n \n \n # pylint: disable=unused-argument\n@@ -215,4 +230,4 @@ class Option(optparse.Option):\n         # And then take whatever action is expected of us.\n         # This is a separate method to make life easier for\n         # subclasses to add new actions.\n-        return self.take_action(self.action, self.dest, opt, value, values, parser)\n+        return self.take_action(self.action, self.dest, opt, value, values, parser)\n\\ No newline at end of file\ndiff --git a/tests/config/test_unicode_property_config.py b/tests/config/test_unicode_property_config.py\nnew file mode 100644\nindex 000000000..cbdff8371\n--- /dev/null\n+++ b/tests/config/test_unicode_property_config.py\n@@ -0,0 +1,25 @@\n+\"\"\"Tests for Unicode property support in configuration.\"\"\"\n+import pytest\n+\n+from pylint.config import option\n+\n+def test_regexp_validator_unicode_property():\n+    \"\"\"Test that the regexp validator supports Unicode properties.\"\"\"\n+    try:\n+        import regex  # pylint: disable=unused-import\n+        has_regex = True\n+    except ImportError:\n+        has_regex = False\n+\n+    if has_regex:\n+        result = option._regexp_validator(None, None, r\"[\\p{Han}a-z]+\")\n+        assert result is not None\n+    else:\n+        with pytest.raises(Exception) as excinfo:\n+            option._regexp_validator(None, None, r\"[\\p{Han}a-z]+\")\n+        assert \"Unicode properties require the 'regex' module\" in str(excinfo.value)\n+\n+def test_regexp_validator_fallback():\n+    \"\"\"Test that the regexp validator falls back to re for simple patterns.\"\"\"\n+    result = option._regexp_validator(None, None, r\"[a-z]+\")\n+    assert result is not None\n",
  "model_name_or_path": "KortixAI"
}