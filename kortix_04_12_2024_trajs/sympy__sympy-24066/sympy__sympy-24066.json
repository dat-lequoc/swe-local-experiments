{
  "instance_id": "sympy__sympy-24066",
  "model_patch": "diff --git a/sympy/physics/units/systems/si.py b/sympy/physics/units/systems/si.py\nindex 700495ad9d..2fe9e9eb66 100644\n--- a/sympy/physics/units/systems/si.py\n+++ b/sympy/physics/units/systems/si.py\n@@ -12,6 +12,8 @@\n from sympy.physics.units.quantities import Quantity\n \n from sympy.core.numbers import (Rational, pi)\n+from sympy.functions.elementary.exponential import exp, log\n+from sympy.functions.elementary.trigonometric import sin, cos, tan, asin, acos, atan, atan2\n from sympy.core.singleton import S\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.physics.units.definitions.dimension_definitions import (\n@@ -370,4 +372,4 @@\n     'derived_dims', 'kg', 'coulomb', 'siemens', 'byte', 'magnetic_flux',\n     'atomic_mass_unit', 'm', 'kibibyte', 'kilogram', 'One', 'curie', 'u',\n     'time', 'pebibyte', 'velocity', 'ampere', 'katal',\n-]\n+]\n\\ No newline at end of file\ndiff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 25a68c7be5..d168e63fd0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -13,7 +13,7 @@\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n-                                 ohm)\n+                                 ohm, farad, second)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -527,6 +527,33 @@ def test_issue_22819():\n     assert dimsys_SI.get_dimensional_dependencies(area) == {length: 2}\n     assert Da.scale_factor == 1.66053906660000e-24\n \n+def test_transcendental_functions_with_units():\n+    from sympy.functions.elementary.exponential import exp\n+    from sympy.functions.elementary.trigonometric import sin, cos, atan2\n+    expr = second / (ohm * farad)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    # Test exp with dimensionless argument\n+    assert SI._collect_factor_and_dimension(exp(expr))[1].name == 1\n+    \n+    # Test sin with dimensionless argument\n+    assert SI._collect_factor_and_dimension(sin(expr))[1].name == 1\n+    \n+    # Test cos with dimensionless argument\n+    assert SI._collect_factor_and_dimension(cos(expr))[1].name == 1\n+    \n+    # Test atan2 with same dimensions\n+    assert SI._collect_factor_and_dimension(atan2(meter, meter))[1].name == 1\n+    \n+    # Test addition with transcendental function\n+    assert SI._collect_factor_and_dimension(100 + exp(expr))[1].name == 1\n+    \n+    # Test that errors are raised for invalid dimensions\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(exp(meter)))\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(sin(second)))\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(atan2(meter, second)))\n+\n \n def test_issue_20288():\n     from sympy.core.numbers import E\n@@ -569,4 +596,4 @@ def test_physics_constant():\n         assert const.is_physical_constant, f\"{const} is not marked as physics constant when it should be\"\n \n     assert not meter.is_physical_constant\n-    assert not joule.is_physical_constant\n+    assert not joule.is_physical_constant\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}