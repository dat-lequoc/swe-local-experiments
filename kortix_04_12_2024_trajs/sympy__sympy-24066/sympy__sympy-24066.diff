diff --git a/sympy/physics/units/systems/si.py b/sympy/physics/units/systems/si.py
index 700495ad9d..2fe9e9eb66 100644
--- a/sympy/physics/units/systems/si.py
+++ b/sympy/physics/units/systems/si.py
@@ -12,6 +12,8 @@
 from sympy.physics.units.quantities import Quantity
 
 from sympy.core.numbers import (Rational, pi)
+from sympy.functions.elementary.exponential import exp, log
+from sympy.functions.elementary.trigonometric import sin, cos, tan, asin, acos, atan, atan2
 from sympy.core.singleton import S
 from sympy.functions.elementary.miscellaneous import sqrt
 from sympy.physics.units.definitions.dimension_definitions import (
@@ -370,4 +372,4 @@
     'derived_dims', 'kg', 'coulomb', 'siemens', 'byte', 'magnetic_flux',
     'atomic_mass_unit', 'm', 'kibibyte', 'kilogram', 'One', 'curie', 'u',
     'time', 'pebibyte', 'velocity', 'ampere', 'katal',
-]
+]
\ No newline at end of file
diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py
index 25a68c7be5..d168e63fd0 100644
--- a/sympy/physics/units/tests/test_quantities.py
+++ b/sympy/physics/units/tests/test_quantities.py
@@ -13,7 +13,7 @@
 from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,
                                  volume, kilometer, joule, molar_gas_constant,
                                  vacuum_permittivity, elementary_charge, volt,
-                                 ohm)
+                                 ohm, farad, second)
 from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,
     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,
     minute, quart, s, second, speed_of_light, bit,
@@ -527,6 +527,33 @@ def test_issue_22819():
     assert dimsys_SI.get_dimensional_dependencies(area) == {length: 2}
     assert Da.scale_factor == 1.66053906660000e-24
 
+def test_transcendental_functions_with_units():
+    from sympy.functions.elementary.exponential import exp
+    from sympy.functions.elementary.trigonometric import sin, cos, atan2
+    expr = second / (ohm * farad)
+    dim = SI._collect_factor_and_dimension(expr)[1]
+    assert SI.get_dimension_system().is_dimensionless(dim)
+    
+    # Test exp with dimensionless argument
+    assert SI._collect_factor_and_dimension(exp(expr))[1].name == 1
+    
+    # Test sin with dimensionless argument
+    assert SI._collect_factor_and_dimension(sin(expr))[1].name == 1
+    
+    # Test cos with dimensionless argument
+    assert SI._collect_factor_and_dimension(cos(expr))[1].name == 1
+    
+    # Test atan2 with same dimensions
+    assert SI._collect_factor_and_dimension(atan2(meter, meter))[1].name == 1
+    
+    # Test addition with transcendental function
+    assert SI._collect_factor_and_dimension(100 + exp(expr))[1].name == 1
+    
+    # Test that errors are raised for invalid dimensions
+    raises(ValueError, lambda: SI._collect_factor_and_dimension(exp(meter)))
+    raises(ValueError, lambda: SI._collect_factor_and_dimension(sin(second)))
+    raises(ValueError, lambda: SI._collect_factor_and_dimension(atan2(meter, second)))
+
 
 def test_issue_20288():
     from sympy.core.numbers import E
@@ -569,4 +596,4 @@ def test_physics_constant():
         assert const.is_physical_constant, f"{const} is not marked as physics constant when it should be"
 
     assert not meter.is_physical_constant
-    assert not joule.is_physical_constant
+    assert not joule.is_physical_constant
\ No newline at end of file
