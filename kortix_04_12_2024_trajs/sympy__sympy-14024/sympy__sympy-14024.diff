diff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py
index a7fd30e118..9259cddc6b 100644
--- a/sympy/simplify/powsimp.py
+++ b/sympy/simplify/powsimp.py
@@ -199,11 +199,23 @@ def recurse(arg, **kwargs):
                         c_powers[b] -= e
 
         # check for base and negated base pairs
+        def _can_combine_base(b, e):
+            """Helper to determine if base can be combined"""
+            if b.is_number or (-b).is_number:
+                return False
+            if b.is_Symbol or b.is_Add:
+                return True
+            if b.is_Mul:
+                return all(not t.is_number for t in b.args)
+            return True
+
         be = list(c_powers.items())
         _n = S.NegativeOne
         for i, (b, e) in enumerate(be):
+            if not _can_combine_base(b, e):
+                continue
             if ((-b).is_Symbol or b.is_Add) and -b in c_powers:
-                if (b.is_positive in (0, 1) or e.is_integer):
+                if b.is_positive in (0, 1) or e.is_integer:
                     c_powers[-b] += c_powers.pop(b)
                     if _n in c_powers:
                         c_powers[_n] += e
@@ -689,4 +701,4 @@ def nc_gcd(aa, bb):
             add.append(a)
         else:
             other.append(a)
-    return Pow(exp(logcombine(Mul(*add))), e*Mul(*other))
+    return Pow(exp(logcombine(Mul(*add))), e*Mul(*other))
\ No newline at end of file
diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py
index 6909894e6f..67df5a29b5 100644
--- a/sympy/simplify/tests/test_simplify.py
+++ b/sympy/simplify/tests/test_simplify.py
@@ -694,6 +694,21 @@ def inverse(self, argindex=1):
     assert simplify(f(g(x, y))) == f(g(x, y))
 
 
+def test_negative_base_numeric():
+    # Test for correct handling of negative numeric bases
+    from sympy import Symbol, simplify, S
+    x = Symbol('x')
+    a = S(2)
+    e = (-a)**x * a**(-x)
+    f = simplify(e)
+    assert f == e  # Should not simplify to (-1)**x for numeric base
+    
+    # Test that symbolic case still works
+    a = Symbol('a', integer=True, positive=True)
+    e = (-a)**x * a**(-x)
+    f = simplify(e)
+    assert f == (-1)**x  # Should simplify for symbolic positive integer
+
 def test_clear_coefficients():
     from sympy.simplify.simplify import clear_coefficients
     assert clear_coefficients(4*y*(6*x + 3)) == (y*(2*x + 1), 0)
@@ -704,4 +719,4 @@ def test_clear_coefficients():
     assert clear_coefficients(S(3), x) == (0, x - 3)
     assert clear_coefficients(S.Infinity, x) == (S.Infinity, x)
     assert clear_coefficients(-S.Pi, x) == (S.Pi, -x)
-    assert clear_coefficients(2 - S.Pi/3, x) == (pi, -3*x + 6)
+    assert clear_coefficients(2 - S.Pi/3, x) == (pi, -3*x + 6)
\ No newline at end of file
