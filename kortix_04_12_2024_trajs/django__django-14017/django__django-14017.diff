diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..180b59a2b6 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,17 +40,15 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
+        if hasattr(other, 'conditional') and other.conditional:
+            other = Q(other)
         if not isinstance(other, Q):
             raise TypeError(other)
 
-        # If the other Q() is empty, ignore it and just use `self`.
-        if not other:
-            _, args, kwargs = self.deconstruct()
-            return type(self)(*args, **kwargs)
-        # Or if this Q is empty, ignore it and just use `other`.
-        elif not self:
-            _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
+        if not other.children:
+            return self.copy()
+        if not self.children:
+            return other.copy()
 
         obj = type(self)()
         obj.connector = conn
@@ -70,6 +68,11 @@ class Q(tree.Node):
         obj.negate()
         return obj
 
+    def __rand__(self, other):
+        if hasattr(other, 'conditional') and other.conditional:
+            return Q(other) & self
+        raise TypeError(other)
+
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
         # We must promote any new joins to left outer joins so that when Q is
         # used as an expression, rows aren't filtered due to joins.
@@ -321,4 +324,4 @@ class FilteredRelation:
         # Resolve the condition in Join.filtered_relation.
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
-        return compiler.compile(where)
+        return compiler.compile(where)
\ No newline at end of file
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index 6dcf36ce02..0c6caad0d9 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -1,4 +1,4 @@
-from django.db.models import F, Q
+from django.db.models import F, Q, Exists
 from django.test import SimpleTestCase
 
 
@@ -62,6 +62,14 @@ class QTests(SimpleTestCase):
         ))
         self.assertEqual(kwargs, {'_connector': 'OR'})
 
+    def test_combine_with_exists(self):
+        exists = Exists(Q())
+        q = Q(price=1)
+        self.assertEqual(exists & q, Q(exists) & q)
+        self.assertEqual(q & exists, q & Q(exists))
+        self.assertEqual(exists & Q(), Q(exists))
+        self.assertEqual(Q() & exists, Q(exists))
+
     def test_deconstruct_and(self):
         q1 = Q(price__gt=F('discounted_price'))
         q2 = Q(price=F('discounted_price'))
@@ -110,4 +118,4 @@ class QTests(SimpleTestCase):
         q2 = Q(price=F('discounted_price'))
         q = q1 & q2
         path, args, kwargs = q.deconstruct()
-        self.assertEqual(Q(*args, **kwargs), q)
+        self.assertEqual(Q(*args, **kwargs), q)
\ No newline at end of file
