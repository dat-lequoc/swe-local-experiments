{
  "instance_id": "django__django-12308",
  "model_patch": "diff --git a/django/contrib/admin/tests/__init__.py b/django/contrib/admin/tests/__init__.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/django/contrib/admin/tests/__init__.py\n@@ -0,0 +1 @@\n+\ndiff --git a/django/contrib/admin/tests/test_utils.py b/django/contrib/admin/tests/test_utils.py\nnew file mode 100644\nindex 0000000000..cf1399e656\n--- /dev/null\n+++ b/django/contrib/admin/tests/test_utils.py\n@@ -0,0 +1,21 @@\n+from django.contrib.admin import utils\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.models import JSONField\n+\n+class DisplayForFieldTests(SimpleTestCase):\n+    def test_json_field_display(self):\n+        \"\"\"\n+        JSONField values are properly formatted when displayed as readonly.\n+        \"\"\"\n+        field = JSONField()\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            (None, utils.display_for_value(None, '')),\n+            ({'nested': {'key': 'value'}}, '{\"nested\": {\"key\": \"value\"}}'),\n+        ]\n+        for value, expected in tests:\n+            with self.subTest(value=value):\n+                result = utils.display_for_field(value, field, '')\n+                self.assertEqual(result, expected)\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..1cb95ceb62 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,6 +379,7 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models import JSONField\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -398,6 +399,10 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, JSONField):\n+        if value is None:\n+            return empty_value_display\n+        return field.formfield().prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n@@ -542,4 +547,4 @@ def _get_changed_field_labels_from_form(form, changed_data):\n         except KeyError:\n             verbose_field_name = field_name\n         changed_field_labels.append(str(verbose_field_name))\n-    return changed_field_labels\n+    return changed_field_labels\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}