diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..335346d00c 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1175,6 +1175,9 @@ def get_backend():
     --------
     matplotlib.use
     """
+    # Get backend name without triggering resolution
+    if rcParams._get_backend_or_none() is rcsetup._auto_backend_sentinel:
+        return rcParamsDefault['backend']
     return rcParams['backend']
 
 
@@ -1456,4 +1459,4 @@ _log.debug('platform is %s', sys.platform)
 # workaround: we must defer colormaps import to after loading rcParams, because
 # colormap creation depends on rcParams
 from matplotlib.cm import _colormaps as colormaps
-from matplotlib.colors import _color_sequences as color_sequences
+from matplotlib.colors import _color_sequences as color_sequences
\ No newline at end of file
diff --git a/lib/matplotlib/tests/test_backend_resolution.py b/lib/matplotlib/tests/test_backend_resolution.py
new file mode 100644
index 0000000000..028f15443b
--- /dev/null
+++ b/lib/matplotlib/tests/test_backend_resolution.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import pytest
+
+def test_get_backend_preserves_figures():
+    """Test that get_backend() doesn't clear figures created in rc_context."""
+    # Create figure in rc_context
+    with rc_context():
+        fig = plt.figure()
+    
+    # Get figure count before
+    figs_before = len(plt._pylab_helpers.Gcf.figs)
+    
+    # Call get_backend()
+    get_backend()
+    
+    # Verify figures are preserved
+    figs_after = len(plt._pylab_helpers.Gcf.figs)
+    assert figs_before == figs_after, "get_backend() should not clear figures"
+    
+    # Verify we can still close the figure
+    plt.close(fig)
+    assert len(plt._pylab_helpers.Gcf.figs) == 0, "Figure should be closeable"
