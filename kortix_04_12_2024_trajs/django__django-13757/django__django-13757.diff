diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index 29c6ff0926..ccf5cb372f 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -368,12 +368,20 @@ class KeyTransformIsNull(lookups.IsNull):
     def as_oracle(self, compiler, connection):
         if not self.rhs:
             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
-        return super().as_sql(compiler, connection)
+        # For isnull=True, check if the key doesn't exist
+        lhs, params, key_transforms = self.lhs.preprocess_lhs(compiler, connection)
+        # Add paths directly into SQL because path expressions cannot be passed
+        # as bind variables on Oracle
+        json_path = compile_json_path(key_transforms)
+        return "NOT JSON_EXISTS(%s, '%s')" % (lhs, json_path), params
 
     def as_sqlite(self, compiler, connection):
         if not self.rhs:
             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)
-        return super().as_sql(compiler, connection)
+        # For isnull=True, check if the key doesn't exist using JSON_TYPE
+        lhs, params, key_transforms = self.lhs.preprocess_lhs(compiler, connection)
+        json_path = compile_json_path(key_transforms)
+        return "JSON_TYPE(%s, %s) IS NULL" % (lhs, '%s'), params + [json_path]
 
 
 class KeyTransformIn(lookups.In):
@@ -523,4 +531,4 @@ class KeyTransformFactory:
         self.key_name = key_name
 
     def __call__(self, *args, **kwargs):
-        return KeyTransform(self.key_name, *args, **kwargs)
+        return KeyTransform(self.key_name, *args, **kwargs)
\ No newline at end of file
