diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..4f2ed69d8c 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
@@ -1398,4 +1398,4 @@ def modelform_defines_fields(form_class):
     return hasattr(form_class, '_meta') and (
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
-    )
+    )
\ No newline at end of file
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index 9e900e35f4..236c9f584a 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -235,6 +235,32 @@ class ModelFormBaseTest(TestCase):
         obj = f2.save()
         self.assertEqual(obj.character, char)
 
+    def test_limit_choices_to_duplicates(self):
+        """
+        Using limit_choices_to with joins shouldn't produce duplicate choices.
+        """
+        today = datetime.datetime.today()
+        char1 = Character.objects.create(
+            username='Char1',
+            last_action=today,
+        )
+        # Create a joke to ensure we get a join that could cause duplicates
+        StumpJoke.objects.create(
+            most_recently_fooled=char1,
+        )
+        StumpJoke.objects.create(
+            most_recently_fooled=char1,
+        )
+        
+        class JokeForm(forms.ModelForm):
+            class Meta:
+                model = StumpJoke
+                fields = ['most_recently_fooled']
+        
+        form = JokeForm()
+        self.assertEqual(len(form.fields['most_recently_fooled'].queryset), 1)
+        self.assertEqual(form.fields['most_recently_fooled'].queryset[0], char1)
+
     def test_blank_false_with_null_true_foreign_key_field(self):
         """
         A ModelForm with a model having ForeignKey(blank=False, null=True)
@@ -3028,4 +3054,4 @@ class ModelToDictTests(TestCase):
         item.colours.set([red])
         # If data were a QuerySet, it would be reevaluated here and give "red"
         # instead of the original value.
-        self.assertEqual(data, [blue])
+        self.assertEqual(data, [blue])
\ No newline at end of file
