{
  "instance_id": "scikit-learn__scikit-learn-11040",
  "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..a861a2f9e 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,14 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    'n_neighbors must be an integer, got %r' % n_neighbors)\n+            if n_neighbors <= 0:\n+                raise ValueError(\n+                    'Expected n_neighbors > 0. Got %d' % n_neighbors)\n+\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -327,6 +335,9 @@ class KNeighborsMixin(object):\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\n+                'n_neighbors must be an integer, got %r' % n_neighbors)\n \n         if X is not None:\n             query_is_train = False\n@@ -466,6 +477,9 @@ class KNeighborsMixin(object):\n         \"\"\"\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\n+                'n_neighbors must be an integer, got %r' % n_neighbors)\n \n         # kneighbors does the None handling.\n         if X is not None:\n@@ -806,4 +820,4 @@ class UnsupervisedMixin(object):\n             Training data. If array or matrix, shape [n_samples, n_features],\n             or [n_samples, n_samples] if metric='precomputed'.\n         \"\"\"\n-        return self._fit(X)\n+        return self._fit(X)\n\\ No newline at end of file\ndiff --git a/sklearn/neighbors/tests/test_base.py b/sklearn/neighbors/tests/test_base.py\nnew file mode 100644\nindex 000000000..a4a95ad33\n--- /dev/null\n+++ b/sklearn/neighbors/tests/test_base.py\n@@ -0,0 +1,37 @@\n+import numpy as np\n+import pytest\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+\n+def test_neighbors_float_n_neighbors():\n+    # Test that float n_neighbors raises TypeError\n+    X, _ = make_blobs(n_samples=5, random_state=0)\n+    \n+    # Test constructor validation\n+    with pytest.raises(TypeError, match=r\"n_neighbors must be an integer\"):\n+        NearestNeighbors(n_neighbors=3.0)\n+    \n+    # Test kneighbors method validation\n+    nn = NearestNeighbors()\n+    nn.fit(X)\n+    with pytest.raises(TypeError, match=r\"n_neighbors must be an integer\"):\n+        nn.kneighbors(X, n_neighbors=3.0)\n+    \n+    # Test kneighbors_graph method validation\n+    with pytest.raises(TypeError, match=r\"n_neighbors must be an integer\"):\n+        nn.kneighbors_graph(X, n_neighbors=3.0)\n+\n+def test_neighbors_integer_validation():\n+    X, _ = make_blobs(n_samples=5, random_state=0)\n+    \n+    # Test numpy integer types\n+    nn = NearestNeighbors(n_neighbors=np.int32(3))\n+    nn.fit(X)\n+    nn.kneighbors(X)\n+    \n+    # Test zero and negative values\n+    with pytest.raises(ValueError, match=r\"Expected n_neighbors > 0\"):\n+        NearestNeighbors(n_neighbors=0)\n+    \n+    with pytest.raises(ValueError, match=r\"Expected n_neighbors > 0\"):\n+        NearestNeighbors(n_neighbors=-1)\n",
  "model_name_or_path": "KortixAI"
}