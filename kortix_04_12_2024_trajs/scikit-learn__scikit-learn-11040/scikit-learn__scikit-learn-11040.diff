diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py
index 3e5e729c2..a861a2f9e 100644
--- a/sklearn/neighbors/base.py
+++ b/sklearn/neighbors/base.py
@@ -107,6 +107,14 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):
                  algorithm='auto', leaf_size=30, metric='minkowski',
                  p=2, metric_params=None, n_jobs=1):
 
+        if n_neighbors is not None:
+            if not isinstance(n_neighbors, (int, np.integer)):
+                raise TypeError(
+                    'n_neighbors must be an integer, got %r' % n_neighbors)
+            if n_neighbors <= 0:
+                raise ValueError(
+                    'Expected n_neighbors > 0. Got %d' % n_neighbors)
+
         self.n_neighbors = n_neighbors
         self.radius = radius
         self.algorithm = algorithm
@@ -327,6 +335,9 @@ class KNeighborsMixin(object):
 
         if n_neighbors is None:
             n_neighbors = self.n_neighbors
+        elif not isinstance(n_neighbors, (int, np.integer)):
+            raise TypeError(
+                'n_neighbors must be an integer, got %r' % n_neighbors)
 
         if X is not None:
             query_is_train = False
@@ -466,6 +477,9 @@ class KNeighborsMixin(object):
         """
         if n_neighbors is None:
             n_neighbors = self.n_neighbors
+        elif not isinstance(n_neighbors, (int, np.integer)):
+            raise TypeError(
+                'n_neighbors must be an integer, got %r' % n_neighbors)
 
         # kneighbors does the None handling.
         if X is not None:
@@ -806,4 +820,4 @@ class UnsupervisedMixin(object):
             Training data. If array or matrix, shape [n_samples, n_features],
             or [n_samples, n_samples] if metric='precomputed'.
         """
-        return self._fit(X)
+        return self._fit(X)
\ No newline at end of file
diff --git a/sklearn/neighbors/tests/test_base.py b/sklearn/neighbors/tests/test_base.py
new file mode 100644
index 000000000..a4a95ad33
--- /dev/null
+++ b/sklearn/neighbors/tests/test_base.py
@@ -0,0 +1,37 @@
+import numpy as np
+import pytest
+from sklearn.neighbors import NearestNeighbors
+from sklearn.datasets import make_blobs
+
+def test_neighbors_float_n_neighbors():
+    # Test that float n_neighbors raises TypeError
+    X, _ = make_blobs(n_samples=5, random_state=0)
+    
+    # Test constructor validation
+    with pytest.raises(TypeError, match=r"n_neighbors must be an integer"):
+        NearestNeighbors(n_neighbors=3.0)
+    
+    # Test kneighbors method validation
+    nn = NearestNeighbors()
+    nn.fit(X)
+    with pytest.raises(TypeError, match=r"n_neighbors must be an integer"):
+        nn.kneighbors(X, n_neighbors=3.0)
+    
+    # Test kneighbors_graph method validation
+    with pytest.raises(TypeError, match=r"n_neighbors must be an integer"):
+        nn.kneighbors_graph(X, n_neighbors=3.0)
+
+def test_neighbors_integer_validation():
+    X, _ = make_blobs(n_samples=5, random_state=0)
+    
+    # Test numpy integer types
+    nn = NearestNeighbors(n_neighbors=np.int32(3))
+    nn.fit(X)
+    nn.kneighbors(X)
+    
+    # Test zero and negative values
+    with pytest.raises(ValueError, match=r"Expected n_neighbors > 0"):
+        NearestNeighbors(n_neighbors=0)
+    
+    with pytest.raises(ValueError, match=r"Expected n_neighbors > 0"):
+        NearestNeighbors(n_neighbors=-1)
