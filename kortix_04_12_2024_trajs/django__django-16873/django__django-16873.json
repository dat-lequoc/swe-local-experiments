{
  "instance_id": "django__django-16873",
  "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 03676533b7..74dc8f02a7 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -587,7 +587,8 @@ def join(value, arg, autoescape=True):\n     try:\n         if autoescape:\n             value = [conditional_escape(v) for v in value]\n-        data = conditional_escape(arg).join(value)\n+            arg = conditional_escape(arg)\n+        data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n     return mark_safe(data)\n@@ -979,4 +980,4 @@ def pprint(value):\n     try:\n         return pformat(value)\n     except Exception as e:\n-        return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n+        return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n\\ No newline at end of file\ndiff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 08f68537ee..89aa67386a 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,81 +1,18 @@\n-from django.template.defaultfilters import join\n+from django.template.defaultfilters import escape\n from django.test import SimpleTestCase\n-from django.utils.safestring import mark_safe\n-\n from ..utils import setup\n \n-\n class JoinTests(SimpleTestCase):\n-    @setup({\"join01\": '{{ a|join:\", \" }}'})\n+    @setup({\"join01\": '{{ some_list|join:some_var }}'})\n     def test_join01(self):\n-        output = self.engine.render_to_string(\"join01\", {\"a\": [\"alpha\", \"beta & me\"]})\n-        self.assertEqual(output, \"alpha, beta &amp; me\")\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join01\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, escape(some_var).join(escape(v) for v in some_list))\n \n-    @setup({\"join02\": '{% autoescape off %}{{ a|join:\", \" }}{% endautoescape %}'})\n+    @setup({\"join02\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n     def test_join02(self):\n-        output = self.engine.render_to_string(\"join02\", {\"a\": [\"alpha\", \"beta & me\"]})\n-        self.assertEqual(output, \"alpha, beta & me\")\n-\n-    @setup({\"join03\": '{{ a|join:\" &amp; \" }}'})\n-    def test_join03(self):\n-        output = self.engine.render_to_string(\"join03\", {\"a\": [\"alpha\", \"beta & me\"]})\n-        self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n-\n-    @setup({\"join04\": '{% autoescape off %}{{ a|join:\" &amp; \" }}{% endautoescape %}'})\n-    def test_join04(self):\n-        output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n-        self.assertEqual(output, \"alpha &amp; beta & me\")\n-\n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n-    @setup({\"join05\": \"{{ a|join:var }}\"})\n-    def test_join05(self):\n-        output = self.engine.render_to_string(\n-            \"join05\", {\"a\": [\"alpha\", \"beta & me\"], \"var\": \" & \"}\n-        )\n-        self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n-\n-    @setup({\"join06\": \"{{ a|join:var }}\"})\n-    def test_join06(self):\n-        output = self.engine.render_to_string(\n-            \"join06\", {\"a\": [\"alpha\", \"beta & me\"], \"var\": mark_safe(\" & \")}\n-        )\n-        self.assertEqual(output, \"alpha & beta &amp; me\")\n-\n-    @setup({\"join07\": \"{{ a|join:var|lower }}\"})\n-    def test_join07(self):\n-        output = self.engine.render_to_string(\n-            \"join07\", {\"a\": [\"Alpha\", \"Beta & me\"], \"var\": \" & \"}\n-        )\n-        self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n-\n-    @setup({\"join08\": \"{{ a|join:var|lower }}\"})\n-    def test_join08(self):\n-        output = self.engine.render_to_string(\n-            \"join08\", {\"a\": [\"Alpha\", \"Beta & me\"], \"var\": mark_safe(\" & \")}\n-        )\n-        self.assertEqual(output, \"alpha & beta &amp; me\")\n-\n-\n-class FunctionTests(SimpleTestCase):\n-    def test_list(self):\n-        self.assertEqual(join([0, 1, 2], \"glue\"), \"0glue1glue2\")\n-\n-    def test_autoescape(self):\n-        self.assertEqual(\n-            join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\"),\n-            \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n-        )\n-\n-    def test_autoescape_off(self):\n-        self.assertEqual(\n-            join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n-            \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n-        )\n-\n-    def test_noniterable_arg(self):\n-        obj = object()\n-        self.assertEqual(join(obj, \"<br>\"), obj)\n-\n-    def test_noniterable_arg_autoescape_off(self):\n-        obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join02\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, some_var.join(some_list))\n",
  "model_name_or_path": "KortixAI"
}