diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py
index 762e5761d..b4d0a95db 100644
--- a/src/_pytest/assertion/util.py
+++ b/src/_pytest/assertion/util.py
@@ -259,9 +259,18 @@ def _compare_eq_sequence(left, right, verbose=0):
     len_right = len(right)
     for i in range(min(len_left, len_right)):
         if left[i] != right[i]:
-            explanation += [
-                "At index {} diff: {!r} != {!r}".format(i, left[i], right[i])
-            ]
+            if isinstance(left, bytes) and isinstance(right, bytes):
+                left_chr = chr(left[i]) if 32 <= left[i] <= 126 else '\\x{:02x}'.format(left[i])
+                right_chr = chr(right[i]) if 32 <= right[i] <= 126 else '\\x{:02x}'.format(right[i])
+                explanation += [
+                    "At index {} diff: b'{}' (ASCII {}) != b'{}' (ASCII {})".format(
+                        i, left_chr, left[i], right_chr, right[i]
+                    )
+                ]
+            else:
+                explanation += [
+                    "At index {} diff: {!r} != {!r}".format(i, left[i], right[i])
+                ]
             break
     len_diff = len_left - len_right
 
@@ -275,14 +284,31 @@ def _compare_eq_sequence(left, right, verbose=0):
             extra = saferepr(right[len_left])
 
         if len_diff == 1:
-            explanation += [
-                "{} contains one more item: {}".format(dir_with_more, extra)
-            ]
+            if isinstance(left, bytes) and isinstance(right, bytes):
+                extra_byte = left[len_right] if len_diff > 0 else right[len_left]
+                extra_chr = chr(extra_byte) if 32 <= extra_byte <= 126 else '\\x{:02x}'.format(extra_byte)
+                explanation += [
+                    "{} contains one more item: b'{}' (ASCII {})".format(
+                        dir_with_more, extra_chr, extra_byte
+                    )
+                ]
+            else:
+                explanation += [
+                    "{} contains one more item: {}".format(dir_with_more, extra)
+                ]
         else:
-            explanation += [
-                "%s contains %d more items, first extra item: %s"
-                % (dir_with_more, len_diff, extra)
-            ]
+            if isinstance(left, bytes) and isinstance(right, bytes):
+                extra_byte = left[len_right] if len_diff > 0 else right[len_left]
+                extra_chr = chr(extra_byte) if 32 <= extra_byte <= 126 else '\\x{:02x}'.format(extra_byte)
+                explanation += [
+                    "%s contains %d more items, first extra item: b'%s' (ASCII %d)"
+                    % (dir_with_more, len_diff, extra_chr, extra_byte)
+                ]
+            else:
+                explanation += [
+                    "%s contains %d more items, first extra item: %s"
+                    % (dir_with_more, len_diff, extra)
+                ]
     return explanation
 
 
@@ -388,4 +414,4 @@ def _notin_text(term, text, verbose=0):
             newdiff.append("  " + line[2:])
         else:
             newdiff.append(line)
-    return newdiff
+    return newdiff
\ No newline at end of file
