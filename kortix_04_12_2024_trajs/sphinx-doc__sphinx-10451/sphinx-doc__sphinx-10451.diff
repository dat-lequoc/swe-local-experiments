diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index e16ab8ce5..ef5003c94 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1161,6 +1161,7 @@ class DocstringSignatureMixin:
     """
     _new_docstrings: List[List[str]] = None
     _signatures: List[str] = None
+    _processed_special_params: Set[str] = None
 
     def _find_signature(self) -> Tuple[str, str]:
         # candidates of the object name
@@ -1170,6 +1171,19 @@ class DocstringSignatureMixin:
             if hasattr(self.object, '__mro__'):
                 valid_names.extend(cls.__name__ for cls in self.object.__mro__)
 
+        # Initialize tracking of special parameters
+        self._processed_special_params = set()
+        
+        # Process docstrings and track special params
+        docstrings = self.get_doc()
+        if docstrings:
+            for doclines in docstrings:
+                for line in doclines:
+                    if '*args' in line:
+                        self._processed_special_params.add('*args')
+                    if '**kwargs' in line:
+                        self._processed_special_params.add('**kwargs')
+        
         docstrings = self.get_doc()
         if docstrings is None:
             return None, None
@@ -1267,6 +1281,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
     def format_args(self, **kwargs: Any) -> str:
         if self.config.autodoc_typehints in ('none', 'description'):
             kwargs.setdefault('show_annotation', False)
+            # Skip special params in signature if already processed
+            if hasattr(self, '_processed_special_params'):
+                kwargs.setdefault('skip_special_params', self._processed_special_params)
         if self.config.autodoc_typehints_format == "short":
             kwargs.setdefault('unqualified_typehints', True)
 
@@ -1538,6 +1555,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
     def format_args(self, **kwargs: Any) -> str:
         if self.config.autodoc_typehints in ('none', 'description'):
             kwargs.setdefault('show_annotation', False)
+            # Skip special params in signature if already processed
+            if hasattr(self, '_processed_special_params'):
+                kwargs.setdefault('skip_special_params', self._processed_special_params)
         if self.config.autodoc_typehints_format == "short":
             kwargs.setdefault('unqualified_typehints', True)
 
@@ -2130,6 +2150,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
     def format_args(self, **kwargs: Any) -> str:
         if self.config.autodoc_typehints in ('none', 'description'):
             kwargs.setdefault('show_annotation', False)
+            # Skip special params in signature if already processed
+            if hasattr(self, '_processed_special_params'):
+                kwargs.setdefault('skip_special_params', self._processed_special_params)
         if self.config.autodoc_typehints_format == "short":
             kwargs.setdefault('unqualified_typehints', True)
 
@@ -2833,4 +2856,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:
     app.setup_extension('sphinx.ext.autodoc.type_comment')
     app.setup_extension('sphinx.ext.autodoc.typehints')
 
-    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
+    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
\ No newline at end of file
diff --git a/tests/test_ext_autodoc_typehints.py b/tests/test_ext_autodoc_typehints.py
new file mode 100644
index 000000000..590fcdaf1
--- /dev/null
+++ b/tests/test_ext_autodoc_typehints.py
@@ -0,0 +1,63 @@
+"""Test the autodoc extension with typehints."""
+
+import pytest
+
+from sphinx.ext.autodoc import Options
+from sphinx.testing.util import SphinxTestApp  # NOQA
+from sphinx.util.docutils import LoggingReporter
+
+from .test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_autodoc_typehints_special_args(app):
+    class _ClassWithDocumentedInitAndStarArgs:
+        """Class docstring."""
+
+        def __init__(self, x: int, *args: int, **kwargs: int) -> None:
+            """Init docstring.
+
+            :param x: Some integer
+            :param *args: Some integer
+            :param **kwargs: Some integer
+            """
+            pass
+
+    options = Options()
+    app.config.autodoc_typehints = "description"
+    actual = do_autodoc(app, 'class', '_ClassWithDocumentedInitAndStarArgs', options)
+    assert list(actual) == [
+        '',
+        '.. py:class:: _ClassWithDocumentedInitAndStarArgs',
+        '   :module: None',
+        '',
+        '   Class docstring.',
+        '',
+        '   Parameters:',
+        '      * **x** (*int*) --',
+        '',
+        '      * ***args** (*int*) --',
+        '',
+        '      * ****kwargs** (*int*) --',
+        '',
+        '   Return type:',
+        '      None',
+        '',
+        '   __init__(x, *args, **kwargs)',
+        '',
+        '      Init docstring.',
+        '',
+        '      Parameters:',
+        '         * **x** (*int*) -- Some integer',
+        '',
+        '         * ***args** (*int*) --',
+        '',
+        '           Some integer',
+        '',
+        '         * ****kwargs** (*int*) --',
+        '',
+        '           Some integer',
+        '',
+        '      Return type:',
+        '         None',
+        '',
+    ]
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
