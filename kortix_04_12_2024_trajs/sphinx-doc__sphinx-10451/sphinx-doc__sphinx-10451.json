{
  "instance_id": "sphinx-doc__sphinx-10451",
  "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..ef5003c94 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1161,6 +1161,7 @@ class DocstringSignatureMixin:\n     \"\"\"\n     _new_docstrings: List[List[str]] = None\n     _signatures: List[str] = None\n+    _processed_special_params: Set[str] = None\n \n     def _find_signature(self) -> Tuple[str, str]:\n         # candidates of the object name\n@@ -1170,6 +1171,19 @@ class DocstringSignatureMixin:\n             if hasattr(self.object, '__mro__'):\n                 valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n \n+        # Initialize tracking of special parameters\n+        self._processed_special_params = set()\n+        \n+        # Process docstrings and track special params\n+        docstrings = self.get_doc()\n+        if docstrings:\n+            for doclines in docstrings:\n+                for line in doclines:\n+                    if '*args' in line:\n+                        self._processed_special_params.add('*args')\n+                    if '**kwargs' in line:\n+                        self._processed_special_params.add('**kwargs')\n+        \n         docstrings = self.get_doc()\n         if docstrings is None:\n             return None, None\n@@ -1267,6 +1281,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+            # Skip special params in signature if already processed\n+            if hasattr(self, '_processed_special_params'):\n+                kwargs.setdefault('skip_special_params', self._processed_special_params)\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n@@ -1538,6 +1555,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+            # Skip special params in signature if already processed\n+            if hasattr(self, '_processed_special_params'):\n+                kwargs.setdefault('skip_special_params', self._processed_special_params)\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n@@ -2130,6 +2150,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+            # Skip special params in signature if already processed\n+            if hasattr(self, '_processed_special_params'):\n+                kwargs.setdefault('skip_special_params', self._processed_special_params)\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n@@ -2833,4 +2856,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.ext.autodoc.type_comment')\n     app.setup_extension('sphinx.ext.autodoc.typehints')\n \n-    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}\n+    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}\n\\ No newline at end of file\ndiff --git a/tests/test_ext_autodoc_typehints.py b/tests/test_ext_autodoc_typehints.py\nnew file mode 100644\nindex 000000000..590fcdaf1\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints.py\n@@ -0,0 +1,63 @@\n+\"\"\"Test the autodoc extension with typehints.\"\"\"\n+\n+import pytest\n+\n+from sphinx.ext.autodoc import Options\n+from sphinx.testing.util import SphinxTestApp  # NOQA\n+from sphinx.util.docutils import LoggingReporter\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_special_args(app):\n+    class _ClassWithDocumentedInitAndStarArgs:\n+        \"\"\"Class docstring.\"\"\"\n+\n+        def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+            \"\"\"Init docstring.\n+\n+            :param x: Some integer\n+            :param *args: Some integer\n+            :param **kwargs: Some integer\n+            \"\"\"\n+            pass\n+\n+    options = Options()\n+    app.config.autodoc_typehints = \"description\"\n+    actual = do_autodoc(app, 'class', '_ClassWithDocumentedInitAndStarArgs', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: _ClassWithDocumentedInitAndStarArgs',\n+        '   :module: None',\n+        '',\n+        '   Class docstring.',\n+        '',\n+        '   Parameters:',\n+        '      * **x** (*int*) --',\n+        '',\n+        '      * ***args** (*int*) --',\n+        '',\n+        '      * ****kwargs** (*int*) --',\n+        '',\n+        '   Return type:',\n+        '      None',\n+        '',\n+        '   __init__(x, *args, **kwargs)',\n+        '',\n+        '      Init docstring.',\n+        '',\n+        '      Parameters:',\n+        '         * **x** (*int*) -- Some integer',\n+        '',\n+        '         * ***args** (*int*) --',\n+        '',\n+        '           Some integer',\n+        '',\n+        '         * ****kwargs** (*int*) --',\n+        '',\n+        '           Some integer',\n+        '',\n+        '      Return type:',\n+        '         None',\n+        '',\n+    ]\n\\ No newline at end of file\ndiff --git a/tox.ini b/tox.ini\nindex 105a02597..90ada0821 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -29,7 +29,7 @@ setenv =\n     PYTHONWARNINGS = all\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:du-latest]\n commands =\n",
  "model_name_or_path": "KortixAI"
}