{
  "instance_id": "django__django-13660",
  "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..1270ad7818 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,7 +84,8 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            globals_dict = {'__builtins__': __builtins__}\n+            exec(options['command'], globals_dict)\n             return\n \n         # Execute stdin if it has anything to read and exit.\n@@ -100,4 +101,4 @@ class Command(BaseCommand):\n                 return getattr(self, shell)(options)\n             except ImportError:\n                 pass\n-        raise CommandError(\"Couldn't import {} interface.\".format(shell))\n+        raise CommandError(\"Couldn't import {} interface.\".format(shell))\n\\ No newline at end of file\ndiff --git a/tests/user_commands/test_shell.py b/tests/user_commands/test_shell.py\nnew file mode 100644\nindex 0000000000..d981e0613d\n--- /dev/null\n+++ b/tests/user_commands/test_shell.py\n@@ -0,0 +1,50 @@\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import sys\n+\n+class ShellCommandTest(SimpleTestCase):\n+    def test_shell_command_with_function_definition(self):\n+        \"\"\"\n+        Test that shell -c can handle function definitions correctly\n+        \"\"\"\n+        out = StringIO()\n+        sys.stdout = out\n+        try:\n+            call_command('shell', command=\"\"\"\n+def test_func():\n+    print('test_output')\n+test_func()\n+\"\"\")\n+            output = out.getvalue()\n+            self.assertIn('test_output', output)\n+        finally:\n+            sys.stdout = sys.__stdout__\n+\n+    def test_shell_command_scope_isolation(self):\n+        \"\"\"\n+        Test that shell -c properly isolates variable scope\n+        \"\"\"\n+        with self.assertRaises(NameError):\n+            call_command('shell', command=\"\"\"\n+def test_func():\n+    print(undefined_var)\n+test_func()\n+\"\"\")\n+\n+    def test_shell_command_builtins_access(self):\n+        \"\"\"\n+        Test that shell -c maintains access to builtins\n+        \"\"\"\n+        out = StringIO()\n+        sys.stdout = out\n+        try:\n+            call_command('shell', command=\"\"\"\n+def test_func():\n+    print(len([1,2,3]))\n+test_func()\n+\"\"\")\n+            output = out.getvalue()\n+            self.assertIn('3', output)\n+        finally:\n+            sys.stdout = sys.__stdout__\n",
  "model_name_or_path": "KortixAI"
}