diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
index 2b306a579e..1270ad7818 100644
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -84,7 +84,8 @@ class Command(BaseCommand):
     def handle(self, **options):
         # Execute the command and exit.
         if options['command']:
-            exec(options['command'])
+            globals_dict = {'__builtins__': __builtins__}
+            exec(options['command'], globals_dict)
             return
 
         # Execute stdin if it has anything to read and exit.
@@ -100,4 +101,4 @@ class Command(BaseCommand):
                 return getattr(self, shell)(options)
             except ImportError:
                 pass
-        raise CommandError("Couldn't import {} interface.".format(shell))
+        raise CommandError("Couldn't import {} interface.".format(shell))
\ No newline at end of file
diff --git a/tests/user_commands/test_shell.py b/tests/user_commands/test_shell.py
new file mode 100644
index 0000000000..d981e0613d
--- /dev/null
+++ b/tests/user_commands/test_shell.py
@@ -0,0 +1,50 @@
+from django.core.management import call_command
+from django.test import SimpleTestCase
+from io import StringIO
+import sys
+
+class ShellCommandTest(SimpleTestCase):
+    def test_shell_command_with_function_definition(self):
+        """
+        Test that shell -c can handle function definitions correctly
+        """
+        out = StringIO()
+        sys.stdout = out
+        try:
+            call_command('shell', command="""
+def test_func():
+    print('test_output')
+test_func()
+""")
+            output = out.getvalue()
+            self.assertIn('test_output', output)
+        finally:
+            sys.stdout = sys.__stdout__
+
+    def test_shell_command_scope_isolation(self):
+        """
+        Test that shell -c properly isolates variable scope
+        """
+        with self.assertRaises(NameError):
+            call_command('shell', command="""
+def test_func():
+    print(undefined_var)
+test_func()
+""")
+
+    def test_shell_command_builtins_access(self):
+        """
+        Test that shell -c maintains access to builtins
+        """
+        out = StringIO()
+        sys.stdout = out
+        try:
+            call_command('shell', command="""
+def test_func():
+    print(len([1,2,3]))
+test_func()
+""")
+            output = out.getvalue()
+            self.assertIn('3', output)
+        finally:
+            sys.stdout = sys.__stdout__
