diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py
index 1783a7744a..c74f909323 100644
--- a/sympy/polys/sqfreetools.py
+++ b/sympy/polys/sqfreetools.py
@@ -278,6 +278,30 @@ def dmp_gf_sqf_list(f, u, K, all=False):
     raise NotImplementedError('multivariate polynomials over finite fields')
 
 
+def _combine_factors(factors, K):
+    """Combine factors with equal multiplicity."""
+    from collections import defaultdict
+    combined = defaultdict(list)
+    
+    # Group factors by multiplicity
+    for f, k in factors:
+        combined[k].append(f)
+    
+    # Combine factors with same multiplicity
+    result = []
+    for k in sorted(combined.keys()):
+        fs = combined[k]
+        if len(fs) > 1:
+            # Multiply factors with same multiplicity
+            product = fs[0]
+            for f in fs[1:]:
+                product = dup_mul(product, f, K)
+            result.append((product, k))
+        else:
+            result.append((fs[0], k))
+    
+    return result
+
 def dup_sqf_list(f, K, all=False):
     """
     Return square-free decomposition of a polynomial in ``K[x]``.
@@ -332,6 +356,9 @@ def dup_sqf_list(f, K, all=False):
 
         i += 1
 
+    # Combine factors with equal multiplicity
+    result = _combine_factors(result, K)
+
     return coeff, result
 
 
@@ -505,4 +532,4 @@ def dmp_gff_list(f, u, K):
     if not u:
         return dup_gff_list(f, K)
     else:
-        raise MultivariatePolynomialError(f)
+        raise MultivariatePolynomialError(f)
\ No newline at end of file
diff --git a/sympy/polys/tests/test_sqfreetools.py b/sympy/polys/tests/test_sqfreetools.py
index abe229e713..9a7d15d8b1 100644
--- a/sympy/polys/tests/test_sqfreetools.py
+++ b/sympy/polys/tests/test_sqfreetools.py
@@ -23,6 +23,20 @@ def test_dup_sqf():
     assert R.dup_sqf_part(x**3 + x + 1) == x**3 + x + 1
     assert R.dup_sqf_p(x**3 + x + 1) is True
 
+    # Test combining factors with same multiplicity
+    f = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3
+    _, factors = R.dup_sqf_list(f)
+    
+    # Verify factors with same multiplicity are combined
+    multiplicities = [k for _, k in factors]
+    assert multiplicities.count(3) == 1  # Should only appear once
+    
+    # Find the factor with multiplicity 3
+    for factor, mult in factors:
+        if mult == 3:
+            # Verify it's the product of (x-2) and (x-3)
+            assert R.dup_degree(factor) == 2  # Should be quadratic
+
     assert R.dup_sqf_part(-x**3 + x + 1) == x**3 - x - 1
     assert R.dup_sqf_p(-x**3 + x + 1) is True
 
@@ -146,4 +160,4 @@ def test_dup_gff_list():
     g = x**9 - 20*x**8 + 166*x**7 - 744*x**6 + 1965*x**5 - 3132*x**4 + 2948*x**3 - 1504*x**2 + 320*x
     assert R.dup_gff_list(g) == [(x**2 - 5*x + 4, 1), (x**2 - 5*x + 4, 2), (x, 3)]
 
-    raises(ValueError, lambda: R.dup_gff_list(0))
+    raises(ValueError, lambda: R.dup_gff_list(0))
\ No newline at end of file
