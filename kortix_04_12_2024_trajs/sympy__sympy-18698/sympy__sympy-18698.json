{
  "instance_id": "sympy__sympy-18698",
  "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..c74f909323 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -278,6 +278,30 @@ def dmp_gf_sqf_list(f, u, K, all=False):\n     raise NotImplementedError('multivariate polynomials over finite fields')\n \n \n+def _combine_factors(factors, K):\n+    \"\"\"Combine factors with equal multiplicity.\"\"\"\n+    from collections import defaultdict\n+    combined = defaultdict(list)\n+    \n+    # Group factors by multiplicity\n+    for f, k in factors:\n+        combined[k].append(f)\n+    \n+    # Combine factors with same multiplicity\n+    result = []\n+    for k in sorted(combined.keys()):\n+        fs = combined[k]\n+        if len(fs) > 1:\n+            # Multiply factors with same multiplicity\n+            product = fs[0]\n+            for f in fs[1:]:\n+                product = dup_mul(product, f, K)\n+            result.append((product, k))\n+        else:\n+            result.append((fs[0], k))\n+    \n+    return result\n+\n def dup_sqf_list(f, K, all=False):\n     \"\"\"\n     Return square-free decomposition of a polynomial in ``K[x]``.\n@@ -332,6 +356,9 @@ def dup_sqf_list(f, K, all=False):\n \n         i += 1\n \n+    # Combine factors with equal multiplicity\n+    result = _combine_factors(result, K)\n+\n     return coeff, result\n \n \n@@ -505,4 +532,4 @@ def dmp_gff_list(f, u, K):\n     if not u:\n         return dup_gff_list(f, K)\n     else:\n-        raise MultivariatePolynomialError(f)\n+        raise MultivariatePolynomialError(f)\n\\ No newline at end of file\ndiff --git a/sympy/polys/tests/test_sqfreetools.py b/sympy/polys/tests/test_sqfreetools.py\nindex abe229e713..9a7d15d8b1 100644\n--- a/sympy/polys/tests/test_sqfreetools.py\n+++ b/sympy/polys/tests/test_sqfreetools.py\n@@ -23,6 +23,20 @@ def test_dup_sqf():\n     assert R.dup_sqf_part(x**3 + x + 1) == x**3 + x + 1\n     assert R.dup_sqf_p(x**3 + x + 1) is True\n \n+    # Test combining factors with same multiplicity\n+    f = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    _, factors = R.dup_sqf_list(f)\n+    \n+    # Verify factors with same multiplicity are combined\n+    multiplicities = [k for _, k in factors]\n+    assert multiplicities.count(3) == 1  # Should only appear once\n+    \n+    # Find the factor with multiplicity 3\n+    for factor, mult in factors:\n+        if mult == 3:\n+            # Verify it's the product of (x-2) and (x-3)\n+            assert R.dup_degree(factor) == 2  # Should be quadratic\n+\n     assert R.dup_sqf_part(-x**3 + x + 1) == x**3 - x - 1\n     assert R.dup_sqf_p(-x**3 + x + 1) is True\n \n@@ -146,4 +160,4 @@ def test_dup_gff_list():\n     g = x**9 - 20*x**8 + 166*x**7 - 744*x**6 + 1965*x**5 - 3132*x**4 + 2948*x**3 - 1504*x**2 + 320*x\n     assert R.dup_gff_list(g) == [(x**2 - 5*x + 4, 1), (x**2 - 5*x + 4, 2), (x, 3)]\n \n-    raises(ValueError, lambda: R.dup_gff_list(0))\n+    raises(ValueError, lambda: R.dup_gff_list(0))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}