diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py
index 896729ac87..832fd3fc07 100644
--- a/sympy/functions/combinatorial/numbers.py
+++ b/sympy/functions/combinatorial/numbers.py
@@ -434,6 +434,8 @@ def _bell_incomplete_poly(n, k, symbols):
 
     @classmethod
     def eval(cls, n, k_sym=None, symbols=None):
+        if n is S.Infinity:
+            return S.Infinity
         if n.is_Integer and n.is_nonnegative:
             if k_sym is None:
                 return Integer(cls._bell(int(n)))
@@ -1648,4 +1650,4 @@ def nT(n, k=None):
     tot = 0
     for discard in m.enum_range(n[_M], k-1, k):
         tot += 1
-    return tot
+    return tot
\ No newline at end of file
diff --git a/sympy/functions/combinatorial/tests/test_comb_numbers.py b/sympy/functions/combinatorial/tests/test_comb_numbers.py
index ad0fd4fe85..62ad926204 100644
--- a/sympy/functions/combinatorial/tests/test_comb_numbers.py
+++ b/sympy/functions/combinatorial/tests/test_comb_numbers.py
@@ -79,6 +79,10 @@ def test_fibonacci():
 
 def test_bell():
     assert [bell(n) for n in range(8)] == [1, 1, 2, 5, 15, 52, 203, 877]
+    
+    # Test limit behavior
+    n = Symbol('n')
+    assert limit(bell(n), n, oo) == oo
 
     assert bell(0, x) == 1
     assert bell(1, x) == x
@@ -556,4 +560,4 @@ def test_issue_8601():
     c1 = catalan(-5.6).evalf()
     assert str(c1) == '6.93334070531408e-5'
     c2 = catalan(-35.4).evalf()
-    assert str(c2) == '-4.14189164517449e-24'
+    assert str(c2) == '-4.14189164517449e-24'
\ No newline at end of file
