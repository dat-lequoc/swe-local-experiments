{
  "instance_id": "sympy__sympy-20639",
  "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex df7452ee87..d5fad9f7dd 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1954,7 +1954,8 @@ def _print_Pow(self, power):\n             if e is S.NegativeOne:\n                 return prettyForm(\"1\")/self._print(b)\n             n, d = fraction(e)\n-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n+            if (n is S.One and d.is_Atom and not e.is_Integer and \n+                self._settings['root_notation'] and e.is_rational):\n                 return self._print_nth_root(b, e)\n             if e.is_Rational and e < 0:\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n@@ -2796,4 +2797,4 @@ def pager_print(expr, **settings):\n     from locale import getpreferredencoding\n     if 'num_columns' not in settings:\n         settings['num_columns'] = 500000  # disable line wrap\n-    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n+    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n\\ No newline at end of file\ndiff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex d33795d155..fec046bbbe 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -254,6 +254,13 @@ def test_pretty_ascii_str():\n \n def test_pretty_unicode_str():\n     assert pretty( 'xxx' ) == 'xxx'\n+    \n+def test_pretty_irrational_power():\n+    from sympy import pi, E\n+    expr = pi**(1/E)\n+    result = pretty(expr)\n+    assert \"\u2572\u2571\" not in result  # Should not use root notation\n+    assert \"-1\" not in result  # Should not show negative\n     assert pretty( 'xxx' ) == 'xxx'\n     assert pretty( 'xxx\\'xxx' ) == 'xxx\\'xxx'\n     assert pretty( 'xxx\"xxx' ) == 'xxx\\\"xxx'\n@@ -7249,4 +7256,4 @@ def test_diffgeom():\n     rect = CoordSystem('rect', p, [x, y])\n     assert pretty(rect) == \"rect\"\n     b = BaseScalarField(rect, 0)\n-    assert pretty(b) == \"x\"\n+    assert pretty(b) == \"x\"\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}