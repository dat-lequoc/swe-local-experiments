diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index d3d53e3d98..7304a85eac 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -504,13 +504,31 @@ class Colorbar:
         and locator will be preserved.
         """
         _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)
+        
+        # Store current norm for comparison
+        old_norm = self.norm
+        
+        # Update basic attributes
         self.mappable = mappable
         self.set_alpha(mappable.get_alpha())
         self.cmap = mappable.cmap
-        if mappable.norm != self.norm:
+        
+        # Update norm with callback protection
+        with mappable.callbacks.blocked(), self.mappable.callbacks.blocked():
             self.norm = mappable.norm
-            self._reset_locator_formatter_scale()
-
+            
+            # Reset locator and formatter if norm type changes
+            if type(old_norm) != type(self.norm):
+                self._reset_locator_formatter_scale()
+            elif mappable.norm != old_norm:
+                self._reset_locator_formatter_scale()
+        
+        # Ensure norm is properly initialized
+        if hasattr(self.norm, 'vmin') and self.norm.vmin is None:
+            self.norm.vmin = np.min(mappable.get_array())
+        if hasattr(self.norm, 'vmax') and self.norm.vmax is None:
+            self.norm.vmax = np.max(mappable.get_array())
+            
         self._draw_all()
         if isinstance(self.mappable, contour.ContourSet):
             CS = self.mappable
@@ -1591,4 +1609,4 @@ def make_axes_gridspec(parent, *, location=None, orientation=None,
         aspect=aspect0,
         pad=pad)
 
-    return cax, kwargs
+    return cax, kwargs
\ No newline at end of file
diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py
index e39d007378..e4ed04687d 100644
--- a/lib/matplotlib/tests/test_colorbar.py
+++ b/lib/matplotlib/tests/test_colorbar.py
@@ -225,10 +225,21 @@ def test_colorbar_single_ax_panchor_false():
     assert ax.get_anchor() == 'N'
 
 
-@pytest.mark.parametrize('constrained', [False, True],
-                         ids=['standard', 'constrained'])
-def test_colorbar_single_ax_panchor_east(constrained):
-    fig = plt.figure(constrained_layout=constrained)
+def test_colorbar_norm_update():
+    """Test colorbar updates correctly when mappable's norm changes."""
+    fig, ax = plt.subplots()
+    np.random.seed(1234)
+    img = 10**np.random.normal(1, 1, size=(10, 10))
+    im = ax.imshow(img)
+    cb = fig.colorbar(im)
+    assert not isinstance(im.norm, LogNorm)
+    im.set_norm(LogNorm())
+    cb.update_normal(im)
+    assert isinstance(cb.norm, LogNorm)
+    assert cb.norm is im.norm
+    
+def test_colorbar_single_ax_panchor_east():
+    fig = plt.figure()
     ax = fig.add_subplot(111, anchor='N')
     plt.imshow([[0, 1]])
     plt.colorbar(panchor='E')
@@ -1214,4 +1225,4 @@ def test_colorbar_axes_parmeters():
     fig.colorbar(im, ax=[_ax for _ax in ax])
     fig.colorbar(im, ax=(ax[0], ax[1]))
     fig.colorbar(im, ax={i: _ax for i, _ax in enumerate(ax)}.values())
-    fig.draw_without_rendering()
+    fig.draw_without_rendering()
\ No newline at end of file
