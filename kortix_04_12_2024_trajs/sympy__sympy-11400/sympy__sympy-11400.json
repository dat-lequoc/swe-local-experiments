{
  "instance_id": "sympy__sympy-11400",
  "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..37e8d71ff5 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -248,6 +248,13 @@ def _print_For(self, expr):\n                 '{step}) {{\\n{body}\\n}}').format(target=target, start=start,\n                 stop=stop, step=step, body=body)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import sin\n+        from sympy import Piecewise\n+        x = expr.args[0]\n+        return '((%s != 0) ? (\\n   sin(%s)/%s\\n)\\n: (\\n   1\\n))' % (\n+            self._print(x), self._print(x), self._print(x))\n+\n     def _print_sign(self, func):\n         return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))\n \n@@ -398,4 +405,4 @@ def ccode(expr, assign_to=None, **settings):\n \n def print_ccode(expr, **settings):\n     \"\"\"Prints C representation of the given expression.\"\"\"\n-    print(ccode(expr, **settings))\n+    print(ccode(expr, **settings))\n\\ No newline at end of file\ndiff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\nindex d8e449d853..99f0181e3f 100644\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -1,5 +1,6 @@\n from sympy.core import (pi, oo, symbols, Rational, Integer,\n                         GoldenRatio, EulerGamma, Catalan, Lambda, Dummy, Eq)\n+from sympy.functions import sinc\n from sympy.functions import (Piecewise, sin, cos, Abs, exp, ceiling, sqrt,\n                              gamma, sign)\n from sympy.sets import Range\n@@ -479,6 +480,10 @@ def test_ccode_sign():\n     expr = sign(cos(x))\n     assert ccode(expr) == '(((cos(x)) > 0) - ((cos(x)) < 0))'\n \n+def test_ccode_sinc():\n+    assert ccode(sinc(x)) == '((x != 0) ? (\\n   sin(x)/x\\n)\\n: (\\n   1\\n))'\n+    assert ccode(sinc(x**2)) == '((pow(x, 2) != 0) ? (\\n   sin(pow(x, 2))/pow(x, 2)\\n)\\n: (\\n   1\\n))'\n+\n def test_ccode_Assignment():\n     assert ccode(Assignment(x, y + z)) == 'x = y + z;'\n     assert ccode(aug_assign(x, '+', y + z)) == 'x += y + z;'\n@@ -489,4 +494,4 @@ def test_ccode_For():\n     sol = ccode(f)\n     assert sol == (\"for (x = 0; x < 10; x += 2) {\\n\"\n                    \"   y *= x;\\n\"\n-                   \"}\")\n+                   \"}\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}