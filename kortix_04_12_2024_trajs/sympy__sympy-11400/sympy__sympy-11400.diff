diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py
index 30a07a7b59..37e8d71ff5 100644
--- a/sympy/printing/ccode.py
+++ b/sympy/printing/ccode.py
@@ -248,6 +248,13 @@ def _print_For(self, expr):
                 '{step}) {{\n{body}\n}}').format(target=target, start=start,
                 stop=stop, step=step, body=body)
 
+    def _print_sinc(self, expr):
+        from sympy.functions import sin
+        from sympy import Piecewise
+        x = expr.args[0]
+        return '((%s != 0) ? (\n   sin(%s)/%s\n)\n: (\n   1\n))' % (
+            self._print(x), self._print(x), self._print(x))
+
     def _print_sign(self, func):
         return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))
 
@@ -398,4 +405,4 @@ def ccode(expr, assign_to=None, **settings):
 
 def print_ccode(expr, **settings):
     """Prints C representation of the given expression."""
-    print(ccode(expr, **settings))
+    print(ccode(expr, **settings))
\ No newline at end of file
diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py
index d8e449d853..99f0181e3f 100644
--- a/sympy/printing/tests/test_ccode.py
+++ b/sympy/printing/tests/test_ccode.py
@@ -1,5 +1,6 @@
 from sympy.core import (pi, oo, symbols, Rational, Integer,
                         GoldenRatio, EulerGamma, Catalan, Lambda, Dummy, Eq)
+from sympy.functions import sinc
 from sympy.functions import (Piecewise, sin, cos, Abs, exp, ceiling, sqrt,
                              gamma, sign)
 from sympy.sets import Range
@@ -479,6 +480,10 @@ def test_ccode_sign():
     expr = sign(cos(x))
     assert ccode(expr) == '(((cos(x)) > 0) - ((cos(x)) < 0))'
 
+def test_ccode_sinc():
+    assert ccode(sinc(x)) == '((x != 0) ? (\n   sin(x)/x\n)\n: (\n   1\n))'
+    assert ccode(sinc(x**2)) == '((pow(x, 2) != 0) ? (\n   sin(pow(x, 2))/pow(x, 2)\n)\n: (\n   1\n))'
+
 def test_ccode_Assignment():
     assert ccode(Assignment(x, y + z)) == 'x = y + z;'
     assert ccode(aug_assign(x, '+', y + z)) == 'x += y + z;'
@@ -489,4 +494,4 @@ def test_ccode_For():
     sol = ccode(f)
     assert sol == ("for (x = 0; x < 10; x += 2) {\n"
                    "   y *= x;\n"
-                   "}")
+                   "}")
\ No newline at end of file
