{
  "instance_id": "sympy__sympy-22005",
  "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..fd8fca5a85 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -132,6 +132,17 @@ def solve_biquadratic(f, g, opt):\n     return sorted(solutions, key=default_sort_key)\n \n \n+def _check_zero_dimensional(system, gens):\n+    \"\"\"Verify system is zero-dimensional.\"\"\"\n+    # Check if we have enough equations\n+    if len(system) < len(gens):\n+        return False\n+    # Check if all variables appear in system\n+    vars_in_system = set()\n+    for eq in system:\n+        vars_in_system.update(eq.free_symbols.intersection(gens))\n+    return len(vars_in_system) == len(gens)\n+\n def solve_generic(polys, opt):\n     \"\"\"\n     Solve a generic system of polynomial equations.\n@@ -226,8 +237,12 @@ def _subs_root(f, gen, zero):\n \n     def _solve_reduced_system(system, gens, entry=False):\n         \"\"\"Recursively solves reduced polynomial systems. \"\"\"\n+        if not _check_zero_dimensional(system, gens):\n+            raise NotImplementedError(\"only zero-dimensional systems supported\")\n+            \n         if len(system) == len(gens) == 1:\n-            zeros = list(roots(system[0], gens[-1]).keys())\n+            f = system[0]\n+            zeros = list(roots(f, gens[-1]).keys())\n             return [(zero,) for zero in zeros]\n \n         basis = groebner(system, gens, polys=True)\n@@ -391,4 +406,4 @@ def solve_triangulated(polys, *gens, **args):\n     for i, (solution, _) in enumerate(solutions):\n         solutions[i] = solution\n \n-    return sorted(solutions, key=default_sort_key)\n+    return sorted(solutions, key=default_sort_key)\n\\ No newline at end of file\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 58419f8762..c15b672950 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -48,6 +48,8 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], x, y))\n \n \n def test_solve_biquadratic():\n@@ -132,4 +134,4 @@ def test_solve_issue_3686():\n     assert roots[0][0] == 0\n     assert roots[0][1].epsilon_eq(-499.474999374969, 1e12)\n     assert roots[1][0] == 0\n-    assert roots[1][1].epsilon_eq(500.474999374969, 1e12)\n+    assert roots[1][1].epsilon_eq(500.474999374969, 1e12)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}