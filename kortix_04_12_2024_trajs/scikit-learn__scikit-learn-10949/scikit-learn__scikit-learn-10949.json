{
  "instance_id": "scikit-learn__scikit-learn-10949",
  "model_patch": "diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py\nindex 00182fa0a..d581601bb 100644\n--- a/sklearn/utils/tests/test_validation.py\n+++ b/sklearn/utils/tests/test_validation.py\n@@ -336,6 +336,10 @@ def test_check_array_pandas_dtype_object_conversion():\n     # smoke-test against dataframes with column named \"dtype\"\n     X_df.dtype = \"Hans\"\n     assert_equal(check_array(X_df, ensure_2d=False).dtype.kind, \"f\")\n+    \n+    # Test that warn_on_dtype works with dataframes\n+    assert_warns(DataConversionWarning, check_array, X_df,\n+                warn_on_dtype=True)\n \n \n def test_check_array_on_mock_dataframe():\n@@ -747,4 +751,4 @@ def test_check_array_memmap(copy):\n     with TempMemmap(X, mmap_mode='r') as X_memmap:\n         X_checked = check_array(X_memmap, copy=copy)\n         assert np.may_share_memory(X_memmap, X_checked) == (not copy)\n-        assert X_checked.flags['WRITEABLE'] == copy\n+        assert X_checked.flags['WRITEABLE'] == copy\n\\ No newline at end of file\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..d35dbe296 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -461,11 +461,33 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # store whether originally we wanted numeric dtype\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == \"numeric\"\n \n-    dtype_orig = getattr(array, \"dtype\", None)\n+    # Get original dtype for dataframes and other array-like objects\n+    if hasattr(array, 'dtypes'):\n+        # pandas dataframe\n+        dtype_orig = array.dtypes.iloc[0]\n+    else:\n+        dtype_orig = getattr(array, \"dtype\", None)\n+\n     if not hasattr(dtype_orig, 'kind'):\n         # not a data type (e.g. a column named dtype in a pandas DataFrame)\n         dtype_orig = None\n \n+    if estimator is not None:\n+        if isinstance(estimator, six.string_types):\n+            estimator_name = estimator\n+        else:\n+            estimator_name = estimator.__class__.__name__\n+    else:\n+        estimator_name = \"Estimator\"\n+    context = \" by %s\" % estimator_name if estimator is not None else \"\"\n+\n+    if warn_on_dtype and dtype_orig is not None and hasattr(array, 'dtypes'):\n+        # For DataFrames, check if conversion will happen\n+        if dtype is None and dtype_numeric and dtype_orig.kind == 'O':\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, np.float64, context))\n+            warnings.warn(msg, DataConversionWarning)\n+\n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n             # if input is object, convert to float.\n@@ -935,4 +957,4 @@ def check_non_negative(X, whom):\n     \"\"\"\n     X = X.data if sp.issparse(X) else X\n     if (X < 0).any():\n-        raise ValueError(\"Negative values in data passed to %s\" % whom)\n+        raise ValueError(\"Negative values in data passed to %s\" % whom)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}