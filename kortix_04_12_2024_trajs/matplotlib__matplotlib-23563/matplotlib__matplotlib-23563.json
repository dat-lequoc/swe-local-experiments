{
  "instance_id": "matplotlib__matplotlib-23563",
  "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..b6f0e8dad0 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,13 +166,35 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n-\n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n-        zs = np.broadcast_to(zs, len(xs))\n-        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        self.set_3d_properties(xs, ys, zs)\n+\n+    def set_3d_properties(self, xs=None, ys=None, zs=None, zdir='z'):\n+        if xs is None or ys is None:\n+            xs = self.get_xdata()\n+            ys = self.get_ydata()\n+        if zs is None:\n+            zs = 0\n+            \n+        def safe_convert(arr):\n+            if isinstance(arr, (str, bytes)):\n+                return 0\n+            try:\n+                return np.asarray(arr, dtype=float)\n+            except (ValueError, TypeError):\n+                if isinstance(arr, np.ndarray) and arr.dtype.kind in {'U', 'S'}:\n+                    return np.zeros_like(arr, dtype=float)\n+                return np.asarray(arr, dtype=float)\n+                \n+        xs = safe_convert(xs)\n+        ys = safe_convert(ys)\n+        zs = safe_convert(zs)\n+        \n+        zs = np.broadcast_to(zs, np.asarray(xs).shape)\n+        \n+        if zdir == 'z':\n+            self._verts3d = xs, ys, zs\n+        else:\n+            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n         self.stale = True\n \n     def set_data_3d(self, *args):\n@@ -211,6 +233,10 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Reinitialize if state is lost\n+            self.set_3d_properties()\n+            \n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n@@ -929,4 +955,4 @@ def _zalpha(colors, zs):\n     norm = Normalize(min(zs), max(zs))\n     sats = 1 - norm(zs) * 0.7\n     rgba = np.broadcast_to(mcolors.to_rgba_array(colors), (len(zs), 4))\n-    return np.column_stack([rgba[:, :3], rgba[:, 3] * sats])\n+    return np.column_stack([rgba[:, :3], rgba[:, 3] * sats])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}