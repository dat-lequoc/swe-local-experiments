{
  "instance_id": "sympy__sympy-18189",
  "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..7c720bd49e 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,32 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n+                # Get base solutions first\n+                base_sols = diophantine(eq, param)\n+                # Create mapping for reordering\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                # Reorder solutions\n+                reordered = {tuple([t[dict_sym_index[i]] for i in var])\n+                            for t in base_sols}\n+                # If permute is True, apply permutations after reordering\n+                if permute:\n+                    final = set()\n+                    for sol in reordered:\n+                        if all(_is_int(s) for s in sol):\n+                            if do_permute_signs:\n+                                final.update(set(permute_signs(sol)))\n+                            elif permute_few_signs:\n+                                lst = list(permute_signs(sol))\n+                                lst = list(filter(lambda x: x[0]*x[1] == sol[1]*sol[0], lst))\n+                                final.update(set(lst))\n+                            elif do_permute_signs_var:\n+                                final.update(set(signed_permutations(sol)))\n+                            else:\n+                                final.add(sol)\n+                        else:\n+                            final.add(sol)\n+                    return final\n+                return reordered\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n@@ -3339,4 +3362,4 @@ def _can_do_sum_of_squares(n, k):\n             return False\n     # every number can be written as a sum of 4 squares; for k > 4 partitions\n     # can be 0\n-    return True\n+    return True\n\\ No newline at end of file\ndiff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex e4e8972ae0..d555c30d5c 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -475,6 +475,14 @@ def test_descent():\n \n \n def test_diophantine():\n+    # Test symbol order independence with permute=True\n+    from sympy.abc import m, n\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    sol1 = diophantine(eq, syms=(m,n), permute=True)\n+    sol2 = diophantine(eq, syms=(n,m), permute=True)\n+    assert len(sol1) == len(sol2)\n+    assert sol1 == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n@@ -947,4 +955,4 @@ def test_ternary_quadratic():\n     assert parametrize_ternary_quadratic(\n         124*x**2 - 30*y**2 - 7729*z**2) == (\n         -1410*p**2 - 363263*q**2, 2700*p**2 + 30916*p*q -\n-        695610*q**2, -60*p**2 + 5400*p*q + 15458*q**2)\n+        695610*q**2, -60*p**2 + 5400*p*q + 15458*q**2)\n\\ No newline at end of file\ndiff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py\nindex 400001e1ce..dcf18f9b40 100644\n--- a/sympy/utilities/pytest.py\n+++ b/sympy/utilities/pytest.py\n@@ -201,7 +201,7 @@ def warns(warningcls, **kwargs):\n \n \n else:\n-    XFAIL = py.test.mark.xfail\n+    XFAIL = pytest.mark.xfail\n     SKIP = py.test.mark.skip\n     slow = py.test.mark.slow\n     nocache_fail = py.test.mark.nocache_fail\n@@ -278,4 +278,4 @@ def ignore_warnings(warningcls):\n     # Reissue any warnings that we aren't testing for\n     for w in warnrec:\n         if not issubclass(w.category, warningcls):\n-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}