{
  "instance_id": "django__django-11742",
  "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex a977256525..0e52bc044f 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -216,6 +216,22 @@ class CharField(Field):\n             self.validators.append(validators.MinLengthValidator(int(min_length)))\n         if max_length is not None:\n             self.validators.append(validators.MaxLengthValidator(int(max_length)))\n+            # Validate max_length against choices if present\n+            choices = kwargs.get('choices', None)\n+            if choices:\n+                choices_to_check = []\n+                for choice in choices:\n+                    if isinstance(choice[1], (list, tuple)):\n+                        # Handle grouped choices\n+                        choices_to_check.extend(choice[1])\n+                    else:\n+                        choices_to_check.append(choice)\n+                max_choice_length = max(len(str(choice[1])) for choice in choices_to_check)\n+                if max_choice_length > max_length:\n+                    raise ValueError(\n+                        f'Field max_length ({max_length}) is too small to fit the '\n+                        f'longest choice value ({max_choice_length} characters)'\n+                    )\n         self.validators.append(validators.ProhibitNullCharactersValidator())\n \n     def to_python(self, value):\n@@ -1199,4 +1215,4 @@ class UUIDField(CharField):\n                 value = uuid.UUID(value)\n             except ValueError:\n                 raise ValidationError(self.error_messages['invalid'], code='invalid')\n-        return value\n+        return value\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}