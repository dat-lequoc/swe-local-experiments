{
  "instance_id": "scikit-learn__scikit-learn-11281",
  "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..b4708ab99 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,10 +13,9 @@ from time import time\n import numpy as np\n \n from .. import cluster\n-from ..base import BaseEstimator\n-from ..base import DensityMixin\n+from ..base import BaseEstimator, DensityMixin, ClusterMixin\n from ..externals import six\n-from ..exceptions import ConvergenceWarning\n+from ..exceptions import ConvergenceWarning, NotFittedError, NotFittedError\n from ..utils import check_array, check_random_state\n from ..utils.fixes import logsumexp\n \n@@ -64,7 +63,7 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, ClusterMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -169,6 +168,40 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         \"\"\"\n         pass\n \n+    @property\n+    def n_clusters(self):\n+        \"\"\"Number of clusters (alias for n_components).\"\"\"\n+        return self.n_components\n+\n+    @property\n+    def labels_(self):\n+        \"\"\"Get cluster labels for training data.\n+        \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        if not hasattr(self, 'means_'):\n+            raise NotFittedError(\"This %s instance is not fitted yet\" % type(self).__name__)\n+        return self._last_labels if hasattr(self, '_last_labels') else None\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict labels for X.\n+        \n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            List of n_features-dimensional data points.\n+            Each row corresponds to a single data point.\n+        \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        return self.fit(X).predict(X)\n+\n     def fit(self, X, y=None):\n         \"\"\"Estimate model parameters with the EM algorithm.\n \n@@ -239,6 +272,9 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        \n+        # Store labels for the training data\n+        self._last_labels = self.predict(X)\n \n         return self\n \n@@ -500,4 +536,4 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n             print(\"Initialization converged: %s\" % self.converged_)\n         elif self.verbose >= 2:\n             print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n-                  (self.converged_, time() - self._init_prev_time, ll))\n+                  (self.converged_, time() - self._init_prev_time, ll))\n\\ No newline at end of file\ndiff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex 08a083abf..e404b3512 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -671,6 +671,30 @@ def test_multiple_init():\n         assert_greater_equal(train2, train1)\n \n \n+def test_gaussian_mixture_clustering_interface():\n+    # Test clustering interface compatibility\n+    rng = np.random.RandomState(0)\n+    n_samples, n_features = 50, 2\n+    X = rng.randn(n_samples, n_features)\n+    \n+    gmm = GaussianMixture(n_components=2, random_state=rng)\n+    \n+    # Test n_clusters property\n+    assert_equal(gmm.n_clusters, 2)\n+    \n+    # Test labels_ property before fit\n+    assert_raise_message(NotFittedError,\n+                        \"This GaussianMixture instance is not fitted yet\",\n+                        lambda: gmm.labels_)\n+    \n+    # Test fit_predict\n+    labels = gmm.fit_predict(X)\n+    assert_equal(labels.shape, (n_samples,))\n+    assert_array_equal(labels, gmm.predict(X))\n+    \n+    # Test labels_ after fit\n+    assert_array_equal(gmm.labels_, labels)\n+\n def test_gaussian_mixture_n_parameters():\n     # Test that the right number of parameters is estimated\n     rng = np.random.RandomState(0)\n@@ -980,4 +1004,4 @@ def test_init():\n     gmm2 = GaussianMixture(n_components=n_components, n_init=100,\n                            max_iter=1, random_state=random_state).fit(X)\n \n-    assert_greater(gmm2.lower_bound_, gmm1.lower_bound_)\n+    assert_greater(gmm2.lower_bound_, gmm1.lower_bound_)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}