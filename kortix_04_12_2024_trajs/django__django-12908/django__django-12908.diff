diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 09a9d73077..a3b0211d8d 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -501,6 +501,41 @@ class SQLCompiler:
                 if not getattr(features, 'supports_select_{}'.format(combinator)):
                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
+                if self.query.distinct or self.query.distinct_fields:
+                    inner_query = ' '.join(result)
+                    result = ['SELECT']
+                    if self.query.distinct_fields:
+                        distinct_fields = []
+                        for field in self.query.distinct_fields:
+                            if '.' in field:
+                                table, col = field.split('.', 1)
+                                distinct_fields.append('subquery.%s' % self.connection.ops.quote_name(col))
+                            else:
+                                distinct_fields.append('subquery.%s' % self.connection.ops.quote_name(field))
+                        
+                        # Handle databases without DISTINCT ON support
+                        if not getattr(self.connection.features, 'supports_distinct_on', False):
+                            result.append('*')
+                            result.append('FROM (%s) subquery' % inner_query)
+                            result.append('GROUP BY %s' % ', '.join(distinct_fields))
+                        else:
+                            result.append('DISTINCT ON (%s)' % ', '.join(distinct_fields))
+                            result.append('*')
+                            result.append('FROM (%s) subquery' % inner_query)
+                    else:
+                        result.append('DISTINCT *')
+                        result.append('FROM (%s) subquery' % inner_query)
+                    
+                    if self.query.order_by:
+                        ordering = []
+                        order_params = []
+                        for _, (o_sql, o_params, _) in self.get_order_by():
+                            ordering.append(o_sql)
+                            order_params.extend(o_params)
+                        if ordering:
+                            result.append('ORDER BY %s' % ', '.join(ordering))
+                            params = tuple(params) + tuple(order_params)
+                    return ' '.join(result), tuple(params)
             else:
                 distinct_fields, distinct_params = self.get_distinct()
                 # This must come after 'select', 'ordering', and 'distinct'
@@ -1588,4 +1623,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
-        cursor.close()
+        cursor.close()
\ No newline at end of file
diff --git a/tests/queries/test_distinct_union.py b/tests/queries/test_distinct_union.py
new file mode 100644
index 0000000000..844922390f
--- /dev/null
+++ b/tests/queries/test_distinct_union.py
@@ -0,0 +1,35 @@
+from django.db import models
+from django.test import TestCase
+from django.db.models import Value, IntegerField
+
+class Sample(models.Model):
+    name = models.CharField(max_length=255)
+    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'queries'
+
+class DistinctUnionTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        from django.contrib.auth.models import User
+        cls.user = User.objects.create_user('testuser')
+        
+        # Create test data
+        Sample.objects.bulk_create([
+            Sample(user=cls.user, name="Sam1"),
+            Sample(user=cls.user, name="Sam2 acid"),
+            Sample(user=cls.user, name="Sam3"),
+            Sample(user=cls.user, name="Sam4 acid"),
+            Sample(user=cls.user, name="Dub"),
+            Sample(user=cls.user, name="Dub"),
+            Sample(user=cls.user, name="Dub"),
+        ])
+
+    def test_union_annotated_diff_distinct(self):
+        qs = Sample.objects.filter(user=self.user)
+        qs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))
+        qs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))
+        qs = qs1.union(qs2)
+        qs = qs.order_by('name').distinct('name')
+        self.assertEqual(qs.count(), 2)
