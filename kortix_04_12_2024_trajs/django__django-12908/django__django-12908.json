{
  "instance_id": "django__django-12908",
  "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 09a9d73077..a3b0211d8d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -501,6 +501,41 @@ class SQLCompiler:\n                 if not getattr(features, 'supports_select_{}'.format(combinator)):\n                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))\n                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)\n+                if self.query.distinct or self.query.distinct_fields:\n+                    inner_query = ' '.join(result)\n+                    result = ['SELECT']\n+                    if self.query.distinct_fields:\n+                        distinct_fields = []\n+                        for field in self.query.distinct_fields:\n+                            if '.' in field:\n+                                table, col = field.split('.', 1)\n+                                distinct_fields.append('subquery.%s' % self.connection.ops.quote_name(col))\n+                            else:\n+                                distinct_fields.append('subquery.%s' % self.connection.ops.quote_name(field))\n+                        \n+                        # Handle databases without DISTINCT ON support\n+                        if not getattr(self.connection.features, 'supports_distinct_on', False):\n+                            result.append('*')\n+                            result.append('FROM (%s) subquery' % inner_query)\n+                            result.append('GROUP BY %s' % ', '.join(distinct_fields))\n+                        else:\n+                            result.append('DISTINCT ON (%s)' % ', '.join(distinct_fields))\n+                            result.append('*')\n+                            result.append('FROM (%s) subquery' % inner_query)\n+                    else:\n+                        result.append('DISTINCT *')\n+                        result.append('FROM (%s) subquery' % inner_query)\n+                    \n+                    if self.query.order_by:\n+                        ordering = []\n+                        order_params = []\n+                        for _, (o_sql, o_params, _) in self.get_order_by():\n+                            ordering.append(o_sql)\n+                            order_params.extend(o_params)\n+                        if ordering:\n+                            result.append('ORDER BY %s' % ', '.join(ordering))\n+                            params = tuple(params) + tuple(order_params)\n+                    return ' '.join(result), tuple(params)\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 # This must come after 'select', 'ordering', and 'distinct'\n@@ -1588,4 +1623,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):\n         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):\n             yield rows if col_count is None else [r[:col_count] for r in rows]\n     finally:\n-        cursor.close()\n+        cursor.close()\n\\ No newline at end of file\ndiff --git a/tests/queries/test_distinct_union.py b/tests/queries/test_distinct_union.py\nnew file mode 100644\nindex 0000000000..844922390f\n--- /dev/null\n+++ b/tests/queries/test_distinct_union.py\n@@ -0,0 +1,35 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Value, IntegerField\n+\n+class Sample(models.Model):\n+    name = models.CharField(max_length=255)\n+    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = 'queries'\n+\n+class DistinctUnionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        from django.contrib.auth.models import User\n+        cls.user = User.objects.create_user('testuser')\n+        \n+        # Create test data\n+        Sample.objects.bulk_create([\n+            Sample(user=cls.user, name=\"Sam1\"),\n+            Sample(user=cls.user, name=\"Sam2 acid\"),\n+            Sample(user=cls.user, name=\"Sam3\"),\n+            Sample(user=cls.user, name=\"Sam4 acid\"),\n+            Sample(user=cls.user, name=\"Dub\"),\n+            Sample(user=cls.user, name=\"Dub\"),\n+            Sample(user=cls.user, name=\"Dub\"),\n+        ])\n+\n+    def test_union_annotated_diff_distinct(self):\n+        qs = Sample.objects.filter(user=self.user)\n+        qs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))\n+        qs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))\n+        qs = qs1.union(qs2)\n+        qs = qs.order_by('name').distinct('name')\n+        self.assertEqual(qs.count(), 2)\n",
  "model_name_or_path": "KortixAI"
}