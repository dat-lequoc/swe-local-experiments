{
  "instance_id": "scikit-learn__scikit-learn-10508",
  "model_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 61b8d4a21..2d72b0300 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -126,6 +126,9 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         \"\"\"\n         check_is_fitted(self, 'classes_')\n         y = column_or_1d(y, warn=True)\n+        \n+        if len(y) == 0:\n+            return np.array([], dtype=np.int64)\n \n         classes = np.unique(y)\n         if len(np.intersect1d(classes, self.classes_)) < len(classes):\n@@ -827,4 +830,4 @@ class MultiLabelBinarizer(BaseEstimator, TransformerMixin):\n                 raise ValueError('Expected only 0s and 1s in label indicator. '\n                                  'Also got {0}'.format(unexpected))\n             return [tuple(self.classes_.compress(indicators)) for indicators\n-                    in yt]\n+                    in yt]\n\\ No newline at end of file\ndiff --git a/sklearn/preprocessing/tests/test_label.py b/sklearn/preprocessing/tests/test_label.py\nindex 4f64fc6b4..b12ca424e 100644\n--- a/sklearn/preprocessing/tests/test_label.py\n+++ b/sklearn/preprocessing/tests/test_label.py\n@@ -198,9 +198,16 @@ def test_label_encoder_fit_transform():\n def test_label_encoder_errors():\n     # Check that invalid arguments yield ValueError\n     le = LabelEncoder()\n-    assert_raises(ValueError, le.transform, [])\n     assert_raises(ValueError, le.inverse_transform, [])\n \n+def test_label_encoder_empty_array():\n+    # Test empty array handling\n+    le = LabelEncoder()\n+    le.fit([1, 2, 3])\n+    assert_array_equal(le.transform([]), np.array([], dtype=np.int64))\n+    le.fit([\"a\", \"b\", \"c\"])\n+    assert_array_equal(le.transform([]), np.array([], dtype=np.int64))\n+\n     # Fail on unseen labels\n     le = LabelEncoder()\n     le.fit([1, 2, 3, -1, 1])\n@@ -512,4 +519,4 @@ def test_inverse_binarize_multiclass():\n                                                    [-1, 0, -1],\n                                                    [0, 0, 0]]),\n                                        np.arange(3))\n-    assert_array_equal(got, np.array([1, 1, 0]))\n+    assert_array_equal(got, np.array([1, 1, 0]))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}