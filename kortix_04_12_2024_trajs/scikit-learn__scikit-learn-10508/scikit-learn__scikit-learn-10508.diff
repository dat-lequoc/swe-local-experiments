diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py
index 61b8d4a21..2d72b0300 100644
--- a/sklearn/preprocessing/label.py
+++ b/sklearn/preprocessing/label.py
@@ -126,6 +126,9 @@ class LabelEncoder(BaseEstimator, TransformerMixin):
         """
         check_is_fitted(self, 'classes_')
         y = column_or_1d(y, warn=True)
+        
+        if len(y) == 0:
+            return np.array([], dtype=np.int64)
 
         classes = np.unique(y)
         if len(np.intersect1d(classes, self.classes_)) < len(classes):
@@ -827,4 +830,4 @@ class MultiLabelBinarizer(BaseEstimator, TransformerMixin):
                 raise ValueError('Expected only 0s and 1s in label indicator. '
                                  'Also got {0}'.format(unexpected))
             return [tuple(self.classes_.compress(indicators)) for indicators
-                    in yt]
+                    in yt]
\ No newline at end of file
diff --git a/sklearn/preprocessing/tests/test_label.py b/sklearn/preprocessing/tests/test_label.py
index 4f64fc6b4..b12ca424e 100644
--- a/sklearn/preprocessing/tests/test_label.py
+++ b/sklearn/preprocessing/tests/test_label.py
@@ -198,9 +198,16 @@ def test_label_encoder_fit_transform():
 def test_label_encoder_errors():
     # Check that invalid arguments yield ValueError
     le = LabelEncoder()
-    assert_raises(ValueError, le.transform, [])
     assert_raises(ValueError, le.inverse_transform, [])
 
+def test_label_encoder_empty_array():
+    # Test empty array handling
+    le = LabelEncoder()
+    le.fit([1, 2, 3])
+    assert_array_equal(le.transform([]), np.array([], dtype=np.int64))
+    le.fit(["a", "b", "c"])
+    assert_array_equal(le.transform([]), np.array([], dtype=np.int64))
+
     # Fail on unseen labels
     le = LabelEncoder()
     le.fit([1, 2, 3, -1, 1])
@@ -512,4 +519,4 @@ def test_inverse_binarize_multiclass():
                                                    [-1, 0, -1],
                                                    [0, 0, 0]]),
                                        np.arange(3))
-    assert_array_equal(got, np.array([1, 1, 0]))
+    assert_array_equal(got, np.array([1, 1, 0]))
\ No newline at end of file
