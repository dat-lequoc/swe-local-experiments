diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..5b849c359 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1087,6 +1087,8 @@ class _RepeatedSplits(metaclass=ABCMeta):
         Constructor parameters for cv. Must not contain random_state
         and shuffle.
     """
+    def __repr__(self):
+        return _build_repr(self)
     def __init__(self, cv, n_repeats=10, random_state=None, **cvargs):
         if not isinstance(n_repeats, numbers.Integral):
             raise ValueError("Number of repetitions must be of Integral type.")
@@ -2165,4 +2167,4 @@ def _build_repr(self):
             warnings.filters.pop(0)
         params[key] = value
 
-    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))
+    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))
\ No newline at end of file
diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py
index a38fb435c..67208cc50 100644
--- a/sklearn/model_selection/tests/test_split.py
+++ b/sklearn/model_selection/tests/test_split.py
@@ -573,6 +573,18 @@ def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372
     assert mean_score > 0.80
 
 
+def test_repeated_cv_repr():
+    # Test that repr works for repeated cross validators
+    n_splits = 5
+    n_repeats = 3
+    random_state = 42
+    rkf = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)
+    rskf = RepeatedStratifiedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)
+    
+    # Check the repr strings
+    assert repr(rkf) == f'RepeatedKFold(n_splits={n_splits}, n_repeats={n_repeats}, random_state={random_state})'
+    assert repr(rskf) == f'RepeatedStratifiedKFold(n_splits={n_splits}, n_repeats={n_repeats}, random_state={random_state})'
+
 def test_shuffle_split():
     ss1 = ShuffleSplit(test_size=0.2, random_state=0).split(X)
     ss2 = ShuffleSplit(test_size=2, random_state=0).split(X)
@@ -1570,4 +1582,4 @@ def test_leave_p_out_empty_trainset():
     with pytest.raises(
             ValueError,
             match='p=2 must be strictly less than the number of samples=2'):
-        next(cv.split(X, y, groups=[1, 2]))
+        next(cv.split(X, y, groups=[1, 2]))
\ No newline at end of file
