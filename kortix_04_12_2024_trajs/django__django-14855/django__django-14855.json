{
  "instance_id": "django__django-14855",
  "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..445b640769 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name if self.model_admin else None\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n@@ -438,4 +442,4 @@ class AdminErrorList(forms.utils.ErrorList):\n             for inline_formset in inline_formsets:\n                 self.extend(inline_formset.non_form_errors())\n                 for errors_in_inline_form in inline_formset.errors:\n-                    self.extend(errors_in_inline_form.values())\n+                    self.extend(errors_in_inline_form.values())\n\\ No newline at end of file\ndiff --git a/tests/admin_views/test_readonly.py b/tests/admin_views/test_readonly.py\nnew file mode 100644\nindex 0000000000..9ebc3cc1dc\n--- /dev/null\n+++ b/tests/admin_views/test_readonly.py\n@@ -0,0 +1,106 @@\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory, override_settings\n+from django.urls import reverse, path, include\n+from django.contrib.auth.models import User\n+from django.test.client import Client\n+\n+from .models import Article, Section\n+from .admin import ArticleAdmin, site as custom_site\n+\n+urlpatterns = [\n+    path('custom_admin/', custom_site.urls),\n+]\n+\n+class CustomAdminSiteReadOnlyTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.section = Section.objects.create(name='Test section')\n+        cls.article = Article.objects.create(\n+            content='<p>Content</p>',\n+            date='2023-01-01',\n+            section=cls.section,\n+            title='Test Article'\n+        )\n+        \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super',\n+            password='secret',\n+            email='super@example.com'\n+        )\n+\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.custom_admin = custom_site\n+        self.custom_admin.name = 'custom_admin'\n+        self.custom_admin._registry[Article] = ArticleAdmin(Article, self.custom_admin)\n+        self.client = Client()\n+        self.client.force_login(self.superuser)</old_string>\n+</replacement>\n+<replacement>\n+<old_string>    def test_readonly_foreign_key_url(self):\n+        \"\"\"\n+        Test that readonly foreign key fields generate correct URLs in custom admin sites.\n+        \"\"\"\n+        # Create a custom ArticleAdmin with section as readonly\n+        class CustomArticleAdmin(ArticleAdmin):\n+            readonly_fields = ('section',)\n+        \n+        # Register with custom admin site\n+        self.custom_admin._registry[Article] = CustomArticleAdmin(Article, self.custom_admin)\n+        \n+        # Get the change form URL\n+        url = reverse('custom_admin:admin_views_article_change', \n+                     args=[self.article.pk])\n+        \n+        # Create superuser and log in\n+        superuser = self._create_superuser('super', 'secret', 'super@example.com')\n+        self.client.force_login(superuser)\n+        \n+        # Get the change form\n+        response = self.client.get(url)\n+        \n+        # Check that the response contains the correct admin URL\n+        expected_url = reverse('custom_admin:admin_views_section_change',\n+                             args=[self.section.pk])\n+        self.assertContains(response, expected_url)\n+        self.assertNotContains(response, \n+                             reverse('admin:admin_views_section_change',\n+                                   args=[self.section.pk]))</old_string>\n+<new_string>    @override_settings(ROOT_URLCONF=__name__)\n+    @override_settings(ROOT_URLCONF=__name__)\n+    def test_readonly_foreign_key_url(self):\n+        \"\"\"\n+        Test that readonly foreign key fields generate correct URLs in custom admin sites.\n+        \"\"\"\n+        # Create test data\n+        section = Section.objects.create(name='Test section')\n+        article = Article.objects.create(\n+            content='<p>Content</p>',\n+            date='2023-01-01',\n+            section=section,\n+            title='Test Article'\n+        )\n+\n+        # Create a custom ArticleAdmin with section as readonly\n+        class CustomArticleAdmin(ArticleAdmin):\n+            readonly_fields = ('section',)\n+        \n+        # Register with custom admin site\n+        self.custom_admin._registry[Article] = CustomArticleAdmin(Article, self.custom_admin)\n+        \n+        # Get the change form URL\n+        url = reverse('custom_admin:admin_views_article_change', \n+                     args=[article.pk])\n+        \n+        # Get the change form\n+        response = self.client.get(url)\n+        \n+        # Check that the response contains the correct admin URL\n+        expected_url = reverse('custom_admin:admin_views_section_change',\n+                             args=[section.pk])\n+        self.assertContains(response, expected_url)\n+        self.assertNotContains(response, \n+                             reverse('admin:admin_views_section_change',\n+                                   args=[section.pk]))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}