{
  "instance_id": "scikit-learn__scikit-learn-13584",
  "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 167baaf2b..0de550adf 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -10,6 +10,7 @@ import platform\n import inspect\n \n import numpy as np\n+from ._config import config_context\n \n from . import __version__\n from sklearn.utils import _IS_32BIT\n@@ -68,7 +69,9 @@ def clone(estimator, safe=True):\n     for name in new_object_params:\n         param1 = new_object_params[name]\n         param2 = params_set[name]\n-        if param1 is not param2:\n+        if ((isinstance(param1, np.ndarray) and isinstance(param2, np.ndarray) and\n+             not np.array_equal(param1, param2)) or\n+            (not isinstance(param1, np.ndarray) and param1 is not param2)):\n             raise RuntimeError('Cannot clone object %s, as the constructor '\n                                'either does not set or modifies parameter %s' %\n                                (estimator, name))\n@@ -239,8 +242,25 @@ class BaseEstimator:\n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n \n+        def array_repr(arr):\n+            # Helper function to properly represent numpy arrays\n+            return f\"array({np.array2string(arr, separator=', ')})\"\n+\n+        class ArrayAwarePrettyPrinter(_EstimatorPrettyPrinter):\n+            def _format_array_or_default(self, val, default):\n+                if isinstance(val, np.ndarray) and isinstance(default, np.ndarray):\n+                    return not np.array_equal(val, default)\n+                elif isinstance(val, np.ndarray) or isinstance(default, np.ndarray):\n+                    return True\n+                return val != default\n+\n+            def _repr_array(self, arr):\n+                if isinstance(arr, np.ndarray):\n+                    return f\"array({np.array2string(arr, separator=', ')})\"\n+                return repr(arr)\n+\n         # use ellipsis for sequences with a lot of elements\n-        pp = _EstimatorPrettyPrinter(\n+        pp = ArrayAwarePrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n             n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n \n@@ -632,4 +652,4 @@ def is_outlier_detector(estimator):\n     out : bool\n         True if estimator is an outlier detector and False otherwise.\n     \"\"\"\n-    return getattr(estimator, \"_estimator_type\", None) == \"outlier_detector\"\n+    return getattr(estimator, \"_estimator_type\", None) == \"outlier_detector\"\n\\ No newline at end of file\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 316b01ff3..9defbd14a 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -14,6 +14,7 @@ from sklearn.utils.testing import assert_no_warnings\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import assert_dict_equal\n from sklearn.utils.testing import ignore_warnings\n+from sklearn._config import config_context\n \n from sklearn.base import BaseEstimator, clone, is_classifier\n from sklearn.svm import SVC\n@@ -172,6 +173,15 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+def test_clone_numpy_array_params():\n+    # Test that clone works correctly with numpy array parameters\n+    from sklearn.linear_model import LogisticRegressionCV\n+    import numpy as np\n+    clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    clf2 = clone(clf)\n+    assert np.array_equal(clf.Cs, clf2.Cs)\n+    assert clf.Cs is not clf2.Cs\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n@@ -206,6 +216,14 @@ def test_repr():\n \n     some_est = T(a=[\"long_params\"] * 1000)\n     assert_equal(len(repr(some_est)), 495)\n+    \n+    # Test numpy array parameter representation\n+    from sklearn.linear_model import LogisticRegressionCV\n+    import numpy as np\n+    with config_context(print_changed_only=True):\n+        clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+        repr_str = repr(clf)\n+        assert 'Cs=array([0.1, 1. ])' in repr_str\n \n \n def test_str():\n@@ -508,4 +526,4 @@ def test_regressormixin_score_multioutput():\n            \"custom scorer with 'metrics.make_scorer' (the \"\n            \"built-in scorer 'r2' uses \"\n            \"multioutput='uniform_average').\")\n-    assert_warns_message(FutureWarning, msg, reg.score, X, y)\n+    assert_warns_message(FutureWarning, msg, reg.score, X, y)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}