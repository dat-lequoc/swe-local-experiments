{
  "instance_id": "django__django-15213",
  "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..b34a3dd312 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -963,6 +963,27 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n \n+    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n+        \"\"\"\n+        Resolve expression handling special case of negated empty IN clauses.\n+        Use explicit integer values with BooleanField output.\n+        \"\"\"\n+        if isinstance(self.expression, Q):\n+            if len(self.expression.children) == 1:\n+                child = self.expression.children[0]\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    lookup, value = child\n+                    if lookup.endswith('__in') and value == []:\n+                        # Use explicit integer Value with BooleanField output\n+                        return Value(1 if self.expression.negated else 0, \n+                                   output_field=fields.BooleanField())\n+\n+        if isinstance(self.expression, Expression):\n+            expression = self.expression.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+            expression.output_field = self.output_field\n+            return expression\n+        return super().resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+\n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n \n@@ -1482,4 +1503,4 @@ class ValueRange(WindowFrame):\n     frame_type = 'RANGE'\n \n     def window_frame_start_end(self, connection, start, end):\n-        return connection.ops.window_frame_range_start_end(start, end)\n+        return connection.ops.window_frame_range_start_end(start, end)\n\\ No newline at end of file\ndiff --git a/tests/expressions/test_expressions.py b/tests/expressions/test_expressions.py\nnew file mode 100644\nindex 0000000000..cedb844dc9\n--- /dev/null\n+++ b/tests/expressions/test_expressions.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.db.models import BooleanField, ExpressionWrapper, Q\n+from django.test import TestCase\n+\n+class ExpressionWrapperTests(TestCase):\n+    def test_negated_q_empty_in(self):\n+        \"\"\"\n+        Test that ExpressionWrapper correctly handles negated Q objects with empty IN clauses.\n+        \"\"\"\n+        class DummyModel(models.Model):\n+            class Meta:\n+                app_label = 'expressions'\n+\n+        qs = DummyModel.objects.all()\n+        \n+        # Test non-negated empty IN\n+        expr = ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n+        qs = qs.annotate(foo=expr)\n+        sql = str(qs.values('foo').query)\n+        self.assertIn('0', sql.upper())\n+        \n+        # Test negated empty IN\n+        expr = ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        qs = qs.annotate(foo=expr)\n+        sql = str(qs.values('foo').query)\n+        self.assertIn('1', sql.upper())\n",
  "model_name_or_path": "KortixAI"
}