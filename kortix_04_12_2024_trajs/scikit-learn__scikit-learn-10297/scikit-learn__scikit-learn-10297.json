{
  "instance_id": "scikit-learn__scikit-learn-10297",
  "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..c64d1ae3f 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n@@ -1378,4 +1379,4 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n \n     @property\n     def classes_(self):\n-        return self._label_binarizer.classes_\n+        return self._label_binarizer.classes_\n\\ No newline at end of file\ndiff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex ee44da5d5..064c722dc 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -800,6 +800,14 @@ def test_ridge_classifier_no_support_multilabel():\n     X, y = make_multilabel_classification(n_samples=10, random_state=0)\n     assert_raises(ValueError, RidgeClassifier().fit, X, y)\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test store_cv_values on RidgeClassifierCV\n+    clf = RidgeClassifierCV(store_cv_values=True, cv=None)\n+    clf.fit(X_iris[:100], y_iris[:100])\n+    assert_true(hasattr(clf, 'cv_values_'))\n+    assert_equal(clf.cv_values_.shape[0], 100)  # n_samples\n+    assert_equal(clf.cv_values_.shape[2], len(clf.alphas))  # n_alphas\n+\n \n def test_dtype_match():\n     rng = np.random.RandomState(0)\n@@ -859,4 +867,4 @@ def test_dtype_match_cholesky():\n     assert coef_64.dtype == X_64.dtype\n     assert ridge_32.predict(X_32).dtype == X_32.dtype\n     assert ridge_64.predict(X_64).dtype == X_64.dtype\n-    assert_almost_equal(ridge_32.coef_, ridge_64.coef_, decimal=5)\n+    assert_almost_equal(ridge_32.coef_, ridge_64.coef_, decimal=5)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}