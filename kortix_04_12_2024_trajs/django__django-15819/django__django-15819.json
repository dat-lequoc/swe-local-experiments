{
  "instance_id": "django__django-15819",
  "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..201464b63a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -55,6 +55,7 @@ class Command(BaseCommand):\n         connection = connections[options[\"database\"]]\n         # 'table_name_filter' is a stealth option\n         table_name_filter = options.get(\"table_name_filter\")\n+        self.relation_counts = {}\n \n         def table2model(table_name):\n             return re.sub(r\"[^a-zA-Z0-9]\", \"\", table_name.title())\n@@ -170,13 +171,22 @@ class Command(BaseCommand):\n                             rel_type = \"OneToOneField\"\n                         else:\n                             rel_type = \"ForeignKey\"\n-                            ref_pk_column = (\n-                                connection.introspection.get_primary_key_column(\n-                                    cursor, ref_db_table\n-                                )\n+                        \n+                        # Track relations to handle related_name\n+                        rel_key = (ref_db_table, table_name)\n+                        self.relation_counts[rel_key] = self.relation_counts.get(rel_key, 0) + 1\n+                        if self.relation_counts[rel_key] > 1:\n+                            extra_params[\"related_name\"] = \"%s_%s_set\" % (\n+                                table2model(table_name).lower(),\n+                                att_name,\n                             )\n-                            if ref_pk_column and ref_pk_column != ref_db_column:\n-                                extra_params[\"to_field\"] = ref_db_column\n+                        ref_pk_column = (\n+                            connection.introspection.get_primary_key_column(\n+                                cursor, ref_db_table\n+                            )\n+                        )\n+                        if ref_pk_column and ref_pk_column != ref_db_column:\n+                            extra_params[\"to_field\"] = ref_db_column\n                         rel_to = (\n                             \"self\"\n                             if ref_db_table == table_name\n@@ -383,4 +393,4 @@ class Command(BaseCommand):\n         if unique_together:\n             tup = \"(\" + \", \".join(unique_together) + \",)\"\n             meta += [\"        unique_together = %s\" % tup]\n-        return meta\n+        return meta\n\\ No newline at end of file\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 9bf3c432e5..ced82deb2e 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -71,6 +71,17 @@ class InspectDBTestCase(TestCase):\n \n         return assertFieldType\n \n+    def test_related_name_generation(self):\n+        \"\"\"\n+        Test that inspectdb generates related_name for multiple foreign keys\n+        to the same model.\n+        \"\"\"\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_message\", stdout=out)\n+        output = out.getvalue()\n+        # Check that related_name is added for the foreign key\n+        self.assertIn(\"related_name='inspectdbmessage_from_field_set'\", output)\n+\n     def test_field_types(self):\n         \"\"\"Test introspection of various Django field types\"\"\"\n         assertFieldType = self.make_field_type_asserter()\n@@ -614,4 +625,4 @@ class InspectDBTransactionalTests(TransactionTestCase):\n             )\n         finally:\n             with connection.cursor() as cursor:\n-                cursor.execute(\"DROP TABLE %s\" % table_name)\n+                cursor.execute(\"DROP TABLE %s\" % table_name)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}