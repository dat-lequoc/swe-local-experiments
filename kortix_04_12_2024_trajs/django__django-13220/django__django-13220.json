{
  "instance_id": "django__django-13220",
  "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..0f48743d18 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -98,6 +98,50 @@ NON_FIELD_ERRORS = '__all__'\n \n class ValidationError(Exception):\n     \"\"\"An error while validating data.\"\"\"\n+\n+    def __eq__(self, other):\n+        \"\"\"\n+        Compare two ValidationErrors for equality.\n+        \n+        ValidationErrors are considered equal if they have the same:\n+        - message, code, and params for simple errors\n+        - error lists with the same errors in any order\n+        - error dictionaries with the same errors in any order\n+        \"\"\"\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._compare_error_dicts(other)\n+        elif hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return self._compare_error_lists(other)\n+        else:\n+            return (self.message == other.message and \n+                   self.code == other.code and \n+                   self.params == other.params)\n+\n+    def _compare_error_lists(self, other):\n+        \"\"\"Compare two error lists, ignoring the order of errors.\"\"\"\n+        return set(self._normalize_error(e) for e in self.error_list) == \\\n+               set(self._normalize_error(e) for e in other.error_list)\n+\n+    def _compare_error_dicts(self, other):\n+        \"\"\"Compare two error dictionaries, ignoring the order of errors in each field.\"\"\"\n+        return self._normalize_error_dict(self.error_dict) == \\\n+               self._normalize_error_dict(other.error_dict)\n+\n+    def _normalize_error(self, error):\n+        \"\"\"Convert an error into a comparable tuple format.\"\"\"\n+        return (str(error.message), error.code, \n+                tuple(sorted(error.params.items())) if error.params else None)\n+\n+    def _normalize_error_dict(self, error_dict):\n+        \"\"\"Convert an error dictionary into a comparable format.\"\"\"\n+        return {\n+            field: set(self._normalize_error(e) for e in errors)\n+            for field, errors in sorted(error_dict.items())\n+        }\n+\n     def __init__(self, message, code=None, params=None):\n         \"\"\"\n         The `message` argument can be a single error, a list of errors, or a\n@@ -190,4 +234,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n\\ No newline at end of file\ndiff --git a/tests/validation/test_validation_error.py b/tests/validation/test_validation_error.py\nnew file mode 100644\nindex 0000000000..4768dea1ee\n--- /dev/null\n+++ b/tests/validation/test_validation_error.py\n@@ -0,0 +1,39 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+\n+\n+class ValidationErrorEqualityTests(SimpleTestCase):\n+    def test_equal_single_message(self):\n+        e1 = ValidationError('Error')\n+        e2 = ValidationError('Error')\n+        self.assertEqual(e1, e2)\n+        \n+    def test_equal_with_code_and_params(self):\n+        e1 = ValidationError('Error %(param)s', code='invalid', params={'param': 'value'})\n+        e2 = ValidationError('Error %(param)s', code='invalid', params={'param': 'value'})\n+        self.assertEqual(e1, e2)\n+        \n+    def test_equal_lists_different_order(self):\n+        e1 = ValidationError(['Error 1', 'Error 2'])\n+        e2 = ValidationError(['Error 2', 'Error 1'])\n+        self.assertEqual(e1, e2)\n+        \n+    def test_equal_dicts_different_order(self):\n+        e1 = ValidationError({'field1': ['Error 1', 'Error 2'], 'field2': ['Error 3']})\n+        e2 = ValidationError({'field2': ['Error 3'], 'field1': ['Error 2', 'Error 1']})\n+        self.assertEqual(e1, e2)\n+\n+    def test_not_equal_different_messages(self):\n+        e1 = ValidationError('Error 1')\n+        e2 = ValidationError('Error 2')\n+        self.assertNotEqual(e1, e2)\n+\n+    def test_not_equal_different_codes(self):\n+        e1 = ValidationError('Error', code='code1')\n+        e2 = ValidationError('Error', code='code2')\n+        self.assertNotEqual(e1, e2)\n+\n+    def test_not_equal_different_params(self):\n+        e1 = ValidationError('Error %(param)s', params={'param': 'value1'})\n+        e2 = ValidationError('Error %(param)s', params={'param': 'value2'})\n+        self.assertNotEqual(e1, e2)\n",
  "model_name_or_path": "KortixAI"
}