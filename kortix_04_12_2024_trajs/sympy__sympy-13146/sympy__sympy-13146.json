{
  "instance_id": "sympy__sympy-13146",
  "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 82bc545f33..0169a9bbdc 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -1558,8 +1558,113 @@ def _eval_difference_delta(self, n, step):\n             new_e = e.subs(n, n + step)\n             return (b**(new_e - e) - 1) * self\n \n+    def _eval_simplify(self, ratio=1.7, measure=None):\n+        from sympy.simplify.simplify import simplify\n+        from sympy import Float, nsimplify, S, Rational\n+\n+        b, e = self.as_base_exp()\n+        b = simplify(b, ratio=ratio, measure=measure)\n+        e = simplify(e, ratio=ratio, measure=measure)\n+\n+        def effectively_equal(a, b, tol=1e-14):\n+            try:\n+                if a.is_Float or b.is_Float:\n+                    return abs(float(a) - float(b)) < tol\n+                return a == b\n+            except (TypeError, ValueError):\n+                return False\n+\n+        def normalize_exponent(exp):\n+            if exp.is_Float:\n+                # Handle zero and near-zero exponents\n+                if abs(float(exp)) < 1e-14:\n+                    return S.Zero\n+                \n+                # Try converting to rational first\n+                exp_rational = nsimplify(exp, rational=True)\n+                if exp_rational != exp:\n+                    return exp_rational\n+                \n+                # Check if it's effectively an integer\n+                exp_int = int(round(float(exp)))\n+                if abs(float(exp) - exp_int) < 1e-14:\n+                    return S(exp_int)\n+                \n+                # For non-integer floats, try to convert to rational\n+                return Rational(str(exp))\n+            return exp\n+\n+        # Special case for float vs integer exponents\n+        if (e.is_Float or self.exp.is_Float):\n+            # Convert both to float for comparison\n+            try:\n+                float_e = float(e)\n+                float_orig = float(self.exp)\n+                if effectively_equal(float_e, float_orig):\n+                    # If bases are equal or effectively equal\n+                    if self.base == b or effectively_equal(float(self.base), float(b)):\n+                        # Choose the simpler form\n+                        exp = e if e.is_integer else (self.exp if self.exp.is_integer else \n+                               (e if e.is_rational else self.exp))\n+                        base = b if b.is_integer else (self.base if self.base.is_integer else\n+                               (b if b.is_rational else self.base))\n+                        return self.func(base, exp)\n+            except (TypeError, ValueError):\n+                pass\n+\n+        # Normalize exponents\n+        e = normalize_exponent(e)\n+        orig_exp = normalize_exponent(self.exp)\n+\n+        # Handle base comparisons\n+        if hasattr(self.base, 'is_Float') and hasattr(b, 'is_Float'):\n+            try:\n+                if effectively_equal(self.base, b):\n+                    b = self.base\n+            except (TypeError, ValueError):\n+                pass\n+\n+        # Compare normalized exponents\n+        try:\n+            if (b == self.base or effectively_equal(float(b), float(self.base))) and effectively_equal(e, orig_exp):\n+                # Prefer integer exponents\n+                if orig_exp.is_integer:\n+                    return self.func(b, orig_exp)\n+                if e.is_integer:\n+                    return self.func(b, e)\n+                # Prefer rational over float\n+                if e.is_rational and not orig_exp.is_rational:\n+                    return self.func(b, e)\n+                if orig_exp.is_rational and not e.is_rational:\n+                    return self.func(b, orig_exp)\n+                # If both are floats, prefer simpler representation\n+                if e.is_Float and orig_exp.is_Float:\n+                    if len(str(e)) <= len(str(orig_exp)):\n+                        return self.func(b, e)\n+                    return self.func(b, orig_exp)\n+        except (TypeError, ValueError):\n+            pass\n+\n+        # Try to convert base to exact rational if it's a float\n+        if b.is_Float:\n+            try:\n+                b_rational = nsimplify(b, rational=True)\n+                if b_rational != b:\n+                    return self.func(b_rational, e)\n+            except (TypeError, ValueError):\n+                pass\n+\n+        # Special case for float vs integer exponents in subtraction\n+        if self.base == b and (e.is_Float or orig_exp.is_Float):\n+            try:\n+                if effectively_equal(float(e), float(orig_exp)):\n+                    return self.func(b, orig_exp if orig_exp.is_integer else e)\n+            except (TypeError, ValueError):\n+                pass\n+\n+        return self.func(b, e)\n \n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}