{
  "instance_id": "django__django-14667",
  "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 71a52fb754..f2962aeeec 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,7 +1221,15 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            if clone.query.deferred_loading[1]:  # If in only() mode\n+                only_fields = clone.query.deferred_loading[0]\n+                # Remove the deferred fields from the positive set\n+                only_fields.difference_update(fields)\n+                # Ensure PK is always included\n+                only_fields.add(self.model._meta.pk.attname)\n+                clone.query.deferred_loading = (only_fields, True)\n+            else:\n+                clone.query.add_deferred_loading(fields)\n         return clone\n \n     def only(self, *fields):\n@@ -2040,4 +2048,4 @@ def get_related_populators(klass_info, select, db):\n     for rel_klass_info in related_klass_infos:\n         rel_cls = RelatedPopulator(rel_klass_info, select, db)\n         iterators.append(rel_cls)\n-    return iterators\n+    return iterators\n\\ No newline at end of file\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex fa87e7859c..2d338e5051 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -248,6 +248,20 @@ class Queries1Tests(TestCase):\n     def test_ticket7323(self):\n         self.assertEqual(Item.objects.values('creator', 'name').count(), 4)\n \n+    def test_defer_only_chain(self):\n+        # Test that defer() properly handles fields after only()\n+        qs = Note.objects.only('note').defer('note')\n+        self.assertEqual(list(qs.values_list('id', flat=True)), [1, 2, 3])\n+        \n+        # Test multiple defer after only\n+        qs = Note.objects.only('note', 'misc').defer('note').defer('misc')\n+        self.assertEqual(list(qs.values_list('id', flat=True)), [1, 2, 3])\n+        \n+        # Test that defer after only with other fields works correctly\n+        qs = Note.objects.only('note', 'misc').defer('note')\n+        self.assertEqual(set(qs.values_list('misc', flat=True)), {'foo', 'bar'})\n+\n+\n     def test_ticket2253(self):\n         q1 = Item.objects.order_by('name')\n         q2 = Item.objects.filter(id=self.i1.id)\n@@ -3980,4 +3994,4 @@ class Ticket23622Tests(TestCase):\n             set(Ticket23605A.objects.filter(qx).values_list('pk', flat=True)),\n             set(Ticket23605A.objects.filter(qy).values_list('pk', flat=True))\n         )\n-        self.assertSequenceEqual(Ticket23605A.objects.filter(qx), [a2])\n+        self.assertSequenceEqual(Ticket23605A.objects.filter(qx), [a2])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}