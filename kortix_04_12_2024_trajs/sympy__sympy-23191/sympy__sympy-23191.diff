diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 66461181d0..f917d7af87 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1095,8 +1095,19 @@ def _print_TransferFunctionMatrix(self, expr):
     def _print_BasisDependent(self, expr):
         from sympy.vector import Vector
 
-        if not self._use_unicode:
-            raise NotImplementedError("ASCII pretty printing of BasisDependent is not implemented")
+        if isinstance(expr, Vector):
+            # For ASCII mode, use simple representation
+            if not self._use_unicode:
+                components = []
+                for system, vect in expr.separate().items():
+                    for k, v in vect.components.items():
+                        if v == 1:
+                            components.append(str(k))
+                        elif v == -1:
+                            components.append("-" + str(k))
+                        else:
+                            components.append("(%s)*%s" % (v, k))
+                return prettyForm(" + ".join(components))
 
         if expr == expr.zero:
             return prettyForm(expr.zero._pretty_form)
@@ -1944,6 +1955,7 @@ def pretty_negative(pform, index):
 
     def _print_Mul(self, product):
         from sympy.physics.units import Quantity
+        from sympy.vector import BaseVector
 
         # Check for unevaluated Mul. In this case we need to make sure the
         # identities are visible, multiple Rational factors are not combined
@@ -1963,6 +1975,28 @@ def _print_Mul(self, product):
                 obj = prettyForm('-' + obj.s, obj.baseline, obj.binding)
             return obj
 
+        # Special handling for vector multiplication
+        if any(isinstance(arg, BaseVector) for arg in args):
+            # Find vector and scalar terms
+            vec_term = None
+            scalar_terms = []
+            for arg in args:
+                if isinstance(arg, BaseVector):
+                    vec_term = arg
+                else:
+                    scalar_terms.append(arg)
+            
+            # Print scalar part first
+            if scalar_terms:
+                scalar_pform = self._print(Mul(*scalar_terms))
+                if vec_term:
+                    # Combine with vector term
+                    vec_pform = self._print(vec_term)
+                    return prettyForm.__mul__(scalar_pform, vec_pform)
+            
+            # Only vector term
+            return self._print(vec_term)
+
         a = []  # items in the numerator
         b = []  # items that are in the denominator (if any)
 
@@ -2919,4 +2953,4 @@ def pager_print(expr, **settings):
     from locale import getpreferredencoding
     if 'num_columns' not in settings:
         settings['num_columns'] = 500000  # disable line wrap
-    pager(pretty(expr, **settings).encode(getpreferredencoding()))
+    pager(pretty(expr, **settings).encode(getpreferredencoding()))
\ No newline at end of file
diff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py
index b4a786d7a6..1aa60e87e5 100644
--- a/sympy/vector/tests/test_printing.py
+++ b/sympy/vector/tests/test_printing.py
@@ -6,6 +6,7 @@
 from sympy.vector import CoordSys3D, Vector, express
 from sympy.abc import a, b, c
 from sympy.testing.pytest import XFAIL
+from sympy import Symbol, cos, sin
 
 
 def pretty(expr):
@@ -137,6 +138,20 @@ def test_pretty_print_unicode_v():
 
 def test_latex_printing():
     assert latex(v[0]) == '\\mathbf{\\hat{0}}'
+
+def test_vector_pretty_print_with_trig():
+    C = CoordSys3D('C')
+    t = Symbol('t')
+    ten = Symbol('10', positive=True)
+    Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * C.y)
+    vecB = Bx * C.i
+    
+    # Test complex vector expression
+    result = pretty(vecB)
+    assert result is not None
+    assert 'i_C' in result  # Vector component should be present
+    assert 'cos' in result  # Trig function should be present
+    assert 'sin' in result  # Trig function should be present
     assert latex(v[1]) == '\\mathbf{\\hat{i}_{N}}'
     assert latex(v[2]) == '- \\mathbf{\\hat{i}_{N}}'
     assert latex(v[5]) == ('(a)\\mathbf{\\hat{i}_{N}} + ' +
@@ -169,4 +184,4 @@ def test_custom_names():
     assert A.i._pretty_form == 'i_A'
     assert A.x._pretty_form == 'x_A'
     assert A.i._latex_form == r'\mathbf{{i}_{A}}'
-    assert A.x._latex_form == r"\mathbf{\hat{x}_{A}}"
+    assert A.x._latex_form == r"\mathbf{\hat{x}_{A}}"
\ No newline at end of file
