{
  "instance_id": "sympy__sympy-23191",
  "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 66461181d0..f917d7af87 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1095,8 +1095,19 @@ def _print_TransferFunctionMatrix(self, expr):\n     def _print_BasisDependent(self, expr):\n         from sympy.vector import Vector\n \n-        if not self._use_unicode:\n-            raise NotImplementedError(\"ASCII pretty printing of BasisDependent is not implemented\")\n+        if isinstance(expr, Vector):\n+            # For ASCII mode, use simple representation\n+            if not self._use_unicode:\n+                components = []\n+                for system, vect in expr.separate().items():\n+                    for k, v in vect.components.items():\n+                        if v == 1:\n+                            components.append(str(k))\n+                        elif v == -1:\n+                            components.append(\"-\" + str(k))\n+                        else:\n+                            components.append(\"(%s)*%s\" % (v, k))\n+                return prettyForm(\" + \".join(components))\n \n         if expr == expr.zero:\n             return prettyForm(expr.zero._pretty_form)\n@@ -1944,6 +1955,7 @@ def pretty_negative(pform, index):\n \n     def _print_Mul(self, product):\n         from sympy.physics.units import Quantity\n+        from sympy.vector import BaseVector\n \n         # Check for unevaluated Mul. In this case we need to make sure the\n         # identities are visible, multiple Rational factors are not combined\n@@ -1963,6 +1975,28 @@ def _print_Mul(self, product):\n                 obj = prettyForm('-' + obj.s, obj.baseline, obj.binding)\n             return obj\n \n+        # Special handling for vector multiplication\n+        if any(isinstance(arg, BaseVector) for arg in args):\n+            # Find vector and scalar terms\n+            vec_term = None\n+            scalar_terms = []\n+            for arg in args:\n+                if isinstance(arg, BaseVector):\n+                    vec_term = arg\n+                else:\n+                    scalar_terms.append(arg)\n+            \n+            # Print scalar part first\n+            if scalar_terms:\n+                scalar_pform = self._print(Mul(*scalar_terms))\n+                if vec_term:\n+                    # Combine with vector term\n+                    vec_pform = self._print(vec_term)\n+                    return prettyForm.__mul__(scalar_pform, vec_pform)\n+            \n+            # Only vector term\n+            return self._print(vec_term)\n+\n         a = []  # items in the numerator\n         b = []  # items that are in the denominator (if any)\n \n@@ -2919,4 +2953,4 @@ def pager_print(expr, **settings):\n     from locale import getpreferredencoding\n     if 'num_columns' not in settings:\n         settings['num_columns'] = 500000  # disable line wrap\n-    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n+    pager(pretty(expr, **settings).encode(getpreferredencoding()))\n\\ No newline at end of file\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\nindex b4a786d7a6..1aa60e87e5 100644\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -6,6 +6,7 @@\n from sympy.vector import CoordSys3D, Vector, express\n from sympy.abc import a, b, c\n from sympy.testing.pytest import XFAIL\n+from sympy import Symbol, cos, sin\n \n \n def pretty(expr):\n@@ -137,6 +138,20 @@ def test_pretty_print_unicode_v():\n \n def test_latex_printing():\n     assert latex(v[0]) == '\\\\mathbf{\\\\hat{0}}'\n+\n+def test_vector_pretty_print_with_trig():\n+    C = CoordSys3D('C')\n+    t = Symbol('t')\n+    ten = Symbol('10', positive=True)\n+    Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * C.y)\n+    vecB = Bx * C.i\n+    \n+    # Test complex vector expression\n+    result = pretty(vecB)\n+    assert result is not None\n+    assert 'i_C' in result  # Vector component should be present\n+    assert 'cos' in result  # Trig function should be present\n+    assert 'sin' in result  # Trig function should be present\n     assert latex(v[1]) == '\\\\mathbf{\\\\hat{i}_{N}}'\n     assert latex(v[2]) == '- \\\\mathbf{\\\\hat{i}_{N}}'\n     assert latex(v[5]) == ('(a)\\\\mathbf{\\\\hat{i}_{N}} + ' +\n@@ -169,4 +184,4 @@ def test_custom_names():\n     assert A.i._pretty_form == 'i_A'\n     assert A.x._pretty_form == 'x_A'\n     assert A.i._latex_form == r'\\mathbf{{i}_{A}}'\n-    assert A.x._latex_form == r\"\\mathbf{\\hat{x}_{A}}\"\n+    assert A.x._latex_form == r\"\\mathbf{\\hat{x}_{A}}\"\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}