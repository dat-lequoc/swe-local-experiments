diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..dd3ed3392b 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return any(issubclass(subclass, cls) for cls in self._subclasses) or super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
@@ -2551,4 +2551,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
         return 'SmallAutoField'
 
     def rel_db_type(self, connection):
-        return SmallIntegerField().db_type(connection=connection)
+        return SmallIntegerField().db_type(connection=connection)
\ No newline at end of file
diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py
index 646cd2ab0a..b53576d335 100644
--- a/tests/model_fields/test_autofield.py
+++ b/tests/model_fields/test_autofield.py
@@ -33,3 +33,13 @@ class AutoFieldInheritanceTests(SimpleTestCase):
         for field in (models.BigAutoField, models.SmallAutoField):
             with self.subTest(field.__name__):
                 self.assertTrue(issubclass(field, models.AutoField))
+
+    def test_subclass_of_autofield_subclasses(self):
+        """Subclasses of BigAutoField and SmallAutoField should be considered AutoField subclasses."""
+        class CustomBigAutoField(models.BigAutoField):
+            pass
+        class CustomSmallAutoField(models.SmallAutoField):
+            pass
+        for field in (CustomBigAutoField, CustomSmallAutoField):
+            with self.subTest(field.__name__):
+                self.assertTrue(issubclass(field, models.AutoField))
\ No newline at end of file
