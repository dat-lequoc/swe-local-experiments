diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..74e31f5400 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,9 +17,9 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
     )
-    flags = 0
+    flags = 0
\ No newline at end of file
diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py
index 1c2c6b4aff..72e40fe65b 100644
--- a/tests/auth_tests/test_validators.py
+++ b/tests/auth_tests/test_validators.py
@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):
             "o'connell", "عبد ال",
             "zerowidth\u200Bspace", "nonbreaking\u00A0space",
             "en\u2013dash",
+            "trailing\n", "\nleading", "embedded\nspace",
         ]
         v = validators.UnicodeUsernameValidator()
         for valid in valid_usernames:
@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):
         for invalid in invalid_usernames:
             with self.subTest(invalid=invalid):
                 with self.assertRaises(ValidationError):
-                    v(invalid)
+                    v(invalid)
\ No newline at end of file
