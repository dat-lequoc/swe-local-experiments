diff --git a/sympy/physics/units/tests/test_dimensions.py b/sympy/physics/units/tests/test_dimensions.py
index 6455df4106..87a5edacb4 100644
--- a/sympy/physics/units/tests/test_dimensions.py
+++ b/sympy/physics/units/tests/test_dimensions.py
@@ -9,7 +9,8 @@
 from sympy.functions.elementary.trigonometric import (acos, atan2, cos)
 from sympy.physics.units.dimensions import Dimension
 from sympy.physics.units.definitions.dimension_definitions import (
-    length, time, mass, force, pressure, angle
+    length, time, mass, force, pressure, angle,
+    velocity, acceleration
 )
 from sympy.physics.units import foot
 from sympy.testing.pytest import raises
@@ -135,6 +136,28 @@ def test_Dimension_functions():
     raises(TypeError, lambda: dimsys_SI.get_dimensional_dependencies(log(100, length)))
     raises(TypeError, lambda: dimsys_SI.get_dimensional_dependencies(log(length, 10)))
 
+def test_equivalent_dimensions():
+    from sympy.physics.units import Quantity
+    from sympy.physics.units.systems.si import SI
+    from sympy.physics.units.definitions import meter, second
+    
+    v1 = Quantity('v1')
+    SI.set_quantity_dimension(v1, velocity)
+    SI.set_quantity_scale_factor(v1, 2 * meter / second)
+    
+    a1 = Quantity('a1')
+    SI.set_quantity_dimension(a1, acceleration)
+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)
+    
+    t1 = Quantity('t1')
+    SI.set_quantity_dimension(t1, time)
+    SI.set_quantity_scale_factor(t1, 5 * second)
+    
+    # This should not raise an error since velocity and acceleration*time are equivalent
+    expr1 = a1*t1 + v1
+    factor, dim = SI._collect_factor_and_dimension(expr1)
+    assert dimsys_SI.equivalent_dims(dim, velocity)
+
     assert dimsys_SI.get_dimensional_dependencies(pi) == {}
 
     assert dimsys_SI.get_dimensional_dependencies(cos(1)) == {}
@@ -147,4 +170,4 @@ def test_Dimension_functions():
     assert dimsys_SI.get_dimensional_dependencies(Abs(length)) == {length: 1}
     assert dimsys_SI.get_dimensional_dependencies(Abs(length / length)) == {}
 
-    assert dimsys_SI.get_dimensional_dependencies(sqrt(-1)) == {}
+    assert dimsys_SI.get_dimensional_dependencies(sqrt(-1)) == {}
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..859ae60e3c 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if dim != addend_dim and not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
@@ -202,4 +202,4 @@ def get_units_non_prefixed(self) -> tSet[Quantity]:
         """
         Return the units of the system that do not have a prefix.
         """
-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))
+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))
\ No newline at end of file
