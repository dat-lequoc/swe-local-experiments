{
  "instance_id": "django__django-12983",
  "model_patch": "diff --git a/django/utils/text.py b/django/utils/text.py\nindex fb5f6298c4..76ecd6ef98 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -395,7 +395,8 @@ def slugify(value, allow_unicode=False):\n     \"\"\"\n     Convert to ASCII if 'allow_unicode' is False. Convert spaces to hyphens.\n     Remove characters that aren't alphanumerics, underscores, or hyphens.\n-    Convert to lowercase. Also strip leading and trailing whitespace.\n+    Convert to lowercase. Also strip leading and trailing whitespace, dashes,\n+    and underscores.\n     \"\"\"\n     value = str(value)\n     if allow_unicode:\n@@ -403,7 +404,8 @@ def slugify(value, allow_unicode=False):\n     else:\n         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n     value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()\n-    return re.sub(r'[-\\s]+', '-', value)\n+    value = re.sub(r'[-\\s]+', '-', value)\n+    return re.sub(r'^[-_]+|[-_]+$', '', value)\n \n \n def camel_case_to_spaces(value):\n@@ -421,4 +423,4 @@ def _format_lazy(format_string, *args, **kwargs):\n     return format_string.format(*args, **kwargs)\n \n \n-format_lazy = lazy(_format_lazy, str)\n+format_lazy = lazy(_format_lazy, str)\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex 9dbf9367c3..54055b30e3 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,12 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('___test___', 'test', False),\n+            ('---test---', 'test', False),\n+            ('___', '', False),\n+            ('---', '', False),\n+            ('_-_', '', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n@@ -272,4 +278,4 @@ class TestUtilsText(SimpleTestCase):\n             name='article', object='My first try',\n         )\n         with override('fr'):\n-            self.assertEqual('Ajout de article \u00ab\\xa0My first try\\xa0\u00bb.', s)\n+            self.assertEqual('Ajout de article \u00ab\\xa0My first try\\xa0\u00bb.', s)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}