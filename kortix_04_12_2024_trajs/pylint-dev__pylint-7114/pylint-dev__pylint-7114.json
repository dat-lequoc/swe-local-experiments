{
  "instance_id": "pylint-dev__pylint-7114",
  "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..afd8585e8 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -24,14 +24,22 @@ def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> li\n \n \n def get_python_path(filepath: str) -> str:\n-    \"\"\"TODO This get the python path with the (bad) assumption that there is always\n-    an __init__.py.\n-\n-    This is not true since python 3.3 and is causing problem.\n+    \"\"\"Get python path considering both file and directory cases.\n+    \n+    Handles cases where a directory contains a same-named .py file without requiring\n+    an __init__.py file in such cases.\n     \"\"\"\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n     if not os.path.isdir(dirname):\n         dirname = os.path.dirname(dirname)\n+    \n+    # Check if the directory contains a same-named file\n+    base = os.path.basename(dirname)\n+    same_named_file = os.path.join(dirname, base + '.py')\n+    \n+    if os.path.isfile(same_named_file):\n+        return os.path.dirname(dirname)\n+        \n     while True:\n         if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n             return dirname\n@@ -159,4 +167,4 @@ def expand_modules(\n                         \"basename\": modname,\n                     }\n                 )\n-    return result, errors\n+    return result, errors\n\\ No newline at end of file\ndiff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py\nindex 15f72d0c5..0d7beb10b 100644\n--- a/tests/lint/unittest_expand_modules.py\n+++ b/tests/lint/unittest_expand_modules.py\n@@ -90,6 +90,28 @@ init_of_package = {\n class TestExpandModules(CheckerTestCase):\n     \"\"\"Test the expand_modules function while allowing options to be set.\"\"\"\n \n+    def create_file_structure(self, tmp_path):\n+        \"\"\"Create a temporary file structure for testing.\"\"\"\n+        module_dir = tmp_path / \"a\"\n+        module_dir.mkdir()\n+        (module_dir / \"a.py\").write_text(\"\")\n+        (module_dir / \"b.py\").write_text(\"\")\n+        return str(module_dir)\n+\n+    def test_same_named_module(self, tmp_path):\n+        \"\"\"Test that a directory with a same-named .py file works correctly.\"\"\"\n+        module_dir = self.create_file_structure(tmp_path)\n+        ignore_list, ignore_list_re = [], []\n+        modules, errors = expand_modules(\n+            [module_dir],\n+            ignore_list,\n+            ignore_list_re,\n+            self.linter.config.ignore_paths,\n+        )\n+        assert not errors\n+        assert len(modules) > 0\n+        assert any(m[\"name\"].endswith(\".a\") for m in modules)\n+\n     class Checker(BaseChecker):\n         \"\"\"This dummy checker is needed to allow options to be set.\"\"\"\n \n@@ -154,4 +176,4 @@ class TestExpandModules(CheckerTestCase):\n         )\n         modules.sort(key=lambda d: d[\"name\"])\n         assert modules == expected\n-        assert not errors\n+        assert not errors\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}