diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 901918674a..6252a52d08 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1437,8 +1437,67 @@ def _print_MatrixBase(self, expr):
                            = _print_MatrixBase
 
     def _print_MatrixElement(self, expr):
-        return self.parenthesize(expr.parent, PRECEDENCE["Atom"], strict=True) \
-            + '_{%s, %s}' % (expr.i, expr.j)
+        from sympy.matrices.expressions.matmul import MatMul
+        from sympy.matrices.expressions import MatrixElement
+        from sympy import Symbol
+        
+        if isinstance(expr.parent, MatMul):
+            matrices = expr.parent.args
+            i, j = expr.i, expr.j
+            result = []
+            sum_indices = []
+            
+            # Generate unique summation indices
+            for idx in range(len(matrices)-1):
+                sum_indices.append(Symbol('k_%d' % (idx+1)))
+                
+            # Build the summation expression
+            if len(matrices) == 2:
+                k = matrices[0].shape[1]
+                return r"\sum_{%s=0}^{%s} %s_{%s,%s} %s_{%s,%s}" % (
+                    self._print(sum_indices[0]),
+                    self._print(k-1),
+                    self._print(matrices[0]),
+                    self._print(i),
+                    self._print(sum_indices[0]),
+                    self._print(matrices[1]),
+                    self._print(sum_indices[0]),
+                    self._print(j)
+                )
+            else:
+                # Handle multiple matrix multiplication
+                sums = []
+                terms = []
+                for idx in range(len(matrices)-1):
+                    k = matrices[idx].shape[1]
+                    sums.append(r"\sum_{%s=0}^{%s}" % (
+                        self._print(sum_indices[idx]),
+                        self._print(k-1)))
+                    
+                # Build matrix terms
+                prev_idx = i
+                for idx, matrix in enumerate(matrices[:-1]):
+                    terms.append(r"%s_{%s,%s}" % (
+                        self._print(matrix),
+                        self._print(prev_idx),
+                        self._print(sum_indices[idx])))
+                    prev_idx = sum_indices[idx]
+                
+                # Add last matrix term
+                terms.append(r"%s_{%s,%s}" % (
+                    self._print(matrices[-1]),
+                    self._print(sum_indices[-1]),
+                    self._print(j)))
+                    
+                return r"%s %s" % (
+                    " ".join(sums),
+                    " ".join(terms))
+        
+        # Handle simple matrix element case
+        return r"%s_{%s, %s}" % (
+            self.parenthesize(expr.parent, PRECEDENCE["Atom"], strict=True),
+            self._print(expr.i),
+            self._print(expr.j))
 
     def _print_MatrixSlice(self, expr):
         def latexslice(x):
@@ -2452,4 +2511,4 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,
 def print_latex(expr, **settings):
     """Prints LaTeX representation of the given expression. Takes the same
     settings as ``latex()``."""
-    print(latex(expr, **settings))
+    print(latex(expr, **settings))
\ No newline at end of file
