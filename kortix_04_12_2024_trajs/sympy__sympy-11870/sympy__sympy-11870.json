{
  "instance_id": "sympy__sympy-11870",
  "model_patch": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex 67694b477b..5f4643f523 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -79,6 +79,15 @@ def test_issue_4373():\n     x = Symbol(\"x\")\n     assert abs(trigsimp(2.0*sin(x)**2 + 2.0*cos(x)**2) - 2.0) < 1e-10\n \n+def test_exp_trig_conversion():\n+    k = Symbol('k')\n+    # Test sin conversion\n+    f = S.Half * (-I*exp(I*k) + I*exp(-I*k))\n+    assert trigsimp(f) == sin(k)\n+    # Test sinc conversion\n+    f = S.Half/k * (-I*exp(I*k) + I*exp(-I*k))\n+    assert trigsimp(f) == sinc(k)\n+\n \n def test_trigsimp3():\n     x, y = symbols('x,y')\n@@ -425,4 +434,4 @@ def test_Piecewise():\n \n     # trigsimp tries not to touch non-trig containing args\n     assert trigsimp(Piecewise((e1, e3 < e2), (e3, True))) == \\\n-        Piecewise((e1, e3 < s2), (e3, True))\n+        Piecewise((e1, e3 < s2), (e3, True))\n\\ No newline at end of file\ndiff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 34a3bab3fc..e8a3199780 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -544,6 +544,48 @@ def exp_trig(e):\n     def f(rv):\n         if not rv.is_Mul:\n             return rv\n+            \n+        # Check for sin pattern: 1/2 * (-I*exp(I*k) + I*exp(-I*k))\n+        args = rv.args\n+        if len(args) >= 2:\n+            if S.Half in args:\n+                rest = Mul(*[a for a in args if a != S.Half])\n+                if rest.is_Add and len(rest.args) == 2:\n+                    a1, a2 = rest.args\n+                    if (a1.is_Mul and a2.is_Mul and \n+                        I in a1.args and -I in a2.args):\n+                        exp1 = [a for a in a1.args if isinstance(a, exp)]\n+                        exp2 = [a for a in a2.args if isinstance(a, exp)]\n+                        if len(exp1) == len(exp2) == 1:\n+                            arg1 = exp1[0].args[0]\n+                            arg2 = exp2[0].args[0]\n+                            if arg1 == -arg2 and I in arg1.args:\n+                                k = arg1.args[1]  # Get k from I*k\n+                                return sin(k)\n+        \n+        # Check for sinc pattern\n+        if len(args) >= 3:\n+            if S.Half in args:\n+                k = None\n+                for a in args:\n+                    if a.is_Pow and a.exp == -1:\n+                        k = a.base\n+                if k is not None:\n+                    rest = Mul(*[a for a in args if a != S.Half and a != 1/k])\n+                    if rest.is_Add and len(rest.args) == 2:\n+                        a1, a2 = rest.args\n+                        if (a1.is_Mul and a2.is_Mul and \n+                            I in a1.args and -I in a2.args):\n+                            exp1 = [a for a in a1.args if isinstance(a, exp)]\n+                            exp2 = [a for a in a2.args if isinstance(a, exp)]\n+                            if len(exp1) == len(exp2) == 1:\n+                                arg1 = exp1[0].args[0]\n+                                arg2 = exp2[0].args[0]\n+                                if arg1 == -arg2 and I in arg1.args:\n+                                    k2 = arg1.args[1]\n+                                    if k == k2:\n+                                        return sinc(k)\n+        \n         rvd = rv.as_powers_dict()\n         newd = rvd.copy()\n \n@@ -1185,4 +1227,4 @@ def _eapply(func, e, cond=None):\n         return func(e)\n     return e.func(*[\n         _eapply(func, ei) if (cond is None or cond(ei)) else ei\n-        for ei in e.args])\n+        for ei in e.args])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}