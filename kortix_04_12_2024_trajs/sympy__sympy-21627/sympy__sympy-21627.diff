diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 892e19cabb..d7b03dcac8 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -268,6 +268,14 @@ def _eval_is_zero(self):
         arg = self.args[0]
         if arg.is_zero:
             return True
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
 
 
 class cosh(HyperbolicFunction):
@@ -717,6 +725,14 @@ def _eval_is_zero(self):
         arg = self.args[0]
         if arg.is_zero:
             return True
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
 
 
 class coth(HyperbolicFunction):
@@ -1215,6 +1231,14 @@ def _eval_is_zero(self):
         arg = self.args[0]
         if arg.is_zero:
             return True
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
 
 
 class acosh(InverseHyperbolicFunction):
@@ -1462,6 +1486,14 @@ def _eval_is_zero(self):
         arg = self.args[0]
         if arg.is_zero:
             return True
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
+        if arg.is_extended_real is False:
+            return None  # Return None for complex arguments to prevent recursion
 
 
     def inverse(self, argindex=1):
@@ -1792,4 +1824,4 @@ def inverse(self, argindex=1):
         return csch
 
     def _eval_rewrite_as_log(self, arg, **kwargs):
-        return log(1/arg + sqrt(1/arg**2 + 1))
+        return log(1/arg + sqrt(1/arg**2 + 1))
\ No newline at end of file
