diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py
index 75349099..8e39ba49 100644
--- a/seaborn/axisgrid.py
+++ b/seaborn/axisgrid.py
@@ -1487,7 +1487,7 @@ class PairGrid(Grid):
             else:
                 plt.sca(ax)
 
-            vector = self.data[var]
+            vector = self._get_column_var(var)
             if self._hue_var is not None:
                 hue = self.data[self._hue_var]
             else:
@@ -1516,7 +1516,8 @@ class PairGrid(Grid):
         fixed_color = kwargs.pop("color", None)
 
         for var, ax in zip(self.diag_vars, self.diag_axes):
-            hue_grouped = self.data[var].groupby(self.hue_vals)
+            vector = self._get_column_var(var)
+            hue_grouped = vector.groupby(self.hue_vals)
 
             plot_kwargs = kwargs.copy()
             if str(func.__module__).startswith("seaborn"):
@@ -1661,11 +1662,30 @@ class PairGrid(Grid):
         for ax, label in zip(self.axes[:, 0], self.y_vars):
             ax.set_ylabel(label)
 
+    def _get_column_var(self, var):
+        """Get data for a variable, handling both single and MultiIndex columns."""
+        if isinstance(self.data.columns, pd.MultiIndex):
+            if isinstance(var, tuple):
+                return self.data[var]
+            # Find matching columns at first level
+            matches = [col for col in self.data.columns if col[0] == var]
+            if len(matches) == 1:
+                return self.data[matches[0]]
+            elif len(matches) > 1:
+                # If multiple matches, use the first one
+                return self.data[matches[0]]
+        return self.data[var]
+
     def _find_numeric_cols(self, data):
         """Find which variables in a DataFrame are numeric."""
         numeric_cols = []
-        for col in data:
-            if variable_type(data[col]) == "numeric":
+        for col in data.columns:
+            # Handle both single and multi-index columns
+            if isinstance(col, tuple):
+                col_data = data[col]
+            else:
+                col_data = data[col]
+            if variable_type(col_data) == "numeric":
                 numeric_cols.append(col)
         return numeric_cols
 
@@ -2396,4 +2416,4 @@ Examples
     params=_param_docs,
     returns=_core_docs["returns"],
     seealso=_core_docs["seealso"],
-)
+)
\ No newline at end of file
diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py
index ce8b0eaa..e6386e3b 100644
--- a/tests/test_axisgrid.py
+++ b/tests/test_axisgrid.py
@@ -710,6 +710,30 @@ class TestFacetGrid:
 
 class TestPairGrid:
 
+    def test_multiindex_columns(self):
+        """Test that PairGrid works with MultiIndex columns."""
+        data = {
+            ("A", "1"): np.random.rand(100),
+            ("A", "2"): np.random.rand(100),
+            ("B", "1"): np.random.rand(100),
+            ("B", "2"): np.random.rand(100),
+        }
+        df = pd.DataFrame(data)
+        
+        # Test basic PairGrid functionality
+        g = ag.PairGrid(df)
+        assert g.data is not None
+        assert len(g.x_vars) > 0
+        assert len(g.y_vars) > 0
+        g.map_diag(plt.hist)
+        g.map_offdiag(plt.scatter)
+        
+        # Test pairplot with MultiIndex
+        g = ag.pairplot(df)
+        assert isinstance(g, ag.PairGrid)
+        assert g.data is not None
+        assert len(g.axes.flat) > 0
+
     rs = np.random.RandomState(sum(map(ord, "PairGrid")))
     df = pd.DataFrame(dict(x=rs.normal(size=60),
                            y=rs.randint(0, 4, size=(60)),
@@ -1842,4 +1866,4 @@ class TestJointPlot:
         ax = plt.gca()
         with pytest.warns(UserWarning):
             g = ag.jointplot(data=long_df, x="x", y="y", ax=ax)
-        assert g.ax_joint.collections
+        assert g.ax_joint.collections
\ No newline at end of file
