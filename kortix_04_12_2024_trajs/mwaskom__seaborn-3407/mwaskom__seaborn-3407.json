{
  "instance_id": "mwaskom__seaborn-3407",
  "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..8e39ba49 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1487,7 +1487,7 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+            vector = self._get_column_var(var)\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1516,7 +1516,8 @@ class PairGrid(Grid):\n         fixed_color = kwargs.pop(\"color\", None)\n \n         for var, ax in zip(self.diag_vars, self.diag_axes):\n-            hue_grouped = self.data[var].groupby(self.hue_vals)\n+            vector = self._get_column_var(var)\n+            hue_grouped = vector.groupby(self.hue_vals)\n \n             plot_kwargs = kwargs.copy()\n             if str(func.__module__).startswith(\"seaborn\"):\n@@ -1661,11 +1662,30 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+    def _get_column_var(self, var):\n+        \"\"\"Get data for a variable, handling both single and MultiIndex columns.\"\"\"\n+        if isinstance(self.data.columns, pd.MultiIndex):\n+            if isinstance(var, tuple):\n+                return self.data[var]\n+            # Find matching columns at first level\n+            matches = [col for col in self.data.columns if col[0] == var]\n+            if len(matches) == 1:\n+                return self.data[matches[0]]\n+            elif len(matches) > 1:\n+                # If multiple matches, use the first one\n+                return self.data[matches[0]]\n+        return self.data[var]\n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n-        for col in data:\n-            if variable_type(data[col]) == \"numeric\":\n+        for col in data.columns:\n+            # Handle both single and multi-index columns\n+            if isinstance(col, tuple):\n+                col_data = data[col]\n+            else:\n+                col_data = data[col]\n+            if variable_type(col_data) == \"numeric\":\n                 numeric_cols.append(col)\n         return numeric_cols\n \n@@ -2396,4 +2416,4 @@ Examples\n     params=_param_docs,\n     returns=_core_docs[\"returns\"],\n     seealso=_core_docs[\"seealso\"],\n-)\n+)\n\\ No newline at end of file\ndiff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex ce8b0eaa..e6386e3b 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -710,6 +710,30 @@ class TestFacetGrid:\n \n class TestPairGrid:\n \n+    def test_multiindex_columns(self):\n+        \"\"\"Test that PairGrid works with MultiIndex columns.\"\"\"\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data)\n+        \n+        # Test basic PairGrid functionality\n+        g = ag.PairGrid(df)\n+        assert g.data is not None\n+        assert len(g.x_vars) > 0\n+        assert len(g.y_vars) > 0\n+        g.map_diag(plt.hist)\n+        g.map_offdiag(plt.scatter)\n+        \n+        # Test pairplot with MultiIndex\n+        g = ag.pairplot(df)\n+        assert isinstance(g, ag.PairGrid)\n+        assert g.data is not None\n+        assert len(g.axes.flat) > 0\n+\n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n     df = pd.DataFrame(dict(x=rs.normal(size=60),\n                            y=rs.randint(0, 4, size=(60)),\n@@ -1842,4 +1866,4 @@ class TestJointPlot:\n         ax = plt.gca()\n         with pytest.warns(UserWarning):\n             g = ag.jointplot(data=long_df, x=\"x\", y=\"y\", ax=ax)\n-        assert g.ax_joint.collections\n+        assert g.ax_joint.collections\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}