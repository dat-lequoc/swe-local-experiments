diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py
index 7b7ddc8d..53fd52c5 100644
--- a/seaborn/_stats/regression.py
+++ b/seaborn/_stats/regression.py
@@ -20,18 +20,27 @@ class PolyFit(Stat):
     gridsize: int = 100
 
     def _fit_predict(self, data):
-
-        x = data["x"]
-        y = data["y"]
-        if x.nunique() <= self.order:
-            # TODO warn?
-            xx = yy = []
-        else:
-            p = np.polyfit(x, y, self.order)
-            xx = np.linspace(x.min(), x.max(), self.gridsize)
-            yy = np.polyval(p, xx)
-
-        return pd.DataFrame(dict(x=xx, y=yy))
+        # Convert to pandas Series first for proper NA handling
+        x = pd.Series(data["x"])
+        y = pd.Series(data["y"])
+        
+        # Use pandas isna() which handles None properly
+        mask = ~(x.isna() | y.isna())
+        x_clean = x[mask]
+        y_clean = y[mask]
+        
+        if len(x_clean) <= self.order:
+            return pd.DataFrame({"x": [], "y": []})
+        
+        # Convert to numpy arrays after cleaning
+        x_np = x_clean.to_numpy()
+        y_np = y_clean.to_numpy()
+        
+        p = np.polyfit(x_np, y_np, self.order)
+        xx = np.linspace(x_np.min(), x_np.max(), self.gridsize)
+        yy = np.polyval(p, xx)
+        
+        return pd.DataFrame({"x": xx, "y": yy})
 
     # TODO we should have a way of identifying the method that will be applied
     # and then only define __call__ on a base-class of stats with this pattern
@@ -44,4 +53,4 @@ class PolyFit(Stat):
 @dataclass
 class OLSFit(Stat):
 
-    ...
+    ...
\ No newline at end of file
diff --git a/tests/test_stats.py b/tests/test_stats.py
new file mode 100644
index 00000000..9e23d821
--- /dev/null
+++ b/tests/test_stats.py
@@ -0,0 +1,37 @@
+import numpy as np
+import pandas as pd
+import pytest
+from seaborn._stats.regression import PolyFit
+
+def test_polyfit_with_none_values():
+    # Test handling of None values
+    data = pd.DataFrame({
+        "x": [1, 2, 3, None, 4],
+        "y": [1, 2, 3, 4, 5]
+    })
+    fit = PolyFit(order=2)
+    result = fit._fit_predict(data)
+    assert isinstance(result, pd.DataFrame)
+    assert set(result.columns) == {"x", "y"}
+    assert len(result) > 0
+
+def test_polyfit_edge_cases():
+    fit = PolyFit(order=2)
+    
+    # Test empty data
+    empty = pd.DataFrame({"x": [], "y": []})
+    result = fit._fit_predict(empty)
+    assert len(result) == 0
+    
+    # Test insufficient data
+    small = pd.DataFrame({"x": [1], "y": [1]})
+    result = fit._fit_predict(small)
+    assert len(result) == 0
+    
+    # Test all None
+    all_none = pd.DataFrame({
+        "x": [None, None],
+        "y": [None, None]
+    })
+    result = fit._fit_predict(all_none)
+    assert len(result) == 0
