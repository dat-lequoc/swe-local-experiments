{
  "instance_id": "django__django-16400",
  "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..f9663a4e39 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -45,21 +45,7 @@ def create_permissions(\n     if not app_config.models_module:\n         return\n \n-    # Ensure that contenttypes are created for this app. Needed if\n-    # 'django.contrib.auth' is in INSTALLED_APPS before\n-    # 'django.contrib.contenttypes'.\n-    create_contenttypes(\n-        app_config,\n-        verbosity=verbosity,\n-        interactive=interactive,\n-        using=using,\n-        apps=apps,\n-        **kwargs,\n-    )\n-\n-    app_label = app_config.label\n     try:\n-        app_config = apps.get_app_config(app_label)\n         ContentType = apps.get_model(\"contenttypes\", \"ContentType\")\n         Permission = apps.get_model(\"auth\", \"Permission\")\n     except LookupError:\n@@ -68,42 +54,50 @@ def create_permissions(\n     if not router.allow_migrate_model(using, Permission):\n         return\n \n-    # This will hold the permissions we're looking for as\n-    # (content_type, (codename, name))\n+    # Get database managers early\n+    content_types = ContentType.objects.db_manager(using)\n+    permissions = Permission.objects.db_manager(using)\n+\n+    # Create contenttypes first with explicit database\n+    create_contenttypes(\n+        app_config,\n+        verbosity=verbosity,\n+        interactive=interactive,\n+        using=using,\n+        apps=apps,\n+        **kwargs\n+    )\n+\n     searched_perms = []\n-    # The codenames and ctypes that should exist.\n     ctypes = set()\n-    for klass in app_config.get_models():\n-        # Force looking up the content types in the current database\n-        # before creating foreign keys to them.\n-        ctype = ContentType.objects.db_manager(using).get_for_model(\n-            klass, for_concrete_model=False\n-        )\n \n+    # Get all models and their content types\n+    for klass in app_config.get_models():\n+        # Use database manager for content type operations\n+        ctype = content_types.get_for_model(klass, for_concrete_model=False)\n         ctypes.add(ctype)\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n \n-    # Find all the Permissions that have a content_type for a model we're\n-    # looking for.  We don't need to check for codenames since we already have\n-    # a list of the ones we're going to create.\n+    # Get existing permissions using the correct database\n     all_perms = set(\n-        Permission.objects.using(using)\n-        .filter(\n-            content_type__in=ctypes,\n-        )\n+        permissions.filter(content_type__in=ctypes)\n         .values_list(\"content_type\", \"codename\")\n     )\n \n+    # Create new permissions\n     perms = [\n         Permission(codename=codename, name=name, content_type=ct)\n         for ct, (codename, name) in searched_perms\n         if (ct.pk, codename) not in all_perms\n     ]\n-    Permission.objects.using(using).bulk_create(perms)\n-    if verbosity >= 2:\n-        for perm in perms:\n-            print(\"Adding permission '%s'\" % perm)\n+\n+    # Use bulk_create with the correct database\n+    if perms:\n+        permissions.bulk_create(perms)\n+        if verbosity >= 2:\n+            for perm in perms:\n+                print(\"Adding permission '%s'\" % perm)\n \n \n def get_system_username():\n@@ -167,4 +161,4 @@ def get_default_username(check_db=True, database=DEFAULT_DB_ALIAS):\n             pass\n         else:\n             return \"\"\n-    return default_username\n+    return default_username\n\\ No newline at end of file\ndiff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex f567fd0dc1..a96fc6e564 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -15,7 +15,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.core.management.base import CommandError\n from django.db import migrations\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, modify_settings\n from django.utils.translation import gettext_lazy as _\n \n from .models import (\n@@ -248,6 +248,23 @@ class ChangepasswordManagementCommandTestCase(TestCase):\n         call_command(\"changepassword\", username=\"J\\xfalia\", stdout=self.stdout)\n \n \n+class MultiDBPermissionCreationTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_create_permissions_respects_database(self):\n+        \"\"\"\n+        create_permissions respects the database parameter and creates\n+        permissions in the specified database.\n+        \"\"\"\n+        # Create a content type and permission in the \"other\" database\n+        app_config = apps.get_app_config(\"auth\")\n+        create_permissions(app_config, verbosity=0, using=\"other\")\n+        \n+        # Check that permissions exist in \"other\" database but not in \"default\"\n+        Permission = apps.get_model(\"auth\", \"Permission\")\n+        self.assertTrue(Permission.objects.using(\"other\").exists())\n+        self.assertFalse(Permission.objects.using(\"default\").exists())\n+\n class MultiDBChangepasswordManagementCommandTestCase(TestCase):\n     databases = {\"default\", \"other\"}\n \n@@ -1484,4 +1501,4 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}