diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index 0b5a982617..f9663a4e39 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -45,21 +45,7 @@ def create_permissions(
     if not app_config.models_module:
         return
 
-    # Ensure that contenttypes are created for this app. Needed if
-    # 'django.contrib.auth' is in INSTALLED_APPS before
-    # 'django.contrib.contenttypes'.
-    create_contenttypes(
-        app_config,
-        verbosity=verbosity,
-        interactive=interactive,
-        using=using,
-        apps=apps,
-        **kwargs,
-    )
-
-    app_label = app_config.label
     try:
-        app_config = apps.get_app_config(app_label)
         ContentType = apps.get_model("contenttypes", "ContentType")
         Permission = apps.get_model("auth", "Permission")
     except LookupError:
@@ -68,42 +54,50 @@ def create_permissions(
     if not router.allow_migrate_model(using, Permission):
         return
 
-    # This will hold the permissions we're looking for as
-    # (content_type, (codename, name))
+    # Get database managers early
+    content_types = ContentType.objects.db_manager(using)
+    permissions = Permission.objects.db_manager(using)
+
+    # Create contenttypes first with explicit database
+    create_contenttypes(
+        app_config,
+        verbosity=verbosity,
+        interactive=interactive,
+        using=using,
+        apps=apps,
+        **kwargs
+    )
+
     searched_perms = []
-    # The codenames and ctypes that should exist.
     ctypes = set()
-    for klass in app_config.get_models():
-        # Force looking up the content types in the current database
-        # before creating foreign keys to them.
-        ctype = ContentType.objects.db_manager(using).get_for_model(
-            klass, for_concrete_model=False
-        )
 
+    # Get all models and their content types
+    for klass in app_config.get_models():
+        # Use database manager for content type operations
+        ctype = content_types.get_for_model(klass, for_concrete_model=False)
         ctypes.add(ctype)
         for perm in _get_all_permissions(klass._meta):
             searched_perms.append((ctype, perm))
 
-    # Find all the Permissions that have a content_type for a model we're
-    # looking for.  We don't need to check for codenames since we already have
-    # a list of the ones we're going to create.
+    # Get existing permissions using the correct database
     all_perms = set(
-        Permission.objects.using(using)
-        .filter(
-            content_type__in=ctypes,
-        )
+        permissions.filter(content_type__in=ctypes)
         .values_list("content_type", "codename")
     )
 
+    # Create new permissions
     perms = [
         Permission(codename=codename, name=name, content_type=ct)
         for ct, (codename, name) in searched_perms
         if (ct.pk, codename) not in all_perms
     ]
-    Permission.objects.using(using).bulk_create(perms)
-    if verbosity >= 2:
-        for perm in perms:
-            print("Adding permission '%s'" % perm)
+
+    # Use bulk_create with the correct database
+    if perms:
+        permissions.bulk_create(perms)
+        if verbosity >= 2:
+            for perm in perms:
+                print("Adding permission '%s'" % perm)
 
 
 def get_system_username():
@@ -167,4 +161,4 @@ def get_default_username(check_db=True, database=DEFAULT_DB_ALIAS):
             pass
         else:
             return ""
-    return default_username
+    return default_username
\ No newline at end of file
diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py
index f567fd0dc1..a96fc6e564 100644
--- a/tests/auth_tests/test_management.py
+++ b/tests/auth_tests/test_management.py
@@ -15,7 +15,7 @@ from django.contrib.contenttypes.models import ContentType
 from django.core.management import call_command
 from django.core.management.base import CommandError
 from django.db import migrations
-from django.test import TestCase, override_settings
+from django.test import TestCase, override_settings, modify_settings
 from django.utils.translation import gettext_lazy as _
 
 from .models import (
@@ -248,6 +248,23 @@ class ChangepasswordManagementCommandTestCase(TestCase):
         call_command("changepassword", username="J\xfalia", stdout=self.stdout)
 
 
+class MultiDBPermissionCreationTests(TestCase):
+    databases = {"default", "other"}
+
+    def test_create_permissions_respects_database(self):
+        """
+        create_permissions respects the database parameter and creates
+        permissions in the specified database.
+        """
+        # Create a content type and permission in the "other" database
+        app_config = apps.get_app_config("auth")
+        create_permissions(app_config, verbosity=0, using="other")
+        
+        # Check that permissions exist in "other" database but not in "default"
+        Permission = apps.get_model("auth", "Permission")
+        self.assertTrue(Permission.objects.using("other").exists())
+        self.assertFalse(Permission.objects.using("default").exists())
+
 class MultiDBChangepasswordManagementCommandTestCase(TestCase):
     databases = {"default", "other"}
 
@@ -1484,4 +1501,4 @@ class CreatePermissionsTests(TestCase):
                 content_type__app_label=opts.app_label,
                 codename=codename,
             ).exists()
-        )
+        )
\ No newline at end of file
