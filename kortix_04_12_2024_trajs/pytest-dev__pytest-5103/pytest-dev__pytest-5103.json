{
  "instance_id": "pytest-dev__pytest-5103",
  "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..bb2a0981c 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -605,6 +605,33 @@ def set_location(node, lineno, col_offset):\n     return node\n \n \n+class ReplaceTargetTransformer(ast.NodeTransformer):\n+    \"\"\"Replace a target node with a new node in the AST.\"\"\"\n+    \n+    def __init__(self, old_node, new_node):\n+        self.old_node = old_node\n+        self.new_node = new_node\n+        \n+    def visit_Name(self, node):\n+        if (isinstance(self.old_node, ast.Name) and \n+            node.id == self.old_node.id):\n+            return self.new_node\n+        return node\n+\n+\n+class ReplaceTargetTransformer(ast.NodeTransformer):\n+    \"\"\"Replace a target node with a new node in the AST.\"\"\"\n+    \n+    def __init__(self, old_node, new_node):\n+        self.old_node = old_node\n+        self.new_node = new_node\n+        \n+    def visit_Name(self, node):\n+        if (isinstance(self.old_node, ast.Name) and \n+            node.id == self.old_node.id):\n+            return self.new_node\n+        return node\n+\n class AssertionRewriter(ast.NodeVisitor):\n     \"\"\"Assertion rewriting implementation.\n \n@@ -1081,4 +1108,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n\\ No newline at end of file\ndiff --git a/testing/test_all_any_assertion.py b/testing/test_all_any_assertion.py\nnew file mode 100644\nindex 000000000..150669958\n--- /dev/null\n+++ b/testing/test_all_any_assertion.py\n@@ -0,0 +1,33 @@\n+import pytest\n+\n+def is_even(n):\n+    return n % 2 == 0\n+\n+def test_all_even_generator():\n+    \"\"\"Test all() with a generator expression.\"\"\"\n+    even_stevens = list(range(1, 100, 2))\n+    with pytest.raises(AssertionError) as excinfo:\n+        assert all(is_even(number) for number in even_stevens)\n+    assert \"1\" in str(excinfo.value)  # Should show the failing value\n+\n+def test_all_even_list():\n+    \"\"\"Test all() with a list comprehension.\"\"\"\n+    even_stevens = list(range(1, 100, 2))\n+    with pytest.raises(AssertionError) as excinfo:\n+        assert all([is_even(number) for number in even_stevens])\n+    assert \"1\" in str(excinfo.value)  # Should show the failing value\n+\n+def test_any_odd_generator():\n+    \"\"\"Test any() with a generator expression.\"\"\"\n+    even_numbers = list(range(0, 100, 2))\n+    with pytest.raises(AssertionError) as excinfo:\n+        assert any(not is_even(number) for number in even_numbers)\n+    assert \"0\" in str(excinfo.value)  # Should show a failing value\n+\n+def test_empty_all():\n+    \"\"\"Test all() with empty iterable.\"\"\"\n+    assert all([])  # Should pass as per Python's behavior\n+\n+def test_empty_any():\n+    \"\"\"Test any() with empty iterable.\"\"\"\n+    assert not any([])  # Should pass as per Python's behavior\n",
  "model_name_or_path": "KortixAI"
}