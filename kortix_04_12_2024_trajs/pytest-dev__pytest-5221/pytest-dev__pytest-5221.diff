diff --git a/src/_pytest/helpconfig.py b/src/_pytest/helpconfig.py
index 2b383d264..31bd7dcfd 100644
--- a/src/_pytest/helpconfig.py
+++ b/src/_pytest/helpconfig.py
@@ -151,6 +151,27 @@ def showhelp(config):
     )
     tw.line()
 
+    def get_fixture_scope(fixturedef):
+        """Get scope from fixture definition."""
+        return getattr(fixturedef, "scope", "function")
+
+    def format_fixture_line(name, fixturedef):
+        """Format fixture line with scope information."""
+        scope = get_fixture_scope(fixturedef)
+        return "{} (scope: {})".format(name, scope)
+
+    def get_fixture_scope(fixturedef):
+        """Get scope from fixture definition."""
+        return getattr(fixturedef, "scope", "function")
+
+    # Get fixture manager
+    fm = config.pluginmanager.get_plugin("funcmanage")
+
+    def format_fixture(fixture):
+        """Format fixture with scope information."""
+        scope = getattr(fixture, "scope", "function")
+        return "{} (scope: {})".format(fixture.name, scope)
+
     columns = tw.fullwidth  # costly call
     for name in config._parser._ininames:
         help, type, default = config._parser._inidict[name]
@@ -178,9 +199,28 @@ def showhelp(config):
     tw.line(
         "(shown according to specified file_or_dir or current dir "
         "if not specified; fixtures with leading '_' are only shown "
-        "with the '-v' option"
+        "with the '-v' option; fixture scope shown in parentheses"
     )
 
+    # Get all fixtures from the plugin manager
+    fm = config.pluginmanager.get_plugin("funcmanage")
+
+    # Get fixture definitions
+    fm = config.pluginmanager.get_plugin("funcmanager")
+    if fm is not None:
+        for name, fixturedef in fm._arg2fixturedefs.items():
+            if fixturedef:
+                scope = get_fixture_scope(fixturedef[-1])
+                tw.line(f"{name} (scope: {scope})")
+
+    # Get fixture definitions from fixture manager
+    fm = config.pluginmanager.get_plugin("funcmanager")
+    if fm is not None:
+        for name, fixturedefs in sorted(fm._arg2fixturedefs.items()):
+            if fixturedefs:
+                fixturedef = fixturedefs[-1]
+                tw.line(format_fixture_line(name, fixturedef))
+
     for warningreport in reporter.stats.get("warnings", []):
         tw.line("warning : " + warningreport.message, red=True)
     return
@@ -219,4 +259,4 @@ def pytest_report_header(config):
             else:
                 r = repr(plugin)
             lines.append("    %-20s: %s" % (name, r))
-    return lines
+    return lines
\ No newline at end of file
diff --git a/testing/test_helpconfig.py b/testing/test_helpconfig.py
index 9c7806d54..95f472b96 100644
--- a/testing/test_helpconfig.py
+++ b/testing/test_helpconfig.py
@@ -75,3 +75,25 @@ def test_PYTEST_DEBUG(testdir, monkeypatch):
     result.stderr.fnmatch_lines(
         ["*pytest_plugin_registered*", "*manager*PluginManager*"]
     )
+
+def test_fixtures_show_scope(testdir):
+    testdir.makepyfile('''
+        import pytest
+        @pytest.fixture(scope="session")
+        def session_fix():
+            return 1
+            
+        @pytest.fixture(scope="module")
+        def module_fix():
+            return 1
+            
+        @pytest.fixture(scope="function")
+        def function_fix():
+            return 1
+    ''')
+    result = testdir.runpytest("--fixtures")
+    result.stdout.fnmatch_lines([
+        "*function_fix (scope: function)*",
+        "*module_fix (scope: module)*",
+        "*session_fix (scope: session)*",
+    ])
\ No newline at end of file
