diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index d88cda6e20..ff7f8f6e4c 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):
         ):
             klass = self.value.__self__
             module = klass.__module__
-            return "%s.%s.%s" % (module, klass.__name__, self.value.__name__), {
+            return "%s.%s.%s" % (module, klass.__qualname__, self.value.__name__), {
                 "import %s" % module
             }
         # Further error checking
@@ -397,4 +397,4 @@ def serializer_factory(value):
         "Cannot serialize: %r\nThere are some values Django cannot serialize into "
         "migration files.\nFor more, see https://docs.djangoproject.com/en/%s/"
         "topics/migrations/#migration-serializing" % (value, get_docs_version())
-    )
+    )
\ No newline at end of file
diff --git a/tests/migrations/test_serializer.py b/tests/migrations/test_serializer.py
new file mode 100644
index 0000000000..ba5f4268d8
--- /dev/null
+++ b/tests/migrations/test_serializer.py
@@ -0,0 +1,16 @@
+from django.db import migrations, models
+from django.test import TestCase
+from django.db.migrations.serializer import serializer_factory
+
+class SerializerTests(TestCase):
+    def test_serialize_nested_class_method(self):
+        class Model:
+            class Nested:
+                @classmethod
+                def default_method(cls):
+                    return []
+        
+        # Test serialization of nested class method
+        serializer = serializer_factory(Model.Nested.default_method)
+        string, imports = serializer.serialize()
+        self.assertIn("Model.Nested.default_method", string)
