diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py
index 00395585b9..7969df2e69 100644
--- a/sympy/matrices/dense.py
+++ b/sympy/matrices/dense.py
@@ -410,6 +410,37 @@ class MutableDenseMatrix(DenseMatrix, MatrixBase):
     def __new__(cls, *args, **kwargs):
         return cls._new(*args, **kwargs)
 
+    def col_insert(self, pos, other):
+        """Insert one or more columns at the given column position."""
+        # Handle empty matrices - allow insertion at position 0
+        if self.rows == 0:
+            if other.rows == 0:
+                return self.copy()
+            if pos == 0:
+                return other.copy()
+            raise ValueError("Position must be 0 for empty matrices")
+        
+        # Regular validation for non-empty matrices    
+        if not 0 <= pos <= self.cols:
+            raise ValueError("Position must be between 0 and number of columns")
+        
+        other = _force_mutable(other)
+        if self.rows != other.rows:
+            raise ShapeError("Matrices must have the same number of rows.")
+        
+        # Calculate new dimensions
+        new_cols = self.cols + other.cols
+        
+        def entry_func(i, j):
+            if j < pos:
+                return self[i, j]
+            elif j < pos + other.cols:
+                return other[i, j - pos]
+            else:
+                return self[i, j - other.cols]
+        
+        return self._new(self.rows, new_cols, entry_func)
+
     @classmethod
     def _new(cls, *args, **kwargs):
         # if the `copy` flag is set to False, the input
@@ -1470,4 +1501,4 @@ def zeros(*args, **kwargs):
 
     from .dense import Matrix
 
-    return Matrix.zeros(*args, **kwargs)
+    return Matrix.zeros(*args, **kwargs)
\ No newline at end of file
diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py
index 78bd30fc81..b27d29b7ac 100644
--- a/sympy/matrices/tests/test_matrices.py
+++ b/sympy/matrices/tests/test_matrices.py
@@ -258,6 +258,26 @@ def test_power():
 
 def test_creation():
     raises(ValueError, lambda: Matrix(5, 5, range(20)))
+
+def test_col_insert():
+    M = Matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])
+    V = Matrix(3, 1, [10, 11, 12])
+    
+    # Test insertion at start
+    assert M.col_insert(0, V) == Matrix(3, 4, [10, 1, 2, 3, 11, 4, 5, 6, 12, 7, 8, 9])
+    
+    # Test insertion in middle
+    assert M.col_insert(1, V) == Matrix(3, 4, [1, 10, 2, 3, 4, 11, 5, 6, 7, 12, 8, 9])
+    
+    # Test insertion at end
+    assert M.col_insert(3, V) == Matrix(3, 4, [1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12])
+    
+    # Test multiple column insertion
+    V2 = Matrix(3, 2, [10, 11, 12, 13, 14, 15])
+    assert M.col_insert(1, V2) == Matrix(3, 5, [1, 10, 11, 2, 3, 4, 12, 13, 5, 6, 7, 14, 15, 8, 9])
+    
+    # Test dimension validation
+    raises(ShapeError, lambda: M.col_insert(1, Matrix(2, 1, [1, 2])))
     raises(ValueError, lambda: Matrix(5, -1, []))
     raises(IndexError, lambda: Matrix((1, 2))[2])
     with raises(IndexError):
@@ -2995,4 +3015,4 @@ def test_deprecated():
         m = Matrix(3, 3, [0, 1, 0, -4, 4, 0, -2, 1, 2])
         P, Jcells = m.jordan_cells()
         assert Jcells[1] == Matrix(1, 1, [2])
-        assert Jcells[0] == Matrix(2, 2, [2, 1, 0, 2])
+        assert Jcells[0] == Matrix(2, 2, [2, 1, 0, 2])
\ No newline at end of file
