{
  "instance_id": "sympy__sympy-13647",
  "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 00395585b9..7969df2e69 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -410,6 +410,37 @@ class MutableDenseMatrix(DenseMatrix, MatrixBase):\n     def __new__(cls, *args, **kwargs):\n         return cls._new(*args, **kwargs)\n \n+    def col_insert(self, pos, other):\n+        \"\"\"Insert one or more columns at the given column position.\"\"\"\n+        # Handle empty matrices - allow insertion at position 0\n+        if self.rows == 0:\n+            if other.rows == 0:\n+                return self.copy()\n+            if pos == 0:\n+                return other.copy()\n+            raise ValueError(\"Position must be 0 for empty matrices\")\n+        \n+        # Regular validation for non-empty matrices    \n+        if not 0 <= pos <= self.cols:\n+            raise ValueError(\"Position must be between 0 and number of columns\")\n+        \n+        other = _force_mutable(other)\n+        if self.rows != other.rows:\n+            raise ShapeError(\"Matrices must have the same number of rows.\")\n+        \n+        # Calculate new dimensions\n+        new_cols = self.cols + other.cols\n+        \n+        def entry_func(i, j):\n+            if j < pos:\n+                return self[i, j]\n+            elif j < pos + other.cols:\n+                return other[i, j - pos]\n+            else:\n+                return self[i, j - other.cols]\n+        \n+        return self._new(self.rows, new_cols, entry_func)\n+\n     @classmethod\n     def _new(cls, *args, **kwargs):\n         # if the `copy` flag is set to False, the input\n@@ -1470,4 +1501,4 @@ def zeros(*args, **kwargs):\n \n     from .dense import Matrix\n \n-    return Matrix.zeros(*args, **kwargs)\n+    return Matrix.zeros(*args, **kwargs)\n\\ No newline at end of file\ndiff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 78bd30fc81..b27d29b7ac 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -258,6 +258,26 @@ def test_power():\n \n def test_creation():\n     raises(ValueError, lambda: Matrix(5, 5, range(20)))\n+\n+def test_col_insert():\n+    M = Matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n+    V = Matrix(3, 1, [10, 11, 12])\n+    \n+    # Test insertion at start\n+    assert M.col_insert(0, V) == Matrix(3, 4, [10, 1, 2, 3, 11, 4, 5, 6, 12, 7, 8, 9])\n+    \n+    # Test insertion in middle\n+    assert M.col_insert(1, V) == Matrix(3, 4, [1, 10, 2, 3, 4, 11, 5, 6, 7, 12, 8, 9])\n+    \n+    # Test insertion at end\n+    assert M.col_insert(3, V) == Matrix(3, 4, [1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12])\n+    \n+    # Test multiple column insertion\n+    V2 = Matrix(3, 2, [10, 11, 12, 13, 14, 15])\n+    assert M.col_insert(1, V2) == Matrix(3, 5, [1, 10, 11, 2, 3, 4, 12, 13, 5, 6, 7, 14, 15, 8, 9])\n+    \n+    # Test dimension validation\n+    raises(ShapeError, lambda: M.col_insert(1, Matrix(2, 1, [1, 2])))\n     raises(ValueError, lambda: Matrix(5, -1, []))\n     raises(IndexError, lambda: Matrix((1, 2))[2])\n     with raises(IndexError):\n@@ -2995,4 +3015,4 @@ def test_deprecated():\n         m = Matrix(3, 3, [0, 1, 0, -4, 4, 0, -2, 1, 2])\n         P, Jcells = m.jordan_cells()\n         assert Jcells[1] == Matrix(1, 1, [2])\n-        assert Jcells[0] == Matrix(2, 2, [2, 1, 0, 2])\n+        assert Jcells[0] == Matrix(2, 2, [2, 1, 0, 2])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}