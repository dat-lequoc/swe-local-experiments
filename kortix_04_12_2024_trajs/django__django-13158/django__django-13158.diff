diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..2e90e1bbfb 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -918,6 +918,12 @@ class QuerySet:
 
     def none(self):
         """Return an empty QuerySet."""
+        if self.query.combinator:
+            # For combined queries, create a new empty queryset of the same model
+            empty_qs = self.model.objects.none()
+            clone = self._chain()
+            clone.query = empty_qs.query
+            return clone
         clone = self._chain()
         clone.query.set_empty()
         return clone
@@ -1976,4 +1982,4 @@ def get_related_populators(klass_info, select, db):
     for rel_klass_info in related_klass_infos:
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
-    return iterators
+    return iterators
\ No newline at end of file
diff --git a/django/forms/models.py b/django/forms/models.py
index ab611afca7..470f1b3f39 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1323,6 +1323,8 @@ class ModelMultipleChoiceField(ModelChoiceField):
         if self.required and not value:
             raise ValidationError(self.error_messages['required'], code='required')
         elif not self.required and not value:
+            if hasattr(self.queryset.query, 'combinator'):
+                return self.queryset.model.objects.none()
             return self.queryset.none()
         if not isinstance(value, (list, tuple)):
             raise ValidationError(
@@ -1352,6 +1354,34 @@ class ModelMultipleChoiceField(ModelChoiceField):
                 self.error_messages['invalid_list'],
                 code='invalid_list',
             )
+
+        # Handle combined queries specially
+        if hasattr(self.queryset.query, 'combined_queries'):
+            base_qs = self.queryset.model._default_manager
+            valid_pks = set()
+            
+            # Get all valid PKs from component queries
+            for component_query in self.queryset.query.combined_queries:
+                filtered_qs = base_qs.filter(component_query.where)
+                valid_pks.update(filtered_qs.values_list(key, flat=True))
+            
+            # Convert all values to strings for comparison
+            value_pks = {str(val) for val in value}
+            found_pks = {str(pk) for pk in valid_pks}
+            
+            # Check for invalid values
+            invalid_values = value_pks - found_pks
+            if invalid_values:
+                raise ValidationError(
+                    self.error_messages['invalid_choice'],
+                    code='invalid_choice',
+                    params={'value': next(iter(invalid_values))},
+                )
+            
+            # Return queryset with valid PKs
+            return self.queryset.model._default_manager.filter(**{'%s__in' % key: valid_pks})
+
+        # Original validation for non-combined queries
         for pk in value:
             try:
                 self.queryset.filter(**{key: pk})
@@ -1398,4 +1428,4 @@ def modelform_defines_fields(form_class):
     return hasattr(form_class, '_meta') and (
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
-    )
+    )
\ No newline at end of file
diff --git a/tests/forms_tests/test_combined_queries.py b/tests/forms_tests/test_combined_queries.py
new file mode 100644
index 0000000000..ace28a8835
--- /dev/null
+++ b/tests/forms_tests/test_combined_queries.py
@@ -0,0 +1,56 @@
+from django.db import models
+from django.forms import ModelMultipleChoiceField
+from django.test import TestCase
+
+class CombinedQueriesPublication(models.Model):
+    class Meta:
+        app_label = 'forms_tests'
+
+class CombinedQueriesArticle(models.Model):
+    publications = models.ManyToManyField(CombinedQueriesPublication)
+    class Meta:
+        app_label = 'forms_tests'
+
+class ModelMultipleChoiceFieldCombinedQueriesTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.p1 = CombinedQueriesPublication.objects.create(id=1)
+        cls.p2 = CombinedQueriesPublication.objects.create(id=2)
+        cls.p3 = CombinedQueriesPublication.objects.create(id=6)
+        cls.p4 = CombinedQueriesPublication.objects.create(id=7)
+
+    def test_none_with_combined_queries(self):
+        # Test with OR query
+        field1 = ModelMultipleChoiceField(
+            CombinedQueriesPublication.objects.filter(id__lt=2) | 
+            CombinedQueriesPublication.objects.filter(id__gt=5),
+            required=False,
+        )
+        self.assertEqual(list(field1.clean([])), [])
+
+        # Test with union query
+        field2 = ModelMultipleChoiceField(
+            CombinedQueriesPublication.objects.filter(id__lt=2).union(
+                CombinedQueriesPublication.objects.filter(id__gt=5)
+            ),
+            required=False,
+        )
+        self.assertEqual(list(field2.clean([])), [])
+
+    def test_none_with_combined_queries_values(self):
+        # Test that non-empty values work correctly with OR query
+        field1 = ModelMultipleChoiceField(
+            CombinedQueriesPublication.objects.filter(id__lt=2) | 
+            CombinedQueriesPublication.objects.filter(id__gt=5),
+            required=False,
+        )
+        self.assertEqual(list(field1.clean([self.p1.pk])), [self.p1])
+
+        # Test that non-empty values work correctly with union query
+        field2 = ModelMultipleChoiceField(
+            CombinedQueriesPublication.objects.filter(id__lt=2).union(
+                CombinedQueriesPublication.objects.filter(id__gt=5)
+            ),
+            required=False,
+        )
+        self.assertEqual(list(field2.clean([self.p1.pk])), [self.p1])
diff --git a/tests/forms_tests/tests/test_fields.py b/tests/forms_tests/tests/test_fields.py
new file mode 100644
index 0000000000..cb7b5d1de6
--- /dev/null
+++ b/tests/forms_tests/tests/test_fields.py
@@ -0,0 +1,37 @@
+from django.db import models
+from django.forms import ModelMultipleChoiceField
+from django.test import TestCase
+
+class Publication(models.Model):
+    class Meta:
+        app_label = 'forms_tests'
+
+class Article(models.Model):
+    publications = models.ManyToManyField(Publication)
+    class Meta:
+        app_label = 'forms_tests'
+
+class ModelMultipleChoiceFieldTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.p1 = Publication.objects.create(id=1)
+        cls.p2 = Publication.objects.create(id=2)
+        cls.p3 = Publication.objects.create(id=6)
+        cls.p4 = Publication.objects.create(id=7)
+
+    def test_none_with_combined_queries(self):
+        # Test with OR query
+        field1 = ModelMultipleChoiceField(
+            Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+            required=False,
+        )
+        self.assertEqual(list(field1.clean([])), [])
+
+        # Test with union query
+        field2 = ModelMultipleChoiceField(
+            Publication.objects.filter(id__lt=2).union(
+                Publication.objects.filter(id__gt=5)
+            ),
+            required=False,
+        )
+        self.assertEqual(list(field2.clean([])), [])
