{
  "instance_id": "scikit-learn__scikit-learn-12471",
  "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..f97418180 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -111,6 +111,9 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n                     Xi = Xi.copy()\n+                    # Convert to object dtype if dealing with strings to prevent truncation\n+                    if Xi.dtype.kind in ('U', 'S'):\n+                        Xi = Xi.astype(object)\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n@@ -839,4 +842,4 @@ class OrdinalEncoder(_BaseEncoder):\n             labels = X[:, i].astype('int64')\n             X_tr[:, i] = self.categories_[i][labels]\n \n-        return X_tr\n+        return X_tr\n\\ No newline at end of file\ndiff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex d5ac50a25..340f6085c 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -228,6 +228,17 @@ def test_one_hot_encoder_categorical_features():\n \n def test_one_hot_encoder_handle_unknown():\n     X = np.array([[0, 2, 1], [1, 0, 3], [1, 0, 2]])\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    # Test that handle_unknown='ignore' works with string dtypes\n+    X = np.array(['22', '333', '4444', '11111111']).reshape((-1,1))\n+    X_test = np.array(['55555', '22']).reshape((-1,1))\n+    enc = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    enc.fit(X)\n+    X_trans = enc.transform(X_test)\n+    assert X_trans.shape == (2, 4)  # 4 original categories\n+    assert X_trans[1, 0] == True  # '22' is known\n+    assert not np.any(X_trans[0])  # '55555' is unknown, all zeros\n     X2 = np.array([[4, 1, 1]])\n \n     # Test that one hot encoder raises error for unknown features\n@@ -658,4 +669,4 @@ def test_encoder_dtypes_pandas():\n def test_one_hot_encoder_warning():\n     enc = OneHotEncoder()\n     X = [['Male', 1], ['Female', 3]]\n-    np.testing.assert_no_warnings(enc.fit_transform, X)\n+    np.testing.assert_no_warnings(enc.fit_transform, X)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}