{
  "instance_id": "django__django-11422",
  "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..71421a2c24 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -579,10 +579,14 @@ def run_with_reloader(main_func, *args, **kwargs):\n     try:\n         if os.environ.get(DJANGO_AUTORELOAD_ENV) == 'true':\n             reloader = get_reloader()\n+            # Add the main script to watched files\n+            main_script = Path(sys.argv[0]).resolve()\n+            if main_script.exists():\n+                reloader.watch_file(main_script)\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n             start_django(reloader, main_func, *args, **kwargs)\n         else:\n             exit_code = restart_with_reloader()\n             sys.exit(exit_code)\n     except KeyboardInterrupt:\n-        pass\n+        pass\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 42bcd0a50b..7958c881e8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -192,6 +192,52 @@ class GetReloaderTests(SimpleTestCase):\n \n \n class RunWithReloaderTests(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        from django.conf import settings\n+        if not settings.configured:\n+            settings.configure(\n+                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},\n+                SECRET_KEY='dummy',\n+            )\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        from django.conf import settings\n+        if not settings.configured:\n+            settings.configure()\n+\n+    @mock.patch.dict(os.environ, {autoreload.DJANGO_AUTORELOAD_ENV: 'true'})\n+    @mock.patch('django.utils.autoreload.get_reloader')\n+    def test_watches_entry_point_script(self, mocked_get_reloader):\n+        script_path = Path(__file__).resolve()\n+        mock_reloader = mock.MagicMock()\n+        mocked_get_reloader.return_value = mock_reloader\n+        with mock.patch('sys.argv', [str(script_path)]):\n+            autoreload.run_with_reloader(lambda: None)\n+        mock_reloader.watch_file.assert_called_once_with(script_path)\n+\n+    @mock.patch.dict(os.environ, {autoreload.DJANGO_AUTORELOAD_ENV: 'true'})\n+    @mock.patch('django.utils.autoreload.get_reloader')\n+    def test_watches_entry_point_script(self, mocked_get_reloader):\n+        script_path = Path(__file__).resolve()\n+        mock_reloader = mock.MagicMock()\n+        mocked_get_reloader.return_value = mock_reloader\n+        with mock.patch('sys.argv', [str(script_path)]):\n+            autoreload.run_with_reloader(lambda: None)\n+        mock_reloader.watch_file.assert_called_once_with(script_path)\n+\n+    @mock.patch.dict(os.environ, {autoreload.DJANGO_AUTORELOAD_ENV: 'true'})\n+    @mock.patch('django.utils.autoreload.get_reloader')\n+    def test_watches_entry_point_script(self, mocked_get_reloader):\n+        script_path = Path(__file__).resolve()\n+        mock_reloader = mock.MagicMock()\n+        mocked_get_reloader.return_value = mock_reloader\n+        with mock.patch('sys.argv', [str(script_path)]):\n+            autoreload.run_with_reloader(lambda: None)\n+        mock_reloader.watch_file.assert_called_once_with(script_path)\n+\n     @mock.patch.dict(os.environ, {autoreload.DJANGO_AUTORELOAD_ENV: 'true'})\n     @mock.patch('django.utils.autoreload.get_reloader')\n     def test_swallows_keyboard_interrupt(self, mocked_get_reloader):\n@@ -641,4 +687,4 @@ class StatReloaderTests(ReloaderTests, IntegrationTests):\n         with mock.patch.object(self.reloader, 'watched_files', return_value=[self.existing_file, self.existing_file]):\n             snapshot = list(self.reloader.snapshot_files())\n             self.assertEqual(len(snapshot), 1)\n-            self.assertEqual(snapshot[0][0], self.existing_file)\n+            self.assertEqual(snapshot[0][0], self.existing_file)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}