{
  "instance_id": "django__django-12125",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..df8480aa66 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -91,6 +91,21 @@ class DeconstructableSerializer(BaseSerializer):\n     @staticmethod\n     def _serialize_path(path):\n         module, name = path.rsplit(\".\", 1)\n+        \n+        # Handle inner classes\n+        if '.' in name:\n+            # For inner classes, import the module but keep the full path\n+            parts = path.split('.')\n+            # Find the module part (everything before the first class)\n+            for i in range(len(parts)):\n+                if parts[i][0].isupper():\n+                    module = '.'.join(parts[:i])\n+                    break\n+            else:\n+                module = '.'.join(parts[:-1])\n+            return path, {\"import %s\" % module}\n+        \n+        # Special case for django.db.models\n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n@@ -337,4 +352,4 @@ def serializer_factory(value):\n         \"Cannot serialize: %r\\nThere are some values Django cannot serialize into \"\n         \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n         \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n-    )\n+    )\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_inner_classes.py b/tests/migrations/test_inner_classes.py\nnew file mode 100644\nindex 0000000000..1cac9e7c12\n--- /dev/null\n+++ b/tests/migrations/test_inner_classes.py\n@@ -0,0 +1,28 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase, override_settings\n+from django.db.migrations.writer import MigrationWriter\n+\n+# Configure test settings\n+from django.conf import settings\n+if not settings.configured:\n+    from tests.migrations.test_settings import *\n+    settings.configure(**locals())\n+\n+class OuterClass:\n+    class InnerField(models.CharField):\n+        pass\n+\n+class ModelWithInnerField(models.Model):\n+    field = OuterClass.InnerField(max_length=20)\n+\n+class InnerClassSerializationTests(SimpleTestCase):\n+    def test_inner_field_serialization(self):\n+        \"\"\"\n+        Test that inner field classes are properly serialized with their full path.\n+        \"\"\"\n+        field = ModelWithInnerField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        \n+        # The serialized string should contain the full path including the outer class\n+        self.assertIn('OuterClass.InnerField', string)\n+        self.assertIn('import tests.migrations.test_inner_classes', imports)\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_settings.py b/tests/migrations/test_settings.py\nnew file mode 100644\nindex 0000000000..3b502c0011\n--- /dev/null\n+++ b/tests/migrations/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests.migrations',\n+]\n+\n+SECRET_KEY = 'dummy'\n",
  "model_name_or_path": "KortixAI"
}