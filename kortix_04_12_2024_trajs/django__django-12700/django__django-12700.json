{
  "instance_id": "django__django-12700",
  "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..22c7d98c41 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,26 +80,44 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+    def cleanse_setting(self, key, value, seen=None):\n         \"\"\"\n-        Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        Cleanse an individual setting key/value of sensitive content.\n+        Handles nested data structures while preserving their types.\n         \"\"\"\n+        if seen is None:\n+            seen = set()\n+            \n         try:\n             if self.hidden_settings.search(key):\n-                cleansed = self.cleansed_substitute\n-            elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                return self.cleansed_substitute\n+                \n+            # Handle circular references\n+            if id(value) in seen:\n+                return value\n+                \n+            # Skip non-container types and strings\n+            if isinstance(value, (str, bytes)) or not hasattr(value, '__iter__'):\n+                if callable(value):\n+                    return CallableSettingWrapper(value)\n+                return value\n+                \n+            # Add current container to seen set\n+            seen.add(id(value))\n+            \n+            if isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v, seen) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                cleansed = [self.cleanse_setting(key, item, seen) for item in value]\n+                if not isinstance(value, list):\n+                    cleansed = type(value)(cleansed)\n             else:\n                 cleansed = value\n+                \n+            return cleansed\n         except TypeError:\n-            # If the key isn't regex-able, just return as-is.\n-            cleansed = value\n-\n-        if callable(cleansed):\n-            cleansed = CallableSettingWrapper(cleansed)\n-\n-        return cleansed\n+            # If the key isn't regex-able, just return as-is\n+            return value\n \n     def get_safe_settings(self):\n         \"\"\"\n@@ -520,4 +538,4 @@ def default_urlconf(request):\n         'version': get_docs_version(),\n     })\n \n-    return HttpResponse(t.render(c), content_type='text/html')\n+    return HttpResponse(t.render(c), content_type='text/html')\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}