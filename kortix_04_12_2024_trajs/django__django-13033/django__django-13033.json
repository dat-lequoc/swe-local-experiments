{
  "instance_id": "django__django-13033",
  "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..9d411d3ba4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -319,6 +319,79 @@ class SQLCompiler:\n                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n                     True))\n                 continue\n+            \n+            # Handle self-referential foreign key optimization\n+            if '.' in col:\n+                table, column = col.split('.', 1)\n+                if column.endswith('_id'):\n+                    field_name = column[:-3]\n+                    try:\n+                        field = self.query.model._meta.get_field(field_name)\n+                        if (isinstance(field, ForeignKey) and \n+                            field.remote_field.model == field.model):\n+                            # Use direct column reference for self-referential FK\n+                            order_by.append((\n+                                OrderBy(\n+                                    RawSQL('%s.%s' % (\n+                                        self.quote_name_unless_alias(table),\n+                                        column\n+                                    ), []),\n+                                    descending=descending\n+                                ),\n+                                False\n+                            ))\n+                            continue\n+                    except FieldDoesNotExist:\n+                        pass\n+            \n+            # Handle self-referential foreign key optimization\n+            if '.' in col:\n+                table, column = col.split('.', 1)\n+                if column.endswith('_id'):\n+                    field_name = column[:-3]\n+                    try:\n+                        field = self.query.model._meta.get_field(field_name)\n+                        if (isinstance(field, ForeignKey) and \n+                            field.remote_field.model == field.model):\n+                            # Use direct column reference for self-referential FK\n+                            order_by.append((\n+                                OrderBy(\n+                                    RawSQL('%s.%s' % (\n+                                        self.quote_name_unless_alias(table),\n+                                        column\n+                                    ), []),\n+                                    descending=descending\n+                                ),\n+                                False\n+                            ))\n+                            continue\n+                    except FieldDoesNotExist:\n+                        pass\n+            \n+            # Handle self-referential foreign key optimization\n+            if '.' in col:\n+                table, column = col.split('.', 1)\n+                if column.endswith('_id'):\n+                    field_name = column[:-3]\n+                    try:\n+                        field = self.query.model._meta.get_field(field_name)\n+                        if (isinstance(field, ForeignKey) and \n+                            field.remote_field.model == field.model):\n+                            # Use direct column reference for self-referential FK\n+                            order_by.append((\n+                                OrderBy(\n+                                    RawSQL('%s.%s' % (\n+                                        self.quote_name_unless_alias(table),\n+                                        column\n+                                    ), []),\n+                                    descending=descending\n+                                ),\n+                                False\n+                            ))\n+                            continue\n+                    except FieldDoesNotExist:\n+                        pass\n+            \n             if col in self.query.annotations:\n                 # References to an expression which is masked out of the SELECT\n                 # clause.\n@@ -1601,4 +1674,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):\n         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):\n             yield rows if col_count is None else [r[:col_count] for r in rows]\n     finally:\n-        cursor.close()\n+        cursor.close()\n\\ No newline at end of file\ndiff --git a/tests/queries/test_self_referential.py b/tests/queries/test_self_referential.py\nnew file mode 100644\nindex 0000000000..899a2c5fa7\n--- /dev/null\n+++ b/tests/queries/test_self_referential.py\n@@ -0,0 +1,31 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferentialTests(TestCase):\n+    def test_self_referential_fk_ordering(self):\n+        # Test ordering by self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql = str(qs.query)\n+        self.assertNotIn(\"LEFT OUTER JOIN\", sql)\n+        self.assertIn(\"ORDER BY\", sql)\n+        self.assertIn(\"root_id\", sql)\n+        \n+        # Test reverse ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\n+        qs = qs.order_by(\"-record__root_id\") \n+        sql = str(qs.query)\n+        self.assertNotIn(\"LEFT OUTER JOIN\", sql)\n+        self.assertIn(\"DESC\", sql)\n",
  "model_name_or_path": "KortixAI"
}