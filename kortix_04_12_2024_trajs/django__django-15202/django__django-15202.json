{
  "instance_id": "django__django-15202",
  "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..0a3a6cac99 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -117,17 +117,24 @@ class URLValidator(RegexValidator):\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n+                \n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n                     raise e\n+                \n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                parsed = urlsplit(value)\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+                \n+            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', parsed.netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -545,4 +552,4 @@ class ProhibitNullCharactersValidator:\n             isinstance(other, self.__class__) and\n             self.message == other.message and\n             self.code == other.code\n-        )\n+        )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}