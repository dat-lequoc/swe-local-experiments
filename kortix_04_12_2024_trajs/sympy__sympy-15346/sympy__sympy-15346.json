{
  "instance_id": "sympy__sympy-15346",
  "model_patch": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex 644b06d464..ca013baa4f 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -12,6 +12,13 @@\n \n def test_trigsimp1():\n     x, y = symbols('x,y')\n+    \n+    # Test rational arguments\n+    r = sin(Rational(1,50))*sin(Rational(1,25)) + cos(Rational(1,50))*cos(Rational(1,25))\n+    assert trigsimp(r) == cos(Rational(-1,50))\n+    \n+    # Original tests\n+    x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n     assert trigsimp(1 - cos(x)**2) == sin(x)**2\n@@ -427,4 +434,4 @@ def test_Piecewise():\n \n     # trigsimp tries not to touch non-trig containing args\n     assert trigsimp(Piecewise((e1, e3 < e2), (e3, True))) == \\\n-        Piecewise((e1, e3 < s2), (e3, True))\n+        Piecewise((e1, e3 < s2), (e3, True))\n\\ No newline at end of file\ndiff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8ba346adbe..ea3f1b2acd 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -6,7 +6,7 @@\n from sympy.core import (sympify, Basic, S, Expr, expand_mul, factor_terms,\n     Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand)\n from sympy.core.compatibility import reduce, iterable, SYMPY_INTS\n-from sympy.core.numbers import I, Integer\n+from sympy.core.numbers import I, Integer, Rational, Number\n from sympy.core.function import count_ops, _mexpand\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n@@ -928,6 +928,20 @@ def _trigsimp(expr, deep=False):\n     # protect the cache from non-trig patterns; we only allow\n     # trig patterns to enter the cache\n     if expr.has(*_trigs):\n+        # Pre-process rational arguments\n+        if any(isinstance(arg, Rational) for arg in expr.atoms(Number)):\n+            # First expand trig expressions\n+            expr = expr.expand(trig=True)\n+            # Try standard simplification first\n+            result = __trigsimp(expr, deep)\n+            # If no simplification occurred and we have rational args, try angle formula expansion\n+            if result == expr and expr.is_Add:\n+                # Look for sin/cos products that could be angle formulas\n+                args = expr.args\n+                rationals = [a for a in args if a.has(Rational)]\n+                if len(rationals) >= 2:\n+                    expr = expr.rewrite(cos)\n+            return __trigsimp(expr, deep)\n         return __trigsimp(expr, deep)\n     return expr\n \n@@ -1187,4 +1201,4 @@ def _eapply(func, e, cond=None):\n         return func(e)\n     return e.func(*[\n         _eapply(func, ei) if (cond is None or cond(ei)) else ei\n-        for ei in e.args])\n+        for ei in e.args])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}