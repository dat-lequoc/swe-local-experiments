{
  "instance_id": "pytest-dev__pytest-7220",
  "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 4a79bc861..0e85163d4 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -113,6 +113,7 @@ class Node(metaclass=NodeMeta):\n         fspath: Optional[py.path.local] = None,\n         nodeid: Optional[str] = None,\n     ) -> None:\n+        self._original_cwd = os.getcwd()\n         #: a unique name within the scope of the parent node\n         self.name = name\n \n@@ -604,4 +605,4 @@ class Item(Node):\n             fspath = py.path.local(location[0])\n         relfspath = self.session._node_location_to_relpath(fspath)\n         assert type(location[2]) is str\n-        return (relfspath, location[1], location[2])\n+        return (relfspath, location[1], location[2])\n\\ No newline at end of file\ndiff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 178df6004..4bda455ca 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -327,7 +327,11 @@ class CollectReport(BaseReport):\n \n     @property\n     def location(self):\n-        return (self.fspath, None, self.fspath)\n+        if hasattr(self, '_original_cwd'):\n+            fspath = os.path.relpath(self.fspath, self._original_cwd)\n+        else:\n+            fspath = self.fspath\n+        return (fspath, None, fspath)\n \n     def __repr__(self):\n         return \"<CollectReport {!r} lenresult={} outcome={!r}>\".format(\n@@ -505,4 +509,4 @@ def _report_kwargs_from_json(reportdict):\n             exception_info.addsection(*section)\n         reportdict[\"longrepr\"] = exception_info\n \n-    return reportdict\n+    return reportdict\n\\ No newline at end of file\ndiff --git a/testing/test_reports.py b/testing/test_reports.py\nindex 81778e27d..9fa5fc36b 100644\n--- a/testing/test_reports.py\n+++ b/testing/test_reports.py\n@@ -404,6 +404,34 @@ class TestReportSerialization:\n         result.stdout.fnmatch_lines([\"E   *Error: No module named 'unknown'\"])\n         result.stdout.no_fnmatch_line(\"ERROR  - *ConftestImportFailure*\")\n \n+    def test_directory_change_path_reporting(self, testdir):\n+        \"\"\"Test that paths are reported correctly when directory is changed in fixture\"\"\"\n+        testdir.makepyfile(\"\"\"\n+            import os\n+            import pytest\n+            \n+            @pytest.fixture\n+            def change_dir(tmpdir):\n+                old_dir = os.getcwd()\n+                os.chdir(str(tmpdir))\n+                yield\n+                os.chdir(old_dir)\n+                \n+            def test_show_path(change_dir):\n+                assert False\n+        \"\"\")\n+        \n+        result = testdir.runpytest()\n+        result.stdout.fnmatch_lines([\n+            \"*test_directory_change_path_reporting.py:*\",  # Should not show ../\n+        ])\n+        sub_dir = testdir.tmpdir.join(\"ns\").ensure_dir()\n+        sub_dir.join(\"conftest\").new(ext=\".py\").write(\"import unknown\")\n+\n+        result = testdir.runpytest_subprocess(\".\")\n+        result.stdout.fnmatch_lines([\"E   *Error: No module named 'unknown'\"])\n+        result.stdout.no_fnmatch_line(\"ERROR  - *ConftestImportFailure*\")\n+\n \n class TestHooks:\n     \"\"\"Test that the hooks are working correctly for plugins\"\"\"\n@@ -472,4 +500,4 @@ class TestHooks:\n         with pytest.raises(AssertionError):\n             _ = pytestconfig.hook.pytest_report_from_serializable(\n                 config=pytestconfig, data=data\n-            )\n+            )\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}