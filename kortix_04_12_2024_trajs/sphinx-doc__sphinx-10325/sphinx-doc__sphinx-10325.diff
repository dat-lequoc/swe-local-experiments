diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..19f9e3d7f 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -109,12 +109,21 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
     return {x.strip() for x in arg.split(',') if x.strip()}
 
 
-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
-    """Used to convert the :members: option to auto directives."""
+def inherited_members_option(arg: Any) -> Union[str, List[str]]:
+    """Used to convert the :inherited-members: option to auto directives.
+    
+    Accepts:
+    - None/True: Include all inherited members (returns 'object')
+    - str: Single class name to exclude
+    - comma-separated str: Multiple class names to exclude
+    """
     if arg in (None, True):
         return 'object'
-    else:
-        return arg
+    elif isinstance(arg, str):
+        if ',' in arg:
+            return [name.strip() for name in arg.split(',')]
+        return arg.strip()
+    return arg
 
 
 def member_order_option(arg: Any) -> Optional[str]:
@@ -636,6 +645,23 @@ class Documenter:
             for line, src in zip(more_content.data, more_content.items):
                 self.add_line(line, src[0], src[1])
 
+    def _is_class_member_from(self, member_class: Any, base_name: str) -> bool:
+        """Check if a member comes from a specific base class.
+        
+        Args:
+            member_class: The class to check
+            base_name: The base class name (can be qualified or unqualified)
+        """
+        if not member_class:
+            return False
+            
+        for cls in getattr(member_class, '__mro__', []):
+            # Check both qualified and unqualified names
+            if (cls.__module__ + "." + cls.__name__ == base_name or
+                cls.__name__ == base_name):
+                return True
+        return False
+
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         """Return `(members_check_module, members)` where `members` is a
         list of `(membername, member)` pairs of the members of *self.object*.
@@ -664,6 +690,57 @@ class Documenter:
             return False, [(m.name, m.value) for m in members.values()
                            if m.directly_defined]
 
+    def _is_class_member_from(self, member_class: Any, base_name: str) -> bool:
+        """Check if a member comes from a specific base class.
+        
+        Args:
+            member_class: The class to check
+            base_name: The base class name (can be qualified or unqualified)
+        """
+        if not member_class:
+            return False
+            
+        for cls in getattr(member_class, '__mro__', []):
+            # Check both qualified and unqualified names
+            if (cls.__module__ + "." + cls.__name__ == base_name or
+                cls.__name__ == base_name):
+                return True
+        return False
+
+    def _is_class_member_from(self, member_class: Any, base_name: str) -> bool:
+        """Check if a member comes from a specific base class.
+        
+        Args:
+            member_class: The class to check
+            base_name: The base class name (can be qualified or unqualified)
+        """
+        if not member_class:
+            return False
+            
+        for cls in getattr(member_class, '__mro__', []):
+            # Check both qualified and unqualified names
+            if (cls.__module__ + "." + cls.__name__ == base_name or
+                cls.__name__ == base_name):
+                return True
+        return False
+
+    def _is_class_member_from(self, member_class: Any, base_name: str) -> bool:
+        """Check if a member comes from a specific base class.
+        
+        Args:
+            member_class: The class to check
+            base_name: The base class name (can be qualified or unqualified)
+        """
+        if not member_class:
+            return False
+            
+        for cls in getattr(member_class, '__mro__', []):
+            # Check both qualified and unqualified names
+            if (cls.__module__ + "." + cls.__name__ == base_name or
+                cls.__name__ == base_name):
+                return True
+        return False
+
     def filter_members(self, members: ObjectMembers, want_all: bool
                        ) -> List[Tuple[str, Any, bool]]:
         """Filter the given member list.
@@ -681,11 +758,17 @@ class Documenter:
         """
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
+                bases = self.options.inherited_members
+                if isinstance(bases, str):
+                    bases = [bases]
+                    
                 for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
-                        # given member is a member of specified *super class*
-                        return True
-                    elif name in cls.__dict__:
+                    # Check if this class should be excluded
+                    for base in bases:
+                        if self._is_class_member_from(cls, base) and cls != self.object:
+                            return True
+                            
+                    if name in cls.__dict__:
                         return False
                     elif name in self.get_attr(cls, '__annotations__', {}):
                         return False
@@ -2900,4 +2983,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:
     app.setup_extension('sphinx.ext.autodoc.type_comment')
     app.setup_extension('sphinx.ext.autodoc.typehints')
 
-    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
+    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
\ No newline at end of file
diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py
index 1f1c7e9e7..698196956 100644
--- a/tests/test_ext_autodoc.py
+++ b/tests/test_ext_autodoc.py
@@ -769,6 +769,25 @@ def test_autodoc_inherited_members(app):
         '   .. py:method:: Derived.inheritedstaticmeth(cls)',
     ]
 
+def test_autodoc_inherited_members_multiple_bases(app):
+    # Test with single base class
+    options = {"members": None,
+               "inherited-members": "Base"}
+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)
+    assert list(filter(lambda l: 'method::' in l, actual)) == []
+
+    # Test with multiple base classes
+    options = {"members": None,
+               "inherited-members": "Base,object"}
+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)
+    assert list(filter(lambda l: 'method::' in l, actual)) == []
+
+    # Test with qualified name
+    options = {"members": None,
+               "inherited-members": "target.inheritance.Base"}
+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)
+    assert list(filter(lambda l: 'method::' in l, actual)) == []
+
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
 def test_autodoc_inherited_members_Base(app):
@@ -2507,4 +2526,4 @@ def test_canonical(app):
         '',
         '      docstring',
         '',
-    ]
+    ]
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index f0afd779b..30ca90275 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
