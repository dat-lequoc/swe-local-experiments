{
  "instance_id": "scikit-learn__scikit-learn-13779",
  "model_patch": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 2a19bc9a6..07f78ff69 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -348,6 +348,26 @@ def test_sample_weight():\n     assert_raise_message(ValueError, msg, eclf3.fit, X, y, sample_weight)\n \n \n+def test_sample_weight_with_none_estimator():\n+    \"\"\"Check that sample weight works with None estimators\"\"\"\n+    # Test that None estimator is properly handled with sample weights\n+    clf1 = LogisticRegression(random_state=123)\n+    clf2 = RandomForestClassifier(random_state=123)\n+    eclf = VotingClassifier(estimators=[\n+        ('lr', clf1), ('rf', clf2)],\n+        voting='soft')\n+    sample_weight = np.ones(len(y))\n+    \n+    # Should work with all estimators\n+    eclf.fit(X, y, sample_weight=sample_weight)\n+    \n+    # Should still work after setting one estimator to None\n+    eclf.set_params(lr=None)\n+    eclf.fit(X, y, sample_weight=sample_weight)\n+    \n+    # Should work with the remaining estimator\n+    assert_array_equal(eclf.predict(X), clf2.predict(X))\n+\n def test_sample_weight_kwargs():\n     \"\"\"Check that VotingClassifier passes sample_weight as kwargs\"\"\"\n     class MockClassifier(BaseEstimator, ClassifierMixin):\n@@ -506,4 +526,4 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n\\ No newline at end of file\ndiff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..b0942afdd 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n@@ -485,4 +485,4 @@ class VotingRegressor(_BaseVoting, RegressorMixin):\n             values predicted by each regressor.\n         \"\"\"\n         check_is_fitted(self, 'estimators_')\n-        return self._predict(X)\n+        return self._predict(X)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}