diff --git a/requests/adapters.py b/requests/adapters.py
index 841cbbfe..f52f794d 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,6 +27,8 @@ from .packages.urllib3.exceptions import ProtocolError
 from .packages.urllib3.exceptions import ReadTimeoutError
 from .packages.urllib3.exceptions import SSLError as _SSLError
 from .packages.urllib3.exceptions import ResponseError
+from .packages.urllib3.exceptions import DecodeError
+from .packages.urllib3.exceptions import TimeoutError
 from .cookies import extract_cookies_to_jar
 from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
                          ProxyError, RetryError)
@@ -203,6 +205,7 @@ class HTTPAdapter(BaseAdapter):
         :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
         :param resp: The urllib3 response object.
         """
+        try:
         response = Response()
 
         # Fallback to None if there's no status_code, for whatever reason.
@@ -228,7 +231,11 @@ class HTTPAdapter(BaseAdapter):
         response.request = req
         response.connection = self
 
-        return response
+            return response
+        except DecodeError as e:
+            raise ContentDecodingError(e, request=req)
+        except TimeoutError as e:
+            raise Timeout(e, request=req)
 
     def get_connection(self, url, proxies=None):
         """Returns a urllib3 connection for the given URL. This should not be
@@ -429,7 +436,11 @@ class HTTPAdapter(BaseAdapter):
                 raise SSLError(e, request=request)
             elif isinstance(e, ReadTimeoutError):
                 raise ReadTimeout(e, request=request)
+            elif isinstance(e, DecodeError):
+                raise ContentDecodingError(e, request=request)
+            elif isinstance(e, TimeoutError):
+                raise Timeout(e, request=request)
             else:
                 raise
 
-        return self.build_response(request, resp)
+        return self.build_response(request, resp)
\ No newline at end of file
diff --git a/test_requests.py b/test_requests.py
index 5f4f472a..3a44fdef 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -312,6 +312,34 @@ class RequestsTestCase(unittest.TestCase):
         with pytest.raises(ConnectionError):
             requests.get("http://httpbin.org:1", timeout=1)
 
+    def test_urllib3_decode_error_is_wrapped(self):
+        """Test that urllib3's DecodeError is wrapped as ContentDecodingError"""
+        from requests.packages.urllib3.exceptions import DecodeError
+        def throw_decode_error(*args, **kwargs):
+            raise DecodeError("Test decode error")
+        
+        s = requests.Session()
+        a = requests.adapters.HTTPAdapter()
+        s.mount('http://', a)
+        a.build_response = throw_decode_error
+        
+        with pytest.raises(requests.exceptions.ContentDecodingError):
+            s.get('http://example.com')
+
+    def test_urllib3_timeout_error_is_wrapped(self):
+        """Test that urllib3's TimeoutError is wrapped as Timeout"""
+        from requests.packages.urllib3.exceptions import TimeoutError
+        def throw_timeout_error(*args, **kwargs):
+            raise TimeoutError("Test timeout error")
+        
+        s = requests.Session()
+        a = requests.adapters.HTTPAdapter()
+        s.mount('http://', a)
+        a.build_response = throw_timeout_error
+        
+        with pytest.raises(requests.exceptions.Timeout):
+            s.get('http://example.com')
+
     def test_LocationParseError(self):
         """Inputing a URL that cannot be parsed should raise an InvalidURL error"""
         with pytest.raises(InvalidURL):
@@ -452,8 +480,10 @@ class RequestsTestCase(unittest.TestCase):
     def test_conflicting_post_params(self):
         url = httpbin('post')
         with open('requirements.txt') as f:
-            pytest.raises(ValueError, "requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})")
-            pytest.raises(ValueError, "requests.post(url, data=u('[{\"some\": \"data\"}]'), files={'some': f})")
+            with pytest.raises(ValueError):
+                requests.post(url, data='[{"some": "data"}]', files={'some': f})
+            with pytest.raises(ValueError):
+                requests.post(url, data=u('[{\"some\": \"data\"}]'), files={'some': f})
 
     def test_request_ok_set(self):
         r = requests.get(httpbin('status', '404'))
@@ -1663,4 +1693,4 @@ def test_vendor_aliases():
         from requests.packages import webbrowser
 
 if __name__ == '__main__':
-    unittest.main()
+    unittest.main()
\ No newline at end of file
