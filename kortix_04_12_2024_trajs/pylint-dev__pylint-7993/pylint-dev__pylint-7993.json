{
  "instance_id": "pylint-dev__pylint-7993",
  "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..d6f0422b6 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,7 +175,7 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"(?<!{)\\{([^:{]+?)(?::(?:[^}]+))?\\}(?!})\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n@@ -312,4 +312,4 @@ def register(linter: PyLinter) -> None:\n     linter.register_reporter(TextReporter)\n     linter.register_reporter(ParseableTextReporter)\n     linter.register_reporter(VSTextReporter)\n-    linter.register_reporter(ColorizedTextReporter)\n+    linter.register_reporter(ColorizedTextReporter)\n\\ No newline at end of file\ndiff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 37f3e5fd9..0066d57e4 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -81,6 +81,18 @@ def test_template_option_end_line(linter) -> None:\n     assert out_lines[2] == \"my_mod:2:0:2:4: C0301: Line too long (3/4) (line-too-long)\"\n \n \n+def test_template_with_double_braces(linter) -> None:\n+    \"\"\"Test the msg-template option with double braces.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    \n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+\n def test_template_option_non_existing(linter) -> None:\n     \"\"\"Test the msg-template option with non-existent options.\n     This makes sure that this option remains backwards compatible as new\n@@ -384,4 +396,4 @@ def test_display_results_is_renamed() -> None:\n     with pytest.raises(AttributeError) as exc:\n         # pylint: disable=no-member\n         reporter.display_results()  # type: ignore[attr-defined]\n-    assert \"no attribute 'display_results'\" in str(exc)\n+    assert \"no attribute 'display_results'\" in str(exc)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}