diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py
index 23af4d0bb..9dfc50e02 100644
--- a/src/_pytest/_io/saferepr.py
+++ b/src/_pytest/_io/saferepr.py
@@ -14,6 +14,8 @@ def _try_repr_or_str(obj):
 
 def _format_repr_exception(exc: BaseException, obj: Any) -> str:
     try:
+        if isinstance(exc, RuntimeError) and str(exc) == "No active exception to reraise":
+            return "<[%s() raised bare 'raise' statement]>" % obj.__class__.__name__
         exc_info = _try_repr_or_str(exc)
     except (KeyboardInterrupt, SystemExit):
         raise
@@ -100,4 +102,4 @@ class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):
 def _pformat_dispatch(object, indent=1, width=80, depth=None, *, compact=False):
     return AlwaysDispatchingPrettyPrinter(
         indent=indent, width=width, depth=depth, compact=compact
-    ).pformat(object)
+    ).pformat(object)
\ No newline at end of file
diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py
index 06084202e..bae8c7f05 100644
--- a/testing/io/test_saferepr.py
+++ b/testing/io/test_saferepr.py
@@ -149,8 +149,18 @@ def test_unicode():
     reprval = "'£€'"
     assert saferepr(val) == reprval
 
+def test_bare_raise_in_repr():
+    class BareRaiseRepr:
+        def __repr__(self):
+            raise
+    
+    obj = BareRaiseRepr()
+    result = saferepr(obj)
+    assert "bare 'raise' statement" in result
+    assert "BareRaiseRepr" in result
+
 
 def test_pformat_dispatch():
     assert _pformat_dispatch("a") == "'a'"
     assert _pformat_dispatch("a" * 10, width=5) == "'aaaaaaaaaa'"
-    assert _pformat_dispatch("foo bar", width=5) == "('foo '\n 'bar')"
+    assert _pformat_dispatch("foo bar", width=5) == "('foo '\n 'bar')"
\ No newline at end of file
