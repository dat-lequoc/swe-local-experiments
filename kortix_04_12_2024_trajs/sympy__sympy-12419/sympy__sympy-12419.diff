diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index b4d759836e..f2df68ddbd 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -484,6 +484,10 @@ def _entry(self, i, j):
     def _eval_determinant(self):
         return S.One
 
+    def _eval_sum_all_elements(self):
+        """Returns the sum of all elements of the identity matrix."""
+        return self.rows
+
 
 class ZeroMatrix(MatrixExpr):
     """The Matrix Zero 0 - additive identity
@@ -545,4 +549,4 @@ def matrix_symbols(expr):
 from .matadd import MatAdd
 from .matpow import MatPow
 from .transpose import Transpose
-from .inverse import Inverse
+from .inverse import Inverse
\ No newline at end of file
diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py
index 33e1220722..e16ff117f6 100644
--- a/sympy/matrices/tests/test_matrices.py
+++ b/sympy/matrices/tests/test_matrices.py
@@ -109,6 +109,16 @@ def test_fancy_index_matrix():
         [0, 4, 0, 4]])
 
 
+def test_identity_sum():
+    from sympy import Identity, Symbol, Sum
+    n = Symbol('n', integer=True, positive=True)
+    i, j = symbols('i j', integer=True)
+    I = Identity(n)
+    # Test sum of all elements
+    assert Sum(Sum(I[i,j], (i, 0, n-1)), (j, 0, n-1)).doit() == n
+    # Test specific size
+    assert Sum(Sum(Identity(3)[i,j], (i, 0, 2)), (j, 0, 2)).doit() == 3
+
 def test_multiplication():
     a = Matrix((
         (1, 2),
@@ -2882,4 +2892,4 @@ def test_as_real_imag():
     for kls in classes:
         a,b = kls(m3).as_real_imag()
         assert list(a) == list(m1)
-        assert list(b) == list(m1)
+        assert list(b) == list(m1)
\ No newline at end of file
