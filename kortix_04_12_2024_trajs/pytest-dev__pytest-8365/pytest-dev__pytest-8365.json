{
  "instance_id": "pytest-dev__pytest-8365",
  "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..429a13796 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -148,13 +148,35 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+def sanitize_username(username: Optional[str]) -> str:\n+    \"\"\"Sanitize username for use in temporary directory paths.\"\"\"\n+    if not username:\n+        return \"unknown\"\n+    illegal_chars = r'\\/:*?\"<>|'\n+    result = []\n+    was_special = False\n+    \n+    for c in username:\n+        if c in illegal_chars:\n+            if not was_special:\n+                result.append('_')\n+                was_special = True\n+        else:\n+            result.append(c)\n+            was_special = False\n+            \n+    return ''.join(result)\n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        if not username:\n+            return None\n+        return sanitize_username(username)\n     except (ImportError, KeyError):\n         return None\n \n@@ -228,4 +250,4 @@ def tmp_path(request: FixtureRequest, tmp_path_factory: TempPathFactory) -> Path\n     The returned object is a :class:`pathlib.Path` object.\n     \"\"\"\n \n-    return _mk_tmp(request, tmp_path_factory)\n+    return _mk_tmp(request, tmp_path_factory)\n\\ No newline at end of file\ndiff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex d123287aa..de90c816e 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -243,7 +243,19 @@ def test_get_user(monkeypatch):\n     \"\"\"\n     monkeypatch.delenv(\"USER\", raising=False)\n     monkeypatch.delenv(\"USERNAME\", raising=False)\n-    assert get_user() is None\n+    assert get_user() == \"unknown\"\n+\n+def test_get_user_with_domain(monkeypatch):\n+    \"\"\"Test that get_user() handles domain usernames correctly.\"\"\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"domain\\\\user\")\n+    assert get_user() == \"domain_user\"\n+\n+def test_get_user_with_special_chars(monkeypatch):\n+    \"\"\"Test that get_user() handles usernames with special characters.\"\"\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: 'user:*?\"<>|with/bad\\\\chars')\n+    sanitized = get_user()\n+    assert all(c not in r'\\/:*?\"<>|' for c in sanitized)\n+    assert sanitized == \"user_____with_bad_chars\"\n \n \n class TestNumberedDir:\n@@ -444,4 +456,4 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n     assert result.ret == 0\n     # running a second time and ensure we don't crash\n     result = pytester.runpytest(\"--basetemp=tmp\")\n-    assert result.ret == 0\n+    assert result.ret == 0\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}