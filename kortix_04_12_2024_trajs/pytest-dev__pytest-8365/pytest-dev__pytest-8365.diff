diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py
index 29c7e19d7..429a13796 100644
--- a/src/_pytest/tmpdir.py
+++ b/src/_pytest/tmpdir.py
@@ -148,13 +148,35 @@ class TempdirFactory:
         return py.path.local(self._tmppath_factory.getbasetemp().resolve())
 
 
+def sanitize_username(username: Optional[str]) -> str:
+    """Sanitize username for use in temporary directory paths."""
+    if not username:
+        return "unknown"
+    illegal_chars = r'\/:*?"<>|'
+    result = []
+    was_special = False
+    
+    for c in username:
+        if c in illegal_chars:
+            if not was_special:
+                result.append('_')
+                was_special = True
+        else:
+            result.append(c)
+            was_special = False
+            
+    return ''.join(result)
+
 def get_user() -> Optional[str]:
     """Return the current user name, or None if getuser() does not work
     in the current environment (see #1010)."""
     import getpass
 
     try:
-        return getpass.getuser()
+        username = getpass.getuser()
+        if not username:
+            return None
+        return sanitize_username(username)
     except (ImportError, KeyError):
         return None
 
@@ -228,4 +250,4 @@ def tmp_path(request: FixtureRequest, tmp_path_factory: TempPathFactory) -> Path
     The returned object is a :class:`pathlib.Path` object.
     """
 
-    return _mk_tmp(request, tmp_path_factory)
+    return _mk_tmp(request, tmp_path_factory)
\ No newline at end of file
diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py
index d123287aa..de90c816e 100644
--- a/testing/test_tmpdir.py
+++ b/testing/test_tmpdir.py
@@ -243,7 +243,19 @@ def test_get_user(monkeypatch):
     """
     monkeypatch.delenv("USER", raising=False)
     monkeypatch.delenv("USERNAME", raising=False)
-    assert get_user() is None
+    assert get_user() == "unknown"
+
+def test_get_user_with_domain(monkeypatch):
+    """Test that get_user() handles domain usernames correctly."""
+    monkeypatch.setattr("getpass.getuser", lambda: "domain\\user")
+    assert get_user() == "domain_user"
+
+def test_get_user_with_special_chars(monkeypatch):
+    """Test that get_user() handles usernames with special characters."""
+    monkeypatch.setattr("getpass.getuser", lambda: 'user:*?"<>|with/bad\\chars')
+    sanitized = get_user()
+    assert all(c not in r'\/:*?"<>|' for c in sanitized)
+    assert sanitized == "user_____with_bad_chars"
 
 
 class TestNumberedDir:
@@ -444,4 +456,4 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:
     assert result.ret == 0
     # running a second time and ensure we don't crash
     result = pytester.runpytest("--basetemp=tmp")
-    assert result.ret == 0
+    assert result.ret == 0
\ No newline at end of file
