diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 488d6a77cd..bc53f01b1d 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -25,6 +25,8 @@ def format(
         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).
     * thousand_sep: Thousand separator symbol (for example ",")
     """
+    if number is None or number == "":
+        return ""
     use_grouping = (
         use_l10n or (use_l10n is None and settings.USE_L10N)
     ) and settings.USE_THOUSAND_SEPARATOR
@@ -101,4 +103,4 @@ def format(
             int_part_gd += digit
             cnt += 1
         int_part = int_part_gd[::-1]
-    return sign + int_part + dec_part
+    return sign + int_part + dec_part
\ No newline at end of file
diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py
index cec3e4c385..cf71bcc9de 100644
--- a/tests/utils_tests/test_numberformat.py
+++ b/tests/utils_tests/test_numberformat.py
@@ -160,6 +160,13 @@ class TestNumberFormat(SimpleTestCase):
                     nformat(Decimal(value), ".", decimal_pos), expected_value
                 )
 
+    def test_none_empty_values(self):
+        """Test handling of None and empty string values."""
+        self.assertEqual(nformat(None, "."), "")
+        self.assertEqual(nformat("", "."), "")
+        self.assertEqual(nformat("", ".", decimal_pos=2), "")
+        self.assertEqual(nformat(None, ".", decimal_pos=2), "")
+
     def test_decimal_subclass(self):
         class EuroDecimal(Decimal):
             """
@@ -171,4 +178,4 @@ class TestNumberFormat(SimpleTestCase):
                 return "€ {}".format(amount)
 
         price = EuroDecimal("1.23")
-        self.assertEqual(nformat(price, ","), "€ 1,23")
+        self.assertEqual(nformat(price, ","), "€ 1,23")
\ No newline at end of file
