diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..5fcc002fce 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -886,9 +886,89 @@ def _print_FunctionMatrix(self, X):
         D = prettyForm(*D.parens('[', ']'))
         return D
 
+    def _print_VectorMul(self, expr):
+        measure = expr.measure_number
+        base = expr.base_vector
+        
+        # Print measure number with proper precedence
+        pform = self._print(measure)
+        if pform.binding > prettyForm.MUL:
+            pform = prettyForm(*pform.parens())
+            
+        # Print base vector
+        vform = self._print(base)
+        
+        # Combine with proper spacing and baseline
+        pform = prettyForm(*pform.right(' ', vform))
+        # Center the baseline between measure and vector
+        pform.baseline = (pform.baseline + vform.baseline) // 2
+        
+        return pform
+
+    def _print_VectorMul(self, expr):
+        measure = expr.measure_number
+        base = expr.base_vector
+        
+        # Print measure number with proper precedence
+        pform = self._print(measure)
+        if pform.binding > prettyForm.MUL:
+            pform = prettyForm(*pform.parens())
+            
+        # Print base vector
+        vform = self._print(base)
+        
+        # Combine with proper spacing and baseline
+        pform = prettyForm(*pform.right(' ', vform))
+        # Center the baseline between measure and vector
+        pform.baseline = (pform.baseline + vform.baseline) // 2
+        
+        return pform
+
+    def _print_VectorMul(self, expr):
+        measure = expr.measure_number
+        base = expr.base_vector
+        
+        # Print measure number with proper precedence
+        pform = self._print(measure)
+        if pform.binding > prettyForm.MUL:
+            pform = prettyForm(*pform.parens())
+            
+        # Print base vector
+        vform = self._print(base)
+        
+        # Combine with proper spacing and baseline
+        pform = prettyForm(*pform.right(' ', vform))
+        # Center the baseline between measure and vector
+        pform.baseline = (pform.baseline + vform.baseline) // 2
+        
+        return pform
+
+    def _print_VectorMul(self, expr):
+        measure = expr.measure_number
+        base = expr.base_vector
+
+        # Print measure number with proper precedence
+        pform = self._print(measure)
+        if pform.binding > prettyForm.MUL:
+            pform = prettyForm(*pform.parens())
+
+        # Print base vector
+        vform = self._print(base)
+
+        # Combine with proper spacing and baseline
+        pform = prettyForm(*pform.right(' ', vform))
+        pform.baseline = (pform.baseline + vform.baseline) // 2
+
+        return pform
+
     def _print_BasisDependent(self, expr):
         from sympy.vector import Vector
-
+        
+        if isinstance(expr, Vector):
+            if expr == Vector.zero:
+                return prettyForm('0')
+            return self._print_Add(expr)
+            
         if not self._use_unicode:
             raise NotImplementedError("ASCII pretty printing of BasisDependent is not implemented")
 
@@ -2362,4 +2442,4 @@ def pager_print(expr, **settings):
     from locale import getpreferredencoding
     if 'num_columns' not in settings:
         settings['num_columns'] = 500000  # disable line wrap
-    pager(pretty(expr, **settings).encode(getpreferredencoding()))
+    pager(pretty(expr, **settings).encode(getpreferredencoding()))
\ No newline at end of file
diff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py
index 84f1c086d6..5f8ee70b91 100644
--- a/sympy/vector/tests/test_printing.py
+++ b/sympy/vector/tests/test_printing.py
@@ -128,6 +128,13 @@ def test_pretty_printing_ascii():
 
 def test_pretty_print_unicode():
     assert upretty(v[0]) == u'0'
+    
+    # Test power expression with vector
+    from sympy.abc import x, y, t
+    expr = (x/y)**t * N.j
+    result = upretty(expr)
+    assert 'N.j' in result  # Vector component appears once
+    assert '(' in result and ')' in result  # Proper parentheses
     assert upretty(v[1]) == u'N_i'
     assert upretty(v[5]) == u'(a) N_i + (-b) N_j'
     # Make sure the printing works in other objects
@@ -174,4 +181,4 @@ def test_custom_names():
     assert A.i._pretty_form == 'A_i'
     assert A.x._pretty_form == 'A_x'
     assert A.i._latex_form == r'\mathbf{{i}_{A}}'
-    assert A.x._latex_form == r"\mathbf{\hat{x}_{A}}"
+    assert A.x._latex_form == r"\mathbf{\hat{x}_{A}}"
\ No newline at end of file
