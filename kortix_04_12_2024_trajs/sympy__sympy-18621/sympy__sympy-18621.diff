diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 11aebbc59f..edd605c66c 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -324,6 +324,33 @@ def colblocksizes(self):
     def _eval_inverse(self, expand='ignored'):
         return BlockDiagMatrix(*[mat.inverse() for mat in self.args])
 
+    def _entry(self, i, j, **kwargs):
+        # For single element case
+        if len(self.args) == 1:
+            return self.args[0][i, j]
+        
+        # For multiple elements, calculate the block position
+        row_block = 0
+        col_block = 0
+        row_offset = 0
+        col_offset = 0
+        
+        for k, size in enumerate(self.rowblocksizes):
+            if i < row_offset + size:
+                row_block = k
+                break
+            row_offset += size
+            
+        for k, size in enumerate(self.colblocksizes):
+            if j < col_offset + size:
+                col_block = k
+                break
+            col_offset += size
+            
+        if row_block == col_block:
+            return self.args[row_block][i - row_offset, j - col_offset]
+        return 0
+
     def _eval_transpose(self):
         return BlockDiagMatrix(*[mat.transpose() for mat in self.args])
 
@@ -568,4 +595,4 @@ def blockcut(expr, rowsizes, colsizes):
     colbounds = bounds(colsizes)
     return BlockMatrix([[MatrixSlice(expr, rowbound, colbound)
                          for colbound in colbounds]
-                         for rowbound in rowbounds])
+                         for rowbound in rowbounds])
\ No newline at end of file
diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py
index 9d778737b0..f7617ca201 100644
--- a/sympy/matrices/expressions/tests/test_blockmatrix.py
+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py
@@ -228,3 +228,16 @@ def test_block_collapse_type():
     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
+
+def test_single_element_blockdiag():
+    # Test for single element BlockDiagMatrix conversion
+    M = Matrix([[1, 2], [3, 4]])
+    D = BlockDiagMatrix(M)
+    # Test direct element access
+    assert D[0, 0] == 1
+    assert D[0, 1] == 2
+    assert D[1, 0] == 3
+    assert D[1, 1] == 4
+    # Test conversion to regular Matrix
+    B = Matrix(D)
+    assert B == M
\ No newline at end of file
