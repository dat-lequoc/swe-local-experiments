{
  "instance_id": "matplotlib__matplotlib-18869",
  "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..7b660be704 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -148,6 +148,11 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global version_info  # cache it\n+        version = __getattr__(\"__version__\")  # ensure __version__ is set\n+        version_info = _version._parse_version(version)\n+        return version_info\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n@@ -1409,4 +1414,4 @@ def _preprocess_data(func=None, *, replace_names=None, label_namer=None):\n \n _log.debug('interactive is %s', is_interactive())\n _log.debug('platform is %s', sys.platform)\n-_log.debug('loaded modules: %s', list(sys.modules))\n+_log.debug('loaded modules: %s', list(sys.modules))\n\\ No newline at end of file\ndiff --git a/lib/matplotlib/tests/test_version.py b/lib/matplotlib/tests/test_version.py\nnew file mode 100644\nindex 0000000000..24dc500007\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_version.py\n@@ -0,0 +1,38 @@\n+import pytest\n+import matplotlib as mpl\n+from matplotlib import _version\n+\n+def test_version_info_exists():\n+    \"\"\"Test that version_info exists and has correct format.\"\"\"\n+    assert hasattr(mpl, 'version_info')\n+    assert len(mpl.version_info) == 5\n+    assert all(isinstance(x, (int, str)) for x in mpl.version_info)\n+    assert isinstance(mpl.version_info[0], int)  # major\n+    assert isinstance(mpl.version_info[1], int)  # minor\n+    assert isinstance(mpl.version_info[2], int)  # micro\n+    assert isinstance(mpl.version_info[3], str)  # releaselevel\n+    assert isinstance(mpl.version_info[4], int)  # serial\n+\n+def test_version_info_components():\n+    \"\"\"Test that version_info components match version string.\"\"\"\n+    major, minor, micro, releaselevel, serial = mpl.version_info\n+    version = mpl.__version__\n+    \n+    # Basic version number check\n+    assert str(major) == version.split('.')[0]\n+    assert str(minor) == version.split('.')[1]\n+    \n+    # Version info should be comparable\n+    assert mpl.version_info >= (0, 0, 0, 'alpha', 0)\n+    assert mpl.version_info > (0, 0, 0, 'alpha', 0)\n+    \n+    # Development versions should parse correctly\n+    if 'dev' in version:\n+        assert releaselevel == 'dev'\n+        assert serial > 0\n+    elif any(x in version for x in ('a', 'b', 'rc')):\n+        assert releaselevel in ('alpha', 'beta', 'candidate')\n+        assert serial > 0\n+    else:\n+        assert releaselevel == 'final'\n+        assert serial == 0\n",
  "model_name_or_path": "KortixAI"
}