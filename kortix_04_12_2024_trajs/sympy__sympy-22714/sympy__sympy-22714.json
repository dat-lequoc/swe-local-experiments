{
  "instance_id": "sympy__sympy-22714",
  "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..8a32fff9c1 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,10 +152,17 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n-            raise ValueError('Imaginary coordinates are not permitted.')\n+        # Convert coordinates to SymPy expressions first\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n+        coords = [sympify(a, strict=True, evaluate=evaluate) for a in coords]\n+        \n+        # Type validation\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n+            \n+        # Imaginary check respecting evaluate=False\n+        if any(a.is_number and (not evaluate or im(a).is_number) and im(a) for a in coords):\n+            raise ValueError('Imaginary coordinates are not permitted.')\n \n         # pad with zeros appropriately\n         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))\n@@ -1373,4 +1380,4 @@ def z(self):\n         >>> p.z\n         1\n         \"\"\"\n-        return self.args[2]\n+        return self.args[2]\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}