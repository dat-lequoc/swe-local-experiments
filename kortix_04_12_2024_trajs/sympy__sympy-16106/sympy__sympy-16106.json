{
  "instance_id": "sympy__sympy-16106",
  "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..47bb715716 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -1025,6 +1025,29 @@ def _print_Tuple(self, e):\n         mrow.appendChild(x)\n         return mrow\n \n+    def _print_Indexed(self, e):\n+        \"\"\"Handles printing of indexed objects in Presentation MathML.\"\"\"\n+        mrow = self.dom.createElement('mrow')\n+        if len(e.indices) == 1:\n+            msub = self.dom.createElement('msub')\n+            msub.appendChild(self._print(e.base))\n+            msub.appendChild(self._print(e.indices[0]))\n+            mrow.appendChild(msub)\n+        else:\n+            msubsup = self.dom.createElement('msubsup')\n+            msubsup.appendChild(self._print(e.base))\n+            # Create a mrow for multiple indices\n+            indices_row = self.dom.createElement('mrow')\n+            for i, index in enumerate(e.indices):\n+                if i > 0:\n+                    comma = self.dom.createElement('mo')\n+                    comma.appendChild(self.dom.createTextNode(','))\n+                    indices_row.appendChild(comma)\n+                indices_row.appendChild(self._print(index))\n+            msubsup.appendChild(indices_row)\n+            mrow.appendChild(msubsup)\n+        return mrow\n+\n     def _print_Interval(self, i):\n         mrow = self.dom.createElement('mrow')\n         brac = self.dom.createElement('mfenced')\n@@ -1318,4 +1341,4 @@ def print_mathml(expr, printer='content', **settings):\n     print(pretty_xml)\n \n #For backward compatibility\n-MathMLPrinter = MathMLContentPrinter\n+MathMLPrinter = MathMLContentPrinter\n\\ No newline at end of file\ndiff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\nindex 74e09fb2b5..f9cc8a1832 100644\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -1,4 +1,4 @@\n-from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, \\\n+from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, IndexedBase, \\\n     tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh, E, I, oo, \\\n     pi, GoldenRatio, EulerGamma, Sum, Eq, Ne, Ge, Lt, Float, Matrix, Basic, S, \\\n     MatrixSymbol, Function, Derivative, log, Lambda\n@@ -383,6 +383,20 @@ def test_content_symbol():\n     del mml\n \n \n+def test_content_mathml_indexed():\n+    # Test indexed objects in content MathML\n+    x = Symbol('x')\n+    A = IndexedBase('A')\n+    assert mathml(A[x]) == '<apply><selector/><ci>A</ci><ci>x</ci></apply>'\n+    assert mathml(A[1,2]) == '<apply><selector/><ci>A</ci><cn>1</cn><cn>2</cn></apply>'\n+\n+def test_presentation_mathml_indexed():\n+    # Test indexed objects in presentation MathML\n+    x = Symbol('x')\n+    A = IndexedBase('A')\n+    assert mathml(A[x], printer='presentation') == '<mrow><msub><mi>A</mi><mi>x</mi></msub></mrow>'\n+    assert mathml(A[1,2], printer='presentation') == '<mrow><msubsup><mi>A</mi><mrow><mn>1</mn><mo>,</mo><mn>2</mn></mrow></msubsup></mrow>'\n+\n def test_content_mathml_greek():\n     mml = mp._print(Symbol('alpha'))\n     assert mml.nodeName == 'ci'\n@@ -1138,4 +1152,4 @@ def test_print_matrix_symbol():\n def test_print_random_symbol():\n     R = RandomSymbol(Symbol('R'))\n     assert mpp.doprint(R) == '<mi>R</mi>'\n-    assert mp.doprint(R) == '<ci>R</ci>'\n+    assert mp.doprint(R) == '<ci>R</ci>'\n\\ No newline at end of file\ndiff --git a/sympy/utilities/pytest.py b/sympy/utilities/pytest.py\nindex b07f91c6ff..2aa4d12b04 100644\n--- a/sympy/utilities/pytest.py\n+++ b/sympy/utilities/pytest.py\n@@ -197,7 +197,7 @@ def warns(warningcls, **kwargs):\n \n \n else:\n-    XFAIL = py.test.mark.xfail\n+    XFAIL = pytest.mark.xfail\n     slow = py.test.mark.slow\n \n     def SKIP(reason):\n@@ -281,4 +281,4 @@ def ignore_warnings(warningcls):\n     # Reissue any warnings that we aren't testing for\n     for w in warnrec:\n         if not issubclass(w.category, warningcls):\n-            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n+            warnings.warn_explicit(w.message, w.category, w.filename, w.lineno)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}