{
  "instance_id": "django__django-13447",
  "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..08abfd429e 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -466,6 +466,7 @@ class AdminSite:\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +535,7 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n@@ -566,4 +567,4 @@ class DefaultAdminSite(LazyObject):\n # You can provide your own AdminSite using the (Simple)AdminConfig.default_site\n # attribute. You can also instantiate AdminSite in your own code to create a\n # custom admin site.\n-site = DefaultAdminSite()\n+site = DefaultAdminSite()\n\\ No newline at end of file\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex b1658941ee..7c5ab0bfc5 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -617,6 +617,15 @@ class AdminViewBasicTest(AdminViewBasicTestCase):\n         response.context['cl'].list_display = ['id', 'name', 'state_id']\n         self.assertIs(response.context['cl'].has_related_field_in_list_display(), False)\n \n+    def test_build_app_dict_model_available(self):\n+        \"\"\"The model class should be available in the app_dict.\"\"\"\n+        response = self.client.get(reverse('admin:index'))\n+        app_list = response.context['app_list']\n+        for app in app_list:\n+            for model_dict in app['models']:\n+                self.assertIn('model', model_dict)\n+                self.assertIsNotNone(model_dict['model'])\n+\n     def test_has_related_field_in_list_display_o2o(self):\n         \"\"\"Joins shouldn't be performed for <O2O>_id fields in list display.\"\"\"\n         media = Media.objects.create(name='Foo')\n@@ -6730,4 +6739,4 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         unknown_url = '/unknown/'\n         response = self.client.get(unknown_url)\n         # Does not redirect to the admin login.\n-        self.assertEqual(response.status_code, 404)\n+        self.assertEqual(response.status_code, 404)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}