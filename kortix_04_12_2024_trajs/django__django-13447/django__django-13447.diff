diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 837dabfea8..08abfd429e 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -430,7 +430,7 @@ class AdminSite:
                     return HttpResponsePermanentRedirect(path)
         raise Http404
 
-    def _build_app_dict(self, request, label=None):
+    def build_app_dict(self, request, label=None):
         """
         Build the app dictionary. The optional `label` parameter filters models
         of a specific app.
@@ -466,6 +466,7 @@ class AdminSite:
                 'perms': perms,
                 'admin_url': None,
                 'add_url': None,
+                'model': model,
             }
             if perms.get('change') or perms.get('view'):
                 model_dict['view_only'] = not perms.get('change')
@@ -503,7 +504,7 @@ class AdminSite:
         Return a sorted list of all the installed apps that have been
         registered in this site.
         """
-        app_dict = self._build_app_dict(request)
+        app_dict = self.build_app_dict(request)
 
         # Sort the apps alphabetically.
         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
@@ -534,7 +535,7 @@ class AdminSite:
         return TemplateResponse(request, self.index_template or 'admin/index.html', context)
 
     def app_index(self, request, app_label, extra_context=None):
-        app_dict = self._build_app_dict(request, app_label)
+        app_dict = self.build_app_dict(request, app_label)
         if not app_dict:
             raise Http404('The requested admin page does not exist.')
         # Sort the models alphabetically within each app.
@@ -566,4 +567,4 @@ class DefaultAdminSite(LazyObject):
 # You can provide your own AdminSite using the (Simple)AdminConfig.default_site
 # attribute. You can also instantiate AdminSite in your own code to create a
 # custom admin site.
-site = DefaultAdminSite()
+site = DefaultAdminSite()
\ No newline at end of file
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index b1658941ee..7c5ab0bfc5 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -617,6 +617,15 @@ class AdminViewBasicTest(AdminViewBasicTestCase):
         response.context['cl'].list_display = ['id', 'name', 'state_id']
         self.assertIs(response.context['cl'].has_related_field_in_list_display(), False)
 
+    def test_build_app_dict_model_available(self):
+        """The model class should be available in the app_dict."""
+        response = self.client.get(reverse('admin:index'))
+        app_list = response.context['app_list']
+        for app in app_list:
+            for model_dict in app['models']:
+                self.assertIn('model', model_dict)
+                self.assertIsNotNone(model_dict['model'])
+
     def test_has_related_field_in_list_display_o2o(self):
         """Joins shouldn't be performed for <O2O>_id fields in list display."""
         media = Media.objects.create(name='Foo')
@@ -6730,4 +6739,4 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):
         unknown_url = '/unknown/'
         response = self.client.get(unknown_url)
         # Does not redirect to the admin login.
-        self.assertEqual(response.status_code, 404)
+        self.assertEqual(response.status_code, 404)
\ No newline at end of file
