{
  "instance_id": "django__django-10924",
  "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..54f6e4eb49 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1668,6 +1668,37 @@ class FilePathField(Field):\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def get_path(self):\n+        \"\"\"Resolve the path at runtime.\"\"\"\n+        path = self.path\n+        if callable(path):\n+            path = path()\n+        if path is None:\n+            return ''\n+        return os.path.abspath(path)</old_string>\n+        </replacement>\n+        <replacement>\n+            <old_string>    def formfield(self, **kwargs):\n+        return super().formfield(**{\n+            'path': self.get_path(),\n+            'match': self.match,\n+            'recursive': self.recursive,\n+            'form_class': forms.FilePathField,\n+            'allow_files': self.allow_files,\n+            'allow_folders': self.allow_folders,\n+            **kwargs,\n+        })</old_string>\n+            <new_string>    def formfield(self, **kwargs):\n+        return super().formfield(**{\n+            'path': self.get_path(),\n+            'match': self.match,\n+            'recursive': self.recursive,\n+            'form_class': forms.FilePathField,\n+            'allow_files': self.allow_files,\n+            'allow_folders': self.allow_folders,\n+            **kwargs,\n+        })\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1709,7 +1740,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self.get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n@@ -2365,4 +2396,4 @@ class UUIDField(Field):\n         return super().formfield(**{\n             'form_class': forms.UUIDField,\n             **kwargs,\n-        })\n+        })\n\\ No newline at end of file\ndiff --git a/tests/model_fields/test_filepathfield.py b/tests/model_fields/test_filepathfield.py\nnew file mode 100644\nindex 0000000000..61ba38306c\n--- /dev/null\n+++ b/tests/model_fields/test_filepathfield.py\n@@ -0,0 +1,34 @@\n+import os\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+class FilePathFieldTests(SimpleTestCase):\n+    def test_filepathfield_callable_path(self):\n+        def get_path():\n+            return os.path.dirname(__file__)\n+\n+        class TestModel(models.Model):\n+            path = models.FilePathField(path=get_path)\n+\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        field = TestModel._meta.get_field('path')\n+        self.assertEqual(field.path, get_path)\n+        self.assertEqual(field.get_path(), os.path.abspath(os.path.dirname(__file__)))\n+\n+    def test_filepathfield_callable_path_validation(self):\n+        def get_invalid_path():\n+            return '/invalid/path/does/not/exist'\n+\n+        class TestModel(models.Model):\n+            path = models.FilePathField(path=get_invalid_path)\n+\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        field = TestModel._meta.get_field('path')\n+        self.assertEqual(field.path, get_invalid_path)\n+        self.assertEqual(field.get_path(), os.path.abspath('/invalid/path/does/not/exist'))\n",
  "model_name_or_path": "KortixAI"
}