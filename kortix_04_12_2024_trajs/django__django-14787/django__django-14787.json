{
  "instance_id": "django__django-14787",
  "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..1f9460fa8d 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)  # Preserve the original method's attributes\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n@@ -176,4 +177,4 @@ def async_only_middleware(func):\n     \"\"\"Mark a middleware factory as returning an async middleware.\"\"\"\n     func.sync_capable = False\n     func.async_capable = True\n-    return func\n+    return func\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_decorators.py b/tests/utils_tests/test_decorators.py\nindex 4cd8320d0b..13723b8ef0 100644\n--- a/tests/utils_tests/test_decorators.py\n+++ b/tests/utils_tests/test_decorators.py\n@@ -53,11 +53,29 @@ class FullMiddleware:\n full_dec = decorator_from_middleware(FullMiddleware)\n \n \n+def attribute_preserving_decorator(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        return func(*args, **kwargs)\n+    wrapper.custom_attribute = \"test_value\"\n+    return wrapper\n+\n class DecoratorFromMiddlewareTests(SimpleTestCase):\n     \"\"\"\n     Tests for view decorators created using\n     ``django.utils.decorators.decorator_from_middleware``.\n     \"\"\"\n+    def test_method_decorator_preserves_attributes(self):\n+        class TestClass:\n+            @method_decorator(attribute_preserving_decorator)\n+            def test_method(self):\n+                return \"test\"\n+        \n+        instance = TestClass()\n+        self.assertEqual(instance.test_method.__name__, \"test_method\")\n+        # Verify the decorator's custom attribute is preserved\n+        self.assertTrue(hasattr(instance.test_method, \"custom_attribute\"))\n+        self.assertEqual(instance.test_method.custom_attribute, \"test_value\")\n     rf = RequestFactory()\n \n     def test_process_view_middleware(self):\n@@ -113,4 +131,4 @@ class DecoratorFromMiddlewareTests(SimpleTestCase):\n         response.render()\n         self.assertTrue(getattr(request, 'process_response_reached', False))\n         # process_response saw the rendered content\n-        self.assertEqual(request.process_response_content, b\"Hello world\")\n+        self.assertEqual(request.process_response_content, b\"Hello world\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}