diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 16dff6a1cd..e25b786612 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -77,8 +77,9 @@ def get_candidate_relations_to_delete(opts):
 
 
 class Collector:
-    def __init__(self, using):
+    def __init__(self, using, source_model=None):
         self.using = using
+        self.source_model = source_model
         # Initially, {model: {instances}}, later values become lists.
         self.data = defaultdict(set)
         # {model: {(field, value): {instances}}}
@@ -387,6 +388,13 @@ class Collector:
         self.sort()
         # number of objects deleted for each model label
         deleted_counter = Counter()
+        
+        # Initialize counter for source model and all related models
+        if self.source_model:
+            deleted_counter[self.source_model._meta.label] = 0
+        for model, instances in self.data.items():
+            if model._meta.label not in deleted_counter:
+                deleted_counter[model._meta.label] = 0
 
         # Optimize for the case with a single obj and no dependencies
         if len(self.data) == 1 and len(instances) == 1:
@@ -442,4 +450,4 @@ class Collector:
         for model, instances in self.data.items():
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
-        return sum(deleted_counter.values()), dict(deleted_counter)
+        return sum(deleted_counter.values()), dict(deleted_counter)
\ No newline at end of file
diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..001d7a0ebb 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -731,7 +731,7 @@ class QuerySet:
         del_query.query.select_related = False
         del_query.query.clear_ordering(force_empty=True)
 
-        collector = Collector(using=del_query.db)
+        collector = Collector(using=del_query.db, source_model=self.model)
         collector.collect(del_query)
         deleted, _rows_count = collector.delete()
 
@@ -1963,4 +1963,4 @@ def get_related_populators(klass_info, select, db):
     for rel_klass_info in related_klass_infos:
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
-    return iterators
+    return iterators
\ No newline at end of file
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index d8424670c9..95ad176da0 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -529,6 +529,21 @@ class DeletionTests(TestCase):
         deleted, deleted_objs = R.objects.all().delete()
         for k, v in existed_objs.items():
             self.assertEqual(deleted_objs[k], v)
+            
+    def test_zero_deletion_returns_consistent_dict(self):
+        """
+        QuerySet.delete() should return consistent results for zero deletions,
+        including model counters with zero values.
+        """
+        # Test with a simple model
+        deleted, deleted_objs = Avatar.objects.filter(pk=-1).delete()
+        self.assertEqual(deleted, 0)
+        self.assertEqual(deleted_objs, {'delete.Avatar': 0})
+        
+        # Test with a model having foreign key relationships
+        deleted, deleted_objs = User.objects.filter(pk=-1).delete()
+        self.assertEqual(deleted, 0)
+        self.assertEqual(deleted_objs, {'delete.User': 0})
 
     def test_model_delete_returns_num_rows(self):
         """
@@ -559,6 +574,21 @@ class DeletionTests(TestCase):
         self.assertEqual(deleted, sum(existed_objs.values()))
         for k, v in existed_objs.items():
             self.assertEqual(deleted_objs[k], v)
+            
+    def test_zero_deletion_returns_consistent_dict(self):
+        """
+        QuerySet.delete() should return consistent results for zero deletions,
+        including model counters with zero values.
+        """
+        # Test with a simple model
+        deleted, deleted_objs = Avatar.objects.filter(pk=-1).delete()
+        self.assertEqual(deleted, 0)
+        self.assertEqual(deleted_objs, {'delete.Avatar': 0})
+        
+        # Test with a model having foreign key relationships
+        deleted, deleted_objs = User.objects.filter(pk=-1).delete()
+        self.assertEqual(deleted, 0)
+        self.assertEqual(deleted_objs, {'delete.User': 0})
 
     def test_proxied_model_duplicate_queries(self):
         """
@@ -703,4 +733,4 @@ class FastDeleteTests(TestCase):
         origin = Origin.objects.create()
         referer = Referrer.objects.create(origin=origin, unique_field=42)
         with self.assertNumQueries(2):
-            referer.delete()
+            referer.delete()
\ No newline at end of file
