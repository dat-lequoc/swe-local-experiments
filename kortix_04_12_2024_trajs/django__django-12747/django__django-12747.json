{
  "instance_id": "django__django-12747",
  "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..e25b786612 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -77,8 +77,9 @@ def get_candidate_relations_to_delete(opts):\n \n \n class Collector:\n-    def __init__(self, using):\n+    def __init__(self, using, source_model=None):\n         self.using = using\n+        self.source_model = source_model\n         # Initially, {model: {instances}}, later values become lists.\n         self.data = defaultdict(set)\n         # {model: {(field, value): {instances}}}\n@@ -387,6 +388,13 @@ class Collector:\n         self.sort()\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n+        \n+        # Initialize counter for source model and all related models\n+        if self.source_model:\n+            deleted_counter[self.source_model._meta.label] = 0\n+        for model, instances in self.data.items():\n+            if model._meta.label not in deleted_counter:\n+                deleted_counter[model._meta.label] = 0\n \n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n@@ -442,4 +450,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n\\ No newline at end of file\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..001d7a0ebb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -731,7 +731,7 @@ class QuerySet:\n         del_query.query.select_related = False\n         del_query.query.clear_ordering(force_empty=True)\n \n-        collector = Collector(using=del_query.db)\n+        collector = Collector(using=del_query.db, source_model=self.model)\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n \n@@ -1963,4 +1963,4 @@ def get_related_populators(klass_info, select, db):\n     for rel_klass_info in related_klass_infos:\n         rel_cls = RelatedPopulator(rel_klass_info, select, db)\n         iterators.append(rel_cls)\n-    return iterators\n+    return iterators\n\\ No newline at end of file\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex d8424670c9..95ad176da0 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -529,6 +529,21 @@ class DeletionTests(TestCase):\n         deleted, deleted_objs = R.objects.all().delete()\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n+            \n+    def test_zero_deletion_returns_consistent_dict(self):\n+        \"\"\"\n+        QuerySet.delete() should return consistent results for zero deletions,\n+        including model counters with zero values.\n+        \"\"\"\n+        # Test with a simple model\n+        deleted, deleted_objs = Avatar.objects.filter(pk=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.Avatar': 0})\n+        \n+        # Test with a model having foreign key relationships\n+        deleted, deleted_objs = User.objects.filter(pk=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.User': 0})\n \n     def test_model_delete_returns_num_rows(self):\n         \"\"\"\n@@ -559,6 +574,21 @@ class DeletionTests(TestCase):\n         self.assertEqual(deleted, sum(existed_objs.values()))\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n+            \n+    def test_zero_deletion_returns_consistent_dict(self):\n+        \"\"\"\n+        QuerySet.delete() should return consistent results for zero deletions,\n+        including model counters with zero values.\n+        \"\"\"\n+        # Test with a simple model\n+        deleted, deleted_objs = Avatar.objects.filter(pk=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.Avatar': 0})\n+        \n+        # Test with a model having foreign key relationships\n+        deleted, deleted_objs = User.objects.filter(pk=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.User': 0})\n \n     def test_proxied_model_duplicate_queries(self):\n         \"\"\"\n@@ -703,4 +733,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}