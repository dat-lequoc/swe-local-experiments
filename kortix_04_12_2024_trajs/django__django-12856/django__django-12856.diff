diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7bb3fa4706..a219a3b23d 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1281,6 +1281,10 @@ class Model(metaclass=ModelBase):
                 *cls._check_ordering(),
                 *cls._check_constraints(databases),
             ]
+            # Check constraints
+            for constraint in cls._meta.constraints:
+                if hasattr(constraint, 'check'):
+                    errors.extend(constraint.check(cls))
 
         return errors
 
@@ -1979,4 +1983,4 @@ def model_unpickle(model_id):
     return model.__new__(model)
 
 
-model_unpickle.__safe_for_unpickle__ = True
+model_unpickle.__safe_for_unpickle__ = True
\ No newline at end of file
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..8bf84c2d15 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -1,5 +1,6 @@
 from enum import Enum
 
+from django.core import checks
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
 
@@ -95,6 +96,28 @@ class UniqueConstraint(BaseConstraint):
         self.deferrable = deferrable
         super().__init__(name)
 
+    def check(self, model):
+        errors = []
+        available_fields = {
+            f.name: f for f in model._meta.get_fields()
+        }
+        available_attnames = {
+            f.attname: f for f in model._meta.get_fields()
+            if hasattr(f, 'attname')
+        }
+        
+        for field_name in self.fields:
+            if field_name not in available_fields and field_name not in available_attnames:
+                errors.append(
+                    checks.Error(
+                        "The field '%s' was declared for unique constraint %s, "
+                        "but it doesn't exist." % (field_name, self.name),
+                        obj=model,
+                        id='models.E012',
+                    )
+                )
+        return errors
+
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
             return None
@@ -150,4 +173,4 @@ class UniqueConstraint(BaseConstraint):
             kwargs['condition'] = self.condition
         if self.deferrable:
             kwargs['deferrable'] = self.deferrable
-        return path, args, kwargs
+        return path, args, kwargs
\ No newline at end of file
diff --git a/tests/model_validation/__init__.py b/tests/model_validation/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/model_validation/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tests/model_validation/models.py b/tests/model_validation/models.py
new file mode 100644
index 0000000000..b0d46649ba
--- /dev/null
+++ b/tests/model_validation/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Empty models file for test isolation
diff --git a/tests/model_validation/test_unique_constraint.py b/tests/model_validation/test_unique_constraint.py
new file mode 100644
index 0000000000..174d503363
--- /dev/null
+++ b/tests/model_validation/test_unique_constraint.py
@@ -0,0 +1,44 @@
+from django.core import checks
+from django.db import models
+from django.test import SimpleTestCase
+from django.test.utils import isolate_apps
+
+
+class UniqueConstraintTests(SimpleTestCase):
+    @isolate_apps('model_validation')
+    def test_field_not_found(self):
+        class ModelWithMissingField(models.Model):
+            class Meta:
+                app_label = 'model_validation'
+                constraints = [
+                    models.UniqueConstraint(
+                        fields=['missing_field'],
+                        name='unique_missing_field',
+                    ),
+                ]
+
+        errors = ModelWithMissingField.check()
+        expected = [
+            checks.Error(
+                "The field 'missing_field' was declared for unique constraint "
+                "unique_missing_field, but it doesn't exist.",
+                obj=ModelWithMissingField,
+                id='models.E012',
+            ),
+        ]
+        self.assertEqual(errors, expected)
+
+    def test_field_exists(self):
+        class ModelWithField(models.Model):
+            field = models.CharField(max_length=100)
+
+            class Meta:
+                app_label = 'model_validation'
+                constraints = [
+                    models.UniqueConstraint(
+                        fields=['field'],
+                        name='unique_field',
+                    ),
+                ]
+
+        self.assertEqual(ModelWithField.check(), [])
\ No newline at end of file
