diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py
index fe8a84570c..de542c1566 100644
--- a/sympy/physics/units/tests/test_quantities.py
+++ b/sympy/physics/units/tests/test_quantities.py
@@ -1,5 +1,6 @@
 from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,
                    diff, exp, integrate, log, sin, sqrt, symbols)
+from sympy.physics.units.definitions import (joule, kilogram, meter, second)
 from sympy.physics.units import (amount_of_substance, convert_to, find_unit,
                                  volume, kilometer)
 from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,
@@ -35,6 +36,11 @@ def test_convert_to():
     q.set_global_relative_scale_factor(S(5000), meter)
 
     assert q.convert_to(m) == 5000*m
+    
+    # Test for incompatible unit conversions
+    assert joule*second == convert_to(joule*second, joule*second)
+    assert joule*second == convert_to(joule*second, joule)  # Should return original if incompatible
+    assert convert_to(joule*second, kg*m**2/second) == kilogram*meter**2/second
 
     assert speed_of_light.convert_to(m / s) == 299792458 * m / s
     # TODO: eventually support this kind of conversion:
@@ -479,4 +485,4 @@ def test_deprecated_quantity_methods():
         step.set_dimension(length)
         step.set_scale_factor(2*meter)
         assert convert_to(step, centimeter) == 200*centimeter
-        assert convert_to(1000*step/second, kilometer/second) == 2*kilometer/second
+        assert convert_to(1000*step/second, kilometer/second) == 2*kilometer/second
\ No newline at end of file
diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..48900d8834 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -15,23 +15,68 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):
 
     dimension_system = unit_system.get_dimension_system()
 
+    # Get dimensions and dependencies
     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))
-    dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)
+    expr_deps = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)
     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]
-    canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]
-    canon_expr_units = {i for i in dim_dependencies}
-
+    
+    # For multiple target units, check if all have compatible dimensions
+    if len(target_units) > 1:
+        base_deps = dimension_system.get_dimensional_dependencies(target_dims[0], mark_dimensionless=True)
+        for dim in target_dims[1:]:
+            curr_deps = dimension_system.get_dimensional_dependencies(dim, mark_dimensionless=True)
+            if curr_deps != base_deps:
+                return None
+    
+    target_deps = dimension_system.get_dimensional_dependencies(target_dims[0], mark_dimensionless=True)
+    
+    # Check dimensional compatibility
+    if expr_deps != target_deps:
+        # For single target unit, check if it's a valid subset
+        if len(target_units) == 1:
+            base_deps = {k: v for k, v in target_deps.items() if v != 0}
+            if not all(k in expr_deps and expr_deps[k] == v 
+                      for k, v in base_deps.items()):
+                return None
+        else:
+            # For multiple targets, dimensions must match exactly
+            return None
+            
+    # Get canonical units
+    canon_dim_units = []
+    seen = set()
+    for x in target_dims:
+        deps = dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)
+        for i in deps:
+            if i not in seen:
+                canon_dim_units.append(i)
+                seen.add(i)
+                
+    # Verify unit compatibility
+    canon_expr_units = {i for i in expr_deps}
     if not canon_expr_units.issubset(set(canon_dim_units)):
         return None
-
-    seen = set()
-    canon_dim_units = [i for i in canon_dim_units if not (i in seen or seen.add(i))]
-
-    camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])
-    exprmat = Matrix([dim_dependencies.get(k, 0) for k in canon_dim_units])
-
-    res_exponents = camat.solve_least_squares(exprmat, method=None)
-    return res_exponents
+        
+    # Calculate conversion matrix
+    try:
+        camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) 
+                        for i in target_dims] for j in canon_dim_units])
+        exprmat = Matrix([expr_deps.get(k, 0) for k in canon_dim_units])
+        
+        # For time units, ensure proper conversion
+        if any('time' in str(x) for x in canon_dim_units):
+            if len(target_units) > 1:
+                # Check if time units are compatible
+                time_units = [x for x in target_units if 'time' in str(x)]
+                if len(time_units) > 1:
+                    time_deps = [dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True) 
+                               for x in time_units]
+                    if not all(x == time_deps[0] for x in time_deps[1:]):
+                        return None
+                        
+        return camat.solve_least_squares(exprmat, method=None)
+    except:
+        return None
 
 
 def convert_to(expr, target_units, unit_system="SI"):
@@ -191,4 +236,4 @@ def check_dimensions(expr, unit_system="SI"):
             reps[m] = m.func(*[
                 i for i in m.args if not i.is_number])
 
-    return expr.xreplace(reps)
+    return expr.xreplace(reps)
\ No newline at end of file
