{
  "instance_id": "astropy__astropy-7746",
  "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..44391b1c6e 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,6 +1212,11 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            # Handle empty arrays\n+            if any(x.size == 0 for x in axes):\n+                # Return empty arrays with correct shape\n+                return [np.array([], dtype=np.float64) for _ in range(self.naxis)]\n+\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1222,7 +1227,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n-            output = func(xy, origin)\n+            output = func(xy, origin) if xy.size > 0 else np.zeros((0, self.naxis), dtype=np.float64)\n             if ra_dec_order and sky == 'output':\n                 output = self._normalize_sky(output)\n                 return (output[:, 0].reshape(axes[0].shape),\n@@ -1231,13 +1236,17 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n+            # Handle empty arrays\n+            if xy.size == 0:\n+                return np.zeros((0, self.naxis), dtype=np.float64)\n+\n             if xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n-            result = func(xy, origin)\n+            result = func(xy, origin) if xy.size > 0 else np.zeros((0, self.naxis), dtype=np.float64)\n             if ra_dec_order and sky == 'output':\n                 result = self._normalize_sky(result)\n             return result\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..4e63342f1c\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,52 @@\n+from astropy.wcs import WCS\n+import numpy as np\n+\n+def test_edge_cases():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.crval = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+    # Test empty lists\n+    result = wcs.wcs_pix2world([], [], 0)\n+    print(\"Empty lists result:\", result)\n+    assert len(result) == 2\n+    assert all(isinstance(x, np.ndarray) for x in result)\n+    assert all(x.size == 0 for x in result)\n+\n+    # Test empty array\n+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 0)\n+    print(\"Empty array result:\", result)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+\n+    # Test empty array with different origin\n+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 1)\n+    print(\"Empty array result with origin=1:\", result)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+\n+    # Test empty lists with world2pix\n+    result = wcs.wcs_world2pix([], [], 0)\n+    print(\"Empty lists world2pix result:\", result)\n+    assert len(result) == 2\n+    assert all(isinstance(x, np.ndarray) for x in result)\n+    assert all(x.size == 0 for x in result)\n+\n+    # Test empty array with world2pix\n+    result = wcs.wcs_world2pix(np.array([]).reshape(0, 2), 0)\n+    print(\"Empty array world2pix result:\", result)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+\n+    # Test empty array with all_pix2world\n+    result = wcs.all_pix2world(np.array([]).reshape(0, 2), 0)\n+    print(\"Empty array all_pix2world result:\", result)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+\n+    print(\"All edge cases passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..8a29377fe5\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,27 @@\n+from astropy.wcs import WCS\n+import numpy as np\n+\n+def test_empty_arrays():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.crval = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+    # Test empty lists\n+    result = wcs.wcs_pix2world([], [], 0)\n+    print(\"Empty lists result:\", result)\n+    assert len(result) == 2\n+    assert all(isinstance(x, np.ndarray) for x in result)\n+    assert all(x.size == 0 for x in result)\n+\n+    # Test empty array\n+    result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 0)\n+    print(\"Empty array result:\", result)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+\n+    print(\"All tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_empty_arrays()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}