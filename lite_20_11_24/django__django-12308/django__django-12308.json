{
  "instance_id": "django__django-12308",
  "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..53eade1258 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,9 +379,19 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models.fields.json import JSONField\n+    import json\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n+    # Add special case for JSONField\n+    elif isinstance(field, JSONField):\n+        if value is None:\n+            return empty_value_display\n+        try:\n+            return json.dumps(value)\n+        except (TypeError, ValueError):\n+            return str(value)\n     # BooleanField needs special-case null-handling, so it comes before the\n     # general null test.\n     elif isinstance(field, models.BooleanField):\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..ec6e9cdab5\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,71 @@\n+from django.conf import settings\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+import django\n+import json\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.admin',\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+)\n+django.setup()\n+\n+class TestModel(models.Model):\n+    data = models.JSONField()\n+\n+def test_edge_cases():\n+    field = TestModel._meta.get_field('data')\n+    edge_cases = [\n+        # Empty containers\n+        ({}, '{}'),\n+        ([], '[]'),\n+        # Special characters\n+        ({'special': '\"quotes\"'}, '{\"special\": \"\\\\\"quotes\\\\\"\"}'),\n+        ({'path': 'C:\\\\Windows'}, '{\"path\": \"C:\\\\\\\\Windows\"}'),\n+        # Unicode characters\n+        ({'unicode': '\u4f60\u597d'}, '{\"unicode\": \"\u4f60\u597d\"}'),\n+        # Nested structures\n+        ({'nested': {'list': [1, {'x': 'y'}]}}, '{\"nested\": {\"list\": [1, {\"x\": \"y\"}]}}'),\n+        # Invalid JSON input (should be handled gracefully)\n+        (\"{'invalid': 'json'}\", \"{'invalid': 'json'}\"),\n+        # Maximum nesting\n+        ({'a': {'b': {'c': {'d': 1}}}}, '{\"a\": {\"b\": {\"c\": {\"d\": 1}}}}'),\n+        # Various data types\n+        ({'types': [1, 1.5, True, False, None]}, '{\"types\": [1, 1.5, true, false, null]}'),\n+    ]\n+    \n+    passed = True\n+    for value, expected in edge_cases:\n+        try:\n+            result = display_for_field(value, field, '-empty-')\n+            if result != expected:\n+                print(f'\u274c Failed: {value}')\n+                print(f'Expected: {expected}')\n+                print(f'Got: {result}')\n+                passed = False\n+            else:\n+                print(f'\u2705 Passed: {value}')\n+        except Exception as e:\n+            print(f'\u274c Error for {value}: {str(e)}')\n+            passed = False\n+    \n+    return passed\n+\n+if __name__ == '__main__':\n+    success = test_edge_cases()\n+    if success:\n+        print('\\nAll edge cases passed! \ud83c\udf89')\n+    else:\n+        print('\\nSome edge cases failed! \ud83d\ude22')\n+        exit(1)\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..4ef5797d5e\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,59 @@\n+from django.conf import settings\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+import os\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.admin',\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+)\n+\n+# Create a model with JSONField\n+class TestModel(models.Model):\n+    data = models.JSONField()\n+\n+def test_json_display():\n+    # Test cases\n+    field = TestModel._meta.get_field('data')\n+    test_cases = [\n+        ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),  # Basic case\n+        ({'a': 1, 'b': True}, '{\"a\": 1, \"b\": true}'),  # Mixed types\n+        (None, '-empty-'),  # None value\n+        ({'list': [1, 2, 3]}, '{\"list\": [1, 2, 3]}'),  # With list\n+        ({'nested': {'x': 'y'}}, '{\"nested\": {\"x\": \"y\"}}'),  # Nested\n+    ]\n+    \n+    passed = True\n+    for value, expected in test_cases:\n+        result = display_for_field(value, field, '-empty-')\n+        if result != expected:\n+            print(f'\u274c Failed: {value}')\n+            print(f'Expected: {expected}')\n+            print(f'Got: {result}')\n+            passed = False\n+        else:\n+            print(f'\u2705 Passed: {value}')\n+    \n+    return passed\n+\n+if __name__ == '__main__':\n+    import django\n+    django.setup()\n+    \n+    success = test_json_display()\n+    if success:\n+        print('\\nAll tests passed! \ud83c\udf89')\n+    else:\n+        print('\\nSome tests failed! \ud83d\ude22')\n+        exit(1)\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..56cc8e762d\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,7 @@\n+from django.db import models\n+\n+class TestModel(models.Model):\n+    data = models.JSONField()\n+    \n+    class Meta:\n+        app_label = 'test_app'\n\\ No newline at end of file\ndiff --git a/test_json_display.py b/test_json_display.py\nnew file mode 100644\nindex 0000000000..ee46ebe5b5\n--- /dev/null\n+++ b/test_json_display.py\n@@ -0,0 +1,64 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+from django.contrib.admin.utils import display_for_field\n+from django.db.models import JSONField\n+\n+def test_json_display():\n+    field = JSONField()\n+    \n+    test_cases = [\n+        # Basic cases\n+        ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+        ([], \"[]\"),\n+        ({}, \"{}\"),\n+        \n+        # Complex cases\n+        ({\"nested\": {\"a\": 1, \"b\": 2}}, '{\"nested\": {\"a\": 1, \"b\": 2}}'),\n+        ([1, 2, {\"x\": \"y\"}], '[1, 2, {\"x\": \"y\"}]'),\n+        \n+        # Special characters\n+        ({\"special\": 'quotes\"and\\'stuff'}, '{\"special\": \"quotes\\\\\"and\\'stuff\"}'),\n+        \n+        # Edge cases\n+        (None, \"\"),\n+        (\"\", '\"\"'),\n+        (True, \"true\"),\n+        (False, \"false\"),\n+        (123, \"123\"),\n+    ]\n+    \n+    failed = False\n+    for value, expected in test_cases:\n+        result = display_for_field(value, field, empty_value_display=\"\")\n+        if result != expected:\n+            print(\"FAIL: Test case failed\")\n+            print(\"Value:\", value)\n+            print(\"Expected:\", expected)\n+            print(\"Got:\", result)\n+            print()\n+            failed = True\n+        else:\n+            print(\"PASS:\", value)\n+    \n+    return not failed\n+\n+def main():\n+    print(\"Testing JSONField display in admin...\")\n+    success = test_json_display()\n+    if success:\n+        print(\"\\nAll tests passed!\")\n+        return True\n+    else:\n+        print(\"\\nSome tests failed!\")\n+        return False\n+\n+if __name__ == '__main__':\n+    success = main()\n+    sys.exit(0 if success else 1)\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..902e26f277\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,17 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}