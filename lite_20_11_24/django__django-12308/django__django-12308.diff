diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..53eade1258 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -379,9 +379,19 @@ def help_text_for_field(name, model):
 
 def display_for_field(value, field, empty_value_display):
     from django.contrib.admin.templatetags.admin_list import _boolean_icon
+    from django.db.models.fields.json import JSONField
+    import json
 
     if getattr(field, 'flatchoices', None):
         return dict(field.flatchoices).get(value, empty_value_display)
+    # Add special case for JSONField
+    elif isinstance(field, JSONField):
+        if value is None:
+            return empty_value_display
+        try:
+            return json.dumps(value)
+        except (TypeError, ValueError):
+            return str(value)
     # BooleanField needs special-case null-handling, so it comes before the
     # general null test.
     elif isinstance(field, models.BooleanField):
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..ec6e9cdab5
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,71 @@
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+import django
+import json
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+django.setup()
+
+class TestModel(models.Model):
+    data = models.JSONField()
+
+def test_edge_cases():
+    field = TestModel._meta.get_field('data')
+    edge_cases = [
+        # Empty containers
+        ({}, '{}'),
+        ([], '[]'),
+        # Special characters
+        ({'special': '"quotes"'}, '{"special": "\\"quotes\\""}'),
+        ({'path': 'C:\\Windows'}, '{"path": "C:\\\\Windows"}'),
+        # Unicode characters
+        ({'unicode': '‰Ω†Â•Ω'}, '{"unicode": "‰Ω†Â•Ω"}'),
+        # Nested structures
+        ({'nested': {'list': [1, {'x': 'y'}]}}, '{"nested": {"list": [1, {"x": "y"}]}}'),
+        # Invalid JSON input (should be handled gracefully)
+        ("{'invalid': 'json'}", "{'invalid': 'json'}"),
+        # Maximum nesting
+        ({'a': {'b': {'c': {'d': 1}}}}, '{"a": {"b": {"c": {"d": 1}}}}'),
+        # Various data types
+        ({'types': [1, 1.5, True, False, None]}, '{"types": [1, 1.5, true, false, null]}'),
+    ]
+    
+    passed = True
+    for value, expected in edge_cases:
+        try:
+            result = display_for_field(value, field, '-empty-')
+            if result != expected:
+                print(f'‚ùå Failed: {value}')
+                print(f'Expected: {expected}')
+                print(f'Got: {result}')
+                passed = False
+            else:
+                print(f'‚úÖ Passed: {value}')
+        except Exception as e:
+            print(f'‚ùå Error for {value}: {str(e)}')
+            passed = False
+    
+    return passed
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    if success:
+        print('\nAll edge cases passed! üéâ')
+    else:
+        print('\nSome edge cases failed! üò¢')
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4ef5797d5e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+# Create a model with JSONField
+class TestModel(models.Model):
+    data = models.JSONField()
+
+def test_json_display():
+    # Test cases
+    field = TestModel._meta.get_field('data')
+    test_cases = [
+        ({'foo': 'bar'}, '{"foo": "bar"}'),  # Basic case
+        ({'a': 1, 'b': True}, '{"a": 1, "b": true}'),  # Mixed types
+        (None, '-empty-'),  # None value
+        ({'list': [1, 2, 3]}, '{"list": [1, 2, 3]}'),  # With list
+        ({'nested': {'x': 'y'}}, '{"nested": {"x": "y"}}'),  # Nested
+    ]
+    
+    passed = True
+    for value, expected in test_cases:
+        result = display_for_field(value, field, '-empty-')
+        if result != expected:
+            print(f'‚ùå Failed: {value}')
+            print(f'Expected: {expected}')
+            print(f'Got: {result}')
+            passed = False
+        else:
+            print(f'‚úÖ Passed: {value}')
+    
+    return passed
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    success = test_json_display()
+    if success:
+        print('\nAll tests passed! üéâ')
+    else:
+        print('\nSome tests failed! üò¢')
+        exit(1)
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..56cc8e762d
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class TestModel(models.Model):
+    data = models.JSONField()
+    
+    class Meta:
+        app_label = 'test_app'
\ No newline at end of file
diff --git a/test_json_display.py b/test_json_display.py
new file mode 100644
index 0000000000..ee46ebe5b5
--- /dev/null
+++ b/test_json_display.py
@@ -0,0 +1,64 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+from django.contrib.admin.utils import display_for_field
+from django.db.models import JSONField
+
+def test_json_display():
+    field = JSONField()
+    
+    test_cases = [
+        # Basic cases
+        ({"foo": "bar"}, '{"foo": "bar"}'),
+        ([], "[]"),
+        ({}, "{}"),
+        
+        # Complex cases
+        ({"nested": {"a": 1, "b": 2}}, '{"nested": {"a": 1, "b": 2}}'),
+        ([1, 2, {"x": "y"}], '[1, 2, {"x": "y"}]'),
+        
+        # Special characters
+        ({"special": 'quotes"and\'stuff'}, '{"special": "quotes\\"and\'stuff"}'),
+        
+        # Edge cases
+        (None, ""),
+        ("", '""'),
+        (True, "true"),
+        (False, "false"),
+        (123, "123"),
+    ]
+    
+    failed = False
+    for value, expected in test_cases:
+        result = display_for_field(value, field, empty_value_display="")
+        if result != expected:
+            print("FAIL: Test case failed")
+            print("Value:", value)
+            print("Expected:", expected)
+            print("Got:", result)
+            print()
+            failed = True
+        else:
+            print("PASS:", value)
+    
+    return not failed
+
+def main():
+    print("Testing JSONField display in admin...")
+    success = test_json_display()
+    if success:
+        print("\nAll tests passed!")
+        return True
+    else:
+        print("\nSome tests failed!")
+        return False
+
+if __name__ == '__main__':
+    success = main()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..902e26f277
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,17 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
