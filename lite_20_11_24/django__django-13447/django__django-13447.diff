diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 837dabfea8..59e1aa93a5 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -430,7 +430,7 @@ class AdminSite:
                     return HttpResponsePermanentRedirect(path)
         raise Http404
 
-    def _build_app_dict(self, request, label=None):
+    def build_app_dict(self, request, label=None):
         """
         Build the app dictionary. The optional `label` parameter filters models
         of a specific app.
@@ -466,6 +466,7 @@ class AdminSite:
                 'perms': perms,
                 'admin_url': None,
                 'add_url': None,
+                'model': model,  # Add model class to context
             }
             if perms.get('change') or perms.get('view'):
                 model_dict['view_only'] = not perms.get('change')
@@ -503,7 +504,7 @@ class AdminSite:
         Return a sorted list of all the installed apps that have been
         registered in this site.
         """
-        app_dict = self._build_app_dict(request)
+        app_dict = self.build_app_dict(request)
 
         # Sort the apps alphabetically.
         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..1b2a6c6fe5
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,63 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.contrib.admin import site
+from django.contrib.auth.models import User
+from django.test.client import RequestFactory
+
+def test_empty_app_dict():
+    """Test build_app_dict with no registered models"""
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = User(is_staff=True, is_active=True)
+    request.user.has_module_perms = lambda x: True
+    
+    # Clear registry temporarily
+    old_registry = site._registry.copy()
+    site._registry.clear()
+    
+    try:
+        app_dict = site.build_app_dict(request)
+        assert isinstance(app_dict, dict), "Should return empty dict"
+        assert len(app_dict) == 0, "Should be empty when no models registered"
+        print("Success: Empty app_dict test passed")
+    finally:
+        # Restore registry
+        site._registry = old_registry
+
+def test_model_in_context():
+    """Test that model class is present in context when models are registered"""
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = User(is_staff=True, is_active=True)
+    request.user.has_module_perms = lambda x: True
+    
+    # Register User model temporarily if not already registered
+    if User not in site._registry:
+        from django.contrib.auth.admin import UserAdmin
+        site.register(User, UserAdmin)
+        was_registered = False
+    else:
+        was_registered = True
+    
+    try:
+        app_dict = site.build_app_dict(request, 'auth')
+        assert app_dict is not None, "App dict should not be None"
+        assert 'models' in app_dict, "App dict should contain models"
+        
+        for model_dict in app_dict['models']:
+            assert 'model' in model_dict, "Model class not found in context"
+            assert model_dict['model'].__class__.__name__ == 'ModelBase', "Invalid model class type"
+        
+        print("Success: Model class in context test passed")
+    finally:
+        # Unregister if we registered it
+        if not was_registered:
+            site.unregister(User)
+
+if __name__ == '__main__':
+    test_empty_app_dict()
+    test_model_in_context()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..38726b484b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,26 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.contrib.admin import site
+from django.contrib.auth.models import User
+from django.test.client import RequestFactory
+
+# Create a test request with user
+factory = RequestFactory()
+request = factory.get('/')
+request.user = User(is_staff=True, is_active=True)
+request.user.has_module_perms = lambda x: True  # Mock permission check
+
+# Build app dictionary
+app_dict = site.build_app_dict(request)
+
+# Verify model class is present in context
+for app_label, app_info in app_dict.items():
+    for model_dict in app_info['models']:
+        assert 'model' in model_dict, "Model class not found in context"
+        assert model_dict['model'].__class__.__name__ == 'ModelBase', "Invalid model class type"
+
+print("Success: Model class is present in app_list context")
\ No newline at end of file
diff --git a/test_admin_site.py b/test_admin_site.py
new file mode 100644
index 0000000000..a0f9bee689
--- /dev/null
+++ b/test_admin_site.py
@@ -0,0 +1,66 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.contrib.admin import site, ModelAdmin
+from django.contrib.auth.models import User
+from django.test.client import RequestFactory
+
+class MockUser:
+    def __init__(self):
+        self.is_active = True
+        self.is_staff = True
+        self.is_superuser = True
+        self._perm_cache = set()
+        self.id = 1
+
+    def has_module_perms(self, app_label):
+        return True
+
+    def has_perm(self, perm):
+        return True
+
+    def get_all_permissions(self):
+        return set()
+
+def test_build_app_dict():
+    """Test that build_app_dict includes model class in context"""
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = MockUser()
+
+    # Register a test model
+    if User not in site._registry:
+        site.register(User)
+
+    try:
+        # Test with specific app label
+        app_dict = site.build_app_dict(request, 'auth')
+        assert app_dict is not None, "App dict should not be None"
+        assert 'models' in app_dict, "App dict should contain models"
+        
+        for model_dict in app_dict['models']:
+            assert 'model' in model_dict, "Model class not found in context"
+            assert model_dict['model'] == User, "Model class should be User"
+            print(f"Model found in context: {model_dict['model'].__name__}")
+
+        # Test without app label
+        app_dict = site.build_app_dict(request)
+        assert isinstance(app_dict, dict), "Should return dict"
+        assert 'auth' in app_dict, "Should contain auth app"
+        
+        for model_dict in app_dict['auth']['models']:
+            assert 'model' in model_dict, "Model class not found in context"
+            assert model_dict['model'] == User, "Model class should be User"
+            print(f"Model found in full context: {model_dict['model'].__name__}")
+
+        print("Success: All tests passed!")
+    finally:
+        # Clean up
+        if User in site._registry:
+            site.unregister(User)
+
+if __name__ == '__main__':
+    test_build_app_dict()
\ No newline at end of file
diff --git a/test_model_in_context.py b/test_model_in_context.py
new file mode 100644
index 0000000000..ddac231496
--- /dev/null
+++ b/test_model_in_context.py
@@ -0,0 +1,60 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.contrib.admin import AdminSite
+from django.contrib.auth.models import User
+from django.test.client import RequestFactory
+
+class MockUser:
+    def __init__(self):
+        self.is_active = True
+        self.is_staff = True
+        self.is_superuser = True
+        self._perm_cache = set()
+        self.id = 1
+
+    def has_module_perms(self, app_label):
+        return True
+
+    def has_perm(self, perm):
+        return True
+
+    def get_all_permissions(self):
+        return set()
+
+def test_model_in_context():
+    """Test that model class is included in the app_dict context"""
+    # Create a fresh AdminSite instance
+    admin_site = AdminSite()
+    
+    # Register the User model
+    admin_site.register(User)
+    
+    # Create request
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = MockUser()
+    
+    # Get app dict for auth app
+    # Get app dict for auth app without URL resolution
+    app_dict = admin_site.build_app_dict(request, 'auth')
+    
+    # Verify model is in context
+    assert app_dict is not None, "App dict should not be None"
+    assert 'models' in app_dict, "App dict should contain models"
+    
+    found_model = False
+    for model_dict in app_dict['models']:
+        if 'model' in model_dict:
+            found_model = True
+            assert model_dict['model'] == User, f"Expected User model, got {model_dict['model']}"
+            print(f"Found model in context: {model_dict['model'].__name__}")
+    
+    assert found_model, "Model should be present in context"
+    print("Success: Model class is properly included in app_dict context")
+
+if __name__ == '__main__':
+    test_model_in_context()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..f527e2f4bb
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,43 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+ROOT_URLCONF = 'test_urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
\ No newline at end of file
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 0000000000..1a54236427
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,6 @@
+from django.urls import path
+from django.contrib import admin
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
