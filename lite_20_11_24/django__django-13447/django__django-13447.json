{
  "instance_id": "django__django-13447",
  "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..59e1aa93a5 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -466,6 +466,7 @@ class AdminSite:\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,  # Add model class to context\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..1b2a6c6fe5\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,63 @@\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+django.setup()\n+\n+from django.contrib.admin import site\n+from django.contrib.auth.models import User\n+from django.test.client import RequestFactory\n+\n+def test_empty_app_dict():\n+    \"\"\"Test build_app_dict with no registered models\"\"\"\n+    factory = RequestFactory()\n+    request = factory.get('/')\n+    request.user = User(is_staff=True, is_active=True)\n+    request.user.has_module_perms = lambda x: True\n+    \n+    # Clear registry temporarily\n+    old_registry = site._registry.copy()\n+    site._registry.clear()\n+    \n+    try:\n+        app_dict = site.build_app_dict(request)\n+        assert isinstance(app_dict, dict), \"Should return empty dict\"\n+        assert len(app_dict) == 0, \"Should be empty when no models registered\"\n+        print(\"Success: Empty app_dict test passed\")\n+    finally:\n+        # Restore registry\n+        site._registry = old_registry\n+\n+def test_model_in_context():\n+    \"\"\"Test that model class is present in context when models are registered\"\"\"\n+    factory = RequestFactory()\n+    request = factory.get('/')\n+    request.user = User(is_staff=True, is_active=True)\n+    request.user.has_module_perms = lambda x: True\n+    \n+    # Register User model temporarily if not already registered\n+    if User not in site._registry:\n+        from django.contrib.auth.admin import UserAdmin\n+        site.register(User, UserAdmin)\n+        was_registered = False\n+    else:\n+        was_registered = True\n+    \n+    try:\n+        app_dict = site.build_app_dict(request, 'auth')\n+        assert app_dict is not None, \"App dict should not be None\"\n+        assert 'models' in app_dict, \"App dict should contain models\"\n+        \n+        for model_dict in app_dict['models']:\n+            assert 'model' in model_dict, \"Model class not found in context\"\n+            assert model_dict['model'].__class__.__name__ == 'ModelBase', \"Invalid model class type\"\n+        \n+        print(\"Success: Model class in context test passed\")\n+    finally:\n+        # Unregister if we registered it\n+        if not was_registered:\n+            site.unregister(User)\n+\n+if __name__ == '__main__':\n+    test_empty_app_dict()\n+    test_model_in_context()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..38726b484b\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,26 @@\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+django.setup()\n+\n+from django.contrib.admin import site\n+from django.contrib.auth.models import User\n+from django.test.client import RequestFactory\n+\n+# Create a test request with user\n+factory = RequestFactory()\n+request = factory.get('/')\n+request.user = User(is_staff=True, is_active=True)\n+request.user.has_module_perms = lambda x: True  # Mock permission check\n+\n+# Build app dictionary\n+app_dict = site.build_app_dict(request)\n+\n+# Verify model class is present in context\n+for app_label, app_info in app_dict.items():\n+    for model_dict in app_info['models']:\n+        assert 'model' in model_dict, \"Model class not found in context\"\n+        assert model_dict['model'].__class__.__name__ == 'ModelBase', \"Invalid model class type\"\n+\n+print(\"Success: Model class is present in app_list context\")\n\\ No newline at end of file\ndiff --git a/test_admin_site.py b/test_admin_site.py\nnew file mode 100644\nindex 0000000000..a0f9bee689\n--- /dev/null\n+++ b/test_admin_site.py\n@@ -0,0 +1,66 @@\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+django.setup()\n+\n+from django.contrib.admin import site, ModelAdmin\n+from django.contrib.auth.models import User\n+from django.test.client import RequestFactory\n+\n+class MockUser:\n+    def __init__(self):\n+        self.is_active = True\n+        self.is_staff = True\n+        self.is_superuser = True\n+        self._perm_cache = set()\n+        self.id = 1\n+\n+    def has_module_perms(self, app_label):\n+        return True\n+\n+    def has_perm(self, perm):\n+        return True\n+\n+    def get_all_permissions(self):\n+        return set()\n+\n+def test_build_app_dict():\n+    \"\"\"Test that build_app_dict includes model class in context\"\"\"\n+    factory = RequestFactory()\n+    request = factory.get('/')\n+    request.user = MockUser()\n+\n+    # Register a test model\n+    if User not in site._registry:\n+        site.register(User)\n+\n+    try:\n+        # Test with specific app label\n+        app_dict = site.build_app_dict(request, 'auth')\n+        assert app_dict is not None, \"App dict should not be None\"\n+        assert 'models' in app_dict, \"App dict should contain models\"\n+        \n+        for model_dict in app_dict['models']:\n+            assert 'model' in model_dict, \"Model class not found in context\"\n+            assert model_dict['model'] == User, \"Model class should be User\"\n+            print(f\"Model found in context: {model_dict['model'].__name__}\")\n+\n+        # Test without app label\n+        app_dict = site.build_app_dict(request)\n+        assert isinstance(app_dict, dict), \"Should return dict\"\n+        assert 'auth' in app_dict, \"Should contain auth app\"\n+        \n+        for model_dict in app_dict['auth']['models']:\n+            assert 'model' in model_dict, \"Model class not found in context\"\n+            assert model_dict['model'] == User, \"Model class should be User\"\n+            print(f\"Model found in full context: {model_dict['model'].__name__}\")\n+\n+        print(\"Success: All tests passed!\")\n+    finally:\n+        # Clean up\n+        if User in site._registry:\n+            site.unregister(User)\n+\n+if __name__ == '__main__':\n+    test_build_app_dict()\n\\ No newline at end of file\ndiff --git a/test_model_in_context.py b/test_model_in_context.py\nnew file mode 100644\nindex 0000000000..ddac231496\n--- /dev/null\n+++ b/test_model_in_context.py\n@@ -0,0 +1,60 @@\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+django.setup()\n+\n+from django.contrib.admin import AdminSite\n+from django.contrib.auth.models import User\n+from django.test.client import RequestFactory\n+\n+class MockUser:\n+    def __init__(self):\n+        self.is_active = True\n+        self.is_staff = True\n+        self.is_superuser = True\n+        self._perm_cache = set()\n+        self.id = 1\n+\n+    def has_module_perms(self, app_label):\n+        return True\n+\n+    def has_perm(self, perm):\n+        return True\n+\n+    def get_all_permissions(self):\n+        return set()\n+\n+def test_model_in_context():\n+    \"\"\"Test that model class is included in the app_dict context\"\"\"\n+    # Create a fresh AdminSite instance\n+    admin_site = AdminSite()\n+    \n+    # Register the User model\n+    admin_site.register(User)\n+    \n+    # Create request\n+    factory = RequestFactory()\n+    request = factory.get('/')\n+    request.user = MockUser()\n+    \n+    # Get app dict for auth app\n+    # Get app dict for auth app without URL resolution\n+    app_dict = admin_site.build_app_dict(request, 'auth')\n+    \n+    # Verify model is in context\n+    assert app_dict is not None, \"App dict should not be None\"\n+    assert 'models' in app_dict, \"App dict should contain models\"\n+    \n+    found_model = False\n+    for model_dict in app_dict['models']:\n+        if 'model' in model_dict:\n+            found_model = True\n+            assert model_dict['model'] == User, f\"Expected User model, got {model_dict['model']}\"\n+            print(f\"Found model in context: {model_dict['model'].__name__}\")\n+    \n+    assert found_model, \"Model should be present in context\"\n+    print(\"Success: Model class is properly included in app_dict context\")\n+\n+if __name__ == '__main__':\n+    test_model_in_context()\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..f527e2f4bb\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,43 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+]\n+\n+ROOT_URLCONF = 'test_urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n\\ No newline at end of file\ndiff --git a/test_urls.py b/test_urls.py\nnew file mode 100644\nindex 0000000000..1a54236427\n--- /dev/null\n+++ b/test_urls.py\n@@ -0,0 +1,6 @@\n+from django.urls import path\n+from django.contrib import admin\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}