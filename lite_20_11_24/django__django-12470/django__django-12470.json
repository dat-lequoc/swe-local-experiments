{
  "instance_id": "django__django-12470",
  "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex b2a60629c9..08129c1325 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -144,7 +144,8 @@ class ModelBase(type):\n                 # non-abstract parent (unless an ABC comes before it in the\n                 # method resolution order).\n                 if not hasattr(meta, 'ordering'):\n-                    new_class._meta.ordering = base_meta.ordering\n+                    # Ensure ordering is properly inherited\n+                    new_class._meta.ordering = list(base_meta.ordering)\n                 if not hasattr(meta, 'get_latest_by'):\n                     new_class._meta.get_latest_by = base_meta.get_latest_by\n \ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..9dfb9862a0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -280,13 +280,33 @@ class SQLCompiler:\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n+            # Ensure descending flag is preserved for inherited models\n+            if not self.query.standard_ordering:\n+                ordering = [\n+                    f.replace('-', '') if f.startswith('-') else '-' + f\n+                    for f in ordering\n+                ]\n+                # Reverse the order for inherited models\n+                if self._meta_ordering:\n+                    ordering = ['-' + f.lstrip('-') if not f.startswith('-') else f.lstrip('-') for f in ordering]\n         else:\n             ordering = []\n+        # Get the base ordering direction\n         if self.query.standard_ordering:\n             asc, desc = ORDER_DIR['ASC']\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        # Check if we need to reverse the ordering based on meta ordering\n+        meta = self.query.model._meta\n+        if meta.ordering and isinstance(meta.ordering[0], str):\n+            if meta.ordering[0].startswith('-'):\n+                # For descending meta ordering, we need to swap the direction\n+                if not self.query.standard_ordering:\n+                    asc, desc = ORDER_DIR['ASC']\n+                else:\n+                    asc, desc = ORDER_DIR['DESC']\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -305,6 +325,9 @@ class SQLCompiler:\n                 continue\n \n             col, order = get_order_dir(field, asc)\n+            # Handle descending flag for inherited models\n+            if not self.query.standard_ordering:\n+                order = 'DESC' if order == 'ASC' else 'ASC'\n             descending = order == 'DESC'\n \n             if col in self.query.annotation_select:\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..f511859a25\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class Parent(models.Model):\n+    class Meta:\n+        ordering = [\"-pk\"]\n+\n+class Child(Parent):\n+    pass\n+\n+class OrderingInheritanceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create some test data\n+        for i in range(3):\n+            Child.objects.create()\n+\n+    def test_child_ordering(self):\n+        # Get the SQL query\n+        query = str(Child.objects.all().query)\n+        print(\"Query:\", query)\n+        \n+        # Verify the ordering\n+        children = list(Child.objects.all())\n+        pks = [child.pk for child in children]\n+        self.assertEqual(pks, sorted(pks, reverse=True))\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..5b19c15739\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,8 @@\n+from django.db import models\n+\n+class Parent(models.Model):\n+    class Meta:\n+        ordering = [\"-pk\"]\n+\n+class Child(Parent):\n+    pass\n\\ No newline at end of file\ndiff --git a/test_app/test_ordering.py b/test_app/test_ordering.py\nnew file mode 100644\nindex 0000000000..301201248a\n--- /dev/null\n+++ b/test_app/test_ordering.py\n@@ -0,0 +1,27 @@\n+from django.test import TestCase\n+from .models import Parent, Child\n+\n+class OrderingInheritanceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create some test data\n+        for i in range(3):\n+            Child.objects.create()\n+            Parent.objects.create()\n+\n+    def test_parent_ordering(self):\n+        # Verify parent ordering\n+        parents = list(Parent.objects.all())\n+        pks = [parent.pk for parent in parents]\n+        self.assertEqual(pks, sorted(pks, reverse=True))\n+\n+    def test_child_ordering(self):\n+        # Verify child ordering\n+        children = list(Child.objects.all())\n+        pks = [child.pk for child in children]\n+        self.assertEqual(pks, sorted(pks, reverse=True))\n+\n+    def test_child_query_ordering(self):\n+        # Verify the actual SQL query contains DESC\n+        query = str(Child.objects.all().query)\n+        self.assertIn('DESC', query.upper())\n\\ No newline at end of file\ndiff --git a/test_app/tests.py b/test_app/tests.py\nnew file mode 100644\nindex 0000000000..78cf1d0654\n--- /dev/null\n+++ b/test_app/tests.py\n@@ -0,0 +1,19 @@\n+from django.test import TestCase\n+from .models import Child\n+\n+class OrderingInheritanceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create some test data\n+        for i in range(3):\n+            Child.objects.create()\n+\n+    def test_child_ordering(self):\n+        # Get the SQL query\n+        query = str(Child.objects.all().query)\n+        print(\"Query:\", query)\n+        \n+        # Verify the ordering\n+        children = list(Child.objects.all())\n+        pks = [child.pk for child in children]\n+        self.assertEqual(pks, sorted(pks, reverse=True))\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..6e46e7fd1b\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}