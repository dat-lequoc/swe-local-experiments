diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..08129c1325 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -144,7 +144,8 @@ class ModelBase(type):
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
                 if not hasattr(meta, 'ordering'):
-                    new_class._meta.ordering = base_meta.ordering
+                    # Ensure ordering is properly inherited
+                    new_class._meta.ordering = list(base_meta.ordering)
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
 
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 92213a4e67..9dfb9862a0 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -280,13 +280,33 @@ class SQLCompiler:
         elif self.query.get_meta().ordering:
             ordering = self.query.get_meta().ordering
             self._meta_ordering = ordering
+            # Ensure descending flag is preserved for inherited models
+            if not self.query.standard_ordering:
+                ordering = [
+                    f.replace('-', '') if f.startswith('-') else '-' + f
+                    for f in ordering
+                ]
+                # Reverse the order for inherited models
+                if self._meta_ordering:
+                    ordering = ['-' + f.lstrip('-') if not f.startswith('-') else f.lstrip('-') for f in ordering]
         else:
             ordering = []
+        # Get the base ordering direction
         if self.query.standard_ordering:
             asc, desc = ORDER_DIR['ASC']
         else:
             asc, desc = ORDER_DIR['DESC']
 
+        # Check if we need to reverse the ordering based on meta ordering
+        meta = self.query.model._meta
+        if meta.ordering and isinstance(meta.ordering[0], str):
+            if meta.ordering[0].startswith('-'):
+                # For descending meta ordering, we need to swap the direction
+                if not self.query.standard_ordering:
+                    asc, desc = ORDER_DIR['ASC']
+                else:
+                    asc, desc = ORDER_DIR['DESC']
+
         order_by = []
         for field in ordering:
             if hasattr(field, 'resolve_expression'):
@@ -305,6 +325,9 @@ class SQLCompiler:
                 continue
 
             col, order = get_order_dir(field, asc)
+            # Handle descending flag for inherited models
+            if not self.query.standard_ordering:
+                order = 'DESC' if order == 'ASC' else 'ASC'
             descending = order == 'DESC'
 
             if col in self.query.annotation_select:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f511859a25
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.test import TestCase
+
+class Parent(models.Model):
+    class Meta:
+        ordering = ["-pk"]
+
+class Child(Parent):
+    pass
+
+class OrderingInheritanceTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create some test data
+        for i in range(3):
+            Child.objects.create()
+
+    def test_child_ordering(self):
+        # Get the SQL query
+        query = str(Child.objects.all().query)
+        print("Query:", query)
+        
+        # Verify the ordering
+        children = list(Child.objects.all())
+        pks = [child.pk for child in children]
+        self.assertEqual(pks, sorted(pks, reverse=True))
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..5b19c15739
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Parent(models.Model):
+    class Meta:
+        ordering = ["-pk"]
+
+class Child(Parent):
+    pass
\ No newline at end of file
diff --git a/test_app/test_ordering.py b/test_app/test_ordering.py
new file mode 100644
index 0000000000..301201248a
--- /dev/null
+++ b/test_app/test_ordering.py
@@ -0,0 +1,27 @@
+from django.test import TestCase
+from .models import Parent, Child
+
+class OrderingInheritanceTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create some test data
+        for i in range(3):
+            Child.objects.create()
+            Parent.objects.create()
+
+    def test_parent_ordering(self):
+        # Verify parent ordering
+        parents = list(Parent.objects.all())
+        pks = [parent.pk for parent in parents]
+        self.assertEqual(pks, sorted(pks, reverse=True))
+
+    def test_child_ordering(self):
+        # Verify child ordering
+        children = list(Child.objects.all())
+        pks = [child.pk for child in children]
+        self.assertEqual(pks, sorted(pks, reverse=True))
+
+    def test_child_query_ordering(self):
+        # Verify the actual SQL query contains DESC
+        query = str(Child.objects.all().query)
+        self.assertIn('DESC', query.upper())
\ No newline at end of file
diff --git a/test_app/tests.py b/test_app/tests.py
new file mode 100644
index 0000000000..78cf1d0654
--- /dev/null
+++ b/test_app/tests.py
@@ -0,0 +1,19 @@
+from django.test import TestCase
+from .models import Child
+
+class OrderingInheritanceTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create some test data
+        for i in range(3):
+            Child.objects.create()
+
+    def test_child_ordering(self):
+        # Get the SQL query
+        query = str(Child.objects.all().query)
+        print("Query:", query)
+        
+        # Verify the ordering
+        children = list(Child.objects.all())
+        pks = [child.pk for child in children]
+        self.assertEqual(pks, sorted(pks, reverse=True))
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..6e46e7fd1b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
