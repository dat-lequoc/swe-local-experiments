{
  "instance_id": "django__django-11910",
  "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 402dae2829..64109434d6 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -343,15 +343,25 @@ class RenameField(FieldOperation):\n                     remote_model_tuple = self._get_model_tuple(\n                         remote_field.model, model_app_label, model_name\n                     )\n+                    # Update field_name and to_fields if this foreign key points to the renamed field\n                     if remote_model_tuple == model_tuple:\n+                        # Update field_name if it matches the old name\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n-                        to_fields = getattr(field, 'to_fields', None)\n-                        if to_fields:\n-                            field.to_fields = tuple([\n-                                self.new_name if to_field_name == self.old_name else to_field_name\n-                                for to_field_name in to_fields\n-                            ])\n+                        # Update to_fields if they reference the old name\n+                        if hasattr(field, 'to_fields'):\n+                            if hasattr(field, 'to_fields') and field.to_fields is not None:\n+                                # Always convert to tuple after updating field name\n+                                if isinstance(field.to_fields, (list, tuple)):\n+                                    field.to_fields = tuple(\n+                                        self.new_name if f == self.old_name else f\n+                                        for f in field.to_fields\n+                                    )\n+                                else:\n+                                    field.to_fields = (self.new_name if field.to_fields == self.old_name else field.to_fields,)\n+                                # Ensure it's always a tuple\n+                                if not isinstance(field.to_fields, tuple):\n+                                    field.to_fields = tuple(field.to_fields) if isinstance(field.to_fields, (list, set)) else (field.to_fields,)\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\ndiff --git a/pytest.ini b/pytest.ini\nnew file mode 100644\nindex 0000000000..433cc09f71\n--- /dev/null\n+++ b/pytest.ini\n@@ -0,0 +1,3 @@\n+[pytest]\n+DJANGO_SETTINGS_MODULE = django.conf.global_settings\n+python_files = test_*.py\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..cc1ed87a99\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,78 @@\n+import os\n+import django\n+from django.test import TestCase\n+from django.db import migrations, models\n+from django.apps import apps\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+def debug_field_types():\n+    # Create initial state\n+    project_state = migrations.state.ProjectState()\n+    \n+    # Add ModelA with a primary key field that will be renamed\n+    project_state.add_model(migrations.state.ModelState(\n+        \"app1\",\n+        \"ModelA\",\n+        [\n+            (\"field_wrong\", models.CharField(max_length=50, primary_key=True)),\n+        ],\n+        options={},\n+    ))\n+    \n+    # Add ModelB with a foreign key to ModelA's field_wrong\n+    project_state.add_model(migrations.state.ModelState(\n+        \"app1\",\n+        \"ModelB\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"field_fk\", models.ForeignKey(\"app1.ModelA\", models.CASCADE, to_field=\"field_wrong\")),\n+        ],\n+        options={},\n+    ))\n+    \n+    # Create the rename operation\n+    operation = migrations.RenameField(\"ModelA\", \"field_wrong\", \"field_fixed\")\n+    \n+    # Apply the operation\n+    new_state = project_state.clone()\n+    \n+    # Debug the model state cloning process\n+    print(\"Initial state:\")\n+    ModelB = project_state.apps.get_model(\"app1\", \"ModelB\")\n+    field_fk = ModelB._meta.get_field(\"field_fk\")\n+    print(f\"Original to_fields type: {type(field_fk.to_fields)}\")\n+    print(f\"Original to_fields value: {field_fk.to_fields}\")\n+    \n+    # Clone the state\n+    new_state = project_state.clone()\n+    print(\"\\nAfter cloning:\")\n+    ModelB = new_state.apps.get_model(\"app1\", \"ModelB\")\n+    field_fk = ModelB._meta.get_field(\"field_fk\")\n+    print(f\"Cloned to_fields type: {type(field_fk.to_fields)}\")\n+    print(f\"Cloned to_fields value: {field_fk.to_fields}\")\n+    \n+    # Apply the operation\n+    operation.state_forwards(\"app1\", new_state)\n+    print(\"\\nAfter state_forwards:\")\n+    ModelB = new_state.apps.get_model(\"app1\", \"ModelB\")\n+    field_fk = ModelB._meta.get_field(\"field_fk\")\n+    print(f\"Updated to_fields type: {type(field_fk.to_fields)}\")\n+    print(f\"Updated to_fields value: {field_fk.to_fields}\")\n+    \n+    # Try to modify the field directly\n+    field_fk.to_fields = tuple(field_fk.to_fields)\n+    print(\"\\nAfter direct modification:\")\n+    print(f\"Modified to_fields type: {type(field_fk.to_fields)}\")\n+    print(f\"Modified to_fields value: {field_fk.to_fields}\")\n+    \n+    # Get a fresh instance of the model\n+    ModelB = new_state.apps.get_model(\"app1\", \"ModelB\")\n+    field_fk = ModelB._meta.get_field(\"field_fk\")\n+    print(\"\\nAfter getting fresh model:\")\n+    print(f\"Fresh to_fields type: {type(field_fk.to_fields)}\")\n+    print(f\"Fresh to_fields value: {field_fk.to_fields}\")\n+\n+if __name__ == \"__main__\":\n+    debug_field_types()\n\\ No newline at end of file\ndiff --git a/test_rename_pk.py b/test_rename_pk.py\nnew file mode 100644\nindex 0000000000..9bf3b6785a\n--- /dev/null\n+++ b/test_rename_pk.py\n@@ -0,0 +1,51 @@\n+from django.test import TestCase\n+from django.db import migrations, models\n+from django.apps import apps\n+\n+class TestRenamePKWithFK(TestCase):\n+    def test_rename_pk_with_fk(self):\n+        # Create initial state\n+        project_state = migrations.state.ProjectState()\n+        \n+        # Add ModelA with a primary key field that will be renamed\n+        project_state.add_model(migrations.state.ModelState(\n+            \"app1\",\n+            \"ModelA\",\n+            [\n+                (\"field_wrong\", models.CharField(max_length=50, primary_key=True)),\n+            ],\n+            options={},\n+        ))\n+        \n+        # Add ModelB with a foreign key to ModelA's field_wrong\n+        project_state.add_model(migrations.state.ModelState(\n+            \"app1\",\n+            \"ModelB\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"field_fk\", models.ForeignKey(\"app1.ModelA\", models.CASCADE, to_field=\"field_wrong\")),\n+            ],\n+            options={},\n+        ))\n+        \n+        # Create the rename operation\n+        operation = migrations.RenameField(\"ModelA\", \"field_wrong\", \"field_fixed\")\n+        \n+        # Apply the operation\n+        new_state = project_state.clone()\n+        operation.state_forwards(\"app1\", new_state)\n+        \n+        # Get the models from the new state\n+        ModelA = new_state.apps.get_model(\"app1\", \"ModelA\")\n+        ModelB = new_state.apps.get_model(\"app1\", \"ModelB\")\n+        \n+        # Check if the field was renamed in ModelA\n+        self.assertTrue(hasattr(ModelA._meta, \"get_field\"))\n+        self.assertIsNotNone(ModelA._meta.get_field(\"field_fixed\"))\n+        with self.assertRaises(Exception):\n+            ModelA._meta.get_field(\"field_wrong\")\n+        \n+        # Check if the foreign key in ModelB points to the new field name\n+        field_fk = ModelB._meta.get_field(\"field_fk\")\n+        self.assertEqual(field_fk.to_fields, (\"field_fixed\",), \n+                        f\"Foreign key should point to field_fixed, got {field_fk.to_fields}\")\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..3ab380a727\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,13 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}