{
  "instance_id": "django__django-12747",
  "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..bc37e016a4 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -104,8 +104,15 @@ class Collector:\n \n         Return a list of all objects that were not already collected.\n         \"\"\"\n-        if not objs:\n+        if hasattr(objs, 'model'):\n+            # If we're adding a queryset, ensure its model is tracked\n+            model = objs.model\n+            self.data.setdefault(model, set())\n+            if not objs:\n+                return []\n+        elif not objs:\n             return []\n+            \n         new_objs = []\n         model = objs[0].__class__\n         instances = self.data[model]\n@@ -377,6 +384,11 @@ class Collector:\n         self.data = {model: self.data[model] for model in sorted_models}\n \n     def delete(self):\n+        # Ensure all models are in self.data even if there are no instances\n+        # This is needed for consistent behavior with empty querysets\n+        for model in set(model for model, _ in self.instances_with_model()):\n+            self.data.setdefault(model, set())\n+            \n         # sort instance collections\n         for model, instances in self.data.items():\n             self.data[model] = sorted(instances, key=attrgetter(\"pk\"))\n@@ -387,6 +399,11 @@ class Collector:\n         self.sort()\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n+        \n+        # Always initialize counters for all models to ensure consistent behavior\n+        # This ensures the model's label is included even when no objects are deleted\n+        for model in self.data:\n+            deleted_counter[model._meta.label] = 0\n \n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\ndiff --git a/run_tests.py b/run_tests.py\nnew file mode 100644\nindex 0000000000..f33d9a362f\n--- /dev/null\n+++ b/run_tests.py\n@@ -0,0 +1,13 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test.utils import get_runner\n+\n+if __name__ == \"__main__\":\n+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'\n+    django.setup()\n+    TestRunner = get_runner(settings)\n+    test_runner = TestRunner()\n+    failures = test_runner.run_tests([\"tests.delete.tests\"])\n+    sys.exit(bool(failures))\n\\ No newline at end of file\ndiff --git a/tests/delete/reproduce_error.py b/tests/delete/reproduce_error.py\nnew file mode 100644\nindex 0000000000..81e54ee01b\n--- /dev/null\n+++ b/tests/delete/reproduce_error.py\n@@ -0,0 +1,37 @@\n+import os\n+import sys\n+import django\n+from django.test import TestCase\n+from django.db import models\n+\n+# Add the parent directory to sys.path\n+sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+# Test models\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class RelatedModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    simple = models.ForeignKey(SimpleModel, on_delete=models.CASCADE)\n+\n+# Test cases\n+class DeleteBehaviorTest(TestCase):\n+    def test_delete_empty_simple_model(self):\n+        # Test deleting from a model without foreign keys when no objects exist\n+        result = SimpleModel.objects.all().delete()\n+        self.assertEqual(result, (0, {'delete.SimpleModel': 0}))\n+\n+    def test_delete_empty_related_model(self):\n+        # Test deleting from a model with foreign keys when no objects exist\n+        result = RelatedModel.objects.all().delete()\n+        self.assertEqual(result, (0, {'delete.RelatedModel': 0}))\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    test_runner.run_tests(['tests.delete.reproduce_error'])\n\\ No newline at end of file\ndiff --git a/tests/delete/test_empty_delete.py b/tests/delete/test_empty_delete.py\nnew file mode 100644\nindex 0000000000..407b3d3d1f\n--- /dev/null\n+++ b/tests/delete/test_empty_delete.py\n@@ -0,0 +1,24 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    class Meta:\n+        app_label = 'delete'\n+\n+class RelatedModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    simple = models.ForeignKey(SimpleModel, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'delete'\n+\n+class EmptyDeleteTest(TestCase):\n+    def test_empty_delete_simple_model(self):\n+        \"\"\"Test deleting from a model without foreign keys when no objects exist\"\"\"\n+        result = SimpleModel.objects.all().delete()\n+        self.assertEqual(result, (0, {'delete.SimpleModel': 0}))\n+\n+    def test_empty_delete_related_model(self):\n+        \"\"\"Test deleting from a model with foreign keys when no objects exist\"\"\"\n+        result = RelatedModel.objects.all().delete()\n+        self.assertEqual(result, (0, {'delete.RelatedModel': 0}))\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..88660fd7ae\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,36 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'django.contrib.admin',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'tests.delete',\n+]\n+\n+MIDDLEWARE = [\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+]\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}