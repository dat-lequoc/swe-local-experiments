{
  "instance_id": "django__django-13315",
  "model_patch": "diff --git a/conftest.py b/conftest.py\nnew file mode 100644\nindex 0000000000..d535b0d7b2\n--- /dev/null\n+++ b/conftest.py\n@@ -0,0 +1,25 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+def pytest_configure():\n+    from django.core.management import call_command\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'tests',\n+            'tests.model_fields',\n+        ],\n+        SECRET_KEY='dummy',\n+        USE_TZ=False,\n+    )\n+    django.setup()\n+    # Create the test database\n+    call_command('migrate')\n\\ No newline at end of file\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..3794895efb 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -415,6 +415,11 @@ class RelatedField(FieldCacheMixin, Field):\n             defaults.update({\n                 'limit_choices_to': limit_choices_to,\n             })\n+            # If limit_choices_to is a Q object, ensure distinct results\n+            if isinstance(limit_choices_to, Q):\n+                # Use distinct() to prevent duplicate options when using joins\n+                qs = self.remote_field.model._default_manager.filter(limit_choices_to).distinct()\n+                kwargs.setdefault('queryset', qs)\n         defaults.update(kwargs)\n         return super().formfield(**defaults)\n \ndiff --git a/django_test_settings.py b/django_test_settings.py\nnew file mode 100644\nindex 0000000000..b0c57e88db\n--- /dev/null\n+++ b/django_test_settings.py\n@@ -0,0 +1,16 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy'\n+\n+USE_TZ = False\n\\ No newline at end of file\ndiff --git a/tests/model_fields/test_foreignkey.py b/tests/model_fields/test_foreignkey.py\nindex d30cca9b5c..306d984f94 100644\n--- a/tests/model_fields/test_foreignkey.py\n+++ b/tests/model_fields/test_foreignkey.py\n@@ -12,6 +12,51 @@ from .models import Bar, FkToChar, Foo, PrimaryKeyCharModel\n \n class ForeignKeyTests(TestCase):\n \n+    def test_limit_choices_to_with_q_object(self):\n+        \"\"\"\n+        Test that limit_choices_to with Q objects and joins doesn't produce duplicates.\n+        \"\"\"\n+        class Author(models.Model):\n+            name = models.CharField(max_length=100)\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        class Book(models.Model):\n+            title = models.CharField(max_length=100)\n+            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        class Review(models.Model):\n+            text = models.TextField()\n+            book = models.ForeignKey(Book, on_delete=models.CASCADE)\n+            rating = models.IntegerField()\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        class Library(models.Model):\n+            name = models.CharField(max_length=100)\n+            featured_book = models.ForeignKey(\n+                Book,\n+                on_delete=models.CASCADE,\n+                limit_choices_to=Q(review__rating__gte=4),\n+                related_name='featured_in'\n+            )\n+            class Meta:\n+                app_label = 'model_fields'\n+\n+        author = Author.objects.create(name='Test Author')\n+        book = Book.objects.create(title='Test Book', author=author)\n+        Review.objects.create(text='Good book', book=book, rating=4)\n+        Review.objects.create(text='Great book', book=book, rating=5)\n+\n+        field = Library._meta.get_field('featured_book')\n+        form_field = field.formfield()\n+        choices = list(form_field.queryset)\n+        # The book should appear only once in the choices\n+        self.assertEqual(len(choices), 1)\n+        self.assertEqual(choices[0], book)\n+\n     def test_callable_default(self):\n         \"\"\"A lazy callable may be used for ForeignKey.default.\"\"\"\n         a = Foo.objects.create(id=1, a='abc', d=Decimal('12.34'))\ndiff --git a/tests/model_fields/test_limit_choices.py b/tests/model_fields/test_limit_choices.py\nnew file mode 100644\nindex 0000000000..a497b8e063\n--- /dev/null\n+++ b/tests/model_fields/test_limit_choices.py\n@@ -0,0 +1,51 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Q\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'model_fields'\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'model_fields'\n+\n+class Review(models.Model):\n+    text = models.TextField()\n+    book = models.ForeignKey(Book, on_delete=models.CASCADE)\n+    rating = models.IntegerField()\n+    \n+    class Meta:\n+        app_label = 'model_fields'\n+\n+class Library(models.Model):\n+    name = models.CharField(max_length=100)\n+    featured_book = models.ForeignKey(\n+        Book,\n+        on_delete=models.CASCADE,\n+        limit_choices_to=Q(review__rating__gte=4),\n+        related_name='featured_in'\n+    )\n+    \n+    class Meta:\n+        app_label = 'model_fields'\n+\n+class LimitChoicesTest(TestCase):\n+    def setUp(self):\n+        self.author = Author.objects.create(name='Test Author')\n+        self.book = Book.objects.create(title='Test Book', author=self.author)\n+        Review.objects.create(text='Good book', book=self.book, rating=4)\n+        Review.objects.create(text='Great book', book=self.book, rating=5)\n+\n+    def test_limit_choices_with_joins(self):\n+        field = Library._meta.get_field('featured_book')\n+        form_field = field.formfield()\n+        choices = list(form_field.queryset)\n+        # The book should appear only once in the choices\n+        self.assertEqual(len(choices), 1)\n+        self.assertEqual(choices[0], self.book)\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..8040979fd4\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,13 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'tests.model_fields',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}