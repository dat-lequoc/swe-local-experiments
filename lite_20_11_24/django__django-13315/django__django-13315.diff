diff --git a/conftest.py b/conftest.py
new file mode 100644
index 0000000000..d535b0d7b2
--- /dev/null
+++ b/conftest.py
@@ -0,0 +1,25 @@
+import os
+import django
+from django.conf import settings
+
+def pytest_configure():
+    from django.core.management import call_command
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests',
+            'tests.model_fields',
+        ],
+        SECRET_KEY='dummy',
+        USE_TZ=False,
+    )
+    django.setup()
+    # Create the test database
+    call_command('migrate')
\ No newline at end of file
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 397146a354..3794895efb 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -415,6 +415,11 @@ class RelatedField(FieldCacheMixin, Field):
             defaults.update({
                 'limit_choices_to': limit_choices_to,
             })
+            # If limit_choices_to is a Q object, ensure distinct results
+            if isinstance(limit_choices_to, Q):
+                # Use distinct() to prevent duplicate options when using joins
+                qs = self.remote_field.model._default_manager.filter(limit_choices_to).distinct()
+                kwargs.setdefault('queryset', qs)
         defaults.update(kwargs)
         return super().formfield(**defaults)
 
diff --git a/django_test_settings.py b/django_test_settings.py
new file mode 100644
index 0000000000..b0c57e88db
--- /dev/null
+++ b/django_test_settings.py
@@ -0,0 +1,16 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy'
+
+USE_TZ = False
\ No newline at end of file
diff --git a/tests/model_fields/test_foreignkey.py b/tests/model_fields/test_foreignkey.py
index d30cca9b5c..306d984f94 100644
--- a/tests/model_fields/test_foreignkey.py
+++ b/tests/model_fields/test_foreignkey.py
@@ -12,6 +12,51 @@ from .models import Bar, FkToChar, Foo, PrimaryKeyCharModel
 
 class ForeignKeyTests(TestCase):
 
+    def test_limit_choices_to_with_q_object(self):
+        """
+        Test that limit_choices_to with Q objects and joins doesn't produce duplicates.
+        """
+        class Author(models.Model):
+            name = models.CharField(max_length=100)
+            class Meta:
+                app_label = 'model_fields'
+
+        class Book(models.Model):
+            title = models.CharField(max_length=100)
+            author = models.ForeignKey(Author, on_delete=models.CASCADE)
+            class Meta:
+                app_label = 'model_fields'
+
+        class Review(models.Model):
+            text = models.TextField()
+            book = models.ForeignKey(Book, on_delete=models.CASCADE)
+            rating = models.IntegerField()
+            class Meta:
+                app_label = 'model_fields'
+
+        class Library(models.Model):
+            name = models.CharField(max_length=100)
+            featured_book = models.ForeignKey(
+                Book,
+                on_delete=models.CASCADE,
+                limit_choices_to=Q(review__rating__gte=4),
+                related_name='featured_in'
+            )
+            class Meta:
+                app_label = 'model_fields'
+
+        author = Author.objects.create(name='Test Author')
+        book = Book.objects.create(title='Test Book', author=author)
+        Review.objects.create(text='Good book', book=book, rating=4)
+        Review.objects.create(text='Great book', book=book, rating=5)
+
+        field = Library._meta.get_field('featured_book')
+        form_field = field.formfield()
+        choices = list(form_field.queryset)
+        # The book should appear only once in the choices
+        self.assertEqual(len(choices), 1)
+        self.assertEqual(choices[0], book)
+
     def test_callable_default(self):
         """A lazy callable may be used for ForeignKey.default."""
         a = Foo.objects.create(id=1, a='abc', d=Decimal('12.34'))
diff --git a/tests/model_fields/test_limit_choices.py b/tests/model_fields/test_limit_choices.py
new file mode 100644
index 0000000000..a497b8e063
--- /dev/null
+++ b/tests/model_fields/test_limit_choices.py
@@ -0,0 +1,51 @@
+from django.db import models
+from django.test import TestCase
+from django.db.models import Q
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'model_fields'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'model_fields'
+
+class Review(models.Model):
+    text = models.TextField()
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    rating = models.IntegerField()
+    
+    class Meta:
+        app_label = 'model_fields'
+
+class Library(models.Model):
+    name = models.CharField(max_length=100)
+    featured_book = models.ForeignKey(
+        Book,
+        on_delete=models.CASCADE,
+        limit_choices_to=Q(review__rating__gte=4),
+        related_name='featured_in'
+    )
+    
+    class Meta:
+        app_label = 'model_fields'
+
+class LimitChoicesTest(TestCase):
+    def setUp(self):
+        self.author = Author.objects.create(name='Test Author')
+        self.book = Book.objects.create(title='Test Book', author=self.author)
+        Review.objects.create(text='Good book', book=self.book, rating=4)
+        Review.objects.create(text='Great book', book=self.book, rating=5)
+
+    def test_limit_choices_with_joins(self):
+        field = Library._meta.get_field('featured_book')
+        form_field = field.formfield()
+        choices = list(form_field.queryset)
+        # The book should appear only once in the choices
+        self.assertEqual(len(choices), 1)
+        self.assertEqual(choices[0], self.book)
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..8040979fd4
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.model_fields',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
