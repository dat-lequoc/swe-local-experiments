{
  "instance_id": "django__django-11620",
  "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2154a46320..143d392a7c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -17,6 +17,7 @@ from django.conf import settings\n from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n+from django.http import Http404\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n@@ -258,7 +259,7 @@ class RoutePattern(CheckURLMixin):\n                 converter = self.converters[key]\n                 try:\n                     kwargs[key] = converter.to_python(value)\n-                except ValueError:\n+                except (ValueError, Http404):\n                     return None\n             return path[match.end():], (), kwargs\n         return None\ndiff --git a/tests/urlpatterns/test_http404_converter.py b/tests/urlpatterns/test_http404_converter.py\nnew file mode 100644\nindex 0000000000..56a60ab780\n--- /dev/null\n+++ b/tests/urlpatterns/test_http404_converter.py\n@@ -0,0 +1,60 @@\n+from django.http import Http404\n+from django.test import SimpleTestCase\n+from django.urls import path, resolve, Resolver404, register_converter\n+from django.urls.resolvers import URLResolver, RegexPattern\n+\n+def test_view(request, param):\n+    return None\n+\n+class CustomConverter:\n+    regex = '[0-9]+'\n+\n+    def to_python(self, value):\n+        if value == '404':\n+            raise Http404('Object not found')\n+        return int(value)\n+\n+    def to_url(self, value):\n+        return str(value)\n+\n+# Register the converter before using it\n+register_converter(CustomConverter, 'custom')\n+\n+class Http404ConverterTests(SimpleTestCase):\n+    def setUp(self):\n+        # Create two patterns - one that might raise Http404 and one that should match after\n+        self.pattern1 = path('test/<custom:param>/', test_view)\n+        self.pattern2 = path('test/404/', test_view)\n+        self.resolver = URLResolver(RegexPattern(r'^/'), [self.pattern1, self.pattern2])\n+\n+    def test_converter_raising_http404(self):\n+        \"\"\"\n+        When a path converter raises Http404, it should be handled like ValueError\n+        and allow trying the next URL pattern.\n+        \"\"\"\n+        # This should try the first pattern, get Http404, then match the second pattern\n+        match = self.resolver.resolve('/test/404/')\n+        self.assertIsNotNone(match)\n+        self.assertEqual(match.func, test_view)\n+        self.assertEqual(match.kwargs, {})\n+\n+    def test_converter_valid_value(self):\n+        \"\"\"\n+        Ensure the converter still works with valid values.\n+        \"\"\"\n+        match = self.resolver.resolve('/test/123/')\n+        self.assertEqual(match.kwargs['param'], 123)\n+\n+    def test_converter_invalid_value(self):\n+        \"\"\"\n+        Test that non-matching values result in Resolver404.\n+        \"\"\"\n+        with self.assertRaises(Resolver404):\n+            self.resolver.resolve('/test/abc/')\n+\n+    def test_converter_empty_value(self):\n+        \"\"\"\n+        Test that empty values result in Resolver404.\n+        \"\"\"\n+        with self.assertRaises(Resolver404):\n+            self.resolver.resolve('/test//')\n\\ No newline at end of file\ndiff --git a/tests/urlpatterns/test_settings.py b/tests/urlpatterns/test_settings.py\nnew file mode 100644\nindex 0000000000..1a55b74f3f\n--- /dev/null\n+++ b/tests/urlpatterns/test_settings.py\n@@ -0,0 +1,36 @@\n+SECRET_KEY = 'dummy-key-for-tests'\n+DEBUG = True\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+]\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'django.contrib.sites',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.admin',\n+]\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}