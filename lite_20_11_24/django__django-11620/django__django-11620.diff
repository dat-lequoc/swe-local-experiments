diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2154a46320..143d392a7c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -17,6 +17,7 @@ from django.conf import settings
 from django.core.checks import Error, Warning
 from django.core.checks.urls import check_resolver
 from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
+from django.http import Http404
 from django.utils.datastructures import MultiValueDict
 from django.utils.functional import cached_property
 from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
@@ -258,7 +259,7 @@ class RoutePattern(CheckURLMixin):
                 converter = self.converters[key]
                 try:
                     kwargs[key] = converter.to_python(value)
-                except ValueError:
+                except (ValueError, Http404):
                     return None
             return path[match.end():], (), kwargs
         return None
diff --git a/tests/urlpatterns/test_http404_converter.py b/tests/urlpatterns/test_http404_converter.py
new file mode 100644
index 0000000000..56a60ab780
--- /dev/null
+++ b/tests/urlpatterns/test_http404_converter.py
@@ -0,0 +1,60 @@
+from django.http import Http404
+from django.test import SimpleTestCase
+from django.urls import path, resolve, Resolver404, register_converter
+from django.urls.resolvers import URLResolver, RegexPattern
+
+def test_view(request, param):
+    return None
+
+class CustomConverter:
+    regex = '[0-9]+'
+
+    def to_python(self, value):
+        if value == '404':
+            raise Http404('Object not found')
+        return int(value)
+
+    def to_url(self, value):
+        return str(value)
+
+# Register the converter before using it
+register_converter(CustomConverter, 'custom')
+
+class Http404ConverterTests(SimpleTestCase):
+    def setUp(self):
+        # Create two patterns - one that might raise Http404 and one that should match after
+        self.pattern1 = path('test/<custom:param>/', test_view)
+        self.pattern2 = path('test/404/', test_view)
+        self.resolver = URLResolver(RegexPattern(r'^/'), [self.pattern1, self.pattern2])
+
+    def test_converter_raising_http404(self):
+        """
+        When a path converter raises Http404, it should be handled like ValueError
+        and allow trying the next URL pattern.
+        """
+        # This should try the first pattern, get Http404, then match the second pattern
+        match = self.resolver.resolve('/test/404/')
+        self.assertIsNotNone(match)
+        self.assertEqual(match.func, test_view)
+        self.assertEqual(match.kwargs, {})
+
+    def test_converter_valid_value(self):
+        """
+        Ensure the converter still works with valid values.
+        """
+        match = self.resolver.resolve('/test/123/')
+        self.assertEqual(match.kwargs['param'], 123)
+
+    def test_converter_invalid_value(self):
+        """
+        Test that non-matching values result in Resolver404.
+        """
+        with self.assertRaises(Resolver404):
+            self.resolver.resolve('/test/abc/')
+
+    def test_converter_empty_value(self):
+        """
+        Test that empty values result in Resolver404.
+        """
+        with self.assertRaises(Resolver404):
+            self.resolver.resolve('/test//')
\ No newline at end of file
diff --git a/tests/urlpatterns/test_settings.py b/tests/urlpatterns/test_settings.py
new file mode 100644
index 0000000000..1a55b74f3f
--- /dev/null
+++ b/tests/urlpatterns/test_settings.py
@@ -0,0 +1,36 @@
+SECRET_KEY = 'dummy-key-for-tests'
+DEBUG = True
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sites',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.admin',
+]
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
\ No newline at end of file
