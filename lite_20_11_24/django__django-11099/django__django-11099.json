{
  "instance_id": "django__django-11099",
  "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..15ecd64a27\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,41 @@\n+from django.conf import settings\n+from django.core.exceptions import ValidationError\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        USE_I18N=False,  # Disable internationalization for simplicity\n+        DATABASES={},  # No database needed\n+        INSTALLED_APPS=['django.contrib.auth']  # Required for auth validators\n+    )\n+\n+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\n+\n+def test_validators():\n+    ascii_validator = ASCIIUsernameValidator()\n+    unicode_validator = UnicodeUsernameValidator()\n+\n+    # Test valid usernames\n+    print(\"Testing valid usernames:\")\n+    valid_usernames = [\"user1\", \"user.name\", \"user@domain\", \"user+name\", \"user-name\"]\n+    for username in valid_usernames:\n+        try:\n+            ascii_validator(username)\n+            unicode_validator(username)\n+            print(f\"[PASS] {username!r} is valid\")\n+        except ValidationError as e:\n+            print(f\"[FAIL] {username!r} failed validation: {e}\")\n+\n+    # Test usernames with trailing newline (should be rejected now)\n+    print(\"\\nTesting usernames with trailing newline:\")\n+    newline_usernames = [\"user1\\n\", \"user.name\\n\", \"user@domain\\n\"]\n+    for username in newline_usernames:\n+        try:\n+            ascii_validator(username)\n+            unicode_validator(username)\n+            print(f\"[FAIL] {username!r} is incorrectly accepted\")\n+        except ValidationError as e:\n+            print(f\"[PASS] {username!r} is correctly rejected\")\n+\n+if __name__ == \"__main__\":\n+    test_validators()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}