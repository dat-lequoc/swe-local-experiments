{
  "instance_id": "django__django-11815",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..dbdd7f4726 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        imports = {'import %s' % module}\n+        return \"%s.%s['%s']\" % (module, enum_class.__name__, self.value.name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..7501597ead\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,65 @@\n+import os\n+import django\n+from enum import Enum\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models, migrations\n+from django.db.migrations.writer import MigrationWriter\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+# Test various enum scenarios\n+class EmptyEnum(Enum):\n+    pass\n+\n+class ComplexEnum(Enum):\n+    SPACE = _('With Space')\n+    SPECIAL = _('With-Special-Chars!')\n+    UNICODE = _('Unicode-\u26a1')\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class NumericEnum(Enum):\n+    ONE = 1\n+    TWO = 2\n+    \n+    def __str__(self):\n+        return self.name\n+\n+# Create test models\n+class EdgeCaseModel(models.Model):\n+    complex_status = models.CharField(default=ComplexEnum.SPACE, max_length=128)\n+    numeric_status = models.IntegerField(default=NumericEnum.ONE)\n+    \n+    class Meta:\n+        app_label = 'tests'\n+\n+# Generate migrations for each case\n+def test_migration(model_class, field_name, enum_value):\n+    migration = migrations.Migration('test_migration', 'tests')\n+    migration.operations.append(\n+        migrations.CreateModel(\n+            name=model_class.__name__,\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                (field_name, getattr(model_class._meta.fields[1], '__class__')(\n+                    default=enum_value,\n+                    max_length=128 if isinstance(enum_value, ComplexEnum) else None\n+                )),\n+            ],\n+        )\n+    )\n+    writer = MigrationWriter(migration)\n+    return writer.as_string()\n+\n+# Test cases\n+print(\"Testing ComplexEnum with spaces and special chars:\")\n+print(test_migration(EdgeCaseModel, 'complex_status', ComplexEnum.SPACE))\n+\n+print(\"\\nTesting ComplexEnum with unicode:\")\n+print(test_migration(EdgeCaseModel, 'complex_status', ComplexEnum.UNICODE))\n+\n+print(\"\\nTesting NumericEnum:\")\n+print(test_migration(EdgeCaseModel, 'numeric_status', NumericEnum.ONE))\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..c4af019419\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,36 @@\n+import os\n+import django\n+from django.db import models, migrations\n+from django.db.migrations.writer import MigrationWriter\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+# Import our test models\n+from tests.models import Status, Item\n+\n+# Test the migration generation\n+from django.db import migrations\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ProjectState\n+\n+# Create a simple migration\n+migration = migrations.Migration('test_migration', 'tests')\n+migration.operations.append(\n+    migrations.CreateModel(\n+        name='Item',\n+        fields=[\n+            ('id', models.AutoField(primary_key=True)),\n+            ('status', models.CharField(default=Status.GOOD, max_length=128)),\n+        ],\n+    )\n+)\n+\n+# Write the migration\n+writer = MigrationWriter(migration)\n+migration_string = writer.as_string()\n+\n+print(\"Generated migration:\")\n+print(migration_string)\n\\ No newline at end of file\ndiff --git a/tests/models.py b/tests/models.py\nnew file mode 100644\nindex 0000000000..18ae616f25\n--- /dev/null\n+++ b/tests/models.py\n@@ -0,0 +1,16 @@\n+from enum import Enum\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class Status(Enum):\n+    GOOD = _('Good')  # 'Good' will be translated\n+    BAD = _('Bad')    # 'Bad' will be translated\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+    \n+    class Meta:\n+        app_label = 'tests'\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..cb3dbcbcba\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}