{
  "instance_id": "django__django-12125",
  "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..4ebec5c906 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -95,8 +95,20 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n+            # Handle inner classes by cleaning up the path\n+            parts = path.split('.')\n+            # Remove <locals> and test method names from the path\n+            cleaned_parts = []\n+            for i, part in enumerate(parts):\n+                if part == '<locals>' or (i > 0 and part.startswith('test_')):\n+                    continue\n+                if i == len(parts) - 1 or parts[i+1] not in ('test_', '<locals>'):\n+                    cleaned_parts.append(part)\n+            \n+            # Get the module name (first part) and construct the cleaned path\n+            module = cleaned_parts[0]\n             imports = {\"import %s\" % module}\n-            name = path\n+            name = '.'.join(cleaned_parts)\n         return name, imports\n \n     def serialize(self):\ndiff --git a/tests/migrations/edge_cases.py b/tests/migrations/edge_cases.py\nnew file mode 100644\nindex 0000000000..46ce0466c9\n--- /dev/null\n+++ b/tests/migrations/edge_cases.py\n@@ -0,0 +1,79 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations import Migration\n+from django.test.utils import override_settings\n+from django.conf import settings\n+import django\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={},\n+        INSTALLED_APPS=[],\n+        SECRET_KEY='dummy',\n+    )\n+    django.setup()\n+\n+class TestInnerClassEdgeCases(SimpleTestCase):\n+    @override_settings(MIGRATION_MODULES={})\n+    def test_nested_inner_classes(self):\n+        class OuterMost:\n+            class Middle:\n+                class Inner(models.CharField):\n+                    pass\n+\n+        class A(models.Model):\n+            field = OuterMost.Middle.Inner(max_length=20)\n+            \n+            class Meta:\n+                app_label = 'test_app'\n+\n+        migration = Migration('test_migration', 'test_app')\n+        migration.operations = [\n+            migrations.CreateModel(\n+                name='A',\n+                fields=[\n+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                    ('field', OuterMost.Middle.Inner(max_length=20)),\n+                ],\n+            ),\n+        ]\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.OuterMost.Middle.Inner', output)\n+\n+    @override_settings(MIGRATION_MODULES={})\n+    def test_multiple_inner_fields(self):\n+        class Container:\n+            class Field1(models.CharField):\n+                pass\n+            class Field2(models.IntegerField):\n+                pass\n+\n+        class B(models.Model):\n+            field1 = Container.Field1(max_length=20)\n+            field2 = Container.Field2()\n+            \n+            class Meta:\n+                app_label = 'test_app'\n+\n+        migration = Migration('test_migration', 'test_app')\n+        migration.operations = [\n+            migrations.CreateModel(\n+                name='B',\n+                fields=[\n+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                    ('field1', Container.Field1(max_length=20)),\n+                    ('field2', Container.Field2()),\n+                ],\n+            ),\n+        ]\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.Container.Field1', output)\n+        self.assertIn('migrations.edge_cases.TestInnerClassEdgeCases.Container.Field2', output)\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_inner_class.py b/tests/migrations/test_inner_class.py\nnew file mode 100644\nindex 0000000000..53864f0c89\n--- /dev/null\n+++ b/tests/migrations/test_inner_class.py\n@@ -0,0 +1,42 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations import Migration\n+from django.test.utils import override_settings\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DATABASES={},\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    SECRET_KEY='dummy',\n+)\n+\n+class TestInnerClassMigrations(SimpleTestCase):\n+    @override_settings(MIGRATION_MODULES={})\n+    def test_inner_class_path(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Create a test migration\n+        migration = Migration('test_migration', 'test_app')\n+        migration.operations = [\n+            migrations.CreateModel(\n+                name='A',\n+                fields=[\n+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                    ('field', Outer.Inner(max_length=20)),\n+                ],\n+            ),\n+        ]\n+\n+        # Write the migration\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # The output should contain the full path to the inner class\n+        self.assertIn('test_inner_class.Outer.Inner', output)\n\\ No newline at end of file\ndiff --git a/tests/migrations/test_inner_class_new.py b/tests/migrations/test_inner_class_new.py\nnew file mode 100644\nindex 0000000000..5bca753d8d\n--- /dev/null\n+++ b/tests/migrations/test_inner_class_new.py\n@@ -0,0 +1,48 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations import Migration\n+from django.test.utils import override_settings\n+from django.conf import settings\n+import django\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={},\n+        INSTALLED_APPS=[],\n+        SECRET_KEY='dummy',\n+    )\n+    django.setup()\n+\n+class TestInnerClassMigrations(SimpleTestCase):\n+    @override_settings(MIGRATION_MODULES={})\n+    def test_inner_class_path(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+            \n+            class Meta:\n+                app_label = 'test_app'\n+\n+        # Create a test migration\n+        migration = Migration('test_migration', 'test_app')\n+        migration.operations = [\n+            migrations.CreateModel(\n+                name='A',\n+                fields=[\n+                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                    ('field', Outer.Inner(max_length=20)),\n+                ],\n+            ),\n+        ]\n+\n+        # Write the migration\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # The output should contain the full path to the inner class\n+        self.assertIn('migrations.TestInnerClassMigrations.Outer.Inner', output)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}