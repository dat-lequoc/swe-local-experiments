{
  "instance_id": "django__django-13321",
  "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..a01c9f4a0e 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -1,4 +1,5 @@\n import base64\n+import binascii\n import logging\n import string\n import warnings\n@@ -119,9 +120,9 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n-        except Exception:\n+        except (signing.BadSignature, ValueError):\n+            # RemovedInDjango40Warning: when the deprecation ends, handle here\n+            # exceptions similar to what _legacy_decode() does now.\n             return self._legacy_decode(session_data)\n \n     def _legacy_encode(self, session_dict):\n@@ -132,7 +133,12 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        try:\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        except (binascii.Error, UnicodeEncodeError):\n+            # If base64 decoding fails, return an empty session\n+            return {}\n+            \n         try:\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..88c31446b0\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,53 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+from django.contrib.sessions.backends.db import SessionStore\n+import base64\n+\n+def test_edge_cases():\n+    \"\"\"Test various edge cases for session data handling\"\"\"\n+    print(\"Testing session data edge cases...\")\n+    \n+    session = SessionStore()\n+    \n+    # Test case 1: Empty string\n+    print(\"\\nTesting empty string...\")\n+    result = session.decode(\"\")\n+    assert result == {}, \"Empty string should return empty dict\"\n+    print(\"\u2713 Empty string handled correctly\")\n+    \n+    # Test case 2: None value\n+    print(\"\\nTesting None value...\")\n+    try:\n+        result = session.decode(None)\n+        assert result == {}, \"None should return empty dict\"\n+    except AttributeError:\n+        print(\"\u2713 None value handled correctly (raised AttributeError)\")\n+    \n+    # Test case 3: Very long invalid data\n+    print(\"\\nTesting very long invalid data...\")\n+    long_data = \"x\" * 1000\n+    result = session.decode(long_data)\n+    assert result == {}, \"Long invalid data should return empty dict\"\n+    print(\"\u2713 Long invalid data handled correctly\")\n+    \n+    # Test case 4: Invalid padding\n+    print(\"\\nTesting invalid base64 padding...\")\n+    invalid_padding = \"SGVsbG8===\"  # Invalid padding\n+    result = session.decode(invalid_padding)\n+    assert result == {}, \"Invalid padding should return empty dict\"\n+    print(\"\u2713 Invalid padding handled correctly\")\n+    \n+    # Test case 5: Unicode characters\n+    print(\"\\nTesting unicode characters...\")\n+    unicode_data = \"Hello \u4e16\u754c\"\n+    result = session.decode(unicode_data)\n+    assert result == {}, \"Unicode data should return empty dict\"\n+    print(\"\u2713 Unicode characters handled correctly\")\n+    \n+    print(\"\\nAll edge cases passed successfully!\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..3e4f54fa0f\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,36 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+from django.contrib.sessions.backends.db import SessionStore\n+\n+def test_invalid_session_data():\n+    \"\"\"Test handling of invalid session data\"\"\"\n+    print(\"Testing invalid session data handling...\")\n+    \n+    # Test case 1: Invalid base64 data\n+    session = SessionStore()\n+    invalid_data = \"Invalid base64 data!!!\"\n+    result = session.decode(invalid_data)\n+    assert result == {}, \"Should return empty dict for invalid base64 data\"\n+    print(\"\u2713 Test 1 passed: Invalid base64 data handled correctly\")\n+    \n+    # Test case 2: Valid base64 but invalid session data\n+    session = SessionStore()\n+    invalid_but_base64 = \"SGVsbG8gV29ybGQh\"  # \"Hello World!\" in base64\n+    result = session.decode(invalid_but_base64)\n+    assert result == {}, \"Should return empty dict for invalid session data\"\n+    print(\"\u2713 Test 2 passed: Valid base64 but invalid session data handled correctly\")\n+    \n+    # Test case 3: Malformed session data\n+    session = SessionStore()\n+    malformed_data = \"YTpiOmM=\"  # Valid base64 but malformed session data\n+    result = session.decode(malformed_data)\n+    assert result == {}, \"Should return empty dict for malformed session data\"\n+    print(\"\u2713 Test 3 passed: Malformed session data handled correctly\")\n+\n+    print(\"\\nAll tests passed successfully!\")\n\\ No newline at end of file\ndiff --git a/test_session.py b/test_session.py\nnew file mode 100644\nindex 0000000000..88af583246\n--- /dev/null\n+++ b/test_session.py\n@@ -0,0 +1,24 @@\n+from django.contrib.sessions.backends.base import SessionBase\n+\n+def test_session_decode():\n+    \"\"\"Test session decode functionality\"\"\"\n+    class TestSession(SessionBase):\n+        def load(self): return {}\n+        def exists(self, key): return False\n+        def create(self): pass\n+        def save(self, must_create=False): pass\n+        def delete(self, key=None): pass\n+    \n+    session = TestSession()\n+    \n+    # Test invalid base64 data\n+    result = session.decode(\"Invalid base64 data!!!\")\n+    assert result == {}, \"Should return empty dict for invalid base64 data\"\n+    print(\"Test 1 passed: Invalid base64 data\")\n+    \n+    # Test malformed session data\n+    result = session.decode(\"SGVsbG8=\")  # Valid base64 but invalid session data\n+    assert result == {}, \"Should return empty dict for malformed data\"\n+    print(\"Test 2 passed: Malformed session data\")\n+    \n+    print(\"All tests passed!\")\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..046c2a4e62\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,16 @@\n+SECRET_KEY = 'django_tests_secret_key'\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+INSTALLED_APPS = [\n+    'django.contrib.sessions',\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+]\n+MIDDLEWARE = [\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+]\n+SESSION_ENGINE = 'django.contrib.sessions.backends.db'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}