diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index 187e14b1b7..a01c9f4a0e 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -1,4 +1,5 @@
 import base64
+import binascii
 import logging
 import string
 import warnings
@@ -119,9 +120,9 @@ class SessionBase:
     def decode(self, session_data):
         try:
             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
-        except Exception:
+        except (signing.BadSignature, ValueError):
+            # RemovedInDjango40Warning: when the deprecation ends, handle here
+            # exceptions similar to what _legacy_decode() does now.
             return self._legacy_decode(session_data)
 
     def _legacy_encode(self, session_dict):
@@ -132,7 +133,12 @@ class SessionBase:
 
     def _legacy_decode(self, session_data):
         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
-        encoded_data = base64.b64decode(session_data.encode('ascii'))
+        try:
+            encoded_data = base64.b64decode(session_data.encode('ascii'))
+        except (binascii.Error, UnicodeEncodeError):
+            # If base64 decoding fails, return an empty session
+            return {}
+            
         try:
             # could produce ValueError if there is no ':'
             hash, serialized = encoded_data.split(b':', 1)
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..88c31446b0
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,53 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+from django.contrib.sessions.backends.db import SessionStore
+import base64
+
+def test_edge_cases():
+    """Test various edge cases for session data handling"""
+    print("Testing session data edge cases...")
+    
+    session = SessionStore()
+    
+    # Test case 1: Empty string
+    print("\nTesting empty string...")
+    result = session.decode("")
+    assert result == {}, "Empty string should return empty dict"
+    print("✓ Empty string handled correctly")
+    
+    # Test case 2: None value
+    print("\nTesting None value...")
+    try:
+        result = session.decode(None)
+        assert result == {}, "None should return empty dict"
+    except AttributeError:
+        print("✓ None value handled correctly (raised AttributeError)")
+    
+    # Test case 3: Very long invalid data
+    print("\nTesting very long invalid data...")
+    long_data = "x" * 1000
+    result = session.decode(long_data)
+    assert result == {}, "Long invalid data should return empty dict"
+    print("✓ Long invalid data handled correctly")
+    
+    # Test case 4: Invalid padding
+    print("\nTesting invalid base64 padding...")
+    invalid_padding = "SGVsbG8==="  # Invalid padding
+    result = session.decode(invalid_padding)
+    assert result == {}, "Invalid padding should return empty dict"
+    print("✓ Invalid padding handled correctly")
+    
+    # Test case 5: Unicode characters
+    print("\nTesting unicode characters...")
+    unicode_data = "Hello 世界"
+    result = session.decode(unicode_data)
+    assert result == {}, "Unicode data should return empty dict"
+    print("✓ Unicode characters handled correctly")
+    
+    print("\nAll edge cases passed successfully!")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3e4f54fa0f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+from django.contrib.sessions.backends.db import SessionStore
+
+def test_invalid_session_data():
+    """Test handling of invalid session data"""
+    print("Testing invalid session data handling...")
+    
+    # Test case 1: Invalid base64 data
+    session = SessionStore()
+    invalid_data = "Invalid base64 data!!!"
+    result = session.decode(invalid_data)
+    assert result == {}, "Should return empty dict for invalid base64 data"
+    print("✓ Test 1 passed: Invalid base64 data handled correctly")
+    
+    # Test case 2: Valid base64 but invalid session data
+    session = SessionStore()
+    invalid_but_base64 = "SGVsbG8gV29ybGQh"  # "Hello World!" in base64
+    result = session.decode(invalid_but_base64)
+    assert result == {}, "Should return empty dict for invalid session data"
+    print("✓ Test 2 passed: Valid base64 but invalid session data handled correctly")
+    
+    # Test case 3: Malformed session data
+    session = SessionStore()
+    malformed_data = "YTpiOmM="  # Valid base64 but malformed session data
+    result = session.decode(malformed_data)
+    assert result == {}, "Should return empty dict for malformed session data"
+    print("✓ Test 3 passed: Malformed session data handled correctly")
+
+    print("\nAll tests passed successfully!")
\ No newline at end of file
diff --git a/test_session.py b/test_session.py
new file mode 100644
index 0000000000..88af583246
--- /dev/null
+++ b/test_session.py
@@ -0,0 +1,24 @@
+from django.contrib.sessions.backends.base import SessionBase
+
+def test_session_decode():
+    """Test session decode functionality"""
+    class TestSession(SessionBase):
+        def load(self): return {}
+        def exists(self, key): return False
+        def create(self): pass
+        def save(self, must_create=False): pass
+        def delete(self, key=None): pass
+    
+    session = TestSession()
+    
+    # Test invalid base64 data
+    result = session.decode("Invalid base64 data!!!")
+    assert result == {}, "Should return empty dict for invalid base64 data"
+    print("Test 1 passed: Invalid base64 data")
+    
+    # Test malformed session data
+    result = session.decode("SGVsbG8=")  # Valid base64 but invalid session data
+    assert result == {}, "Should return empty dict for malformed data"
+    print("Test 2 passed: Malformed session data")
+    
+    print("All tests passed!")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..046c2a4e62
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,16 @@
+SECRET_KEY = 'django_tests_secret_key'
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.sessions',
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+]
+SESSION_ENGINE = 'django.contrib.sessions.backends.db'
\ No newline at end of file
