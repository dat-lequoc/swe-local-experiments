{
  "instance_id": "astropy__astropy-14182",
  "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..4bd4c4af69 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,66 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        if header_rows is None:\n+            header_rows = [\"name\"]\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        raw_lines = super().write(lines)\n+        if not raw_lines:\n+            return [\"\"]\n+\n+        # Extract content lines and calculate widths\n+        content_lines = []\n+        widths = []\n+        for line in raw_lines:\n+            if line.strip() and not all(c in ' =-|' for c in line):\n+                cols = line.split()\n+                content_lines.append(cols)\n+                if len(cols) > len(widths):\n+                    widths.extend([0] * (len(cols) - len(widths)))\n+                for i, col in enumerate(cols):\n+                    widths[i] = max(widths[i], len(col))\n+\n+        if not content_lines:\n+            return [\"\"]\n+\n+        # Create equals line\n+        equals_line = \" \".join(\"=\" * w for w in widths)\n+\n+        # Format output\n+        header_rows = getattr(self.header, \"header_rows\", [\"name\"])\n+        header_section_end = min(len(header_rows), len(content_lines))\n+        \n+        result = []\n+        result.append(equals_line)\n+\n+        # Format header rows\n+        for i in range(header_section_end):\n+            if i < len(content_lines):\n+                cols = content_lines[i]\n+                formatted_cols = [col.ljust(widths[j]) for j, col in enumerate(cols)]\n+                result.append(\" \".join(formatted_cols))\n+\n+        result.append(equals_line)\n+\n+        # Format data rows\n+        for cols in content_lines[header_section_end:]:\n+            formatted_cols = []\n+            for j, col in enumerate(cols):\n+                if j < len(widths):  # Ensure we don't exceed width array\n+                    try:\n+                        # Check if numeric (including negative numbers and decimals)\n+                        float(col.replace(\".\", \"\").replace(\"-\", \"\").strip())\n+                        formatted_cols.append(col.rjust(widths[j]))\n+                    except ValueError:\n+                        # Handle quoted strings and text\n+                        if col.startswith('\"') or col.startswith(\"'\"):\n+                            formatted_cols.append(col.ljust(widths[j]))\n+                        else:\n+                            formatted_cols.append(\" \" + col.ljust(widths[j] - 1))\n+            result.append(\" \".join(formatted_cols))\n+\n+        result.append(equals_line)\n+        return result\ndiff --git a/compare_output.py b/compare_output.py\nnew file mode 100644\nindex 0000000000..2e00d6eae6\n--- /dev/null\n+++ b/compare_output.py\n@@ -0,0 +1,47 @@\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Create the test table\n+table = \"\"\"\\\n+====== =========== ============ ===========\n+  Col1    Col2        Col3        Col4\n+====== =========== ============ ===========\n+  1.2    \"hello\"      1           a\n+  2.4   's worlds          2           2\n+====== =========== ============ ===========\n+\"\"\"\n+dat = ascii.read(table, Reader=ascii.RST)\n+\n+# Get actual output\n+out = StringIO()\n+ascii.write(dat, out, Writer=ascii.RST)\n+actual = out.getvalue()\n+\n+# Expected output\n+expected = \"\"\"\\\n+==== ========= ==== ====\n+Col1      Col2 Col3 Col4\n+==== ========= ==== ====\n+ 1.2   \"hello\"    1    a\n+ 2.4 's worlds    2    2\n+==== ========= ==== ====\n+\"\"\"\n+\n+print(\"Actual output:\")\n+print(\"-------------\")\n+print(repr(actual))\n+print(\"\\nExpected output:\")\n+print(\"---------------\")\n+print(repr(expected))\n+\n+# Compare line by line\n+actual_lines = actual.splitlines()\n+expected_lines = expected.splitlines()\n+\n+print(\"\\nLine by line comparison:\")\n+print(\"----------------------\")\n+for i, (a, e) in enumerate(zip(actual_lines, expected_lines)):\n+    if a != e:\n+        print(f\"Line {i}:\")\n+        print(f\"  Actual  : {repr(a)}\")\n+        print(f\"  Expected: {repr(e)}\")\n\\ No newline at end of file\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..a97e6365b1\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,35 @@\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Test case 1: Empty table\n+empty_tbl = QTable()\n+print(\"\\nTest 1: Empty table\")\n+print(\"-----------------\")\n+empty_tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test case 2: Single column\n+single_col_tbl = QTable({'col1': [1, 2, 3]})\n+print(\"\\nTest 2: Single column\")\n+print(\"------------------\")\n+single_col_tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test case 3: Mixed data types\n+mixed_tbl = QTable({\n+    'text': ['Hello', 'World', 'Test'],\n+    'ints': [1, -2, 3],\n+    'floats': [1.234, -5.678, 0.0],\n+    'with_units': [1.2, 3.4, 5.6] * u.m\n+})\n+print(\"\\nTest 3: Mixed data types\")\n+print(\"---------------------\")\n+mixed_tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=['name', 'unit'])\n+\n+# Test case 4: Long column names and values\n+long_tbl = QTable({\n+    'very_long_column_name': ['short', 'very_long_value_here', 'medium'],\n+    'col2': [1, 2, 3]\n+})\n+print(\"\\nTest 4: Long column names and values\")\n+print(\"--------------------------------\")\n+long_tbl.write(sys.stdout, format=\"ascii.rst\")\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0d1ee66ab9..ec234472e2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..2ceb9a057a\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,21 @@\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+# Test 1: Default RST output\n+print(\"\\nTest 1: Default RST output\")\n+print(\"-------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test 2: RST output with header_rows\n+print(\"\\nTest 2: RST output with header_rows=['name', 'unit']\")\n+print(\"------------------------------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+\n+# Test 3: Fixed width output with header_rows for comparison\n+print(\"\\nTest 3: Fixed width output with header_rows=['name', 'unit']\")\n+print(\"-----------------------------------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}