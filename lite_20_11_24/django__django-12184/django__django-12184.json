{
  "instance_id": "django__django-12184",
  "model_patch": "diff --git a/tests/urlpatterns/edge_cases.py b/tests/urlpatterns/edge_cases.py\nnew file mode 100644\nindex 0000000000..b88ed47fd3\n--- /dev/null\n+++ b/tests/urlpatterns/edge_cases.py\n@@ -0,0 +1,38 @@\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+from django.urls import re_path, resolve, Resolver404\n+from django.http import HttpResponse\n+\n+def test_view(request, format='html'):\n+    return HttpResponse(format)\n+\n+urlpatterns = [\n+    # Using non-capturing group for optional parameter\n+    re_path(r'^module/?(?:(?P<format>html|json|xml)/?)?$', test_view, name='test_view'),\n+]\n+\n+@override_settings(ROOT_URLCONF='urlpatterns.edge_cases')\n+class OptionalURLParamsEdgeCasesTests(SimpleTestCase):\n+    def test_optional_param_edge_cases(self):\n+        # Test with valid format parameter\n+        match = resolve('/module/json/')\n+        response = match.func(request=None, **match.kwargs)\n+        self.assertEqual(response.content.decode(), 'json')\n+\n+        # Test without format parameter (should use default)\n+        match = resolve('/module/')\n+        response = match.func(request=None, **match.kwargs)\n+        self.assertEqual(response.content.decode(), 'html')\n+\n+        # Test with trailing slash variations\n+        match = resolve('/module')\n+        response = match.func(request=None, **match.kwargs)\n+        self.assertEqual(response.content.decode(), 'html')\n+\n+        # Test with invalid format parameter\n+        with self.assertRaises(Resolver404):\n+            resolve('/module/invalid/')\n+\n+        # Test with empty format parameter\n+        with self.assertRaises(Resolver404):\n+            resolve('/module//')\n\\ No newline at end of file\ndiff --git a/tests/urlpatterns/test_optional_params.py b/tests/urlpatterns/test_optional_params.py\nnew file mode 100644\nindex 0000000000..567622540d\n--- /dev/null\n+++ b/tests/urlpatterns/test_optional_params.py\n@@ -0,0 +1,24 @@\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+from django.urls import re_path, resolve\n+from django.http import HttpResponse\n+\n+def test_view(request, format='html'):\n+    return HttpResponse(format)\n+\n+urlpatterns = [\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', test_view, name='test_view'),\n+]\n+\n+@override_settings(ROOT_URLCONF='urlpatterns.test_optional_params')\n+class OptionalURLParamsTests(SimpleTestCase):\n+    def test_optional_param_with_default(self):\n+        # Test with format parameter\n+        match = resolve('/module/json/')\n+        response = match.func(request=match.args[0] if match.args else None, **match.kwargs)\n+        self.assertEqual(response.content.decode(), 'json')\n+\n+        # Test without format parameter (should use default)\n+        match = resolve('/module/')\n+        response = match.func(request=None, **match.kwargs)\n+        self.assertEqual(response.content.decode(), 'html')\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}