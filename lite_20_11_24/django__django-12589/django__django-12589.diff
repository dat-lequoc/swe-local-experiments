diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 63ca817355..459c106084 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -103,7 +103,12 @@ class SQLCompiler:
             # Converts string references to expressions.
             for expr in self.query.group_by:
                 if not hasattr(expr, 'as_sql'):
-                    expressions.append(self.query.resolve_ref(expr))
+                    ref = self.query.resolve_ref(expr)
+                    # If this is an annotated field, use the full annotation expression
+                    if expr in self.query.annotation_select:
+                        expressions.append(self.query.annotation_select[expr])
+                    else:
+                        expressions.append(ref)
                 else:
                     expressions.append(expr)
         # Note that even if the group_by is set, it is only the minimal
@@ -112,14 +117,18 @@ class SQLCompiler:
         ref_sources = {
             expr.source for expr in expressions if isinstance(expr, Ref)
         }
-        for expr, _, _ in select:
+        for expr, _, alias in select:
             # Skip members of the select clause that are already included
             # by reference.
             if expr in ref_sources:
                 continue
-            cols = expr.get_group_by_cols()
-            for col in cols:
-                expressions.append(col)
+            # For annotated fields, use the full expression in GROUP BY
+            if alias and alias in self.query.annotation_select:
+                expressions.append(expr)
+            else:
+                cols = expr.get_group_by_cols()
+                for col in cols:
+                    expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
             # Skip References to the select clause, as all expressions in the
             # select clause are already part of the group by.
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..ae6f331d8b
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
\ No newline at end of file
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..75a05bc7ea
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,16 @@
+from django.db import models
+
+class A(models.Model):
+    bs = models.ManyToManyField('B', related_name="a", through="AB")
+
+class B(models.Model):
+    pass
+
+class AB(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name="ab_a")
+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name="ab_b")
+    status = models.IntegerField()
+
+class C(models.Model):
+    a = models.ForeignKey(A, null=True, blank=True, on_delete=models.SET_NULL, related_name="c")
+    status = models.IntegerField()
\ No newline at end of file
diff --git a/tests/migrations/0001_initial.py b/tests/migrations/0001_initial.py
new file mode 100644
index 0000000000..cef3697ed4
--- /dev/null
+++ b/tests/migrations/0001_initial.py
@@ -0,0 +1,43 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='A',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='B',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='AB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('a', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='ab_a', to='tests.A')),
+                ('b', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='ab_b', to='tests.B')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='C',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('a', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, related_name='c', to='tests.A')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='a',
+            name='bs',
+            field=models.ManyToManyField(related_name='a', through='tests.AB', to='tests.B'),
+        ),
+    ]
\ No newline at end of file
diff --git a/tests/reproduce_error.py b/tests/reproduce_error.py
new file mode 100644
index 0000000000..b62efbe7bf
--- /dev/null
+++ b/tests/reproduce_error.py
@@ -0,0 +1,47 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+
+import django
+django.setup()
+
+from django.db.models import Count, OuterRef, Q, Subquery
+from django.test import TestCase
+from django.test.runner import DiscoverRunner
+from tests.test_models import A, B, AB, C
+
+class GroupByAnnotationTest(TestCase):
+    def test_group_by_with_annotation(self):
+        # Create test data
+        a1 = A.objects.create()
+        b1 = B.objects.create()
+        ab1 = AB.objects.create(a=a1, b=b1, status=1)
+        c1 = C.objects.create(a=a1, status=2)
+
+        # Reproduce the query from the PR description
+        ab_query = AB.objects.filter(a=OuterRef("pk"), b=b1.pk)
+        filter_conditions = Q(pk=a1.pk) | Q(ab_a__b=b1.pk)
+        query = A.objects.filter(filter_conditions).annotate(
+            status=Subquery(ab_query.values("status")),
+            c_count=Count("c"),
+        )
+        answer = query.values("status").annotate(total_count=Count("status"))
+        
+        # Print the SQL query for debugging
+        print("SQL Query:", answer.query)
+        
+        # Execute the query - this should not raise an error
+        result = list(answer)
+        print("Query Result:", result)
+        
+        # Verify the results
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]["status"], 1)  # Status from AB
+        self.assertEqual(result[0]["total_count"], 1)  # Count of status values
+
+if __name__ == '__main__':
+    test_runner = DiscoverRunner(verbosity=2)
+    old_config = test_runner.setup_databases()
+    try:
+        test_runner.run_tests(['tests.reproduce_error'])
+    finally:
+        test_runner.teardown_databases(old_config)
\ No newline at end of file
diff --git a/tests/test_models.py b/tests/test_models.py
new file mode 100644
index 0000000000..ab29e381d5
--- /dev/null
+++ b/tests/test_models.py
@@ -0,0 +1,23 @@
+from django.db import models
+
+class A(models.Model):
+    bs = models.ManyToManyField('B', related_name="a", through="AB")
+    class Meta:
+        app_label = 'test_app'
+
+class B(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+class AB(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name="ab_a")
+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name="ab_b")
+    status = models.IntegerField()
+    class Meta:
+        app_label = 'test_app'
+
+class C(models.Model):
+    a = models.ForeignKey(A, null=True, blank=True, on_delete=models.SET_NULL, related_name="c")
+    status = models.IntegerField()
+    class Meta:
+        app_label = 'test_app'
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..b5aa1a9369
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,28 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+        'TEST': {
+            'NAME': ':memory:'
+        }
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+    'test_app',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+# Disable migrations
+class DisableMigrations:
+    def __contains__(self, item):
+        return True
+
+    def __getitem__(self, item):
+        return None
+
+MIGRATION_MODULES = DisableMigrations()
\ No newline at end of file
