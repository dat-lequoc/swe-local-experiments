{
  "instance_id": "django__django-12589",
  "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 63ca817355..459c106084 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -103,7 +103,12 @@ class SQLCompiler:\n             # Converts string references to expressions.\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n+                    ref = self.query.resolve_ref(expr)\n+                    # If this is an annotated field, use the full annotation expression\n+                    if expr in self.query.annotation_select:\n+                        expressions.append(self.query.annotation_select[expr])\n+                    else:\n+                        expressions.append(ref)\n                 else:\n                     expressions.append(expr)\n         # Note that even if the group_by is set, it is only the minimal\n@@ -112,14 +117,18 @@ class SQLCompiler:\n         ref_sources = {\n             expr.source for expr in expressions if isinstance(expr, Ref)\n         }\n-        for expr, _, _ in select:\n+        for expr, _, alias in select:\n             # Skip members of the select clause that are already included\n             # by reference.\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            # For annotated fields, use the full expression in GROUP BY\n+            if alias and alias in self.query.annotation_select:\n+                expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/apps.py b/test_app/apps.py\nnew file mode 100644\nindex 0000000000..ae6f331d8b\n--- /dev/null\n+++ b/test_app/apps.py\n@@ -0,0 +1,4 @@\n+from django.apps import AppConfig\n+\n+class TestAppConfig(AppConfig):\n+    name = 'test_app'\n\\ No newline at end of file\ndiff --git a/test_app/models.py b/test_app/models.py\nnew file mode 100644\nindex 0000000000..75a05bc7ea\n--- /dev/null\n+++ b/test_app/models.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+\n+class A(models.Model):\n+    bs = models.ManyToManyField('B', related_name=\"a\", through=\"AB\")\n+\n+class B(models.Model):\n+    pass\n+\n+class AB(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n+    status = models.IntegerField()\n+\n+class C(models.Model):\n+    a = models.ForeignKey(A, null=True, blank=True, on_delete=models.SET_NULL, related_name=\"c\")\n+    status = models.IntegerField()\n\\ No newline at end of file\ndiff --git a/tests/migrations/0001_initial.py b/tests/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..cef3697ed4\n--- /dev/null\n+++ b/tests/migrations/0001_initial.py\n@@ -0,0 +1,43 @@\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+\n+    dependencies = []\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='A',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            name='B',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            name='AB',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('status', models.IntegerField()),\n+                ('a', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='ab_a', to='tests.A')),\n+                ('b', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='ab_b', to='tests.B')),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            name='C',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('status', models.IntegerField()),\n+                ('a', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, related_name='c', to='tests.A')),\n+            ],\n+        ),\n+        migrations.AddField(\n+            model_name='a',\n+            name='bs',\n+            field=models.ManyToManyField(related_name='a', through='tests.AB', to='tests.B'),\n+        ),\n+    ]\n\\ No newline at end of file\ndiff --git a/tests/reproduce_error.py b/tests/reproduce_error.py\nnew file mode 100644\nindex 0000000000..b62efbe7bf\n--- /dev/null\n+++ b/tests/reproduce_error.py\n@@ -0,0 +1,47 @@\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+\n+import django\n+django.setup()\n+\n+from django.db.models import Count, OuterRef, Q, Subquery\n+from django.test import TestCase\n+from django.test.runner import DiscoverRunner\n+from tests.test_models import A, B, AB, C\n+\n+class GroupByAnnotationTest(TestCase):\n+    def test_group_by_with_annotation(self):\n+        # Create test data\n+        a1 = A.objects.create()\n+        b1 = B.objects.create()\n+        ab1 = AB.objects.create(a=a1, b=b1, status=1)\n+        c1 = C.objects.create(a=a1, status=2)\n+\n+        # Reproduce the query from the PR description\n+        ab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=b1.pk)\n+        filter_conditions = Q(pk=a1.pk) | Q(ab_a__b=b1.pk)\n+        query = A.objects.filter(filter_conditions).annotate(\n+            status=Subquery(ab_query.values(\"status\")),\n+            c_count=Count(\"c\"),\n+        )\n+        answer = query.values(\"status\").annotate(total_count=Count(\"status\"))\n+        \n+        # Print the SQL query for debugging\n+        print(\"SQL Query:\", answer.query)\n+        \n+        # Execute the query - this should not raise an error\n+        result = list(answer)\n+        print(\"Query Result:\", result)\n+        \n+        # Verify the results\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0][\"status\"], 1)  # Status from AB\n+        self.assertEqual(result[0][\"total_count\"], 1)  # Count of status values\n+\n+if __name__ == '__main__':\n+    test_runner = DiscoverRunner(verbosity=2)\n+    old_config = test_runner.setup_databases()\n+    try:\n+        test_runner.run_tests(['tests.reproduce_error'])\n+    finally:\n+        test_runner.teardown_databases(old_config)\n\\ No newline at end of file\ndiff --git a/tests/test_models.py b/tests/test_models.py\nnew file mode 100644\nindex 0000000000..ab29e381d5\n--- /dev/null\n+++ b/tests/test_models.py\n@@ -0,0 +1,23 @@\n+from django.db import models\n+\n+class A(models.Model):\n+    bs = models.ManyToManyField('B', related_name=\"a\", through=\"AB\")\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class B(models.Model):\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class AB(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n+    status = models.IntegerField()\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class C(models.Model):\n+    a = models.ForeignKey(A, null=True, blank=True, on_delete=models.SET_NULL, related_name=\"c\")\n+    status = models.IntegerField()\n+    class Meta:\n+        app_label = 'test_app'\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..b5aa1a9369\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,28 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+        'TEST': {\n+            'NAME': ':memory:'\n+        }\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+    'test_app',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n+\n+# Disable migrations\n+class DisableMigrations:\n+    def __contains__(self, item):\n+        return True\n+\n+    def __getitem__(self, item):\n+        return None\n+\n+MIGRATION_MODULES = DisableMigrations()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}