diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 7ca0d68fae..8d1c79ff94 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -579,6 +579,8 @@ def run_with_reloader(main_func, *args, **kwargs):
     try:
         if os.environ.get(DJANGO_AUTORELOAD_ENV) == 'true':
             reloader = get_reloader()
+            # Add manage.py to watched files
+            reloader.watch_file(Path(sys.argv[0]).resolve())
             logger.info('Watching for file changes with %s', reloader.__class__.__name__)
             start_django(reloader, main_func, *args, **kwargs)
         else:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..615c8c07a1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,148 @@
+import os
+import sys
+import time
+import tempfile
+import threading
+from pathlib import Path
+from django.utils.autoreload import StatReloader, run_with_reloader
+from django.apps import apps
+from django.dispatch import Signal
+
+# Create a ready event for testing
+apps.ready_event = threading.Event()
+apps.ready_event.set()  # Mark apps as ready immediately for testing
+
+def create_manage_py():
+    """Create a temporary manage.py file."""
+    temp_dir = tempfile.mkdtemp()
+    manage_py = Path(temp_dir) / "manage.py"
+    with open(manage_py, "w") as f:
+        f.write('''#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    print("Initial content")
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError("Couldn't import Django.") from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
+''')
+    return manage_py
+
+def modify_manage_py(manage_py):
+    """Modify the manage.py file."""
+    time.sleep(2)  # Wait for reloader to start
+    print(f"Modifying {manage_py}")
+    with open(manage_py, "w") as f:
+        f.write('''#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    print("Modified content")  # Changed line
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError("Couldn't import Django.") from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
+''')
+
+def dummy_django_main():
+    """Dummy main function that simulates Django's main process."""
+    while True:
+        time.sleep(1)
+
+def test_manage_py_reloading():
+    """Test if changes to manage.py trigger a reload."""
+    # Enable debug logging
+    import logging
+    logging.basicConfig(level=logging.DEBUG)
+    
+    manage_py = create_manage_py()
+    print(f"Created manage.py at {manage_py}")
+    
+    # Save original argv and set it to our manage.py
+    orig_argv = sys.argv
+    sys.argv = [str(manage_py)]
+    
+    # Create an event to detect reload
+    reload_triggered = threading.Event()
+    stop_event = threading.Event()
+    
+    def on_reload(filepath):
+        print(f"Reload triggered for {filepath}!")
+        reload_triggered.set()
+        stop_event.set()
+    
+    # Override the trigger_reload function
+    import django.utils.autoreload
+    original_trigger = django.utils.autoreload.trigger_reload
+    django.utils.autoreload.trigger_reload = on_reload
+    
+    try:
+        # Set up Django environment
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+        os.environ['RUN_MAIN'] = 'true'
+        
+        # Create and configure the reloader
+        reloader = StatReloader()
+        manage_py_path = Path(sys.argv[0]).resolve()
+        reloader.watch_file(manage_py_path)
+        
+        print(f"Watching files: {list(reloader.watched_files())}")
+        
+        # Create a thread for the Django main function
+        django_thread = threading.Thread(
+            target=dummy_django_main,
+            daemon=True
+        )
+        django_thread.start()
+        
+        # Start the file modifier
+        modifier = threading.Thread(
+            target=modify_manage_py,
+            args=(manage_py,),
+            daemon=True
+        )
+        modifier.start()
+        
+        # Run the reloader in the main thread with a timeout
+        def run_with_timeout():
+            reloader_thread = threading.Thread(
+                target=lambda: reloader.run(django_thread),
+                daemon=True
+            )
+            reloader_thread.start()
+            
+            # Wait for either reload trigger or timeout
+            stop_event.wait(timeout=5)
+            reloader._stop_condition.set()  # Stop the reloader
+        
+        run_with_timeout()
+        
+        if reload_triggered.is_set():
+            print("Success: manage.py changes were detected!")
+            return True
+        else:
+            # Debug output
+            print("Error: manage.py changes were not detected!")
+            print(f"Current mtimes: {[(f, f.stat().st_mtime) for f in reloader.watched_files()]}")
+            return False
+    finally:
+        # Restore original state
+        django.utils.autoreload.trigger_reload = original_trigger
+        sys.argv = orig_argv
+
+if __name__ == "__main__":
+    success = test_manage_py_reloading()
+    sys.exit(0 if success else 1)
\ No newline at end of file
