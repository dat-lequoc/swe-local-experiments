{
  "instance_id": "django__django-11422",
  "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..8d1c79ff94 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -579,6 +579,8 @@ def run_with_reloader(main_func, *args, **kwargs):\n     try:\n         if os.environ.get(DJANGO_AUTORELOAD_ENV) == 'true':\n             reloader = get_reloader()\n+            # Add manage.py to watched files\n+            reloader.watch_file(Path(sys.argv[0]).resolve())\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n             start_django(reloader, main_func, *args, **kwargs)\n         else:\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..615c8c07a1\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,148 @@\n+import os\n+import sys\n+import time\n+import tempfile\n+import threading\n+from pathlib import Path\n+from django.utils.autoreload import StatReloader, run_with_reloader\n+from django.apps import apps\n+from django.dispatch import Signal\n+\n+# Create a ready event for testing\n+apps.ready_event = threading.Event()\n+apps.ready_event.set()  # Mark apps as ready immediately for testing\n+\n+def create_manage_py():\n+    \"\"\"Create a temporary manage.py file.\"\"\"\n+    temp_dir = tempfile.mkdtemp()\n+    manage_py = Path(temp_dir) / \"manage.py\"\n+    with open(manage_py, \"w\") as f:\n+        f.write('''#!/usr/bin/env python\n+import os\n+import sys\n+\n+def main():\n+    print(\"Initial content\")\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\"Couldn't import Django.\") from exc\n+    execute_from_command_line(sys.argv)\n+\n+if __name__ == '__main__':\n+    main()\n+''')\n+    return manage_py\n+\n+def modify_manage_py(manage_py):\n+    \"\"\"Modify the manage.py file.\"\"\"\n+    time.sleep(2)  # Wait for reloader to start\n+    print(f\"Modifying {manage_py}\")\n+    with open(manage_py, \"w\") as f:\n+        f.write('''#!/usr/bin/env python\n+import os\n+import sys\n+\n+def main():\n+    print(\"Modified content\")  # Changed line\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\"Couldn't import Django.\") from exc\n+    execute_from_command_line(sys.argv)\n+\n+if __name__ == '__main__':\n+    main()\n+''')\n+\n+def dummy_django_main():\n+    \"\"\"Dummy main function that simulates Django's main process.\"\"\"\n+    while True:\n+        time.sleep(1)\n+\n+def test_manage_py_reloading():\n+    \"\"\"Test if changes to manage.py trigger a reload.\"\"\"\n+    # Enable debug logging\n+    import logging\n+    logging.basicConfig(level=logging.DEBUG)\n+    \n+    manage_py = create_manage_py()\n+    print(f\"Created manage.py at {manage_py}\")\n+    \n+    # Save original argv and set it to our manage.py\n+    orig_argv = sys.argv\n+    sys.argv = [str(manage_py)]\n+    \n+    # Create an event to detect reload\n+    reload_triggered = threading.Event()\n+    stop_event = threading.Event()\n+    \n+    def on_reload(filepath):\n+        print(f\"Reload triggered for {filepath}!\")\n+        reload_triggered.set()\n+        stop_event.set()\n+    \n+    # Override the trigger_reload function\n+    import django.utils.autoreload\n+    original_trigger = django.utils.autoreload.trigger_reload\n+    django.utils.autoreload.trigger_reload = on_reload\n+    \n+    try:\n+        # Set up Django environment\n+        os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+        os.environ['RUN_MAIN'] = 'true'\n+        \n+        # Create and configure the reloader\n+        reloader = StatReloader()\n+        manage_py_path = Path(sys.argv[0]).resolve()\n+        reloader.watch_file(manage_py_path)\n+        \n+        print(f\"Watching files: {list(reloader.watched_files())}\")\n+        \n+        # Create a thread for the Django main function\n+        django_thread = threading.Thread(\n+            target=dummy_django_main,\n+            daemon=True\n+        )\n+        django_thread.start()\n+        \n+        # Start the file modifier\n+        modifier = threading.Thread(\n+            target=modify_manage_py,\n+            args=(manage_py,),\n+            daemon=True\n+        )\n+        modifier.start()\n+        \n+        # Run the reloader in the main thread with a timeout\n+        def run_with_timeout():\n+            reloader_thread = threading.Thread(\n+                target=lambda: reloader.run(django_thread),\n+                daemon=True\n+            )\n+            reloader_thread.start()\n+            \n+            # Wait for either reload trigger or timeout\n+            stop_event.wait(timeout=5)\n+            reloader._stop_condition.set()  # Stop the reloader\n+        \n+        run_with_timeout()\n+        \n+        if reload_triggered.is_set():\n+            print(\"Success: manage.py changes were detected!\")\n+            return True\n+        else:\n+            # Debug output\n+            print(\"Error: manage.py changes were not detected!\")\n+            print(f\"Current mtimes: {[(f, f.stat().st_mtime) for f in reloader.watched_files()]}\")\n+            return False\n+    finally:\n+        # Restore original state\n+        django.utils.autoreload.trigger_reload = original_trigger\n+        sys.argv = orig_argv\n+\n+if __name__ == \"__main__\":\n+    success = test_manage_py_reloading()\n+    sys.exit(0 if success else 1)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}