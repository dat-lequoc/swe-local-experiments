diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py
index f0b663222a..2b7da45019 100644
--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -55,8 +55,8 @@ class Command(BaseCommand):
                 migration_name, app_label))
         targets = [(app_label, migration.name)]
 
-        # Show begin/end around output only for atomic migrations
-        self.output_transaction = migration.atomic
+        # Show begin/end around output only for atomic migrations and when DDL can be rolled back
+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl
 
         # Make a plan that represents just the requested migrations and show SQL
         # for it
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..81a80146b2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+import django
+import io
+import os
+from unittest.mock import patch
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+from django.core.management import call_command
+from django.db import connection, connections
+from django.test.utils import override_settings
+
+def test_sqlmigrate_no_ddl_rollback():
+    """Test that BEGIN/COMMIT is not added when DDL rollback is not supported"""
+    out = io.StringIO()
+    
+    # Mock the connection features to simulate a database that doesn't support DDL rollback
+    connection = connections['default']
+    original_can_rollback = connection.features.can_rollback_ddl
+    try:
+        connection.features.can_rollback_ddl = False
+        # Run sqlmigrate command
+        call_command('sqlmigrate', 'test_app', '0001', stdout=out)
+        output = out.getvalue().lower()
+        
+        # Check that BEGIN/COMMIT are not in the output
+        if 'begin' not in output and 'commit' not in output:
+            print("Test 1 passed: No BEGIN/COMMIT when DDL rollback not supported")
+        else:
+            print("Test 1 failed: Found BEGIN/COMMIT when DDL rollback not supported")
+            print("Output:", output)
+    finally:
+        # Restore original value
+        connection.features.can_rollback_ddl = original_can_rollback
+
+def test_sqlmigrate_with_ddl_rollback():
+    """Test that BEGIN/COMMIT is added when DDL rollback is supported"""
+    out = io.StringIO()
+    
+    # Mock the connection features to simulate a database that supports DDL rollback
+    connection = connections['default']
+    original_can_rollback = connection.features.can_rollback_ddl
+    try:
+        connection.features.can_rollback_ddl = True
+        # Run sqlmigrate command
+        call_command('sqlmigrate', 'test_app', '0001', stdout=out)
+        output = out.getvalue().lower()
+        
+        # Check that BEGIN/COMMIT are in the output
+        if 'begin' in output and 'commit' in output:
+            print("Test 2 passed: BEGIN/COMMIT present when DDL rollback supported")
+        else:
+            print("Test 2 failed: Missing BEGIN/COMMIT when DDL rollback supported")
+            print("Output:", output)
+    finally:
+        # Restore original value
+        connection.features.can_rollback_ddl = original_can_rollback
+
+if __name__ == '__main__':
+    test_sqlmigrate_no_ddl_rollback()
+    test_sqlmigrate_with_ddl_rollback()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..f0e5a35537
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,17 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    atomic = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..6e46e7fd1b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
