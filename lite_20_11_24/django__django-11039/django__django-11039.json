{
  "instance_id": "django__django-11039",
  "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..2b7da45019 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and when DDL can be rolled back\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..81a80146b2\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,61 @@\n+import django\n+import io\n+import os\n+from unittest.mock import patch\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+from django.core.management import call_command\n+from django.db import connection, connections\n+from django.test.utils import override_settings\n+\n+def test_sqlmigrate_no_ddl_rollback():\n+    \"\"\"Test that BEGIN/COMMIT is not added when DDL rollback is not supported\"\"\"\n+    out = io.StringIO()\n+    \n+    # Mock the connection features to simulate a database that doesn't support DDL rollback\n+    connection = connections['default']\n+    original_can_rollback = connection.features.can_rollback_ddl\n+    try:\n+        connection.features.can_rollback_ddl = False\n+        # Run sqlmigrate command\n+        call_command('sqlmigrate', 'test_app', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        \n+        # Check that BEGIN/COMMIT are not in the output\n+        if 'begin' not in output and 'commit' not in output:\n+            print(\"Test 1 passed: No BEGIN/COMMIT when DDL rollback not supported\")\n+        else:\n+            print(\"Test 1 failed: Found BEGIN/COMMIT when DDL rollback not supported\")\n+            print(\"Output:\", output)\n+    finally:\n+        # Restore original value\n+        connection.features.can_rollback_ddl = original_can_rollback\n+\n+def test_sqlmigrate_with_ddl_rollback():\n+    \"\"\"Test that BEGIN/COMMIT is added when DDL rollback is supported\"\"\"\n+    out = io.StringIO()\n+    \n+    # Mock the connection features to simulate a database that supports DDL rollback\n+    connection = connections['default']\n+    original_can_rollback = connection.features.can_rollback_ddl\n+    try:\n+        connection.features.can_rollback_ddl = True\n+        # Run sqlmigrate command\n+        call_command('sqlmigrate', 'test_app', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        \n+        # Check that BEGIN/COMMIT are in the output\n+        if 'begin' in output and 'commit' in output:\n+            print(\"Test 2 passed: BEGIN/COMMIT present when DDL rollback supported\")\n+        else:\n+            print(\"Test 2 failed: Missing BEGIN/COMMIT when DDL rollback supported\")\n+            print(\"Output:\", output)\n+    finally:\n+        # Restore original value\n+        connection.features.can_rollback_ddl = original_can_rollback\n+\n+if __name__ == '__main__':\n+    test_sqlmigrate_no_ddl_rollback()\n+    test_sqlmigrate_with_ddl_rollback()\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..f0e5a35537\n--- /dev/null\n+++ b/test_app/migrations/0001_initial.py\n@@ -0,0 +1,17 @@\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+    atomic = True\n+\n+    dependencies = []\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('name', models.CharField(max_length=100)),\n+            ],\n+        ),\n+    ]\n\\ No newline at end of file\ndiff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..6e46e7fd1b\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}