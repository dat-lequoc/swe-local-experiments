{
  "instance_id": "django__django-13265",
  "model_patch": "diff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..a1aa44958a\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,55 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+def test_operation_ordering():\n+    # Test case 1: Basic ordering\n+    operations = [\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n+        ),\n+        migrations.AlterOrderWithRespectTo(\n+            name='LookImage',\n+            order_with_respect_to='look',\n+        ),\n+    ]\n+    \n+    # Test case 2: Multiple indexes\n+    operations_multiple = [\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n+        ),\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['created_at'], name='look_image_created_f746cf_idx'),\n+        ),\n+        migrations.AlterOrderWithRespectTo(\n+            name='LookImage',\n+            order_with_respect_to='look',\n+        ),\n+    ]\n+\n+    # Test case 3: Multiple models\n+    operations_multiple_models = [\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n+        ),\n+        migrations.AddIndex(\n+            model_name='OtherModel',\n+            index=models.Index(fields=['created_at'], name='other_model_created_idx'),\n+        ),\n+        migrations.AlterOrderWithRespectTo(\n+            name='LookImage',\n+            order_with_respect_to='look',\n+        ),\n+    ]\n+\n+    return operations, operations_multiple, operations_multiple_models\n+\n+if __name__ == '__main__':\n+    ops, ops_multi, ops_multi_models = test_operation_ordering()\n+    print(\"Basic ordering test:\", ops)\n+    print(\"Multiple indexes test:\", ops_multi)\n+    print(\"Multiple models test:\", ops_multi_models)\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..814d6a5561\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,33 @@\n+from django.db import migrations, models\n+\n+def test_migration_order():\n+    # Create the operations in the wrong order\n+    operations = [\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n+        ),\n+        migrations.AlterOrderWithRespectTo(\n+            name='LookImage',\n+            order_with_respect_to='look',\n+        ),\n+    ]\n+\n+    # Create the operations in the correct order\n+    correct_operations = [\n+        migrations.AlterOrderWithRespectTo(\n+            name='LookImage',\n+            order_with_respect_to='look',\n+        ),\n+        migrations.AddIndex(\n+            model_name='LookImage',\n+            index=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n+        ),\n+    ]\n+\n+    return operations, correct_operations\n+\n+if __name__ == '__main__':\n+    wrong_ops, correct_ops = test_migration_order()\n+    print(\"Wrong order operations:\", wrong_ops)\n+    print(\"Correct order operations:\", correct_ops)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}