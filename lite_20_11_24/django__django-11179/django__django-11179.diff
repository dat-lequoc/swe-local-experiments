diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..3a462f1c4c 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,7 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..4fc28347c5
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tests.test_settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/runtests.py b/runtests.py
new file mode 100644
index 0000000000..91632c8c4d
--- /dev/null
+++ b/runtests.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+if __name__ == "__main__":
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'
+    django.setup()
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner()
+    failures = test_runner.run_tests(["tests.delete"])
+    sys.exit(bool(failures))
\ No newline at end of file
diff --git a/tests/delete/test_fast_delete_pk.py b/tests/delete/test_fast_delete_pk.py
new file mode 100644
index 0000000000..8531e73583
--- /dev/null
+++ b/tests/delete/test_fast_delete_pk.py
@@ -0,0 +1,14 @@
+from django.test import TestCase
+from .models import R
+
+class FastDeletePKTests(TestCase):
+    def test_fast_delete_pk_nulling(self):
+        """
+        Test that the primary key is set to None after deletion,
+        even when using the fast-delete path.
+        """
+        r = R.objects.create()
+        pk = r.pk
+        r.delete()
+        self.assertIsNone(r.pk, "PK should be None after deletion")
+        self.assertFalse(R.objects.filter(pk=pk).exists())
\ No newline at end of file
diff --git a/tests/delete/test_pk_nulling.py b/tests/delete/test_pk_nulling.py
new file mode 100644
index 0000000000..837e0f0e24
--- /dev/null
+++ b/tests/delete/test_pk_nulling.py
@@ -0,0 +1,14 @@
+from django.test import TestCase
+from .models import R
+
+class PKNullingTests(TestCase):
+    def test_pk_nulling_on_fast_delete(self):
+        """
+        Test that the primary key is set to None after deletion,
+        even when using the fast-delete path.
+        """
+        r = R.objects.create()
+        pk = r.pk
+        r.delete()
+        self.assertIsNone(r.pk, "PK should be None after deletion")
+        self.assertFalse(R.objects.filter(pk=pk).exists())
\ No newline at end of file
diff --git a/tests/delete/test_settings.py b/tests/delete/test_settings.py
new file mode 100644
index 0000000000..c0cb62cb10
--- /dev/null
+++ b/tests/delete/test_settings.py
@@ -0,0 +1,12 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'tests.delete',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..f710356f91
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,16 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.delete',
+]
+
+SECRET_KEY = 'dummy'
+
+USE_TZ = False
\ No newline at end of file
