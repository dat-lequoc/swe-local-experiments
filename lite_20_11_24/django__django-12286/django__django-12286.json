{
  "instance_id": "django__django-12286",
  "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..82b22a657d 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,9 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation.trans_real import get_supported_language_variant\n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+        return []\n+    except LookupError:\n         return [E004]\n-    return []\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..74b773f528\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,71 @@\n+import django\n+from django.conf import settings\n+from django.core.checks import run_checks, Tags\n+from django.test.utils import override_settings\n+\n+# Configure minimal Django settings\n+settings.configure(\n+    INSTALLED_APPS=[],\n+    DATABASES={},\n+)\n+\n+# Initialize Django\n+django.setup()\n+\n+def test_edge_cases():\n+    \"\"\"Test various edge cases for language code checking.\"\"\"\n+    \n+    # Test case 1: Invalid language code format\n+    with override_settings(\n+        LANGUAGE_CODE='not-a-valid-code!',\n+        LANGUAGES=[('en', 'English')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert any(e.id == 'translation.E001' for e in translation_errors), \"Should raise E001 for invalid language code format\"\n+        print(\"Test case 1 passed: Invalid language code format\")\n+\n+    # Test case 2: Multiple levels of language specificity\n+    with override_settings(\n+        LANGUAGE_CODE='zh-hans-cn',\n+        LANGUAGES=[('zh-hans', 'Simplified Chinese')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert not translation_errors, f\"Expected no translation errors for zh-hans-cn with zh-hans available, got: {translation_errors}\"\n+        print(\"Test case 2 passed: Multiple levels of language specificity\")\n+\n+    # Test case 3: Base language available but in different case\n+    with override_settings(\n+        LANGUAGE_CODE='pt-BR',\n+        LANGUAGES=[('pt', 'Portuguese'), ('en', 'English')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert not translation_errors, f\"Expected no translation errors for pt-BR with pt available, got: {translation_errors}\"\n+        print(\"Test case 3 passed: Case-insensitive base language matching\")\n+\n+    # Test case 4: No matching base language\n+    with override_settings(\n+        LANGUAGE_CODE='fr-ca',\n+        LANGUAGES=[('es', 'Spanish'), ('en', 'English')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert any(e.id == 'translation.E004' for e in translation_errors), \"Should raise E004 when no matching base language\"\n+        print(\"Test case 4 passed: No matching base language\")\n+\n+    # Test case 5: Empty language code\n+    with override_settings(\n+        LANGUAGE_CODE='',\n+        LANGUAGES=[('en', 'English')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert any(e.id == 'translation.E001' for e in translation_errors), \"Should raise E001 for empty language code\"\n+        print(\"Test case 5 passed: Empty language code\")\n+\n+    print(\"All edge cases passed successfully!\")\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..099319cceb\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,41 @@\n+import django\n+from django.conf import settings\n+from django.core.checks import run_checks, Tags\n+from django.test.utils import override_settings\n+\n+# Configure minimal Django settings\n+settings.configure(\n+    INSTALLED_APPS=[],\n+    DATABASES={},\n+)\n+\n+# Initialize Django\n+django.setup()\n+\n+def test_sublanguage_check():\n+    \"\"\"Test that translation.E004 is not raised when a base language is available.\"\"\"\n+    \n+    # Test case 1: de-at with de available\n+    with override_settings(\n+        LANGUAGE_CODE='de-at',\n+        LANGUAGES=[('de', 'German'), ('en', 'English')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert not translation_errors, f\"Expected no translation errors, got: {translation_errors}\"\n+        print(\"Test case 1 passed: de-at with de available\")\n+\n+    # Test case 2: es-ar which is supported out of the box\n+    with override_settings(\n+        LANGUAGE_CODE='es-ar',\n+        LANGUAGES=[('es', 'Spanish'), ('es-ar', 'Argentinian Spanish')]\n+    ):\n+        errors = run_checks(tags=[Tags.translation])\n+        translation_errors = [e for e in errors if e.id.startswith('translation.')]\n+        assert not translation_errors, f\"Expected no translation errors, got: {translation_errors}\"\n+        print(\"Test case 2 passed: es-ar supported language\")\n+\n+    print(\"All tests passed successfully!\")\n+\n+if __name__ == '__main__':\n+    test_sublanguage_check()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}