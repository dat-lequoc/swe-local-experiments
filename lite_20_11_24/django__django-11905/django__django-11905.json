{
  "instance_id": "django__django-11905",
  "model_patch": "diff --git a/conftest.py b/conftest.py\nnew file mode 100644\nindex 0000000000..04647f4513\n--- /dev/null\n+++ b/conftest.py\n@@ -0,0 +1,7 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+def pytest_configure():\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+    django.setup()\n\\ No newline at end of file\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..790c684326 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,6 +462,14 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                'The __isnull lookup only accepts boolean values. '\n+                'Got %r of type %s.' % (self.rhs, type(self.rhs).__name__)\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..5c021a5cfa\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,50 @@\n+import os\n+import django\n+from django.db import models\n+from django.core.exceptions import FieldError\n+from django.test import TestCase\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100, null=True)\n+    \n+    class Meta:\n+        app_label = 'test_lookup'\n+\n+def test_isnull_validation():\n+    # Test valid boolean values\n+    try:\n+        TestModel.objects.filter(name__isnull=True)\n+        print(\"\u2713 Test 1 passed: name__isnull=True accepted\")\n+    except Exception as e:\n+        print(f\"\u2717 Test 1 failed: {e}\")\n+\n+    try:\n+        TestModel.objects.filter(name__isnull=False)\n+        print(\"\u2713 Test 2 passed: name__isnull=False accepted\")\n+    except Exception as e:\n+        print(f\"\u2717 Test 2 failed: {e}\")\n+\n+    # Test invalid values\n+    try:\n+        TestModel.objects.filter(name__isnull=1)\n+        print(\"\u2717 Test 3 failed: name__isnull=1 should raise ValueError\")\n+    except ValueError as e:\n+        if \"The __isnull lookup only accepts boolean values\" in str(e):\n+            print(\"\u2713 Test 3 passed: name__isnull=1 correctly rejected\")\n+        else:\n+            print(f\"\u2717 Test 3 failed: Unexpected error message: {e}\")\n+\n+    try:\n+        TestModel.objects.filter(name__isnull=\"true\")\n+        print(\"\u2717 Test 4 failed: name__isnull='true' should raise ValueError\")\n+    except ValueError as e:\n+        if \"The __isnull lookup only accepts boolean values\" in str(e):\n+            print(\"\u2713 Test 4 passed: name__isnull='true' correctly rejected\")\n+        else:\n+            print(f\"\u2717 Test 4 failed: Unexpected error message: {e}\")\n+\n+if __name__ == '__main__':\n+    test_isnull_validation()\n\\ No newline at end of file\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..736358ffcf\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests.lookup.apps.LookupConfig',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\ndiff --git a/tests/lookup/apps.py b/tests/lookup/apps.py\nnew file mode 100644\nindex 0000000000..9325c86129\n--- /dev/null\n+++ b/tests/lookup/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+class LookupConfig(AppConfig):\n+    name = 'tests.lookup'\n+    label = 'test_lookup'\n\\ No newline at end of file\ndiff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex 8c8cb67827..aeea4b1910 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -12,6 +12,9 @@ class Alarm(models.Model):\n     desc = models.CharField(max_length=100)\n     time = models.TimeField()\n \n+    class Meta:\n+        app_label = 'lookup'\n+\n     def __str__(self):\n         return '%s (%s)' % (self.time, self.desc)\n \n@@ -21,6 +24,7 @@ class Author(models.Model):\n     alias = models.CharField(max_length=50, null=True, blank=True)\n \n     class Meta:\n+        app_label = 'lookup'\n         ordering = ('name',)\n \n \n@@ -31,6 +35,7 @@ class Article(models.Model):\n     slug = models.SlugField(unique=True, blank=True, null=True)\n \n     class Meta:\n+        app_label = 'lookup'\n         ordering = ('-pub_date', 'headline')\n \n     def __str__(self):\n@@ -42,6 +47,7 @@ class Tag(models.Model):\n     name = models.CharField(max_length=100)\n \n     class Meta:\n+        app_label = 'lookup'\n         ordering = ('name',)\n \n \n@@ -67,6 +73,9 @@ class Season(models.Model):\n     gt = models.IntegerField(null=True, blank=True)\n     nulled_text_field = NulledTextField(null=True)\n \n+    class Meta:\n+        app_label = 'lookup'\n+\n     def __str__(self):\n         return str(self.year)\n \n@@ -76,6 +85,9 @@ class Game(models.Model):\n     home = models.CharField(max_length=100)\n     away = models.CharField(max_length=100)\n \n+    class Meta:\n+        app_label = 'lookup'\n+\n     def __str__(self):\n         return \"%s at %s\" % (self.away, self.home)\n \n@@ -84,6 +96,9 @@ class Player(models.Model):\n     name = models.CharField(max_length=100)\n     games = models.ManyToManyField(Game, related_name='players')\n \n+    class Meta:\n+        app_label = 'lookup'\n+\n     def __str__(self):\n         return self.name\n \n@@ -92,7 +107,13 @@ class Product(models.Model):\n     name = models.CharField(max_length=80)\n     qty_target = models.DecimalField(max_digits=6, decimal_places=2)\n \n+    class Meta:\n+        app_label = 'lookup'\n+\n \n class Stock(models.Model):\n     product = models.ForeignKey(Product, models.CASCADE)\n     qty_available = models.DecimalField(max_digits=6, decimal_places=2)\n+\n+    class Meta:\n+        app_label = 'lookup'\n\\ No newline at end of file\ndiff --git a/tests/lookup/test_isnull.py b/tests/lookup/test_isnull.py\nnew file mode 100644\nindex 0000000000..a8e1250117\n--- /dev/null\n+++ b/tests/lookup/test_isnull.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+from django.core.exceptions import FieldError\n+\n+from .models import Article, Author\n+\n+class IsNullLookupTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author = Author.objects.create(name='Test Author')\n+        cls.article = Article.objects.create(\n+            headline='Test Article',\n+            pub_date='2023-01-01',\n+            author=cls.author\n+        )\n+        cls.article_no_author = Article.objects.create(\n+            headline='No Author Article',\n+            pub_date='2023-01-02',\n+            author=None\n+        )\n+\n+    def test_isnull_boolean_validation(self):\n+        \"\"\"Test that __isnull only accepts boolean values.\"\"\"\n+        # Valid boolean values should work\n+        list(Article.objects.filter(author__isnull=True))\n+        list(Article.objects.filter(author__isnull=False))\n+\n+        # Non-boolean values should raise ValueError\n+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):\n+            list(Article.objects.filter(author__isnull=1))\n+\n+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):\n+            list(Article.objects.filter(author__isnull=\"true\"))\n+\n+        with self.assertRaisesMessage(ValueError, 'The __isnull lookup only accepts boolean values'):\n+            list(Article.objects.filter(author__isnull=0))\n+\n+    def test_isnull_results(self):\n+        \"\"\"Test that __isnull returns correct results.\"\"\"\n+        self.assertEqual(Article.objects.filter(author__isnull=True).count(), 1)\n+        self.assertEqual(Article.objects.filter(author__isnull=False).count(), 1)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}