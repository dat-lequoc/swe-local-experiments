{
  "instance_id": "django__django-12708",
  "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..b5229e7489 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,16 +403,33 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n+        \n+        # Get all matching constraints\n         constraint_names = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n+        \n+        # When deleting index_together, we should only look for the index constraint\n+        if constraint_kwargs.get('index') and len(constraint_names) == 0:\n+            # No index constraint found - nothing to delete\n+            return\n+        elif constraint_kwargs.get('index') and len(constraint_names) > 1:\n+            # Filter to only get the index constraint, not unique constraint\n+            with self.connection.cursor() as cursor:\n+                constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\n+                constraint_names = [\n+                    name for name in constraint_names\n+                    if constraints[name]['index'] and not constraints[name]['unique']\n+                ]\n+        \n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n+        \n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..89bc1d942c\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,61 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:'\n+            }\n+        },\n+        INSTALLED_APPS=['__main__'],\n+        MIDDLEWARE_CLASSES=[],\n+    )\n+    django.setup()\n+\n+class TestModel1(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.CharField(max_length=100)\n+\n+    class Meta:\n+        unique_together = [('field1', 'field2')]\n+        index_together = [('field1', 'field2')]\n+\n+class TestModel2(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.CharField(max_length=100)\n+\n+    class Meta:\n+        index_together = [('field1', 'field2')]\n+\n+class TestModel3(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.CharField(max_length=100)\n+\n+    class Meta:\n+        unique_together = [('field1', 'field2')]\n+\n+class EdgeCaseTests(TestCase):\n+    def test_remove_index_with_unique(self):\n+        \"\"\"Test removing index_together when unique_together exists\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.alter_index_together(TestModel1, [('field1', 'field2')], [])\n+\n+    def test_remove_index_only(self):\n+        \"\"\"Test removing index_together when no unique_together exists\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.alter_index_together(TestModel2, [('field1', 'field2')], [])\n+\n+    def test_remove_nonexistent_index(self):\n+        \"\"\"Test removing index_together when it doesn't exist\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.alter_index_together(TestModel3, [('field1', 'field2')], [])\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    test_runner.run_tests(['__main__'])\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..9677155049\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,38 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:'\n+            }\n+        },\n+        INSTALLED_APPS=['__main__'],\n+        MIDDLEWARE_CLASSES=[],\n+    )\n+    django.setup()\n+\n+class TestModel(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.CharField(max_length=100)\n+\n+    class Meta:\n+        unique_together = [('field1', 'field2')]\n+        index_together = [('field1', 'field2')]\n+\n+class IndexTogetherTest(TestCase):\n+    def test_remove_index_together(self):\n+        # Create a new schema editor\n+        with connection.schema_editor() as editor:\n+            # Remove index_together\n+            editor.alter_index_together(TestModel, [('field1', 'field2')], [])\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    test_runner.run_tests(['__main__'])\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}