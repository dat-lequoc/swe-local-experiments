diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..b5229e7489 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -403,16 +403,33 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
+        
+        # Get all matching constraints
         constraint_names = self._constraint_names(
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        
+        # When deleting index_together, we should only look for the index constraint
+        if constraint_kwargs.get('index') and len(constraint_names) == 0:
+            # No index constraint found - nothing to delete
+            return
+        elif constraint_kwargs.get('index') and len(constraint_names) > 1:
+            # Filter to only get the index constraint, not unique constraint
+            with self.connection.cursor() as cursor:
+                constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
+                constraint_names = [
+                    name for name in constraint_names
+                    if constraints[name]['index'] and not constraints[name]['unique']
+                ]
+        
         if len(constraint_names) != 1:
             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                 len(constraint_names),
                 model._meta.db_table,
                 ", ".join(columns),
             ))
+        
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..89bc1d942c
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,61 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection, models
+from django.test import TestCase
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=['__main__'],
+        MIDDLEWARE_CLASSES=[],
+    )
+    django.setup()
+
+class TestModel1(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        unique_together = [('field1', 'field2')]
+        index_together = [('field1', 'field2')]
+
+class TestModel2(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        index_together = [('field1', 'field2')]
+
+class TestModel3(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        unique_together = [('field1', 'field2')]
+
+class EdgeCaseTests(TestCase):
+    def test_remove_index_with_unique(self):
+        """Test removing index_together when unique_together exists"""
+        with connection.schema_editor() as editor:
+            editor.alter_index_together(TestModel1, [('field1', 'field2')], [])
+
+    def test_remove_index_only(self):
+        """Test removing index_together when no unique_together exists"""
+        with connection.schema_editor() as editor:
+            editor.alter_index_together(TestModel2, [('field1', 'field2')], [])
+
+    def test_remove_nonexistent_index(self):
+        """Test removing index_together when it doesn't exist"""
+        with connection.schema_editor() as editor:
+            editor.alter_index_together(TestModel3, [('field1', 'field2')], [])
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.run_tests(['__main__'])
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9677155049
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection, models
+from django.test import TestCase
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=['__main__'],
+        MIDDLEWARE_CLASSES=[],
+    )
+    django.setup()
+
+class TestModel(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        unique_together = [('field1', 'field2')]
+        index_together = [('field1', 'field2')]
+
+class IndexTogetherTest(TestCase):
+    def test_remove_index_together(self):
+        # Create a new schema editor
+        with connection.schema_editor() as editor:
+            # Remove index_together
+            editor.alter_index_together(TestModel, [('field1', 'field2')], [])
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.run_tests(['__main__'])
\ No newline at end of file
