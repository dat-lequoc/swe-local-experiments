diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
index 2b306a579e..eb2264ac82 100644
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -84,7 +84,8 @@ class Command(BaseCommand):
     def handle(self, **options):
         # Execute the command and exit.
         if options['command']:
-            exec(options['command'])
+            globals_dict = {}
+            exec(options['command'], globals_dict)
             return
 
         # Execute stdin if it has anything to read and exit.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6b8133a21d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+import os
+import sys
+import subprocess
+
+def test_shell_command():
+    # Test case 1: Function definition and execution
+    cmd = '''python -m django shell -c "
+import django
+def f():
+    print(django.__version__)
+f()"'''
+    
+    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+    print("Test case 1 output:", result.stdout)
+    print("Test case 1 error:", result.stderr)
+    
+    # Test case 2: Multiple functions and variables
+    cmd2 = '''python -m django shell -c "
+x = 42
+def f1():
+    return x
+def f2():
+    return f1() + 1
+print(f2())"'''
+    
+    result2 = subprocess.run(cmd2, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+    print("\nTest case 2 output:", result2.stdout)
+    print("Test case 2 error:", result2.stderr)
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+    test_shell_command()
\ No newline at end of file
