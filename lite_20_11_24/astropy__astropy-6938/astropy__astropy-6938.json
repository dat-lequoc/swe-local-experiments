{
  "instance_id": "astropy__astropy-6938",
  "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b1..8890e158e2 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field[:] = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..0177213f07\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from astropy.io.fits import FITS_rec\n+from astropy.io.fits.column import _AsciiColDefs, Column\n+from astropy.io.fits.util import encode_ascii\n+\n+# Create a test column with D format\n+coldefs = _AsciiColDefs([\n+    Column(name='test', format='D15.7', array=np.array([1.23456789E-10]))\n+])\n+\n+# Create a FITS_rec instance\n+data = FITS_rec.from_columns(coldefs)\n+\n+# Get the raw field before scaling back\n+raw_field = data.field(0)\n+print(\"Original field:\", raw_field)\n+\n+# Scale back to ASCII representation\n+data._scale_back()\n+\n+# Get the raw field after scaling back\n+raw_field = data.base.view(np.uint8).reshape(data.shape + (-1,))\n+print(\"Converted field (raw bytes):\", raw_field)\n+print(\"Converted field (as string):\", raw_field.tobytes().decode('ascii'))\n+\n+# Check if the field contains 'D' instead of 'E'\n+field_str = raw_field.tobytes().decode('ascii')\n+assert 'D' in field_str, \"Field should contain 'D' as exponent separator\"\n+print(\"Test passed: Field contains 'D' as exponent separator\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}