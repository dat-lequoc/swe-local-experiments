{"instance_id": "astropy__astropy-6938", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b1..8890e158e2 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field[:] = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..0177213f07\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from astropy.io.fits import FITS_rec\n+from astropy.io.fits.column import _AsciiColDefs, Column\n+from astropy.io.fits.util import encode_ascii\n+\n+# Create a test column with D format\n+coldefs = _AsciiColDefs([\n+    Column(name='test', format='D15.7', array=np.array([1.23456789E-10]))\n+])\n+\n+# Create a FITS_rec instance\n+data = FITS_rec.from_columns(coldefs)\n+\n+# Get the raw field before scaling back\n+raw_field = data.field(0)\n+print(\"Original field:\", raw_field)\n+\n+# Scale back to ASCII representation\n+data._scale_back()\n+\n+# Get the raw field after scaling back\n+raw_field = data.base.view(np.uint8).reshape(data.shape + (-1,))\n+print(\"Converted field (raw bytes):\", raw_field)\n+print(\"Converted field (as string):\", raw_field.tobytes().decode('ascii'))\n+\n+# Check if the field contains 'D' instead of 'E'\n+field_str = raw_field.tobytes().decode('ascii')\n+assert 'D' in field_str, \"Field should contain 'D' as exponent separator\"\n+print(\"Test passed: Field contains 'D' as exponent separator\")\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..3cc1d70078 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,18 +512,17 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        # If handle_mask is None or both operands have no mask, return None\n+        if handle_mask is None or (self.mask is None and (operand is None or operand.mask is None)):\n             return None\n+        # If self has no mask but operand has one, copy operand's mask\n         elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        # If operand is None or has no mask but self has one, copy self's mask\n+        elif operand is None or operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n+            # Both have masks, use handle_mask function\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 15bb49f22b..dc9c3c5f37 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"cython==0.29.34\",\n             \"oldest-supported-numpy\",\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..162dd213a7\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,53 @@\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_mask_propagation():\n+    # Test data\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    # Create NDDataRef objects\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test cases from PR description\n+    print(\"\\nTest Case 1: multiply no mask by constant (no mask * no mask)\")\n+    result1 = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result1.mask}\")\n+    assert result1.mask is None, \"Expected no mask\"\n+\n+    print(\"\\nTest Case 2: multiply no mask by itself (no mask * no mask)\")\n+    result2 = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result2.mask}\")\n+    assert result2.mask is None, \"Expected no mask\"\n+\n+    print(\"\\nTest Case 3: multiply mask by constant (mask * no mask)\")\n+    result3 = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result3.mask}\")\n+    np.testing.assert_array_equal(result3.mask, mask)\n+\n+    print(\"\\nTest Case 4: multiply mask by itself (mask * mask)\")\n+    result4 = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result4.mask}\")\n+    np.testing.assert_array_equal(result4.mask, mask)\n+\n+    print(\"\\nTest Case 5: multiply mask by no mask (mask * no mask)\")\n+    result5 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result5.mask}\")\n+    np.testing.assert_array_equal(result5.mask, mask)\n+\n+    # Additional edge cases\n+    print(\"\\nTest Case 6: multiply with None handle_mask\")\n+    result6 = nref_mask.multiply(nref_nomask, handle_mask=None)\n+    print(f\"Result mask: {result6.mask}\")\n+    assert result6.mask is None, \"Expected no mask when handle_mask is None\"\n+\n+    print(\"\\nTest Case 7: multiply with 'first_found' handle_mask\")\n+    result7 = nref_mask.multiply(nref_nomask, handle_mask='first_found')\n+    print(f\"Result mask: {result7.mask}\")\n+    np.testing.assert_array_equal(result7.mask, mask)\n+\n+    print(\"\\nAll test cases passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_mask_propagation()\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..768beb0de9 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -68,7 +68,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..1c9024d680\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,26 @@\n+from astropy.table import Table\n+\n+# Test various case combinations\n+test_cases = [\n+    \"READ SERR 1 2\",  # Original uppercase\n+    \"read serr 1 2\",  # All lowercase\n+    \"Read Serr 1 2\",  # Mixed case 1\n+    \"ReAd SeRr 1 2\",  # Mixed case 2\n+    \"READ serr 1 2\",  # Mixed case 3\n+]\n+\n+print(\"Testing various case combinations:\")\n+for i, command in enumerate(test_cases, 1):\n+    qdp_content = f\"{command}\\n1 0.5 1 0.5\\n\"\n+    test_file = f'test{i}.qdp'\n+    \n+    with open(test_file, 'w') as f:\n+        f.write(qdp_content)\n+    \n+    try:\n+        table = Table.read(test_file, format='ascii.qdp')\n+        print(f\"\\nCase {i} - Success: {command}\")\n+        print(table)\n+    except Exception as e:\n+        print(f\"\\nCase {i} - Failed: {command}\")\n+        print(f\"Error: {str(e)}\")\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 287a356a08..f2ee6c47cc 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..dc3ff5eeff\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,14 @@\n+from astropy.table import Table\n+\n+# Create a QDP file with lowercase commands\n+qdp_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+\n+with open('test.qdp', 'w') as f:\n+    f.write(qdp_content)\n+\n+# Try to read the file\n+table = Table.read('test.qdp', format='ascii.qdp')\n+print(\"Successfully read table with lowercase commands:\")\n+print(table)\n\\ No newline at end of file\ndiff --git a/test.qdp b/test.qdp\nnew file mode 100644\nindex 0000000000..5479bdc81d\n--- /dev/null\n+++ b/test.qdp\n@@ -0,0 +1,2 @@\n+read serr 1 2 \n+1 0.5 1 0.5\ndiff --git a/test1.qdp b/test1.qdp\nnew file mode 100644\nindex 0000000000..ddaaf09f56\n--- /dev/null\n+++ b/test1.qdp\n@@ -0,0 +1,2 @@\n+READ SERR 1 2\n+1 0.5 1 0.5\ndiff --git a/test2.qdp b/test2.qdp\nnew file mode 100644\nindex 0000000000..b5750561d5\n--- /dev/null\n+++ b/test2.qdp\n@@ -0,0 +1,2 @@\n+read serr 1 2\n+1 0.5 1 0.5\ndiff --git a/test3.qdp b/test3.qdp\nnew file mode 100644\nindex 0000000000..827a8ed964\n--- /dev/null\n+++ b/test3.qdp\n@@ -0,0 +1,2 @@\n+Read Serr 1 2\n+1 0.5 1 0.5\ndiff --git a/test4.qdp b/test4.qdp\nnew file mode 100644\nindex 0000000000..bd1168429e\n--- /dev/null\n+++ b/test4.qdp\n@@ -0,0 +1,2 @@\n+ReAd SeRr 1 2\n+1 0.5 1 0.5\ndiff --git a/test5.qdp b/test5.qdp\nnew file mode 100644\nindex 0000000000..04181e6647\n--- /dev/null\n+++ b/test5.qdp\n@@ -0,0 +1,2 @@\n+READ serr 1 2\n+1 0.5 1 0.5\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..4bd4c4af69 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,66 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        if header_rows is None:\n+            header_rows = [\"name\"]\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        raw_lines = super().write(lines)\n+        if not raw_lines:\n+            return [\"\"]\n+\n+        # Extract content lines and calculate widths\n+        content_lines = []\n+        widths = []\n+        for line in raw_lines:\n+            if line.strip() and not all(c in ' =-|' for c in line):\n+                cols = line.split()\n+                content_lines.append(cols)\n+                if len(cols) > len(widths):\n+                    widths.extend([0] * (len(cols) - len(widths)))\n+                for i, col in enumerate(cols):\n+                    widths[i] = max(widths[i], len(col))\n+\n+        if not content_lines:\n+            return [\"\"]\n+\n+        # Create equals line\n+        equals_line = \" \".join(\"=\" * w for w in widths)\n+\n+        # Format output\n+        header_rows = getattr(self.header, \"header_rows\", [\"name\"])\n+        header_section_end = min(len(header_rows), len(content_lines))\n+        \n+        result = []\n+        result.append(equals_line)\n+\n+        # Format header rows\n+        for i in range(header_section_end):\n+            if i < len(content_lines):\n+                cols = content_lines[i]\n+                formatted_cols = [col.ljust(widths[j]) for j, col in enumerate(cols)]\n+                result.append(\" \".join(formatted_cols))\n+\n+        result.append(equals_line)\n+\n+        # Format data rows\n+        for cols in content_lines[header_section_end:]:\n+            formatted_cols = []\n+            for j, col in enumerate(cols):\n+                if j < len(widths):  # Ensure we don't exceed width array\n+                    try:\n+                        # Check if numeric (including negative numbers and decimals)\n+                        float(col.replace(\".\", \"\").replace(\"-\", \"\").strip())\n+                        formatted_cols.append(col.rjust(widths[j]))\n+                    except ValueError:\n+                        # Handle quoted strings and text\n+                        if col.startswith('\"') or col.startswith(\"'\"):\n+                            formatted_cols.append(col.ljust(widths[j]))\n+                        else:\n+                            formatted_cols.append(\" \" + col.ljust(widths[j] - 1))\n+            result.append(\" \".join(formatted_cols))\n+\n+        result.append(equals_line)\n+        return result\ndiff --git a/compare_output.py b/compare_output.py\nnew file mode 100644\nindex 0000000000..2e00d6eae6\n--- /dev/null\n+++ b/compare_output.py\n@@ -0,0 +1,47 @@\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Create the test table\n+table = \"\"\"\\\n+====== =========== ============ ===========\n+  Col1    Col2        Col3        Col4\n+====== =========== ============ ===========\n+  1.2    \"hello\"      1           a\n+  2.4   's worlds          2           2\n+====== =========== ============ ===========\n+\"\"\"\n+dat = ascii.read(table, Reader=ascii.RST)\n+\n+# Get actual output\n+out = StringIO()\n+ascii.write(dat, out, Writer=ascii.RST)\n+actual = out.getvalue()\n+\n+# Expected output\n+expected = \"\"\"\\\n+==== ========= ==== ====\n+Col1      Col2 Col3 Col4\n+==== ========= ==== ====\n+ 1.2   \"hello\"    1    a\n+ 2.4 's worlds    2    2\n+==== ========= ==== ====\n+\"\"\"\n+\n+print(\"Actual output:\")\n+print(\"-------------\")\n+print(repr(actual))\n+print(\"\\nExpected output:\")\n+print(\"---------------\")\n+print(repr(expected))\n+\n+# Compare line by line\n+actual_lines = actual.splitlines()\n+expected_lines = expected.splitlines()\n+\n+print(\"\\nLine by line comparison:\")\n+print(\"----------------------\")\n+for i, (a, e) in enumerate(zip(actual_lines, expected_lines)):\n+    if a != e:\n+        print(f\"Line {i}:\")\n+        print(f\"  Actual  : {repr(a)}\")\n+        print(f\"  Expected: {repr(e)}\")\n\\ No newline at end of file\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..a97e6365b1\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,35 @@\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Test case 1: Empty table\n+empty_tbl = QTable()\n+print(\"\\nTest 1: Empty table\")\n+print(\"-----------------\")\n+empty_tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test case 2: Single column\n+single_col_tbl = QTable({'col1': [1, 2, 3]})\n+print(\"\\nTest 2: Single column\")\n+print(\"------------------\")\n+single_col_tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test case 3: Mixed data types\n+mixed_tbl = QTable({\n+    'text': ['Hello', 'World', 'Test'],\n+    'ints': [1, -2, 3],\n+    'floats': [1.234, -5.678, 0.0],\n+    'with_units': [1.2, 3.4, 5.6] * u.m\n+})\n+print(\"\\nTest 3: Mixed data types\")\n+print(\"---------------------\")\n+mixed_tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=['name', 'unit'])\n+\n+# Test case 4: Long column names and values\n+long_tbl = QTable({\n+    'very_long_column_name': ['short', 'very_long_value_here', 'medium'],\n+    'col2': [1, 2, 3]\n+})\n+print(\"\\nTest 4: Long column names and values\")\n+print(\"--------------------------------\")\n+long_tbl.write(sys.stdout, format=\"ascii.rst\")\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0d1ee66ab9..ec234472e2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..2ceb9a057a\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,21 @@\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+# Test 1: Default RST output\n+print(\"\\nTest 1: Default RST output\")\n+print(\"-------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+# Test 2: RST output with header_rows\n+print(\"\\nTest 2: RST output with header_rows=['name', 'unit']\")\n+print(\"------------------------------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+\n+# Test 3: Fixed width output with header_rows for comparison\n+print(\"\\nTest 3: Fixed width output with header_rows=['name', 'unit']\")\n+print(\"-----------------------------------------------------\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n\\ No newline at end of file\n", "model_name_or_path": "KortixAI"}
{"instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..3a4b0cc569\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,24 @@\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+# Test case from PR description\n+cm = m.Linear1D(10) & m.Linear1D(5)\n+result1 = separability_matrix(m.Pix2Sky_TAN() & cm)\n+print(\"Test case from PR:\")\n+print(result1)\n+print()\n+\n+# Test deeply nested models\n+cm2 = m.Linear1D(1) & m.Linear1D(2)\n+cm3 = cm2 & m.Linear1D(3)\n+result2 = separability_matrix(m.Pix2Sky_TAN() & cm3)\n+print(\"Deeply nested models:\")\n+print(result2)\n+print()\n+\n+# Test mixed separable and non-separable models\n+rot = m.Rotation2D(45)  # non-separable\n+cm4 = rot & m.Linear1D(4)\n+result3 = separability_matrix(m.Pix2Sky_TAN() & cm4)\n+print(\"Mixed separable and non-separable models:\")\n+print(result3)\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 3364d30740..02dddbe713 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.22\",\n", "model_name_or_path": "KortixAI"}
