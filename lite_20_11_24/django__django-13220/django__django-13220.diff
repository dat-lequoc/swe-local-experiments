diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..d09e8a331d 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -182,6 +182,35 @@ class ValidationError(Exception):
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    def _error_key(self, error):
+        """Create a comparable key from an error."""
+        return (error.message, error.code, str(error.params))
+
+    def _errors_equal(self, errors1, errors2):
+        """Compare two lists of errors, order-independent."""
+        return sorted(self._error_key(e) for e in errors1) == \
+               sorted(self._error_key(e) for e in errors2)
+
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+        
+        # Compare error dictionaries
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            if set(self.error_dict.keys()) != set(other.error_dict.keys()):
+                return False
+            return all(
+                self._errors_equal(self.error_dict[field], other.error_dict[field])
+                for field in self.error_dict
+            )
+        
+        # Compare error lists
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            return self._errors_equal(self.error_list, other.error_list)
+        
+        # Different structures are not equal
+        return False
+
 
 class EmptyResultSet(Exception):
     """A database query predicate is impossible."""
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..8051e8416a
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,43 @@
+from django.core.exceptions import ValidationError
+
+def test_edge_cases():
+    # Test empty errors
+    err1 = ValidationError([])
+    err2 = ValidationError([])
+    assert err1 == err2, "Empty error lists should be equal"
+    print("Empty error lists test passed")
+
+    # Test empty dictionaries
+    err1 = ValidationError({})
+    err2 = ValidationError({})
+    assert err1 == err2, "Empty error dictionaries should be equal"
+    print("Empty error dictionaries test passed")
+
+    # Test None params
+    err1 = ValidationError('Message', code='code', params=None)
+    err2 = ValidationError('Message', code='code', params=None)
+    assert err1 == err2, "Errors with None params should be equal"
+    print("None params test passed")
+
+    # Test nested ValidationErrors
+    err1 = ValidationError(ValidationError('Nested error'))
+    err2 = ValidationError(ValidationError('Nested error'))
+    assert err1 == err2, "Nested ValidationErrors should be equal"
+    print("Nested ValidationErrors test passed")
+
+    # Test mixed types in dictionary
+    err1 = ValidationError({
+        'field1': ValidationError('Error 1'),
+        'field2': ['Error 2', ValidationError('Error 3')]
+    })
+    err2 = ValidationError({
+        'field1': ValidationError('Error 1'),
+        'field2': ['Error 2', ValidationError('Error 3')]
+    })
+    assert err1 == err2, "Mixed type errors should be equal"
+    print("Mixed types test passed")
+
+    print("All edge cases passed successfully!")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..97bcb291d5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,48 @@
+from django.core.exceptions import ValidationError
+
+def test_validation_error_equality():
+    # Test single message equality
+    err1 = ValidationError('Same message')
+    err2 = ValidationError('Same message')
+    err3 = ValidationError('Different message')
+    assert err1 == err2, "Same messages should be equal"
+    assert err1 != err3, "Different messages should not be equal"
+    print("Single message test passed")
+
+    # Test list equality with different order
+    err1 = ValidationError(['Error 1', 'Error 2'])
+    err2 = ValidationError(['Error 2', 'Error 1'])
+    err3 = ValidationError(['Error 1', 'Error 3'])
+    assert err1 == err2, "Lists with same elements in different order should be equal"
+    assert err1 != err3, "Lists with different elements should not be equal"
+    print("List equality test passed")
+
+    # Test dictionary equality with different order in lists
+    err1 = ValidationError({
+        'field1': ['Error 1', 'Error 2'],
+        'field2': ['Error 3', 'Error 4']
+    })
+    err2 = ValidationError({
+        'field1': ['Error 2', 'Error 1'],
+        'field2': ['Error 4', 'Error 3']
+    })
+    err3 = ValidationError({
+        'field1': ['Error 1', 'Error 2'],
+        'field2': ['Error 3', 'Error 5']
+    })
+    assert err1 == err2, "Dicts with same elements in different order should be equal"
+    assert err1 != err3, "Dicts with different elements should not be equal"
+    print("Dictionary equality test passed")
+
+    # Test with codes and params
+    err1 = ValidationError('Message', code='code1', params={'param': 'value'})
+    err2 = ValidationError('Message', code='code1', params={'param': 'value'})
+    err3 = ValidationError('Message', code='code2', params={'param': 'value'})
+    assert err1 == err2, "Same messages with same codes and params should be equal"
+    assert err1 != err3, "Messages with different codes should not be equal"
+    print("Codes and params test passed")
+
+    print("All tests passed successfully!")
+
+if __name__ == '__main__':
+    test_validation_error_equality()
\ No newline at end of file
diff --git a/tests/test_exceptions/test_validation_error.py b/tests/test_exceptions/test_validation_error.py
index a0bbfaf77e..08bd744f02 100644
--- a/tests/test_exceptions/test_validation_error.py
+++ b/tests/test_exceptions/test_validation_error.py
@@ -14,3 +14,50 @@ class TestValidationError(unittest.TestCase):
         message_dict['field2'] = ['E3', 'E4']
         exception = ValidationError(message_dict)
         self.assertEqual(sorted(exception.messages), ['E1', 'E2', 'E3', 'E4'])
+
+    def test_validation_error_equality(self):
+        # Test single message equality
+        err1 = ValidationError('Same message')
+        err2 = ValidationError('Same message')
+        err3 = ValidationError('Different message')
+        self.assertEqual(err1, err2)
+        self.assertNotEqual(err1, err3)
+
+        # Test list equality with different order
+        err1 = ValidationError(['Error 1', 'Error 2'])
+        err2 = ValidationError(['Error 2', 'Error 1'])
+        err3 = ValidationError(['Error 1', 'Error 3'])
+        self.assertEqual(err1, err2)
+        self.assertNotEqual(err1, err3)
+
+        # Test dictionary equality with different order in lists
+        err1 = ValidationError({
+            'field1': ['Error 1', 'Error 2'],
+            'field2': ['Error 3', 'Error 4']
+        })
+        err2 = ValidationError({
+            'field1': ['Error 2', 'Error 1'],
+            'field2': ['Error 4', 'Error 3']
+        })
+        err3 = ValidationError({
+            'field1': ['Error 1', 'Error 2'],
+            'field2': ['Error 3', 'Error 5']
+        })
+        self.assertEqual(err1, err2)
+        self.assertNotEqual(err1, err3)
+
+        # Test with codes and params
+        err1 = ValidationError('Message', code='code1', params={'param': 'value'})
+        err2 = ValidationError('Message', code='code1', params={'param': 'value'})
+        err3 = ValidationError('Message', code='code2', params={'param': 'value'})
+        self.assertEqual(err1, err2)
+        self.assertNotEqual(err1, err3)
+
+        # Test different structures are not equal
+        err1 = ValidationError(['Error 1'])
+        err2 = ValidationError({'field': ['Error 1']})
+        self.assertNotEqual(err1, err2)
+
+        # Test comparison with non-ValidationError
+        err1 = ValidationError('Message')
+        self.assertNotEqual(err1, 'Message')
\ No newline at end of file
