{
  "instance_id": "django__django-13220",
  "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..d09e8a331d 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,35 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def _error_key(self, error):\n+        \"\"\"Create a comparable key from an error.\"\"\"\n+        return (error.message, error.code, str(error.params))\n+\n+    def _errors_equal(self, errors1, errors2):\n+        \"\"\"Compare two lists of errors, order-independent.\"\"\"\n+        return sorted(self._error_key(e) for e in errors1) == \\\n+               sorted(self._error_key(e) for e in errors2)\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        # Compare error dictionaries\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            if set(self.error_dict.keys()) != set(other.error_dict.keys()):\n+                return False\n+            return all(\n+                self._errors_equal(self.error_dict[field], other.error_dict[field])\n+                for field in self.error_dict\n+            )\n+        \n+        # Compare error lists\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return self._errors_equal(self.error_list, other.error_list)\n+        \n+        # Different structures are not equal\n+        return False\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..8051e8416a\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,43 @@\n+from django.core.exceptions import ValidationError\n+\n+def test_edge_cases():\n+    # Test empty errors\n+    err1 = ValidationError([])\n+    err2 = ValidationError([])\n+    assert err1 == err2, \"Empty error lists should be equal\"\n+    print(\"Empty error lists test passed\")\n+\n+    # Test empty dictionaries\n+    err1 = ValidationError({})\n+    err2 = ValidationError({})\n+    assert err1 == err2, \"Empty error dictionaries should be equal\"\n+    print(\"Empty error dictionaries test passed\")\n+\n+    # Test None params\n+    err1 = ValidationError('Message', code='code', params=None)\n+    err2 = ValidationError('Message', code='code', params=None)\n+    assert err1 == err2, \"Errors with None params should be equal\"\n+    print(\"None params test passed\")\n+\n+    # Test nested ValidationErrors\n+    err1 = ValidationError(ValidationError('Nested error'))\n+    err2 = ValidationError(ValidationError('Nested error'))\n+    assert err1 == err2, \"Nested ValidationErrors should be equal\"\n+    print(\"Nested ValidationErrors test passed\")\n+\n+    # Test mixed types in dictionary\n+    err1 = ValidationError({\n+        'field1': ValidationError('Error 1'),\n+        'field2': ['Error 2', ValidationError('Error 3')]\n+    })\n+    err2 = ValidationError({\n+        'field1': ValidationError('Error 1'),\n+        'field2': ['Error 2', ValidationError('Error 3')]\n+    })\n+    assert err1 == err2, \"Mixed type errors should be equal\"\n+    print(\"Mixed types test passed\")\n+\n+    print(\"All edge cases passed successfully!\")\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..97bcb291d5\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,48 @@\n+from django.core.exceptions import ValidationError\n+\n+def test_validation_error_equality():\n+    # Test single message equality\n+    err1 = ValidationError('Same message')\n+    err2 = ValidationError('Same message')\n+    err3 = ValidationError('Different message')\n+    assert err1 == err2, \"Same messages should be equal\"\n+    assert err1 != err3, \"Different messages should not be equal\"\n+    print(\"Single message test passed\")\n+\n+    # Test list equality with different order\n+    err1 = ValidationError(['Error 1', 'Error 2'])\n+    err2 = ValidationError(['Error 2', 'Error 1'])\n+    err3 = ValidationError(['Error 1', 'Error 3'])\n+    assert err1 == err2, \"Lists with same elements in different order should be equal\"\n+    assert err1 != err3, \"Lists with different elements should not be equal\"\n+    print(\"List equality test passed\")\n+\n+    # Test dictionary equality with different order in lists\n+    err1 = ValidationError({\n+        'field1': ['Error 1', 'Error 2'],\n+        'field2': ['Error 3', 'Error 4']\n+    })\n+    err2 = ValidationError({\n+        'field1': ['Error 2', 'Error 1'],\n+        'field2': ['Error 4', 'Error 3']\n+    })\n+    err3 = ValidationError({\n+        'field1': ['Error 1', 'Error 2'],\n+        'field2': ['Error 3', 'Error 5']\n+    })\n+    assert err1 == err2, \"Dicts with same elements in different order should be equal\"\n+    assert err1 != err3, \"Dicts with different elements should not be equal\"\n+    print(\"Dictionary equality test passed\")\n+\n+    # Test with codes and params\n+    err1 = ValidationError('Message', code='code1', params={'param': 'value'})\n+    err2 = ValidationError('Message', code='code1', params={'param': 'value'})\n+    err3 = ValidationError('Message', code='code2', params={'param': 'value'})\n+    assert err1 == err2, \"Same messages with same codes and params should be equal\"\n+    assert err1 != err3, \"Messages with different codes should not be equal\"\n+    print(\"Codes and params test passed\")\n+\n+    print(\"All tests passed successfully!\")\n+\n+if __name__ == '__main__':\n+    test_validation_error_equality()\n\\ No newline at end of file\ndiff --git a/tests/test_exceptions/test_validation_error.py b/tests/test_exceptions/test_validation_error.py\nindex a0bbfaf77e..08bd744f02 100644\n--- a/tests/test_exceptions/test_validation_error.py\n+++ b/tests/test_exceptions/test_validation_error.py\n@@ -14,3 +14,50 @@ class TestValidationError(unittest.TestCase):\n         message_dict['field2'] = ['E3', 'E4']\n         exception = ValidationError(message_dict)\n         self.assertEqual(sorted(exception.messages), ['E1', 'E2', 'E3', 'E4'])\n+\n+    def test_validation_error_equality(self):\n+        # Test single message equality\n+        err1 = ValidationError('Same message')\n+        err2 = ValidationError('Same message')\n+        err3 = ValidationError('Different message')\n+        self.assertEqual(err1, err2)\n+        self.assertNotEqual(err1, err3)\n+\n+        # Test list equality with different order\n+        err1 = ValidationError(['Error 1', 'Error 2'])\n+        err2 = ValidationError(['Error 2', 'Error 1'])\n+        err3 = ValidationError(['Error 1', 'Error 3'])\n+        self.assertEqual(err1, err2)\n+        self.assertNotEqual(err1, err3)\n+\n+        # Test dictionary equality with different order in lists\n+        err1 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3', 'Error 4']\n+        })\n+        err2 = ValidationError({\n+            'field1': ['Error 2', 'Error 1'],\n+            'field2': ['Error 4', 'Error 3']\n+        })\n+        err3 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3', 'Error 5']\n+        })\n+        self.assertEqual(err1, err2)\n+        self.assertNotEqual(err1, err3)\n+\n+        # Test with codes and params\n+        err1 = ValidationError('Message', code='code1', params={'param': 'value'})\n+        err2 = ValidationError('Message', code='code1', params={'param': 'value'})\n+        err3 = ValidationError('Message', code='code2', params={'param': 'value'})\n+        self.assertEqual(err1, err2)\n+        self.assertNotEqual(err1, err3)\n+\n+        # Test different structures are not equal\n+        err1 = ValidationError(['Error 1'])\n+        err2 = ValidationError({'field': ['Error 1']})\n+        self.assertNotEqual(err1, err2)\n+\n+        # Test comparison with non-ValidationError\n+        err1 = ValidationError('Message')\n+        self.assertNotEqual(err1, 'Message')\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}