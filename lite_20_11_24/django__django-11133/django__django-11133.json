{
  "instance_id": "django__django-11133",
  "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a9ede09dd9 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -229,7 +229,7 @@ class HttpResponseBase:\n         # Handle string types -- we can't rely on force_bytes here because:\n         # - Python attempts str conversion first\n         # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n+        if isinstance(value, (bytes, memoryview)):\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..5062c25f0e\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,58 @@\n+from django.http import HttpResponse\n+from django.conf import settings\n+from django.test import SimpleTestCase\n+import array\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={},\n+    INSTALLED_APPS=[],\n+    SECRET_KEY='dummy-key'\n+)\n+\n+class HttpResponseMemoryViewEdgeCasesTest(SimpleTestCase):\n+    def test_memoryview_edge_cases(self):\n+        # Test empty memoryview\n+        response = HttpResponse(memoryview(b\"\"))\n+        self.assertEqual(response.content, b'')\n+\n+        # Test large memoryview content\n+        large_content = b\"x\" * 1000000\n+        response = HttpResponse(memoryview(large_content))\n+        self.assertEqual(response.content, large_content)\n+\n+        # Test memoryview from array\n+        arr = array.array('B', [1, 2, 3, 4, 5])\n+        response = HttpResponse(memoryview(arr))\n+        self.assertEqual(response.content, bytes([1, 2, 3, 4, 5]))\n+\n+        # Test memoryview with non-contiguous memory\n+        arr = array.array('i', [1, 2, 3, 4, 5])  # integer array\n+        mv = memoryview(arr).cast('B')  # view as bytes\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, arr.tobytes())\n+\n+        # Test memoryview with null bytes\n+        response = HttpResponse(memoryview(b\"Hello\\x00World\"))\n+        self.assertEqual(response.content, b\"Hello\\x00World\")\n+\n+        # Test memoryview with special characters\n+        response = HttpResponse(memoryview(\"Hello \u4e16\u754c\".encode('utf-8')))\n+        self.assertEqual(response.content, \"Hello \u4e16\u754c\".encode('utf-8'))\n+\n+        print(\"All edge cases passed successfully!\")\n+\n+if __name__ == '__main__':\n+    import django\n+    django.setup()\n+    \n+    # Run the test\n+    test = HttpResponseMemoryViewEdgeCasesTest()\n+    test._pre_setup()\n+    try:\n+        test.test_memoryview_edge_cases()\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+    finally:\n+        test._post_teardown()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..bbda5b877c\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,40 @@\n+from django.http import HttpResponse\n+from django.conf import settings\n+from django.test import SimpleTestCase\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={},\n+    INSTALLED_APPS=[],\n+    SECRET_KEY='dummy-key'\n+)\n+\n+class HttpResponseMemoryViewTest(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        # Test with string content\n+        response = HttpResponse(\"My Content\")\n+        self.assertEqual(response.content, b'My Content')\n+\n+        # Test with bytes content\n+        response = HttpResponse(b\"My Content\")\n+        self.assertEqual(response.content, b'My Content')\n+\n+        # Test with memoryview content\n+        response = HttpResponse(memoryview(b\"My Content\"))\n+        self.assertEqual(response.content, b'My Content')\n+\n+if __name__ == '__main__':\n+    import django\n+    django.setup()\n+    \n+    # Run the test\n+    test = HttpResponseMemoryViewTest()\n+    test._pre_setup()\n+    try:\n+        test.test_memoryview_content()\n+        print(\"Test passed successfully!\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+    finally:\n+        test._post_teardown()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}