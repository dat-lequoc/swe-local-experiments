diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..a9ede09dd9 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -229,7 +229,7 @@ class HttpResponseBase:
         # Handle string types -- we can't rely on force_bytes here because:
         # - Python attempts str conversion first
         # - when self._charset != 'utf-8' it re-encodes the content
-        if isinstance(value, bytes):
+        if isinstance(value, (bytes, memoryview)):
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..5062c25f0e
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,58 @@
+from django.http import HttpResponse
+from django.conf import settings
+from django.test import SimpleTestCase
+import array
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={},
+    INSTALLED_APPS=[],
+    SECRET_KEY='dummy-key'
+)
+
+class HttpResponseMemoryViewEdgeCasesTest(SimpleTestCase):
+    def test_memoryview_edge_cases(self):
+        # Test empty memoryview
+        response = HttpResponse(memoryview(b""))
+        self.assertEqual(response.content, b'')
+
+        # Test large memoryview content
+        large_content = b"x" * 1000000
+        response = HttpResponse(memoryview(large_content))
+        self.assertEqual(response.content, large_content)
+
+        # Test memoryview from array
+        arr = array.array('B', [1, 2, 3, 4, 5])
+        response = HttpResponse(memoryview(arr))
+        self.assertEqual(response.content, bytes([1, 2, 3, 4, 5]))
+
+        # Test memoryview with non-contiguous memory
+        arr = array.array('i', [1, 2, 3, 4, 5])  # integer array
+        mv = memoryview(arr).cast('B')  # view as bytes
+        response = HttpResponse(mv)
+        self.assertEqual(response.content, arr.tobytes())
+
+        # Test memoryview with null bytes
+        response = HttpResponse(memoryview(b"Hello\x00World"))
+        self.assertEqual(response.content, b"Hello\x00World")
+
+        # Test memoryview with special characters
+        response = HttpResponse(memoryview("Hello 世界".encode('utf-8')))
+        self.assertEqual(response.content, "Hello 世界".encode('utf-8'))
+
+        print("All edge cases passed successfully!")
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Run the test
+    test = HttpResponseMemoryViewEdgeCasesTest()
+    test._pre_setup()
+    try:
+        test.test_memoryview_edge_cases()
+    except Exception as e:
+        print(f"Test failed: {e}")
+    finally:
+        test._post_teardown()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bbda5b877c
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,40 @@
+from django.http import HttpResponse
+from django.conf import settings
+from django.test import SimpleTestCase
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={},
+    INSTALLED_APPS=[],
+    SECRET_KEY='dummy-key'
+)
+
+class HttpResponseMemoryViewTest(SimpleTestCase):
+    def test_memoryview_content(self):
+        # Test with string content
+        response = HttpResponse("My Content")
+        self.assertEqual(response.content, b'My Content')
+
+        # Test with bytes content
+        response = HttpResponse(b"My Content")
+        self.assertEqual(response.content, b'My Content')
+
+        # Test with memoryview content
+        response = HttpResponse(memoryview(b"My Content"))
+        self.assertEqual(response.content, b'My Content')
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Run the test
+    test = HttpResponseMemoryViewTest()
+    test._pre_setup()
+    try:
+        test.test_memoryview_content()
+        print("Test passed successfully!")
+    except Exception as e:
+        print(f"Test failed: {e}")
+    finally:
+        test._post_teardown()
\ No newline at end of file
