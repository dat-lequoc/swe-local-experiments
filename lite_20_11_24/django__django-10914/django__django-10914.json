{
  "instance_id": "django__django-10914",
  "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..1c7f2a2cc0\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,49 @@\n+import os\n+import tempfile\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    MEDIA_ROOT=tempfile.mkdtemp(),\n+    FILE_UPLOAD_PERMISSIONS=0o644,\n+    SECRET_KEY='test-key'\n+)\n+\n+def test_edge_cases():\n+    storage = FileSystemStorage()\n+    \n+    # Test empty file\n+    empty_file = SimpleUploadedFile(\"empty.txt\", b\"\")\n+    empty_file_name = storage.save(\"empty.txt\", empty_file)\n+    empty_file_path = storage.path(empty_file_name)\n+    empty_file_perms = oct(os.stat(empty_file_path).st_mode & 0o777)\n+    print(f\"Empty file permissions: {empty_file_perms}\")\n+    \n+    # Test file with special characters in name\n+    special_file = SimpleUploadedFile(\"special!@#$%^&*.txt\", b\"Special content\")\n+    special_file_name = storage.save(\"special!@#$%^&*.txt\", special_file)\n+    special_file_path = storage.path(special_file_name)\n+    special_file_perms = oct(os.stat(special_file_path).st_mode & 0o777)\n+    print(f\"Special chars file permissions: {special_file_perms}\")\n+    \n+    # Test file in subdirectory\n+    os.makedirs(os.path.join(settings.MEDIA_ROOT, \"subdir\"), exist_ok=True)\n+    subdir_file = SimpleUploadedFile(\"subdir/test.txt\", b\"Subdir content\")\n+    subdir_file_name = storage.save(\"subdir/test.txt\", subdir_file)\n+    subdir_file_path = storage.path(subdir_file_name)\n+    subdir_file_perms = oct(os.stat(subdir_file_path).st_mode & 0o777)\n+    print(f\"Subdir file permissions: {subdir_file_perms}\")\n+    \n+    # Test file with exactly FILE_UPLOAD_MAX_MEMORY_SIZE bytes\n+    threshold_size = getattr(settings, 'FILE_UPLOAD_MAX_MEMORY_SIZE', 2621440)\n+    threshold_file = SimpleUploadedFile(\"threshold.txt\", b\"x\" * threshold_size)\n+    threshold_file_name = storage.save(\"threshold.txt\", threshold_file)\n+    threshold_file_path = storage.path(threshold_file_name)\n+    threshold_file_perms = oct(os.stat(threshold_file_path).st_mode & 0o777)\n+    print(f\"Threshold size file permissions: {threshold_file_perms}\")\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..e086cbfe8c\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,37 @@\n+import os\n+import tempfile\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    MEDIA_ROOT=tempfile.mkdtemp(),\n+    FILE_UPLOAD_PERMISSIONS=0o644,\n+    SECRET_KEY='test-key'\n+)\n+\n+def test_file_permissions():\n+    storage = FileSystemStorage()\n+    \n+    # Test small file (MemoryUploadedFile)\n+    small_file = SimpleUploadedFile(\"small.txt\", b\"Small file content\")\n+    small_file_name = storage.save(\"small.txt\", small_file)\n+    small_file_path = storage.path(small_file_name)\n+    small_file_perms = oct(os.stat(small_file_path).st_mode & 0o777)\n+    print(f\"Small file permissions: {small_file_perms}\")\n+    \n+    # Test large file (TemporaryUploadedFile)\n+    with tempfile.NamedTemporaryFile() as tmp:\n+        tmp.write(b\"Large file content\" * 1000)  # Make it larger than memory buffer\n+        tmp.seek(0)\n+        large_file = TemporaryUploadedFile(\"large.txt\", \"text/plain\", tmp.tell(), None)\n+        large_file.file = tmp\n+        large_file_name = storage.save(\"large.txt\", large_file)\n+        large_file_path = storage.path(large_file_name)\n+        large_file_perms = oct(os.stat(large_file_path).st_mode & 0o777)\n+        print(f\"Large file permissions: {large_file_perms}\")\n+\n+if __name__ == '__main__':\n+    test_file_permissions()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}