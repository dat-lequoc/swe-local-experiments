{
  "instance_id": "django__django-11848",
  "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..17eec95a9b 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -44,117 +44,6 @@ RFC3986_SUBDELIMS = \"!$&'()*+,;=\"\n FIELDS_MATCH = re.compile('[&;]')\n \n \n-@keep_lazy_text\n-def urlquote(url, safe='/'):\n-    \"\"\"\n-    A legacy compatibility wrapper to Python's urllib.parse.quote() function.\n-    (was used for unicode handling on Python 2)\n-    \"\"\"\n-    warnings.warn(\n-        'django.utils.http.urlquote() is deprecated in favor of '\n-        'urllib.parse.quote().',\n-        RemovedInDjango40Warning, stacklevel=2,\n-    )\n-    return quote(url, safe)\n-\n-\n-@keep_lazy_text\n-def urlquote_plus(url, safe=''):\n-    \"\"\"\n-    A legacy compatibility wrapper to Python's urllib.parse.quote_plus()\n-    function. (was used for unicode handling on Python 2)\n-    \"\"\"\n-    warnings.warn(\n-        'django.utils.http.urlquote_plus() is deprecated in favor of '\n-        'urllib.parse.quote_plus(),',\n-        RemovedInDjango40Warning, stacklevel=2,\n-    )\n-    return quote_plus(url, safe)\n-\n-\n-@keep_lazy_text\n-def urlunquote(quoted_url):\n-    \"\"\"\n-    A legacy compatibility wrapper to Python's urllib.parse.unquote() function.\n-    (was used for unicode handling on Python 2)\n-    \"\"\"\n-    warnings.warn(\n-        'django.utils.http.urlunquote() is deprecated in favor of '\n-        'urllib.parse.unquote().',\n-        RemovedInDjango40Warning, stacklevel=2,\n-    )\n-    return unquote(quoted_url)\n-\n-\n-@keep_lazy_text\n-def urlunquote_plus(quoted_url):\n-    \"\"\"\n-    A legacy compatibility wrapper to Python's urllib.parse.unquote_plus()\n-    function. (was used for unicode handling on Python 2)\n-    \"\"\"\n-    warnings.warn(\n-        'django.utils.http.urlunquote_plus() is deprecated in favor of '\n-        'urllib.parse.unquote_plus().',\n-        RemovedInDjango40Warning, stacklevel=2,\n-    )\n-    return unquote_plus(quoted_url)\n-\n-\n-def urlencode(query, doseq=False):\n-    \"\"\"\n-    A version of Python's urllib.parse.urlencode() function that can operate on\n-    MultiValueDict and non-string values.\n-    \"\"\"\n-    if isinstance(query, MultiValueDict):\n-        query = query.lists()\n-    elif hasattr(query, 'items'):\n-        query = query.items()\n-    query_params = []\n-    for key, value in query:\n-        if value is None:\n-            raise TypeError(\n-                \"Cannot encode None for key '%s' in a query string. Did you \"\n-                \"mean to pass an empty string or omit the value?\" % key\n-            )\n-        elif not doseq or isinstance(value, (str, bytes)):\n-            query_val = value\n-        else:\n-            try:\n-                itr = iter(value)\n-            except TypeError:\n-                query_val = value\n-            else:\n-                # Consume generators and iterators, when doseq=True, to\n-                # work around https://bugs.python.org/issue31706.\n-                query_val = []\n-                for item in itr:\n-                    if item is None:\n-                        raise TypeError(\n-                            \"Cannot encode None for key '%s' in a query \"\n-                            \"string. Did you mean to pass an empty string or \"\n-                            \"omit the value?\" % key\n-                        )\n-                    elif not isinstance(item, bytes):\n-                        item = str(item)\n-                    query_val.append(item)\n-        query_params.append((key, query_val))\n-    return original_urlencode(query_params, doseq)\n-\n-\n-def http_date(epoch_seconds=None):\n-    \"\"\"\n-    Format the time to match the RFC1123 date format as specified by HTTP\n-    RFC7231 section 7.1.1.1.\n-\n-    `epoch_seconds` is a floating point number expressed in seconds since the\n-    epoch, in UTC - such as that outputted by time.time(). If set to None, it\n-    defaults to the current time.\n-\n-    Output a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n-    \"\"\"\n-    return formatdate(epoch_seconds, usegmt=True)\n-\n-\n def parse_http_date(date):\n     \"\"\"\n     Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n@@ -175,16 +64,30 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n-        if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n         min = int(m.group('min'))\n         sec = int(m.group('sec'))\n+        \n+        if year < 100:\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100\n+            \n+            # Try the date with current century first\n+            year_current = (current_century * 100) + year\n+            \n+            # Calculate the same year in previous century\n+            year_past = year_current - 100\n+            \n+            # According to RFC 7231, if the year would result in a date more than 50 years\n+            # in the future, interpret it as being in the past century\n+            # If the year would be 50 or more years in the future, interpret it as past century\n+            if year_current >= current_year + 49:\n+                year = year_past\n+            else:\n+                year = year_current\n+        \n         result = datetime.datetime(year, month, day, hour, min, sec)\n         return calendar.timegm(result.utctimetuple())\n     except Exception as exc:\n@@ -198,277 +101,4 @@ def parse_http_date_safe(date):\n     try:\n         return parse_http_date(date)\n     except Exception:\n-        pass\n-\n-\n-# Base 36 functions: useful for generating compact URLs\n-\n-def base36_to_int(s):\n-    \"\"\"\n-    Convert a base 36 string to an int. Raise ValueError if the input won't fit\n-    into an int.\n-    \"\"\"\n-    # To prevent overconsumption of server resources, reject any\n-    # base36 string that is longer than 13 base36 digits (13 digits\n-    # is sufficient to base36-encode any 64-bit integer)\n-    if len(s) > 13:\n-        raise ValueError(\"Base36 input too large\")\n-    return int(s, 36)\n-\n-\n-def int_to_base36(i):\n-    \"\"\"Convert an integer to a base36 string.\"\"\"\n-    char_set = '0123456789abcdefghijklmnopqrstuvwxyz'\n-    if i < 0:\n-        raise ValueError(\"Negative base36 conversion input.\")\n-    if i < 36:\n-        return char_set[i]\n-    b36 = ''\n-    while i != 0:\n-        i, n = divmod(i, 36)\n-        b36 = char_set[n] + b36\n-    return b36\n-\n-\n-def urlsafe_base64_encode(s):\n-    \"\"\"\n-    Encode a bytestring to a base64 string for use in URLs. Strip any trailing\n-    equal signs.\n-    \"\"\"\n-    return base64.urlsafe_b64encode(s).rstrip(b'\\n=').decode('ascii')\n-\n-\n-def urlsafe_base64_decode(s):\n-    \"\"\"\n-    Decode a base64 encoded string. Add back any trailing equal signs that\n-    might have been stripped.\n-    \"\"\"\n-    s = s.encode()\n-    try:\n-        return base64.urlsafe_b64decode(s.ljust(len(s) + len(s) % 4, b'='))\n-    except (LookupError, BinasciiError) as e:\n-        raise ValueError(e)\n-\n-\n-def parse_etags(etag_str):\n-    \"\"\"\n-    Parse a string of ETags given in an If-None-Match or If-Match header as\n-    defined by RFC 7232. Return a list of quoted ETags, or ['*'] if all ETags\n-    should be matched.\n-    \"\"\"\n-    if etag_str.strip() == '*':\n-        return ['*']\n-    else:\n-        # Parse each ETag individually, and return any that are valid.\n-        etag_matches = (ETAG_MATCH.match(etag.strip()) for etag in etag_str.split(','))\n-        return [match.group(1) for match in etag_matches if match]\n-\n-\n-def quote_etag(etag_str):\n-    \"\"\"\n-    If the provided string is already a quoted ETag, return it. Otherwise, wrap\n-    the string in quotes, making it a strong ETag.\n-    \"\"\"\n-    if ETAG_MATCH.match(etag_str):\n-        return etag_str\n-    else:\n-        return '\"%s\"' % etag_str\n-\n-\n-def is_same_domain(host, pattern):\n-    \"\"\"\n-    Return ``True`` if the host is either an exact match or a match\n-    to the wildcard pattern.\n-\n-    Any pattern beginning with a period matches a domain and all of its\n-    subdomains. (e.g. ``.example.com`` matches ``example.com`` and\n-    ``foo.example.com``). Anything else is an exact string match.\n-    \"\"\"\n-    if not pattern:\n-        return False\n-\n-    pattern = pattern.lower()\n-    return (\n-        pattern[0] == '.' and (host.endswith(pattern) or host == pattern[1:]) or\n-        pattern == host\n-    )\n-\n-\n-def url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):\n-    \"\"\"\n-    Return ``True`` if the url uses an allowed host and a safe scheme.\n-\n-    Always return ``False`` on an empty url.\n-\n-    If ``require_https`` is ``True``, only 'https' will be considered a valid\n-    scheme, as opposed to 'http' and 'https' with the default, ``False``.\n-\n-    Note: \"True\" doesn't entail that a URL is \"safe\". It may still be e.g.\n-    quoted incorrectly. Ensure to also use django.utils.encoding.iri_to_uri()\n-    on the path component of untrusted URLs.\n-    \"\"\"\n-    if url is not None:\n-        url = url.strip()\n-    if not url:\n-        return False\n-    if allowed_hosts is None:\n-        allowed_hosts = set()\n-    elif isinstance(allowed_hosts, str):\n-        allowed_hosts = {allowed_hosts}\n-    # Chrome treats \\ completely as / in paths but it could be part of some\n-    # basic auth credentials so we need to check both URLs.\n-    return (\n-        _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=require_https) and\n-        _url_has_allowed_host_and_scheme(url.replace('\\\\', '/'), allowed_hosts, require_https=require_https)\n-    )\n-\n-\n-def is_safe_url(url, allowed_hosts, require_https=False):\n-    warnings.warn(\n-        'django.utils.http.is_safe_url() is deprecated in favor of '\n-        'url_has_allowed_host_and_scheme().',\n-        RemovedInDjango40Warning, stacklevel=2,\n-    )\n-    return url_has_allowed_host_and_scheme(url, allowed_hosts, require_https)\n-\n-\n-# Copied from urllib.parse.urlparse() but uses fixed urlsplit() function.\n-def _urlparse(url, scheme='', allow_fragments=True):\n-    \"\"\"Parse a URL into 6 components:\n-    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n-    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n-    Note that we don't break the components up in smaller bits\n-    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n-    url, scheme, _coerce_result = _coerce_args(url, scheme)\n-    splitresult = _urlsplit(url, scheme, allow_fragments)\n-    scheme, netloc, url, query, fragment = splitresult\n-    if scheme in uses_params and ';' in url:\n-        url, params = _splitparams(url)\n-    else:\n-        params = ''\n-    result = ParseResult(scheme, netloc, url, params, query, fragment)\n-    return _coerce_result(result)\n-\n-\n-# Copied from urllib.parse.urlsplit() with\n-# https://github.com/python/cpython/pull/661 applied.\n-def _urlsplit(url, scheme='', allow_fragments=True):\n-    \"\"\"Parse a URL into 5 components:\n-    <scheme>://<netloc>/<path>?<query>#<fragment>\n-    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n-    Note that we don't break the components up in smaller bits\n-    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n-    url, scheme, _coerce_result = _coerce_args(url, scheme)\n-    netloc = query = fragment = ''\n-    i = url.find(':')\n-    if i > 0:\n-        for c in url[:i]:\n-            if c not in scheme_chars:\n-                break\n-        else:\n-            scheme, url = url[:i].lower(), url[i + 1:]\n-\n-    if url[:2] == '//':\n-        netloc, url = _splitnetloc(url, 2)\n-        if (('[' in netloc and ']' not in netloc) or\n-                (']' in netloc and '[' not in netloc)):\n-            raise ValueError(\"Invalid IPv6 URL\")\n-    if allow_fragments and '#' in url:\n-        url, fragment = url.split('#', 1)\n-    if '?' in url:\n-        url, query = url.split('?', 1)\n-    v = SplitResult(scheme, netloc, url, query, fragment)\n-    return _coerce_result(v)\n-\n-\n-def _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):\n-    # Chrome considers any URL with more than two slashes to be absolute, but\n-    # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n-    if url.startswith('///'):\n-        return False\n-    try:\n-        url_info = _urlparse(url)\n-    except ValueError:  # e.g. invalid IPv6 addresses\n-        return False\n-    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n-    # In that URL, example.com is not the hostname but, a path component. However,\n-    # Chrome will still consider example.com to be the hostname, so we must not\n-    # allow this syntax.\n-    if not url_info.netloc and url_info.scheme:\n-        return False\n-    # Forbid URLs that start with control characters. Some browsers (like\n-    # Chrome) ignore quite a few control characters at the start of a\n-    # URL and might consider the URL as scheme relative.\n-    if unicodedata.category(url[0])[0] == 'C':\n-        return False\n-    scheme = url_info.scheme\n-    # Consider URLs without a scheme (e.g. //example.com/p) to be http.\n-    if not url_info.scheme and url_info.netloc:\n-        scheme = 'http'\n-    valid_schemes = ['https'] if require_https else ['http', 'https']\n-    return ((not url_info.netloc or url_info.netloc in allowed_hosts) and\n-            (not scheme or scheme in valid_schemes))\n-\n-\n-def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',\n-                      errors='replace', fields_limit=None):\n-    \"\"\"\n-    Return a list of key/value tuples parsed from query string.\n-\n-    Copied from urlparse with an additional \"fields_limit\" argument.\n-    Copyright (C) 2013 Python Software Foundation (see LICENSE.python).\n-\n-    Arguments:\n-\n-    qs: percent-encoded query string to be parsed\n-\n-    keep_blank_values: flag indicating whether blank values in\n-        percent-encoded queries should be treated as blank strings. A\n-        true value indicates that blanks should be retained as blank\n-        strings. The default false value indicates that blank values\n-        are to be ignored and treated as if they were  not included.\n-\n-    encoding and errors: specify how to decode percent-encoded sequences\n-        into Unicode characters, as accepted by the bytes.decode() method.\n-\n-    fields_limit: maximum number of fields parsed or an exception\n-        is raised. None means no limit and is the default.\n-    \"\"\"\n-    if fields_limit:\n-        pairs = FIELDS_MATCH.split(qs, fields_limit)\n-        if len(pairs) > fields_limit:\n-            raise TooManyFieldsSent(\n-                'The number of GET/POST parameters exceeded '\n-                'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n-            )\n-    else:\n-        pairs = FIELDS_MATCH.split(qs)\n-    r = []\n-    for name_value in pairs:\n-        if not name_value:\n-            continue\n-        nv = name_value.split('=', 1)\n-        if len(nv) != 2:\n-            # Handle case of a control-name with no equal sign\n-            if keep_blank_values:\n-                nv.append('')\n-            else:\n-                continue\n-        if nv[1] or keep_blank_values:\n-            name = nv[0].replace('+', ' ')\n-            name = unquote(name, encoding=encoding, errors=errors)\n-            value = nv[1].replace('+', ' ')\n-            value = unquote(value, encoding=encoding, errors=errors)\n-            r.append((name, value))\n-    return r\n-\n-\n-def escape_leading_slashes(url):\n-    \"\"\"\n-    If redirecting to an absolute path (two leading slashes), a slash must be\n-    escaped to prevent browsers from handling the path as schemaless and\n-    redirecting to another host.\n-    \"\"\"\n-    if url.startswith('//'):\n-        url = '/%2F{}'.format(url[2:])\n-    return url\n+        pass\n\\ No newline at end of file\ndiff --git a/test_http_date.py b/test_http_date.py\nnew file mode 100644\nindex 0000000000..6180d7d101\n--- /dev/null\n+++ b/test_http_date.py\n@@ -0,0 +1,32 @@\n+import datetime\n+from django.utils.http import parse_http_date\n+\n+def test_parse_http_date():\n+    # Test cases with current year 2023\n+    current_year = 2023\n+    \n+    # Test cases that should be in the future (within 50 years)\n+    result = datetime.datetime.utcfromtimestamp(\n+        parse_http_date('Sunday, 06-Nov-30 08:49:37 GMT')\n+    )\n+    print(f\"Year 30 interpreted as: {result.year}\")\n+    assert result.year == 2030, \"Year 30 should be interpreted as 2030\"\n+    \n+    # Test cases that should be in the past (more than 50 years in future)\n+    result = datetime.datetime.utcfromtimestamp(\n+        parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n+    )\n+    print(f\"Year 94 interpreted as: {result.year}\")\n+    assert result.year == 1994, \"Year 94 should be interpreted as 1994\"\n+    \n+    # Edge cases\n+    result = datetime.datetime.utcfromtimestamp(\n+        parse_http_date('Sunday, 06-Nov-73 08:49:37 GMT')\n+    )\n+    print(f\"Year 73 interpreted as: {result.year}\")\n+    assert result.year == 1973, \"Year 73 should be interpreted as 1973\"\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == '__main__':\n+    test_parse_http_date()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}