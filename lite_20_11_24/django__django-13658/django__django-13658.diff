diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 1ba093e51f..f0ebd0b420 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -186,10 +186,15 @@ class ManagementUtility:
     Encapsulate the logic of the django-admin and manage.py utilities.
     """
     def __init__(self, argv=None):
-        self.argv = argv or sys.argv[:]
-        self.prog_name = os.path.basename(self.argv[0])
-        if self.prog_name == '__main__.py':
-            self.prog_name = 'python -m django'
+        self.argv = argv if argv is not None else sys.argv[:]
+        if not self.argv or self.argv[0] is None:
+            self.prog_name = 'django'
+            if not self.argv:
+                self.argv = ['django']
+        else:
+            self.prog_name = os.path.basename(self.argv[0])
+            if self.prog_name == '__main__.py':
+                self.prog_name = 'python -m django'
         self.settings_exception = None
 
     def main_help_text(self, commands_only=False):
@@ -344,7 +349,11 @@ class ManagementUtility:
         # Preprocess options to extract --settings and --pythonpath.
         # These options could affect the commands that are available, so they
         # must be processed early.
-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)
+        parser = CommandParser(
+            prog=self.prog_name,
+            usage='%(prog)s subcommand [options] [args]',
+            add_help=False,
+            allow_abbrev=False)
         parser.add_argument('--settings')
         parser.add_argument('--pythonpath')
         parser.add_argument('args', nargs='*')  # catch-all
diff --git a/tests/edge_cases.py b/tests/edge_cases.py
new file mode 100644
index 0000000000..ebc0a34e83
--- /dev/null
+++ b/tests/edge_cases.py
@@ -0,0 +1,27 @@
+import os
+import sys
+from django.core.management import ManagementUtility
+
+def test_edge_cases():
+    test_cases = [
+        ([None, '--version'], 'django'),  # None as argv[0]
+        ([], 'django'),  # Empty argv list
+        (['/path/to/manage.py'], 'manage.py'),  # Normal path
+        (['__main__.py'], 'python -m django'),  # __main__.py case
+        (['/path/with/__main__.py'], 'python -m django'),  # __main__.py in path
+    ]
+    
+    for argv, expected_prog_name in test_cases:
+        utility = ManagementUtility(argv)
+        actual = utility.prog_name
+        if actual != expected_prog_name:
+            print(f"Test failed: argv={argv}, expected={expected_prog_name}, got={actual}")
+            return False
+        
+    print("All edge cases passed successfully!")
+    return True
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+    test_edge_cases()
\ No newline at end of file
diff --git a/tests/reproduce_error.py b/tests/reproduce_error.py
new file mode 100644
index 0000000000..607902d886
--- /dev/null
+++ b/tests/reproduce_error.py
@@ -0,0 +1,21 @@
+import os
+import sys
+from django.core.management import ManagementUtility
+
+def test_none_argv():
+    # Test with None as argv[0]
+    argv = [None, '--version']
+    utility = ManagementUtility(argv)
+    
+    try:
+        utility.execute()
+        print("Test passed: ManagementUtility works with None argv[0]")
+        return True
+    except Exception as e:
+        print(f"Test failed: {str(e)}")
+        return False
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+    test_none_argv()
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..7963625e8e
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,17 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
