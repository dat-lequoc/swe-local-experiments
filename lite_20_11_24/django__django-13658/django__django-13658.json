{
  "instance_id": "django__django-13658",
  "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..f0ebd0b420 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -186,10 +186,15 @@ class ManagementUtility:\n     Encapsulate the logic of the django-admin and manage.py utilities.\n     \"\"\"\n     def __init__(self, argv=None):\n-        self.argv = argv or sys.argv[:]\n-        self.prog_name = os.path.basename(self.argv[0])\n-        if self.prog_name == '__main__.py':\n-            self.prog_name = 'python -m django'\n+        self.argv = argv if argv is not None else sys.argv[:]\n+        if not self.argv or self.argv[0] is None:\n+            self.prog_name = 'django'\n+            if not self.argv:\n+                self.argv = ['django']\n+        else:\n+            self.prog_name = os.path.basename(self.argv[0])\n+            if self.prog_name == '__main__.py':\n+                self.prog_name = 'python -m django'\n         self.settings_exception = None\n \n     def main_help_text(self, commands_only=False):\n@@ -344,7 +349,11 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\ndiff --git a/tests/edge_cases.py b/tests/edge_cases.py\nnew file mode 100644\nindex 0000000000..ebc0a34e83\n--- /dev/null\n+++ b/tests/edge_cases.py\n@@ -0,0 +1,27 @@\n+import os\n+import sys\n+from django.core.management import ManagementUtility\n+\n+def test_edge_cases():\n+    test_cases = [\n+        ([None, '--version'], 'django'),  # None as argv[0]\n+        ([], 'django'),  # Empty argv list\n+        (['/path/to/manage.py'], 'manage.py'),  # Normal path\n+        (['__main__.py'], 'python -m django'),  # __main__.py case\n+        (['/path/with/__main__.py'], 'python -m django'),  # __main__.py in path\n+    ]\n+    \n+    for argv, expected_prog_name in test_cases:\n+        utility = ManagementUtility(argv)\n+        actual = utility.prog_name\n+        if actual != expected_prog_name:\n+            print(f\"Test failed: argv={argv}, expected={expected_prog_name}, got={actual}\")\n+            return False\n+        \n+    print(\"All edge cases passed successfully!\")\n+    return True\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/tests/reproduce_error.py b/tests/reproduce_error.py\nnew file mode 100644\nindex 0000000000..607902d886\n--- /dev/null\n+++ b/tests/reproduce_error.py\n@@ -0,0 +1,21 @@\n+import os\n+import sys\n+from django.core.management import ManagementUtility\n+\n+def test_none_argv():\n+    # Test with None as argv[0]\n+    argv = [None, '--version']\n+    utility = ManagementUtility(argv)\n+    \n+    try:\n+        utility.execute()\n+        print(\"Test passed: ManagementUtility works with None argv[0]\")\n+        return True\n+    except Exception as e:\n+        print(f\"Test failed: {str(e)}\")\n+        return False\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+    test_none_argv()\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..7963625e8e\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,17 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}