{
  "instance_id": "django__django-12856",
  "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 64bd60484e..9ffe3da101 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -1,5 +1,7 @@\n from enum import Enum\n \n+from django.core.checks import Error\n+from django.core.exceptions import FieldDoesNotExist\n from django.db.models.query_utils import Q\n from django.db.models.sql.query import Query\n \n@@ -95,6 +97,27 @@ class UniqueConstraint(BaseConstraint):\n         self.deferrable = deferrable\n         super().__init__(name)\n \n+    def check(self, model, **kwargs):\n+        \"\"\"Check if all fields exist in the model.\"\"\"\n+        from django.core.checks import Error\n+        from django.core.exceptions import FieldDoesNotExist\n+        \n+        errors = []\n+        for field_name in self.fields:\n+            try:\n+                field = model._meta.get_field(field_name)\n+            except FieldDoesNotExist:\n+                errors.append(\n+                    Error(\n+                        \"'%s' refers to the nonexistent field '%s'.\" % (\n+                            'UNIQUE constraint', field_name,\n+                        ),\n+                        obj=model,\n+                        id='models.E012',\n+                    )\n+                )\n+        return errors\n+\n     def _get_condition_sql(self, model, schema_editor):\n         if self.condition is None:\n             return None\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..cc59e4f866\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,61 @@\n+import os\n+import sys\n+import django\n+from django.core.checks import Error\n+from django.db import models\n+\n+# Add the testbed directory to Python path\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+def test_unique_constraint_nonexistent_field():\n+    \"\"\"Test that UniqueConstraint raises an error for non-existent fields.\"\"\"\n+    class TestModel(models.Model):\n+        name = models.CharField(max_length=100)\n+        \n+        class Meta:\n+            app_label = 'tests'\n+            constraints = [\n+                models.UniqueConstraint(fields=['name', 'nonexistent_field'], name='unique_name')\n+            ]\n+    \n+    # Get the constraint instance\n+    constraint = TestModel._meta.constraints[0]\n+    # Call check directly on the constraint\n+    errors = constraint.check(TestModel)\n+    field_errors = [e for e in errors if isinstance(e, Error) and e.id == 'models.E012']\n+    \n+    if field_errors:\n+        print(\"Test passed: Found expected error for non-existent field:\")\n+        for error in field_errors:\n+            print(f\"Error: {error.msg} (id: {error.id})\")\n+    else:\n+        print(\"Test failed: No error found for non-existent field\")\n+\n+def test_unique_constraint_empty_fields():\n+    \"\"\"Test that UniqueConstraint raises an error for empty fields list.\"\"\"\n+    try:\n+        class TestModel(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                app_label = 'tests'\n+                constraints = [\n+                    models.UniqueConstraint(fields=[], name='unique_name')\n+                ]\n+        print(\"Test failed: No error raised for empty fields list\")\n+    except ValueError as e:\n+        if \"At least one field is required\" in str(e):\n+            print(\"Test passed: Correct error raised for empty fields list\")\n+        else:\n+            print(f\"Test failed: Unexpected error message: {e}\")\n+\n+if __name__ == '__main__':\n+    print(\"Running edge case tests for UniqueConstraint...\")\n+    print(\"\\nTest 1: Non-existent field\")\n+    test_unique_constraint_nonexistent_field()\n+    print(\"\\nTest 2: Empty fields list\")\n+    test_unique_constraint_empty_fields()\n\\ No newline at end of file\ndiff --git a/tests/constraints/reproduce_error.py b/tests/constraints/reproduce_error.py\nnew file mode 100644\nindex 0000000000..bb130fea19\n--- /dev/null\n+++ b/tests/constraints/reproduce_error.py\n@@ -0,0 +1,26 @@\n+import os\n+import sys\n+import django\n+from django.core.checks import Error\n+from django.db import models\n+\n+sys.path.append('/testbed')\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+# Model with non-existent field in UniqueConstraint\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=['name', 'nonexistent_field'], name='unique_name')\n+        ]\n+\n+# Run the model checks\n+errors = TestModel.check()\n+\n+# Print any errors found\n+for error in errors:\n+    if isinstance(error, Error):\n+        print(f\"Error found: {error.msg} (id: {error.id})\")\n\\ No newline at end of file\ndiff --git a/tests/test_settings.py b/tests/test_settings.py\nnew file mode 100644\nindex 0000000000..77a17fbfbf\n--- /dev/null\n+++ b/tests/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'dummy'\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}