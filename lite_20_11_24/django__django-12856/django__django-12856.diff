diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..9ffe3da101 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -1,5 +1,7 @@
 from enum import Enum
 
+from django.core.checks import Error
+from django.core.exceptions import FieldDoesNotExist
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
 
@@ -95,6 +97,27 @@ class UniqueConstraint(BaseConstraint):
         self.deferrable = deferrable
         super().__init__(name)
 
+    def check(self, model, **kwargs):
+        """Check if all fields exist in the model."""
+        from django.core.checks import Error
+        from django.core.exceptions import FieldDoesNotExist
+        
+        errors = []
+        for field_name in self.fields:
+            try:
+                field = model._meta.get_field(field_name)
+            except FieldDoesNotExist:
+                errors.append(
+                    Error(
+                        "'%s' refers to the nonexistent field '%s'." % (
+                            'UNIQUE constraint', field_name,
+                        ),
+                        obj=model,
+                        id='models.E012',
+                    )
+                )
+        return errors
+
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
             return None
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..cc59e4f866
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,61 @@
+import os
+import sys
+import django
+from django.core.checks import Error
+from django.db import models
+
+# Add the testbed directory to Python path
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+django.setup()
+
+def test_unique_constraint_nonexistent_field():
+    """Test that UniqueConstraint raises an error for non-existent fields."""
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'tests'
+            constraints = [
+                models.UniqueConstraint(fields=['name', 'nonexistent_field'], name='unique_name')
+            ]
+    
+    # Get the constraint instance
+    constraint = TestModel._meta.constraints[0]
+    # Call check directly on the constraint
+    errors = constraint.check(TestModel)
+    field_errors = [e for e in errors if isinstance(e, Error) and e.id == 'models.E012']
+    
+    if field_errors:
+        print("Test passed: Found expected error for non-existent field:")
+        for error in field_errors:
+            print(f"Error: {error.msg} (id: {error.id})")
+    else:
+        print("Test failed: No error found for non-existent field")
+
+def test_unique_constraint_empty_fields():
+    """Test that UniqueConstraint raises an error for empty fields list."""
+    try:
+        class TestModel(models.Model):
+            name = models.CharField(max_length=100)
+            
+            class Meta:
+                app_label = 'tests'
+                constraints = [
+                    models.UniqueConstraint(fields=[], name='unique_name')
+                ]
+        print("Test failed: No error raised for empty fields list")
+    except ValueError as e:
+        if "At least one field is required" in str(e):
+            print("Test passed: Correct error raised for empty fields list")
+        else:
+            print(f"Test failed: Unexpected error message: {e}")
+
+if __name__ == '__main__':
+    print("Running edge case tests for UniqueConstraint...")
+    print("\nTest 1: Non-existent field")
+    test_unique_constraint_nonexistent_field()
+    print("\nTest 2: Empty fields list")
+    test_unique_constraint_empty_fields()
\ No newline at end of file
diff --git a/tests/constraints/reproduce_error.py b/tests/constraints/reproduce_error.py
new file mode 100644
index 0000000000..bb130fea19
--- /dev/null
+++ b/tests/constraints/reproduce_error.py
@@ -0,0 +1,26 @@
+import os
+import sys
+import django
+from django.core.checks import Error
+from django.db import models
+
+sys.path.append('/testbed')
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')
+django.setup()
+
+# Model with non-existent field in UniqueConstraint
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(fields=['name', 'nonexistent_field'], name='unique_name')
+        ]
+
+# Run the model checks
+errors = TestModel.check()
+
+# Print any errors found
+for error in errors:
+    if isinstance(error, Error):
+        print(f"Error found: {error.msg} (id: {error.id})")
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..77a17fbfbf
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
