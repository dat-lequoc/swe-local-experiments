{
  "instance_id": "django__django-10924",
  "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..5601c901fe 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,11 +1663,18 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.path = path\n+        self.match, self.recursive = match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def get_path(self):\n+        \"\"\"\n+        Return the path value. If path is a callable, evaluate it and return the result.\n+        \"\"\"\n+        return self.path() if callable(self.path) else self.path\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1709,7 +1716,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self.get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\ndiff --git a/tests/model_fields/test_filepath_callable.py b/tests/model_fields/test_filepath_callable.py\nnew file mode 100644\nindex 0000000000..59be2acb9b\n--- /dev/null\n+++ b/tests/model_fields/test_filepath_callable.py\n@@ -0,0 +1,70 @@\n+import os\n+import tempfile\n+import django\n+from django.conf import settings\n+\n+# Configure test settings before importing models\n+TEMP_DIR = tempfile.mkdtemp()\n+TEST_SETTINGS = {\n+    'MEDIA_ROOT': TEMP_DIR,\n+    'INSTALLED_APPS': ['django.contrib.contenttypes', 'tests.model_fields'],\n+    'DATABASES': {\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    'USE_TZ': False,\n+}\n+\n+if not settings.configured:\n+    settings.configure(**TEST_SETTINGS)\n+    django.setup()\n+\n+from django.test import TestCase\n+from django.db import models\n+from django.test.utils import override_settings\n+\n+class LocalFiles(models.Model):\n+    name = models.CharField(max_length=255)\n+    file = models.FilePathField(path=lambda: os.path.join(settings.MEDIA_ROOT, 'example_dir'))\n+\n+    class Meta:\n+        app_label = 'model_fields'\n+\n+@override_settings(**TEST_SETTINGS)\n+class FilePathFieldCallableTests(TestCase):\n+    def setUp(self):\n+        self.media_root = settings.MEDIA_ROOT\n+        self.example_dir = os.path.join(self.media_root, 'example_dir')\n+        os.makedirs(self.example_dir, exist_ok=True)\n+        with open(os.path.join(self.example_dir, 'test.txt'), 'w') as f:\n+            f.write('test content')\n+\n+    def test_callable_path(self):\n+        # Create a model instance\n+        local_file = LocalFiles(name='test')\n+        \n+        # Get the form field\n+        form_field = local_file._meta.get_field('file').formfield()\n+        \n+        # Verify that the path is correctly resolved\n+        self.assertEqual(form_field.path, os.path.join(settings.MEDIA_ROOT, 'example_dir'))\n+\n+    def test_path_resolution(self):\n+        # Get the field instance\n+        field = LocalFiles._meta.get_field('file')\n+        \n+        # Test get_path() method\n+        resolved_path = field.get_path()\n+        self.assertEqual(resolved_path, os.path.join(settings.MEDIA_ROOT, 'example_dir'))\n+\n+    def test_path_in_form(self):\n+        # Create a model instance\n+        local_file = LocalFiles(name='test')\n+        \n+        # Get the form field\n+        form_field = local_file._meta.get_field('file').formfield()\n+        \n+        # Verify that the choices are generated from the correct path\n+        self.assertTrue(any('test.txt' in str(choice) for choice in form_field.choices))\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}