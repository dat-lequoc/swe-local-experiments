diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7649c39262..9a8099b48b 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -353,7 +353,12 @@ class SQLCompiler:
             # not taken into account so we strip it. When this entire method
             # is refactored into expressions, then we can check each part as we
             # generate it.
-            without_ordering = self.ordering_parts.search(sql).group(1)
+            # Normalize the SQL by removing newlines and extra whitespace
+            sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+            match = self.ordering_parts.search(sql_oneline)
+            if not match:
+                continue
+            without_ordering = match.group(1)
             params_hash = make_hashable(params)
             if (without_ordering, params_hash) in seen:
                 continue
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..5e816ac3d6
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,71 @@
+from django.db.models.sql.compiler import SQLCompiler
+
+def test_edge_cases():
+    compiler = SQLCompiler(None, None, None)
+    
+    # Test case 1: Empty SQL
+    sql = ""
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is None
+    
+    # Test case 2: SQL with only whitespace
+    sql = "   \n   \r   \t   "
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is None
+    
+    # Test case 3: SQL with mixed line endings
+    sql = "case\rwhen\nstatus\r\nin\n\r('active')\rthen\n1\relse\r\n0\rend\nASC"
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is not None
+    without_ordering = match.group(1)
+    assert without_ordering == "case when status in ('active') then 1 else 0 end"
+    
+    # Test case 4: SQL with unicode characters
+    sql = """
+        case when status = 'активный' 
+             then 'приоритет'
+             else 'обычный' end DESC
+    """
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is not None
+    without_ordering = match.group(1)
+    assert "активный" in without_ordering
+    assert "приоритет" in without_ordering
+    assert "обычный" in without_ordering
+    
+    # Test case 5: SQL with multiple ASC/DESC occurrences
+    sql = """
+        case when status = 'DESC'
+             then 'ASC' 
+             else 'DESC' end ASC
+    """
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is not None
+    without_ordering = match.group(1)
+    assert "status = 'DESC'" in without_ordering
+    assert "'ASC'" in without_ordering
+    assert "'DESC'" in without_ordering
+    
+    # Test case 6: SQL with comments
+    sql = """
+        -- This is a comment with ASC
+        case when status = 'active' -- Another comment DESC
+             then 1 /* Comment with ASC */
+             else 0 end DESC -- Final comment
+    """
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is not None
+    without_ordering = match.group(1)
+    assert "status = 'active'" in without_ordering
+    assert "then 1" in without_ordering
+    assert "else 0 end" in without_ordering
+
+if __name__ == '__main__':
+    test_edge_cases()
+    print("All edge cases passed!")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..06ae338d5c
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,56 @@
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.expressions import RawSQL
+
+def test_multiline_rawsql_ordering():
+    # Create a mock compiler instance
+    compiler = SQLCompiler(None, None, None)
+    
+    # Test case 1: Single line SQL
+    sql = "case when status = 'active' then 1 else 0 end ASC"
+    sql_oneline = ' '.join(sql.replace('\r', ' ').replace('\n', ' ').split())
+    match = compiler.ordering_parts.search(sql_oneline)
+    assert match is not None
+    without_ordering = match.group(1)
+    assert without_ordering == "case when status = 'active' then 1 else 0 end"
+
+    # Test case 2: Multiline SQL with same ending but different content
+    sql1 = """
+        case when status in ('accepted', 'verification')
+             then 2 else 1 end DESC
+    """
+    sql2 = """
+        case when status in ('pending', 'review')
+             then 2 else 1 end DESC
+    """
+    
+    sql1_oneline = ' '.join(sql1.replace('\r', ' ').replace('\n', ' ').split())
+    sql2_oneline = ' '.join(sql2.replace('\r', ' ').replace('\n', ' ').split())
+    
+    match1 = compiler.ordering_parts.search(sql1_oneline)
+    match2 = compiler.ordering_parts.search(sql2_oneline)
+    
+    assert match1 is not None
+    assert match2 is not None
+    
+    without_ordering1 = match1.group(1)
+    without_ordering2 = match2.group(1)
+    
+    # Verify that different SQL statements are treated as different even with same ending
+    assert without_ordering1 != without_ordering2
+    
+    # Test case 3: Complex multiline SQL with nested conditions
+    sql3 = """
+        case when status in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime)
+             else null end ASC
+    """
+    sql3_oneline = ' '.join(sql3.replace('\r', ' ').replace('\n', ' ').split())
+    match3 = compiler.ordering_parts.search(sql3_oneline)
+    assert match3 is not None
+    without_ordering3 = match3.group(1)
+    assert "accepted_datetime" in without_ordering3
+    assert "preferred_datetime" in without_ordering3
+
+if __name__ == '__main__':
+    test_multiline_rawsql_ordering()
+    print("All tests passed!")
\ No newline at end of file
