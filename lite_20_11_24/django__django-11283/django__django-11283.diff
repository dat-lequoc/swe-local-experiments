diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
index 0e66649695..f199825df0 100644
--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -5,29 +5,68 @@ from django.db.models import Q
 def update_proxy_model_permissions(apps, schema_editor, reverse=False):
     """
     Update the content_type of proxy model permissions to use the ContentType
-    of the proxy model.
+    of the proxy model. Handles duplicate permissions by merging them and preserving
+    user/group assignments.
     """
     Permission = apps.get_model('auth', 'Permission')
     ContentType = apps.get_model('contenttypes', 'ContentType')
+    Group = apps.get_model('auth', 'Group')
+    User = apps.get_model('auth', 'User')
+
+    # Process each proxy model
     for Model in apps.get_models():
         opts = Model._meta
         if not opts.proxy:
             continue
-        proxy_default_permissions_codenames = [
-            '%s_%s' % (action, opts.model_name)
-            for action in opts.default_permissions
-        ]
-        permissions_query = Q(codename__in=proxy_default_permissions_codenames)
-        for codename, name in opts.permissions:
-            permissions_query = permissions_query | Q(codename=codename, name=name)
+
         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
         old_content_type = proxy_content_type if reverse else concrete_content_type
         new_content_type = concrete_content_type if reverse else proxy_content_type
-        Permission.objects.filter(
-            permissions_query,
-            content_type=old_content_type,
-        ).update(content_type=new_content_type)
+
+        # Get all permissions for this model
+        all_perms = Permission.objects.filter(
+            Q(content_type=old_content_type) | Q(content_type=new_content_type)
+        ).select_related('content_type')
+
+        # Process permissions by codename
+        processed_codenames = set()
+        for perm in all_perms:
+            if perm.codename in processed_codenames:
+                continue
+            processed_codenames.add(perm.codename)
+
+            # Find all permissions with this codename
+            duplicate_perms = all_perms.filter(codename=perm.codename).order_by('id')
+            if duplicate_perms.count() <= 1:
+                # If only one permission exists, just update its content_type if needed
+                if perm.content_type != new_content_type:
+                    perm.content_type = new_content_type
+                    perm.save(update_fields=['content_type'])
+                continue
+
+            # Get or create the target permission
+            target_perm = duplicate_perms.filter(content_type=new_content_type).first()
+            if not target_perm:
+                # If no permission exists with new content type, update the first one
+                target_perm = duplicate_perms.first()
+                target_perm.content_type = new_content_type
+                target_perm.save(update_fields=['content_type'])
+
+            # Transfer all relationships to the target permission
+            for other_perm in duplicate_perms.exclude(pk=target_perm.pk):
+                # Transfer group permissions
+                Group.objects.filter(permissions=other_perm).update(
+                    permissions=target_perm
+                )
+
+                # Transfer user permissions
+                User.objects.filter(user_permissions=other_perm).update(
+                    user_permissions=target_perm
+                )
+
+                # Delete the other permission
+                other_perm.delete()
 
 
 def revert_proxy_model_permissions(apps, schema_editor):
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..2f8f2e35c1
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,12 @@
+import os
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+if __name__ == "__main__":
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'
+    django.setup()
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner()
+    failures = test_runner.run_tests(["tests.auth_tests.test_migrations"])
+    exit(bool(failures))
\ No newline at end of file
diff --git a/test_migration.py b/test_migration.py
new file mode 100644
index 0000000000..649f4c022a
--- /dev/null
+++ b/test_migration.py
@@ -0,0 +1,30 @@
+import os
+import django
+from django.db import connection
+from django.test.utils import setup_test_environment
+from django.core.management import call_command
+
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'
+django.setup()
+
+# Set up test environment
+setup_test_environment()
+
+# Create test database
+connection.creation.create_test_db(verbosity=1)
+
+try:
+    # Run migrations
+    call_command('migrate', verbosity=1)
+    
+    # Import and run the migration directly
+    from django.contrib.auth.migrations import update_proxy_model_permissions
+    from django.apps import apps
+    
+    # Run the migration function
+    update_proxy_model_permissions(apps, None)
+    print("Migration completed successfully")
+    
+finally:
+    # Clean up test database
+    connection.creation.destroy_test_db(verbosity=1)
\ No newline at end of file
diff --git a/test_proxy_permissions.py b/test_proxy_permissions.py
new file mode 100644
index 0000000000..636c93dc4c
--- /dev/null
+++ b/test_proxy_permissions.py
@@ -0,0 +1,119 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.apps import apps as global_apps
+
+# Configure Django settings before importing models
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+# Import Django components after setup
+from django.db import connection
+from django.contrib.auth.models import Permission, User, Group
+from django.contrib.contenttypes.models import ContentType
+from django.test import TransactionTestCase
+from django.db.migrations.executor import MigrationExecutor
+
+# Create a proxy model for testing
+class UserProxy(User):
+    class Meta:
+        proxy = True
+        app_label = 'auth'  # Use the same app_label as User to avoid migration issues
+
+class TestProxyPermissions(TransactionTestCase):
+    def setUp(self):
+        super().setUp()
+        # Create concrete content type
+        self.concrete_content_type = ContentType.objects.get_for_model(User)
+        self.proxy_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)
+        
+        # Create test permission on concrete model
+        self.perm = Permission.objects.create(
+            content_type=self.concrete_content_type,
+            codename='test_perm',
+            name='Test Permission'
+        )
+        
+        # Create a duplicate permission (simulating the issue)
+        self.dup_perm = Permission.objects.create(
+            content_type=self.proxy_content_type,
+            codename='test_perm',
+            name='Test Permission'
+        )
+
+        # Create test user and group
+        self.user = User.objects.create_user('testuser', 'test@example.com', 'password')
+        self.group = Group.objects.create(name='testgroup')
+        
+        # Assign permissions to user and group
+        self.user.user_permissions.add(self.perm)
+        self.group.permissions.add(self.dup_perm)
+
+    def test_update_proxy_permissions(self):
+        import importlib
+        update_proxy_permissions = importlib.import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')
+        
+        # Get the migration executor
+        executor = MigrationExecutor(connection)
+        
+        # Run the migration function with the apps from the migration executor
+        update_proxy_permissions.update_proxy_model_permissions(executor.loader.project_state().apps, None)
+        
+        # Verify the results
+        # The permissions should be merged, with users/groups preserved
+        permissions = Permission.objects.filter(codename='test_perm')
+        self.assertEqual(permissions.count(), 1, "Should have exactly one permission after merge")
+        
+        remaining_perm = permissions.first()
+        self.assertEqual(remaining_perm.content_type, self.proxy_content_type, 
+                        "Remaining permission should use proxy model content type")
+        
+        # Verify user permissions were preserved
+        self.user.refresh_from_db()
+        self.assertTrue(self.user.has_perm('auth.test_perm'), 
+                       "User should still have permission after merge")
+        
+        # Verify group permissions were preserved
+        self.group.refresh_from_db()
+        self.assertTrue(self.group.permissions.filter(codename='test_perm').exists(),
+                       "Group should still have permission after merge")
+
+    def test_update_proxy_permissions_reverse(self):
+        """Test the reverse migration"""
+        import importlib
+        update_proxy_permissions = importlib.import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')
+        
+        # Get the migration executor
+        executor = MigrationExecutor(connection)
+        
+        # Run the reverse migration
+        update_proxy_permissions.revert_proxy_model_permissions(executor.loader.project_state().apps, None)
+        
+        # Verify the results
+        permissions = Permission.objects.filter(codename='test_perm')
+        self.assertEqual(permissions.count(), 1, "Should have exactly one permission after reverse")
+        
+        remaining_perm = permissions.first()
+        self.assertEqual(remaining_perm.content_type, self.concrete_content_type,
+                        "Remaining permission should use concrete model content type")
+
+if __name__ == '__main__':
+    # Run the test
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    exit(bool(failures))
\ No newline at end of file
diff --git a/tests/auth_tests/migrations/0001_initial.py b/tests/auth_tests/migrations/0001_initial.py
new file mode 100644
index 0000000000..2b87c19767
--- /dev/null
+++ b/tests/auth_tests/migrations/0001_initial.py
@@ -0,0 +1,32 @@
+from django.db import migrations, models
+from django.contrib.auth import get_user_model
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+        ('auth', '0011_update_proxy_permissions'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='UserProxy',
+            fields=[],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('auth.user',),
+        ),
+        migrations.CreateModel(
+            name='Proxy',
+            fields=[],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('auth.user',),
+        ),
+    ]
\ No newline at end of file
diff --git a/tests/auth_tests/migrations/__init__.py b/tests/auth_tests/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/auth_tests/models.py b/tests/auth_tests/models.py
new file mode 100644
index 0000000000..60bc090659
--- /dev/null
+++ b/tests/auth_tests/models.py
@@ -0,0 +1,9 @@
+from django.contrib.auth.models import User
+
+class UserProxy(User):
+    class Meta:
+        proxy = True
+
+class Proxy(User):
+    class Meta:
+        proxy = True
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..a2e36b1763
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,27 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
