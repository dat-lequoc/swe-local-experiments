{
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -15,7 +15,8 @@\n \n import django\n from django.conf import global_settings\n-from django.core.exceptions import ImproperlyConfigured\n+from django.core.exceptions import ImproperlyConfigured, ValidationError\n+from django.core.validators import URLValidator\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import LazyObject, empty\n \n@@ -109,6 +110,26 @@ def configure(self, default_settings=global_settings, **options):\n             setattr(holder, name, value)\n         self._wrapped = holder\n \n+    @staticmethod\n+    def _add_script_prefix(value):\n+        \"\"\"\n+        Add SCRIPT_NAME prefix to relative paths.\n+\n+        Useful when the app is being served at a subpath and manually prefixing\n+        subpath to STATIC_URL and MEDIA_URL in settings is inconvenient.\n+        \"\"\"\n+        # Don't apply prefix to valid URLs.\n+        try:\n+            URLValidator()(value)\n+            return value\n+        except (ValidationError, AttributeError):\n+            pass\n+        # Don't apply prefix to absolute paths.\n+        if value.startswith('/'):\n+            return value\n+        from django.urls import get_script_prefix\n+        return '%s%s' % (get_script_prefix(), value)\n+\n     @property\n     def configured(self):\n         \"\"\"Return True if the settings have already been configured.\"\"\"\n@@ -128,6 +149,14 @@ def PASSWORD_RESET_TIMEOUT_DAYS(self):\n             )\n         return self.__getattr__('PASSWORD_RESET_TIMEOUT_DAYS')\n \n+    @property\n+    def STATIC_URL(self):\n+        return self._add_script_prefix(self.__getattr__('STATIC_URL'))\n+\n+    @property\n+    def MEDIA_URL(self):\n+        return self._add_script_prefix(self.__getattr__('MEDIA_URL'))\n+\n \n class Settings:\n     def __init__(self, settings_module):\n",
  "test_patch": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -521,7 +521,7 @@ def test_setting_changed(self):\n         defaults_storage = self.storage_class()\n         settings = {\n             'MEDIA_ROOT': 'overridden_media_root',\n-            'MEDIA_URL': 'overridden_media_url/',\n+            'MEDIA_URL': '/overridden_media_url/',\n             'FILE_UPLOAD_PERMISSIONS': 0o333,\n             'FILE_UPLOAD_DIRECTORY_PERMISSIONS': 0o333,\n         }\ndiff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -12,6 +12,7 @@\n     override_settings, signals,\n )\n from django.test.utils import requires_tz_support\n+from django.urls import clear_script_prefix, set_script_prefix\n \n \n @modify_settings(ITEMS={\n@@ -567,3 +568,51 @@ def decorated_function():\n         signals.setting_changed.disconnect(self.receiver)\n         # This call shouldn't raise any errors.\n         decorated_function()\n+\n+\n+class MediaURLStaticURLPrefixTest(SimpleTestCase):\n+    def set_script_name(self, val):\n+        clear_script_prefix()\n+        if val is not None:\n+            set_script_prefix(val)\n+\n+    def test_not_prefixed(self):\n+        # Don't add SCRIPT_NAME prefix to valid URLs, absolute paths or None.\n+        tests = (\n+            '/path/',\n+            'http://myhost.com/path/',\n+            None,\n+        )\n+        for setting in ('MEDIA_URL', 'STATIC_URL'):\n+            for path in tests:\n+                new_settings = {setting: path}\n+                with self.settings(**new_settings):\n+                    for script_name in ['/somesubpath', '/somesubpath/', '/', '', None]:\n+                        with self.subTest(script_name=script_name, **new_settings):\n+                            try:\n+                                self.set_script_name(script_name)\n+                                self.assertEqual(getattr(settings, setting), path)\n+                            finally:\n+                                clear_script_prefix()\n+\n+    def test_add_script_name_prefix(self):\n+        tests = (\n+            # Relative paths.\n+            ('/somesubpath', 'path/', '/somesubpath/path/'),\n+            ('/somesubpath/', 'path/', '/somesubpath/path/'),\n+            ('/', 'path/', '/path/'),\n+            # Invalid URLs.\n+            ('/somesubpath/', 'htp://myhost.com/path/', '/somesubpath/htp://myhost.com/path/'),\n+            # Blank settings.\n+            ('/somesubpath/', '', '/somesubpath/'),\n+        )\n+        for setting in ('MEDIA_URL', 'STATIC_URL'):\n+            for script_name, path, expected_path in tests:\n+                new_settings = {setting: path}\n+                with self.settings(**new_settings):\n+                    with self.subTest(script_name=script_name, **new_settings):\n+                        try:\n+                            self.set_script_name(script_name)\n+                            self.assertEqual(getattr(settings, setting), expected_path)\n+                        finally:\n+                            clear_script_prefix()\n"
}