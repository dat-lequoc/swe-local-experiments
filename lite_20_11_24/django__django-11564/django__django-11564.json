{
  "instance_id": "django__django-11564",
  "model_patch": "diff --git a/comprehensive_tests.py b/comprehensive_tests.py\nnew file mode 100644\nindex 0000000000..ed34eda9c6\n--- /dev/null\n+++ b/comprehensive_tests.py\n@@ -0,0 +1,72 @@\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.urls import set_script_prefix\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    STATIC_URL='/static/',\n+    MEDIA_URL='/media/',\n+    STATIC_ROOT='/static/',\n+    MEDIA_ROOT='/media/',\n+)\n+\n+def test_comprehensive_cases():\n+    storage = FileSystemStorage(location='/static/', base_url='/static/')\n+    \n+    test_cases = [\n+        # Test 1: Basic script name\n+        ('/myapp', 'test.jpg', '/myapp/static/test.jpg', 'Basic script name'),\n+        \n+        # Test 2: Script name with trailing slash\n+        ('/myapp/', 'test.jpg', '/myapp/static/test.jpg', 'Script name with trailing slash'),\n+        \n+        # Test 3: Script name with multiple slashes\n+        ('/my//app//', 'test.jpg', '/my/app/static/test.jpg', 'Multiple slashes'),\n+        \n+        # Test 4: Empty script name\n+        ('', 'test.jpg', '/static/test.jpg', 'Empty script name'),\n+        \n+        # Test 5: Root script name\n+        ('/', 'test.jpg', '/static/test.jpg', 'Root script name'),\n+        \n+        # Test 6: Complex path with dots (should be normalized)\n+        ('/myapp', '../test.jpg', '/myapp/test.jpg', 'Path with dots'),\n+        \n+        # Test 7: URL with query string\n+        ('/myapp', 'test.jpg?v=1', '/myapp/static/test.jpg?v=1', 'URL with query string'),\n+        \n+        # Test 8: URL with hash\n+        ('/myapp', 'test.jpg#section1', '/myapp/static/test.jpg#section1', 'URL with hash'),\n+        \n+        # Test 9: URL with special characters\n+        ('/myapp', 'test file@2x.jpg', '/myapp/static/test%20file%402x.jpg', 'URL with special chars'),\n+        \n+        # Test 10: Deep path\n+        ('/myapp', 'subdir/test.jpg', '/myapp/static/subdir/test.jpg', 'Deep path'),\n+        \n+        # Test 11: Multiple level script name\n+        ('/my/deep/app', 'test.jpg', '/my/deep/app/static/test.jpg', 'Multiple level script name'),\n+        \n+        # Test 12: Script name with encoded characters\n+        ('/my-app', 'test.jpg', '/my-app/static/test.jpg', 'Script name with hyphens'),\n+        \n+        # Test 13: Base URL with trailing slash\n+        ('/myapp', '/test.jpg', '/myapp/static/test.jpg', 'Base URL with trailing slash'),\n+        \n+        # Test 14: Protocol-relative URL\n+        ('/myapp', '//example.com/test.jpg', '//example.com/test.jpg', 'Protocol-relative URL'),\n+        \n+        # Test 15: Absolute URL\n+        ('/myapp', 'http://example.com/test.jpg', 'http://example.com/test.jpg', 'Absolute URL'),\n+    ]\n+    \n+    for script_name, file_path, expected_url, test_desc in test_cases:\n+        set_script_prefix(script_name)\n+        url = storage.url(file_path)\n+        assert url == expected_url, f\"Test failed: {test_desc}\\nExpected: {expected_url}\\nGot: {url}\"\n+        print(f\"PASS: {test_desc}: {url}\")\n+\n+if __name__ == '__main__':\n+    test_comprehensive_cases()\n+    print(\"\\nAll comprehensive tests passed!\")\n\\ No newline at end of file\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..e57c7cf759 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -327,12 +327,52 @@ class FileSystemStorage(Storage):\n         return os.path.getsize(self.path(name))\n \n     def url(self, name):\n+        \"\"\"\n+        Return an absolute URL where the file's contents can be accessed\n+        directly by a Web browser.\n+        \"\"\"\n         if self.base_url is None:\n             raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        \n+        from django.urls import get_script_prefix\n+        import re\n+        from urllib.parse import urlsplit, urlunsplit\n+        \n+        # Split the URL into components\n+        url_parts = urlsplit(name)\n+        \n+        # If it's an absolute URL or protocol-relative URL, return it as is\n+        if url_parts.scheme or (name.startswith('//') and '//' in name[:2]):\n+            return name\n+            \n+        # Convert path component to URI-safe format and ensure no leading slash\n+        path = filepath_to_uri(url_parts.path)\n+        if path is not None:\n+            path = path.lstrip('/')\n+        \n+        # Get and normalize the script prefix\n+        script_prefix = get_script_prefix()\n+        if script_prefix:\n+            script_prefix = '/' + '/'.join(filter(None, script_prefix.split('/')))\n+        \n+        # Join base_url with the file path\n+        final_url = urljoin(self.base_url, path)\n+        \n+        # Add script prefix if it's set and not already included\n+        if script_prefix and not final_url.startswith(script_prefix):\n+            final_url = script_prefix + '/' + final_url.lstrip('/')\n+        \n+        # Normalize any remaining multiple slashes while preserving protocol slashes\n+        final_url = re.sub(r'(?<!:)/{2,}', '/', final_url)\n+        \n+        # Reconstruct the URL with original query and fragment\n+        if url_parts.query or url_parts.fragment:\n+            final_parts = list(urlsplit(final_url))\n+            final_parts[3] = url_parts.query\n+            final_parts[4] = url_parts.fragment\n+            final_url = urlunsplit(final_parts)\n+        \n+        return final_url\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..fab4daee7d\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,54 @@\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.urls import set_script_prefix\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    STATIC_URL='/static/',\n+    MEDIA_URL='/media/',\n+    STATIC_ROOT='/static/',\n+    MEDIA_ROOT='/media/',\n+)\n+\n+def test_edge_cases():\n+    storage = FileSystemStorage(location='/static/', base_url='/static/')\n+    \n+    # Test 1: Multiple slashes in script name\n+    script_name = '/my//app/'\n+    set_script_prefix(script_name)\n+    url = storage.url('test.jpg')\n+    print(f\"Test 1 - Multiple slashes: {url}\")\n+    assert url == '/my/app/static/test.jpg', f\"URL should normalize multiple slashes\"\n+    \n+    # Test 2: Script name with trailing slash\n+    script_name = '/myapp/'\n+    set_script_prefix(script_name)\n+    url = storage.url('test.jpg')\n+    print(f\"Test 2 - Trailing slash: {url}\")\n+    assert url == '/myapp/static/test.jpg', f\"URL should handle trailing slash correctly\"\n+    \n+    # Test 3: Script name without leading slash\n+    script_name = 'myapp'\n+    set_script_prefix(script_name)\n+    url = storage.url('test.jpg')\n+    print(f\"Test 3 - No leading slash: {url}\")\n+    assert url.startswith('/'), f\"URL should always start with slash\"\n+    \n+    # Test 4: Empty script name\n+    script_name = ''\n+    set_script_prefix(script_name)\n+    url = storage.url('test.jpg')\n+    print(f\"Test 4 - Empty script name: {url}\")\n+    assert url == '/static/test.jpg', f\"URL should work with empty script name\"\n+    \n+    # Test 5: File path with dots\n+    script_name = '/myapp'\n+    set_script_prefix(script_name)\n+    url = storage.url('../test.jpg')\n+    print(f\"Test 5 - Path with dots: {url}\")\n+    assert '../' not in url, f\"URL should handle path traversal safely\"\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n+    print(\"All edge cases passed!\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..b4809cb2e9\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,34 @@\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.test import RequestFactory\n+from django.urls import set_script_prefix\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    STATIC_URL='/static/',\n+    MEDIA_URL='/media/',\n+    STATIC_ROOT='/static/',\n+    MEDIA_ROOT='/media/',\n+)\n+\n+def test_script_name_in_urls():\n+    # Test with script name\n+    script_name = '/myapp'\n+    set_script_prefix(script_name)\n+    \n+    # Test static files storage\n+    storage = FileSystemStorage(location='/static/', base_url='/static/')\n+    url = storage.url('test.jpg')\n+    print(f\"URL with script name: {url}\")\n+    assert url.startswith(script_name), f\"URL {url} should start with script name {script_name}\"\n+    \n+    # Test without script name\n+    set_script_prefix('')\n+    url = storage.url('test.jpg')\n+    print(f\"URL without script name: {url}\")\n+    assert not url.startswith(script_name), f\"URL {url} should not start with script name {script_name}\"\n+\n+if __name__ == '__main__':\n+    test_script_name_in_urls()\n+    print(\"All tests passed!\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}