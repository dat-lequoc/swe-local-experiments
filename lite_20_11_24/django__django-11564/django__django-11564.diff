diff --git a/comprehensive_tests.py b/comprehensive_tests.py
new file mode 100644
index 0000000000..ed34eda9c6
--- /dev/null
+++ b/comprehensive_tests.py
@@ -0,0 +1,72 @@
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage
+from django.urls import set_script_prefix
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    STATIC_URL='/static/',
+    MEDIA_URL='/media/',
+    STATIC_ROOT='/static/',
+    MEDIA_ROOT='/media/',
+)
+
+def test_comprehensive_cases():
+    storage = FileSystemStorage(location='/static/', base_url='/static/')
+    
+    test_cases = [
+        # Test 1: Basic script name
+        ('/myapp', 'test.jpg', '/myapp/static/test.jpg', 'Basic script name'),
+        
+        # Test 2: Script name with trailing slash
+        ('/myapp/', 'test.jpg', '/myapp/static/test.jpg', 'Script name with trailing slash'),
+        
+        # Test 3: Script name with multiple slashes
+        ('/my//app//', 'test.jpg', '/my/app/static/test.jpg', 'Multiple slashes'),
+        
+        # Test 4: Empty script name
+        ('', 'test.jpg', '/static/test.jpg', 'Empty script name'),
+        
+        # Test 5: Root script name
+        ('/', 'test.jpg', '/static/test.jpg', 'Root script name'),
+        
+        # Test 6: Complex path with dots (should be normalized)
+        ('/myapp', '../test.jpg', '/myapp/test.jpg', 'Path with dots'),
+        
+        # Test 7: URL with query string
+        ('/myapp', 'test.jpg?v=1', '/myapp/static/test.jpg?v=1', 'URL with query string'),
+        
+        # Test 8: URL with hash
+        ('/myapp', 'test.jpg#section1', '/myapp/static/test.jpg#section1', 'URL with hash'),
+        
+        # Test 9: URL with special characters
+        ('/myapp', 'test file@2x.jpg', '/myapp/static/test%20file%402x.jpg', 'URL with special chars'),
+        
+        # Test 10: Deep path
+        ('/myapp', 'subdir/test.jpg', '/myapp/static/subdir/test.jpg', 'Deep path'),
+        
+        # Test 11: Multiple level script name
+        ('/my/deep/app', 'test.jpg', '/my/deep/app/static/test.jpg', 'Multiple level script name'),
+        
+        # Test 12: Script name with encoded characters
+        ('/my-app', 'test.jpg', '/my-app/static/test.jpg', 'Script name with hyphens'),
+        
+        # Test 13: Base URL with trailing slash
+        ('/myapp', '/test.jpg', '/myapp/static/test.jpg', 'Base URL with trailing slash'),
+        
+        # Test 14: Protocol-relative URL
+        ('/myapp', '//example.com/test.jpg', '//example.com/test.jpg', 'Protocol-relative URL'),
+        
+        # Test 15: Absolute URL
+        ('/myapp', 'http://example.com/test.jpg', 'http://example.com/test.jpg', 'Absolute URL'),
+    ]
+    
+    for script_name, file_path, expected_url, test_desc in test_cases:
+        set_script_prefix(script_name)
+        url = storage.url(file_path)
+        assert url == expected_url, f"Test failed: {test_desc}\nExpected: {expected_url}\nGot: {url}"
+        print(f"PASS: {test_desc}: {url}")
+
+if __name__ == '__main__':
+    test_comprehensive_cases()
+    print("\nAll comprehensive tests passed!")
\ No newline at end of file
diff --git a/django/core/files/storage.py b/django/core/files/storage.py
index 4c27fce605..e57c7cf759 100644
--- a/django/core/files/storage.py
+++ b/django/core/files/storage.py
@@ -327,12 +327,52 @@ class FileSystemStorage(Storage):
         return os.path.getsize(self.path(name))
 
     def url(self, name):
+        """
+        Return an absolute URL where the file's contents can be accessed
+        directly by a Web browser.
+        """
         if self.base_url is None:
             raise ValueError("This file is not accessible via a URL.")
-        url = filepath_to_uri(name)
-        if url is not None:
-            url = url.lstrip('/')
-        return urljoin(self.base_url, url)
+        
+        from django.urls import get_script_prefix
+        import re
+        from urllib.parse import urlsplit, urlunsplit
+        
+        # Split the URL into components
+        url_parts = urlsplit(name)
+        
+        # If it's an absolute URL or protocol-relative URL, return it as is
+        if url_parts.scheme or (name.startswith('//') and '//' in name[:2]):
+            return name
+            
+        # Convert path component to URI-safe format and ensure no leading slash
+        path = filepath_to_uri(url_parts.path)
+        if path is not None:
+            path = path.lstrip('/')
+        
+        # Get and normalize the script prefix
+        script_prefix = get_script_prefix()
+        if script_prefix:
+            script_prefix = '/' + '/'.join(filter(None, script_prefix.split('/')))
+        
+        # Join base_url with the file path
+        final_url = urljoin(self.base_url, path)
+        
+        # Add script prefix if it's set and not already included
+        if script_prefix and not final_url.startswith(script_prefix):
+            final_url = script_prefix + '/' + final_url.lstrip('/')
+        
+        # Normalize any remaining multiple slashes while preserving protocol slashes
+        final_url = re.sub(r'(?<!:)/{2,}', '/', final_url)
+        
+        # Reconstruct the URL with original query and fragment
+        if url_parts.query or url_parts.fragment:
+            final_parts = list(urlsplit(final_url))
+            final_parts[3] = url_parts.query
+            final_parts[4] = url_parts.fragment
+            final_url = urlunsplit(final_parts)
+        
+        return final_url
 
     def _datetime_from_timestamp(self, ts):
         """
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..fab4daee7d
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,54 @@
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage
+from django.urls import set_script_prefix
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    STATIC_URL='/static/',
+    MEDIA_URL='/media/',
+    STATIC_ROOT='/static/',
+    MEDIA_ROOT='/media/',
+)
+
+def test_edge_cases():
+    storage = FileSystemStorage(location='/static/', base_url='/static/')
+    
+    # Test 1: Multiple slashes in script name
+    script_name = '/my//app/'
+    set_script_prefix(script_name)
+    url = storage.url('test.jpg')
+    print(f"Test 1 - Multiple slashes: {url}")
+    assert url == '/my/app/static/test.jpg', f"URL should normalize multiple slashes"
+    
+    # Test 2: Script name with trailing slash
+    script_name = '/myapp/'
+    set_script_prefix(script_name)
+    url = storage.url('test.jpg')
+    print(f"Test 2 - Trailing slash: {url}")
+    assert url == '/myapp/static/test.jpg', f"URL should handle trailing slash correctly"
+    
+    # Test 3: Script name without leading slash
+    script_name = 'myapp'
+    set_script_prefix(script_name)
+    url = storage.url('test.jpg')
+    print(f"Test 3 - No leading slash: {url}")
+    assert url.startswith('/'), f"URL should always start with slash"
+    
+    # Test 4: Empty script name
+    script_name = ''
+    set_script_prefix(script_name)
+    url = storage.url('test.jpg')
+    print(f"Test 4 - Empty script name: {url}")
+    assert url == '/static/test.jpg', f"URL should work with empty script name"
+    
+    # Test 5: File path with dots
+    script_name = '/myapp'
+    set_script_prefix(script_name)
+    url = storage.url('../test.jpg')
+    print(f"Test 5 - Path with dots: {url}")
+    assert '../' not in url, f"URL should handle path traversal safely"
+
+if __name__ == '__main__':
+    test_edge_cases()
+    print("All edge cases passed!")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b4809cb2e9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,34 @@
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage
+from django.test import RequestFactory
+from django.urls import set_script_prefix
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    STATIC_URL='/static/',
+    MEDIA_URL='/media/',
+    STATIC_ROOT='/static/',
+    MEDIA_ROOT='/media/',
+)
+
+def test_script_name_in_urls():
+    # Test with script name
+    script_name = '/myapp'
+    set_script_prefix(script_name)
+    
+    # Test static files storage
+    storage = FileSystemStorage(location='/static/', base_url='/static/')
+    url = storage.url('test.jpg')
+    print(f"URL with script name: {url}")
+    assert url.startswith(script_name), f"URL {url} should start with script name {script_name}"
+    
+    # Test without script name
+    set_script_prefix('')
+    url = storage.url('test.jpg')
+    print(f"URL without script name: {url}")
+    assert not url.startswith(script_name), f"URL {url} should not start with script name {script_name}"
+
+if __name__ == '__main__':
+    test_script_name_in_urls()
+    print("All tests passed!")
\ No newline at end of file
