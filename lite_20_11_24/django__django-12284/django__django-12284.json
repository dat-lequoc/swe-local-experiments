{
  "instance_id": "django__django-12284",
  "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 1a55d3d417..3a03983470 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,7 +763,11 @@ class Field(RegisterLookupMixin):\n             # such fields can't be deferred (we don't have a check for this).\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n-        if self.choices is not None:\n+        \n+        # Get choices from the current class if available\n+        field_choices = getattr(cls, name + '_choice', self.choices)\n+        if field_choices is not None:\n+            self.choices = field_choices\n             if not hasattr(cls, 'get_%s_display' % self.name):\n                 setattr(\n                     cls,\ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..4654e788ce\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,74 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'testapp',\n+        ],\n+    )\n+    django.setup()\n+\n+from django.db import models\n+\n+class BaseModelA(models.Model):\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        abstract = True\n+\n+class ChildModelA(BaseModelA):\n+    # Override with completely different choices\n+    foo_choice = [(\"X\", \"outputX\"), (\"Y\", \"outputY\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+class ChildModelB(BaseModelA):\n+    # Extend parent choices\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+class ChildModelC(BaseModelA):\n+    # Override with same keys but different values\n+    foo_choice = [(\"A\", \"different1\"), (\"B\", \"different2\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+def test_edge_cases():\n+    # Test complete override\n+    instance_a = ChildModelA()\n+    instance_a.field_foo = \"X\"\n+    print(f\"Complete override - X: {instance_a.get_field_foo_display()}\")\n+    assert instance_a.get_field_foo_display() == \"outputX\"\n+    \n+    # Test extension\n+    instance_b = ChildModelB()\n+    instance_b.field_foo = \"C\"\n+    print(f\"Extension - C: {instance_b.get_field_foo_display()}\")\n+    assert instance_b.get_field_foo_display() == \"output3\"\n+    \n+    # Test value override\n+    instance_c = ChildModelC()\n+    instance_c.field_foo = \"A\"\n+    print(f\"Value override - A: {instance_c.get_field_foo_display()}\")\n+    assert instance_c.get_field_foo_display() == \"different1\"\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/fix_fields.py b/fix_fields.py\nnew file mode 100644\nindex 0000000000..1b47435bf4\n--- /dev/null\n+++ b/fix_fields.py\n@@ -0,0 +1,65 @@\n+import codecs\n+\n+def fix_contribute_to_class():\n+    with codecs.open('/testbed/django/db/models/fields/__init__.py', 'r', 'utf-8') as f:\n+        content = f.read()\n+    \n+    old_method = '''    def contribute_to_class(self, cls, name, private_only=False):\n+        \"\"\"\n+        Register the field with the model class it belongs to.\n+\n+        If private_only is True, create a separate instance of this field\n+        for every subclass of cls, even if cls is not an abstract model.\n+        \"\"\"\n+        self.set_attributes_from_name(name)\n+        self.model = cls\n+        cls._meta.add_field(self, private=private_only)\n+        if self.column:\n+            # Don't override classmethods with the descriptor. This means that\n+            # if you have a classmethod and a field with the same name, then\n+            # such fields can't be deferred (we don't have a check for this).\n+            if not getattr(cls, self.attname, None):\n+                setattr(cls, self.attname, self.descriptor_class(self))\n+        if self.choices is not None:\n+            if not hasattr(cls, 'get_%s_display' % self.name):\n+                setattr(\n+                    cls,\n+                    'get_%s_display' % self.name,\n+                    partialmethod(cls._get_FIELD_display, field=self),\n+                )'''\n+\n+    new_method = '''    def contribute_to_class(self, cls, name, private_only=False):\n+        \"\"\"\n+        Register the field with the model class it belongs to.\n+\n+        If private_only is True, create a separate instance of this field\n+        for every subclass of cls, even if cls is not an abstract model.\n+        \"\"\"\n+        self.set_attributes_from_name(name)\n+        self.model = cls\n+        cls._meta.add_field(self, private=private_only)\n+        if self.column:\n+            # Don't override classmethods with the descriptor. This means that\n+            # if you have a classmethod and a field with the same name, then\n+            # such fields can't be deferred (we don't have a check for this).\n+            if not getattr(cls, self.attname, None):\n+                setattr(cls, self.attname, self.descriptor_class(self))\n+        \n+        # Get choices from the current class if available\n+        field_choices = getattr(cls, name + '_choice', self.choices)\n+        if field_choices is not None:\n+            self.choices = field_choices\n+            if not hasattr(cls, 'get_%s_display' % self.name):\n+                setattr(\n+                    cls,\n+                    'get_%s_display' % self.name,\n+                    partialmethod(cls._get_FIELD_display, field=self),\n+                )'''\n+\n+    new_content = content.replace(old_method, new_method)\n+    \n+    with codecs.open('/testbed/django/db/models/fields/__init__.py', 'w', 'utf-8') as f:\n+        f.write(new_content)\n+\n+if __name__ == '__main__':\n+    fix_contribute_to_class()\n\\ No newline at end of file\ndiff --git a/manage.py b/manage.py\nnew file mode 100644\nindex 0000000000..3bf8c7ed3f\n--- /dev/null\n+++ b/manage.py\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == \"__main__\":\n+    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"test_settings\")\n+    from django.core.management import execute_from_command_line\n+    execute_from_command_line(sys.argv)\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..ddcdfe4410\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,56 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'testapp',\n+        ],\n+    )\n+    django.setup()\n+\n+from django.db import models\n+\n+class TestBaseModel(models.Model):\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        abstract = True\n+\n+class TestChildModel(TestBaseModel):\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+def test_choices():\n+    # Create an instance with each choice value\n+    instance = TestChildModel()\n+    \n+    # Test original choices\n+    instance.field_foo = \"A\"\n+    print(f\"Value 'A' display: {instance.get_field_foo_display()}\")\n+    assert instance.get_field_foo_display() == \"output1\"\n+    \n+    instance.field_foo = \"B\"\n+    print(f\"Value 'B' display: {instance.get_field_foo_display()}\")\n+    assert instance.get_field_foo_display() == \"output2\"\n+    \n+    # Test new choice added in child class\n+    instance.field_foo = \"C\"\n+    print(f\"Value 'C' display: {instance.get_field_foo_display()}\")\n+    assert instance.get_field_foo_display() == \"output3\"\n+\n+if __name__ == \"__main__\":\n+    test_choices()\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..bad9fe26ad\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'testapp',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n\\ No newline at end of file\ndiff --git a/testapp/__init__.py b/testapp/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testapp/models.py b/testapp/models.py\nnew file mode 100644\nindex 0000000000..3491c2b50c\n--- /dev/null\n+++ b/testapp/models.py\n@@ -0,0 +1,12 @@\n+from django.db import models\n+\n+class BaseModel(models.Model):\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+    class Meta:\n+        abstract = True\n+\n+class ChildModel(BaseModel):\n+    foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+    field_foo = models.CharField(max_length=254, choices=foo_choice)\n\\ No newline at end of file\ndiff --git a/testapp/tests.py b/testapp/tests.py\nnew file mode 100644\nindex 0000000000..2153418b70\n--- /dev/null\n+++ b/testapp/tests.py\n@@ -0,0 +1,15 @@\n+from django.test import TestCase\n+from testapp.models import ChildModel\n+\n+class InheritedChoicesTest(TestCase):\n+    def test_get_foo_display(self):\n+        # Test original choices\n+        obj = ChildModel(field_foo=\"A\")\n+        self.assertEqual(obj.get_field_foo_display(), \"output1\")\n+        \n+        obj.field_foo = \"B\"\n+        self.assertEqual(obj.get_field_foo_display(), \"output2\")\n+        \n+        # Test added choice in child class\n+        obj.field_foo = \"C\"\n+        self.assertEqual(obj.get_field_foo_display(), \"output3\")\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}