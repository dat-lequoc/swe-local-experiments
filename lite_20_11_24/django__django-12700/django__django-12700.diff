diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..512c31aeaa
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,55 @@
+from test_solution import TestSafeExceptionReporterFilter
+
+def test_edge_cases():
+    filter = TestSafeExceptionReporterFilter()
+    filter.hidden_settings = frozenset(['secret', 'token', 'password'])
+    
+    test_cases = [
+        # Empty containers
+        {'name': 'Empty dict', 'input': {}},
+        {'name': 'Empty list', 'input': []},
+        {'name': 'Empty tuple', 'input': ()},
+        
+        # Mixed types
+        {'name': 'Mixed types', 'input': {
+            'list': ['secret', {'token': 123}],
+            'tuple': ('password', {'nested': {'secret': 456}}),
+            'safe': 'value'
+        }},
+        
+        # Deeply nested structures
+        {'name': 'Deep nesting', 'input': {
+            'level1': [
+                {'level2': [
+                    {'level3': {'secret': 'value'}}
+                ]}
+            ]
+        }},
+        
+        # Special values
+        {'name': 'Special values', 'input': {
+            'none': None,
+            'bool': True,
+            'int': 42,
+            'secret': None,
+            'token': False
+        }},
+        
+        # Multiple sensitive keys
+        {'name': 'Multiple sensitive', 'input': [
+            {'secret': 1, 'token': 2, 'password': 3},
+            {'safe': 4, 'public': 5}
+        ]}
+    ]
+    
+    print("Testing edge cases:")
+    print("-" * 50)
+    
+    for case in test_cases:
+        print(f"\nTest case: {case['name']}")
+        print("Input:", case['input'])
+        result = filter.cleanse_setting('test', case['input'])
+        print("Output:", result)
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8c49c8a095
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,35 @@
+from django.views.debug import SafeExceptionReporterFilter
+
+# Test data
+test_settings = {
+    "foo": "value",
+    "secret": "value",
+    "token": "value",
+    "something": [
+        {"foo": "value"},
+        {"secret": "value"},
+        {"token": "value"},
+    ],
+    "else": [
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+    ]
+}
+
+# Create filter instance
+filter = SafeExceptionReporterFilter()
+
+# Test cleansing
+cleansed = filter.cleanse_setting("TEST", test_settings)
+print("Original settings:")
+print(test_settings)
+print("\nCleansed settings:")
+print(cleansed)
diff --git a/test_solution.py b/test_solution.py
new file mode 100644
index 0000000000..325e5bab29
--- /dev/null
+++ b/test_solution.py
@@ -0,0 +1,54 @@
+from django.views.debug import SafeExceptionReporterFilter
+
+class TestSafeExceptionReporterFilter(SafeExceptionReporterFilter):
+    def cleanse_setting(self, key, value):
+        """
+        Cleanse an individual setting value by consulting HIDDEN_SETTINGS.
+        """
+        if key in self.hidden_settings:
+            return "********************"
+        try:
+            if isinstance(value, dict):
+                for k, v in value.items():
+                    value[k] = self.cleanse_setting(k, v)
+            elif isinstance(value, (list, tuple)):
+                value = type(value)(
+                    self.cleanse_setting(key, item)
+                    for item in value
+                )
+        except Exception:
+            pass
+        return value
+
+# Test the implementation
+test_settings = {
+    "foo": "value",
+    "secret": "value",
+    "token": "value",
+    "something": [
+        {"foo": "value"},
+        {"secret": "value"},
+        {"token": "value"},
+    ],
+    "else": [
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+    ]
+}
+
+filter = TestSafeExceptionReporterFilter()
+filter.hidden_settings = frozenset(['secret', 'token'])
+cleansed = filter.cleanse_setting('test', test_settings)
+
+print("Original settings:")
+print(test_settings)
+print("\nCleansed settings:")
+print(cleansed)
\ No newline at end of file
