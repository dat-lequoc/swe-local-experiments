{
  "instance_id": "django__django-12700",
  "model_patch": "diff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..512c31aeaa\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,55 @@\n+from test_solution import TestSafeExceptionReporterFilter\n+\n+def test_edge_cases():\n+    filter = TestSafeExceptionReporterFilter()\n+    filter.hidden_settings = frozenset(['secret', 'token', 'password'])\n+    \n+    test_cases = [\n+        # Empty containers\n+        {'name': 'Empty dict', 'input': {}},\n+        {'name': 'Empty list', 'input': []},\n+        {'name': 'Empty tuple', 'input': ()},\n+        \n+        # Mixed types\n+        {'name': 'Mixed types', 'input': {\n+            'list': ['secret', {'token': 123}],\n+            'tuple': ('password', {'nested': {'secret': 456}}),\n+            'safe': 'value'\n+        }},\n+        \n+        # Deeply nested structures\n+        {'name': 'Deep nesting', 'input': {\n+            'level1': [\n+                {'level2': [\n+                    {'level3': {'secret': 'value'}}\n+                ]}\n+            ]\n+        }},\n+        \n+        # Special values\n+        {'name': 'Special values', 'input': {\n+            'none': None,\n+            'bool': True,\n+            'int': 42,\n+            'secret': None,\n+            'token': False\n+        }},\n+        \n+        # Multiple sensitive keys\n+        {'name': 'Multiple sensitive', 'input': [\n+            {'secret': 1, 'token': 2, 'password': 3},\n+            {'safe': 4, 'public': 5}\n+        ]}\n+    ]\n+    \n+    print(\"Testing edge cases:\")\n+    print(\"-\" * 50)\n+    \n+    for case in test_cases:\n+        print(f\"\\nTest case: {case['name']}\")\n+        print(\"Input:\", case['input'])\n+        result = filter.cleanse_setting('test', case['input'])\n+        print(\"Output:\", result)\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..8c49c8a095\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,35 @@\n+from django.views.debug import SafeExceptionReporterFilter\n+\n+# Test data\n+test_settings = {\n+    \"foo\": \"value\",\n+    \"secret\": \"value\",\n+    \"token\": \"value\",\n+    \"something\": [\n+        {\"foo\": \"value\"},\n+        {\"secret\": \"value\"},\n+        {\"token\": \"value\"},\n+    ],\n+    \"else\": [\n+        [\n+            {\"foo\": \"value\"},\n+            {\"secret\": \"value\"},\n+            {\"token\": \"value\"},\n+        ],\n+        [\n+            {\"foo\": \"value\"},\n+            {\"secret\": \"value\"},\n+            {\"token\": \"value\"},\n+        ],\n+    ]\n+}\n+\n+# Create filter instance\n+filter = SafeExceptionReporterFilter()\n+\n+# Test cleansing\n+cleansed = filter.cleanse_setting(\"TEST\", test_settings)\n+print(\"Original settings:\")\n+print(test_settings)\n+print(\"\\nCleansed settings:\")\n+print(cleansed)\ndiff --git a/test_solution.py b/test_solution.py\nnew file mode 100644\nindex 0000000000..325e5bab29\n--- /dev/null\n+++ b/test_solution.py\n@@ -0,0 +1,54 @@\n+from django.views.debug import SafeExceptionReporterFilter\n+\n+class TestSafeExceptionReporterFilter(SafeExceptionReporterFilter):\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting value by consulting HIDDEN_SETTINGS.\n+        \"\"\"\n+        if key in self.hidden_settings:\n+            return \"********************\"\n+        try:\n+            if isinstance(value, dict):\n+                for k, v in value.items():\n+                    value[k] = self.cleanse_setting(k, v)\n+            elif isinstance(value, (list, tuple)):\n+                value = type(value)(\n+                    self.cleanse_setting(key, item)\n+                    for item in value\n+                )\n+        except Exception:\n+            pass\n+        return value\n+\n+# Test the implementation\n+test_settings = {\n+    \"foo\": \"value\",\n+    \"secret\": \"value\",\n+    \"token\": \"value\",\n+    \"something\": [\n+        {\"foo\": \"value\"},\n+        {\"secret\": \"value\"},\n+        {\"token\": \"value\"},\n+    ],\n+    \"else\": [\n+        [\n+            {\"foo\": \"value\"},\n+            {\"secret\": \"value\"},\n+            {\"token\": \"value\"},\n+        ],\n+        [\n+            {\"foo\": \"value\"},\n+            {\"secret\": \"value\"},\n+            {\"token\": \"value\"},\n+        ],\n+    ]\n+}\n+\n+filter = TestSafeExceptionReporterFilter()\n+filter.hidden_settings = frozenset(['secret', 'token'])\n+cleansed = filter.cleanse_setting('test', test_settings)\n+\n+print(\"Original settings:\")\n+print(test_settings)\n+print(\"\\nCleansed settings:\")\n+print(cleansed)\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}