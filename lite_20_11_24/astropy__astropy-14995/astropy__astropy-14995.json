{
  "instance_id": "astropy__astropy-14995",
  "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..3cc1d70078 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,18 +512,17 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        # If handle_mask is None or both operands have no mask, return None\n+        if handle_mask is None or (self.mask is None and (operand is None or operand.mask is None)):\n             return None\n+        # If self has no mask but operand has one, copy operand's mask\n         elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        # If operand is None or has no mask but self has one, copy self's mask\n+        elif operand is None or operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n+            # Both have masks, use handle_mask function\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 15bb49f22b..dc9c3c5f37 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"cython==0.29.34\",\n             \"oldest-supported-numpy\",\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..162dd213a7\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,53 @@\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_mask_propagation():\n+    # Test data\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    # Create NDDataRef objects\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test cases from PR description\n+    print(\"\\nTest Case 1: multiply no mask by constant (no mask * no mask)\")\n+    result1 = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result1.mask}\")\n+    assert result1.mask is None, \"Expected no mask\"\n+\n+    print(\"\\nTest Case 2: multiply no mask by itself (no mask * no mask)\")\n+    result2 = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result2.mask}\")\n+    assert result2.mask is None, \"Expected no mask\"\n+\n+    print(\"\\nTest Case 3: multiply mask by constant (mask * no mask)\")\n+    result3 = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result3.mask}\")\n+    np.testing.assert_array_equal(result3.mask, mask)\n+\n+    print(\"\\nTest Case 4: multiply mask by itself (mask * mask)\")\n+    result4 = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result4.mask}\")\n+    np.testing.assert_array_equal(result4.mask, mask)\n+\n+    print(\"\\nTest Case 5: multiply mask by no mask (mask * no mask)\")\n+    result5 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result5.mask}\")\n+    np.testing.assert_array_equal(result5.mask, mask)\n+\n+    # Additional edge cases\n+    print(\"\\nTest Case 6: multiply with None handle_mask\")\n+    result6 = nref_mask.multiply(nref_nomask, handle_mask=None)\n+    print(f\"Result mask: {result6.mask}\")\n+    assert result6.mask is None, \"Expected no mask when handle_mask is None\"\n+\n+    print(\"\\nTest Case 7: multiply with 'first_found' handle_mask\")\n+    result7 = nref_mask.multiply(nref_nomask, handle_mask='first_found')\n+    print(f\"Result mask: {result7.mask}\")\n+    np.testing.assert_array_equal(result7.mask, mask)\n+\n+    print(\"\\nAll test cases passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_mask_propagation()\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}