diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..3cc1d70078 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -512,18 +512,17 @@ class NDArithmeticMixin:
             If neither had a mask ``None`` is returned. Otherwise
             ``handle_mask`` must create (and copy) the returned mask.
         """
-        # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        # If handle_mask is None or both operands have no mask, return None
+        if handle_mask is None or (self.mask is None and (operand is None or operand.mask is None)):
             return None
+        # If self has no mask but operand has one, copy operand's mask
         elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
-        elif operand is None:
+        # If operand is None or has no mask but self has one, copy self's mask
+        elif operand is None or operand.mask is None:
             return deepcopy(self.mask)
         else:
-            # Now lets calculate the resulting mask (operation enforces copy)
+            # Both have masks, use handle_mask function
             return handle_mask(self.mask, operand.mask, **kwds)
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
diff --git a/pyproject.toml b/pyproject.toml
index 15bb49f22b..dc9c3c5f37 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "cython==0.29.34",
             "oldest-supported-numpy",
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..162dd213a7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+def test_mask_propagation():
+    # Test data
+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+    # Create NDDataRef objects
+    nref_nomask = NDDataRef(array)
+    nref_mask = NDDataRef(array, mask=mask)
+
+    # Test cases from PR description
+    print("\nTest Case 1: multiply no mask by constant (no mask * no mask)")
+    result1 = nref_nomask.multiply(1., handle_mask=np.bitwise_or)
+    print(f"Result mask: {result1.mask}")
+    assert result1.mask is None, "Expected no mask"
+
+    print("\nTest Case 2: multiply no mask by itself (no mask * no mask)")
+    result2 = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+    print(f"Result mask: {result2.mask}")
+    assert result2.mask is None, "Expected no mask"
+
+    print("\nTest Case 3: multiply mask by constant (mask * no mask)")
+    result3 = nref_mask.multiply(1., handle_mask=np.bitwise_or)
+    print(f"Result mask: {result3.mask}")
+    np.testing.assert_array_equal(result3.mask, mask)
+
+    print("\nTest Case 4: multiply mask by itself (mask * mask)")
+    result4 = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)
+    print(f"Result mask: {result4.mask}")
+    np.testing.assert_array_equal(result4.mask, mask)
+
+    print("\nTest Case 5: multiply mask by no mask (mask * no mask)")
+    result5 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+    print(f"Result mask: {result5.mask}")
+    np.testing.assert_array_equal(result5.mask, mask)
+
+    # Additional edge cases
+    print("\nTest Case 6: multiply with None handle_mask")
+    result6 = nref_mask.multiply(nref_nomask, handle_mask=None)
+    print(f"Result mask: {result6.mask}")
+    assert result6.mask is None, "Expected no mask when handle_mask is None"
+
+    print("\nTest Case 7: multiply with 'first_found' handle_mask")
+    result7 = nref_mask.multiply(nref_nomask, handle_mask='first_found')
+    print(f"Result mask: {result7.mask}")
+    np.testing.assert_array_equal(result7.mask, mask)
+
+    print("\nAll test cases passed!")
+
+if __name__ == "__main__":
+    test_mask_propagation()
\ No newline at end of file
