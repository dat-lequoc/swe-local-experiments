diff --git a/adminpricing/__init__.py b/adminpricing/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/adminpricing/models.py b/adminpricing/models.py
new file mode 100644
index 0000000000..c3ca6bb17b
--- /dev/null
+++ b/adminpricing/models.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class ProductMetaDataType(models.Model):
+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)
+    filterable = models.BooleanField(default=False, verbose_name=_("filterable"))
+
+    class Meta:
+        app_label = "adminpricing"
+        verbose_name = _("product meta data type")
+        verbose_name_plural = _("product meta data types")
+
+    def __str__(self):
+        return self.label
+
+class ProductMetaData(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    value = models.TextField(null=False, blank=False)
+    metadata_type = models.ForeignKey(
+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE
+    )
+
+    class Meta:
+        app_label = "adminpricing"
+        verbose_name = _("product meta data")
+        verbose_name_plural = _("product meta datas")
\ No newline at end of file
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..cb2d31ff41 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,12 +1124,14 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
-        if not getattr(expression, 'filterable', True):
-            raise NotSupportedError(
-                expression.__class__.__name__ + ' is disallowed in the filter '
-                'clause.'
-            )
         if hasattr(expression, 'get_source_expressions'):
+            # Only check filterable attribute on expressions, not on field references or model instances
+            if (not isinstance(expression, (Field, models.Model)) and 
+                not getattr(expression, 'filterable', True)):
+                raise NotSupportedError(
+                    expression.__class__.__name__ + ' is disallowed in the filter '
+                    'clause.'
+                )
             for expr in expression.get_source_expressions():
                 self.check_filterable(expr)
 
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..f58e9752ee
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.models import Q
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+# Import models after django setup
+from adminpricing.models import ProductMetaData, ProductMetaDataType
+
+# Create database tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ProductMetaDataType)
+    schema_editor.create_model(ProductMetaData)
+
+def test_edge_cases():
+    # Create test data
+    metadata_type = ProductMetaDataType.objects.create(
+        label="Brand",
+        filterable=False
+    )
+    metadata = ProductMetaData.objects.create(
+        value="Dark Vador",
+        metadata_type=metadata_type
+    )
+
+    # Test case 1: Basic filter with metadata_type
+    try:
+        result = ProductMetaData.objects.filter(metadata_type=metadata_type)
+        print("Test 1 - Basic filter: Success")
+    except Exception as e:
+        print("Test 1 - Basic filter failed:", str(e))
+
+    # Test case 2: Complex Q objects
+    try:
+        result = ProductMetaData.objects.filter(
+            Q(metadata_type=metadata_type) | Q(value="Dark Vador")
+        )
+        print("Test 2 - Complex Q filter: Success")
+    except Exception as e:
+        print("Test 2 - Complex Q filter failed:", str(e))
+
+    # Test case 3: Filter with related lookup
+    try:
+        result = ProductMetaData.objects.filter(metadata_type__filterable=False)
+        print("Test 3 - Related lookup: Success")
+    except Exception as e:
+        print("Test 3 - Related lookup failed:", str(e))
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..83c12e1923
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+# Import models after django setup
+from adminpricing.models import ProductMetaData, ProductMetaDataType
+
+# Create database tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ProductMetaDataType)
+    schema_editor.create_model(ProductMetaData)
+
+# Test the issue
+if __name__ == '__main__':
+    # Create test data
+    metadata_type = ProductMetaDataType.objects.create(
+        label="Brand",
+        filterable=False
+    )
+    metadata = ProductMetaData.objects.create(
+        value="Dark Vador",
+        metadata_type=metadata_type
+    )
+
+    # Try to filter
+    try:
+        result = ProductMetaData.objects.filter(
+            value="Dark Vador",
+            metadata_type=metadata_type
+        )
+        print("Filter successful:", result)
+    except Exception as e:
+        print("Error:", str(e))
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..af9dba6197
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,45 @@
+import os
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'adminpricing',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+ROOT_URLCONF = 'test_urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+SITE_ID = 1
\ No newline at end of file
