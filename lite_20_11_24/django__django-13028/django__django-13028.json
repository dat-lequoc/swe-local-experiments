{
  "instance_id": "django__django-13028",
  "model_patch": "diff --git a/adminpricing/__init__.py b/adminpricing/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/adminpricing/models.py b/adminpricing/models.py\nnew file mode 100644\nindex 0000000000..c3ca6bb17b\n--- /dev/null\n+++ b/adminpricing/models.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n\\ No newline at end of file\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..cb2d31ff41 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,14 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n         if hasattr(expression, 'get_source_expressions'):\n+            # Only check filterable attribute on expressions, not on field references or model instances\n+            if (not isinstance(expression, (Field, models.Model)) and \n+                not getattr(expression, 'filterable', True)):\n+                raise NotSupportedError(\n+                    expression.__class__.__name__ + ' is disallowed in the filter '\n+                    'clause.'\n+                )\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \ndiff --git a/edge_cases.py b/edge_cases.py\nnew file mode 100644\nindex 0000000000..f58e9752ee\n--- /dev/null\n+++ b/edge_cases.py\n@@ -0,0 +1,54 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import connection\n+from django.db.models import Q\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+# Import models after django setup\n+from adminpricing.models import ProductMetaData, ProductMetaDataType\n+\n+# Create database tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(ProductMetaDataType)\n+    schema_editor.create_model(ProductMetaData)\n+\n+def test_edge_cases():\n+    # Create test data\n+    metadata_type = ProductMetaDataType.objects.create(\n+        label=\"Brand\",\n+        filterable=False\n+    )\n+    metadata = ProductMetaData.objects.create(\n+        value=\"Dark Vador\",\n+        metadata_type=metadata_type\n+    )\n+\n+    # Test case 1: Basic filter with metadata_type\n+    try:\n+        result = ProductMetaData.objects.filter(metadata_type=metadata_type)\n+        print(\"Test 1 - Basic filter: Success\")\n+    except Exception as e:\n+        print(\"Test 1 - Basic filter failed:\", str(e))\n+\n+    # Test case 2: Complex Q objects\n+    try:\n+        result = ProductMetaData.objects.filter(\n+            Q(metadata_type=metadata_type) | Q(value=\"Dark Vador\")\n+        )\n+        print(\"Test 2 - Complex Q filter: Success\")\n+    except Exception as e:\n+        print(\"Test 2 - Complex Q filter failed:\", str(e))\n+\n+    # Test case 3: Filter with related lookup\n+    try:\n+        result = ProductMetaData.objects.filter(metadata_type__filterable=False)\n+        print(\"Test 3 - Related lookup: Success\")\n+    except Exception as e:\n+        print(\"Test 3 - Related lookup failed:\", str(e))\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..83c12e1923\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,38 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import connection\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+# Import models after django setup\n+from adminpricing.models import ProductMetaData, ProductMetaDataType\n+\n+# Create database tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(ProductMetaDataType)\n+    schema_editor.create_model(ProductMetaData)\n+\n+# Test the issue\n+if __name__ == '__main__':\n+    # Create test data\n+    metadata_type = ProductMetaDataType.objects.create(\n+        label=\"Brand\",\n+        filterable=False\n+    )\n+    metadata = ProductMetaData.objects.create(\n+        value=\"Dark Vador\",\n+        metadata_type=metadata_type\n+    )\n+\n+    # Try to filter\n+    try:\n+        result = ProductMetaData.objects.filter(\n+            value=\"Dark Vador\",\n+            metadata_type=metadata_type\n+        )\n+        print(\"Filter successful:\", result)\n+    except Exception as e:\n+        print(\"Error:\", str(e))\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..af9dba6197\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,45 @@\n+import os\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'adminpricing',\n+]\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n+]\n+\n+SECRET_KEY = 'dummy-key-for-tests'\n+\n+ROOT_URLCONF = 'test_urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+SITE_ID = 1\n\\ No newline at end of file\n",
  "model_name_or_path": "KortixAI"
}