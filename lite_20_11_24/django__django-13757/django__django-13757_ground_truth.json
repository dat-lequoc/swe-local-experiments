{
  "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -366,14 +366,25 @@ def process_rhs(self, compiler, connection):\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n+        sql, params = HasKey(\n+            self.lhs.lhs,\n+            self.lhs.key_name,\n+        ).as_oracle(compiler, connection)\n         if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+            return sql, params\n+        # Column doesn't have a key or IS NULL.\n+        lhs, lhs_params, _ = self.lhs.preprocess_lhs(compiler, connection)\n+        return '(NOT %s OR %s IS NULL)' % (sql, lhs), tuple(params) + tuple(lhs_params)\n \n     def as_sqlite(self, compiler, connection):\n+        template = 'JSON_TYPE(%s, %%s) IS NULL'\n         if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+            template = 'JSON_TYPE(%s, %%s) IS NOT NULL'\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(\n+            compiler,\n+            connection,\n+            template=template,\n+        )\n \n \n class KeyTransformIn(lookups.In):\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -586,6 +586,10 @@ def test_isnull_key(self):\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n"
}